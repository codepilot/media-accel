#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifndef GLAPI
#define GLAPI /*extern*/
#endif

class class_OpenGL: public node::ObjectWrap {
public:

#include <stddef.h>
#include <KHR/khrplatform.h>
#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glxext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GL_EXT_timer_query extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef khronos_int32_t GLclampx;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef khronos_int32_t GLfixed;
typedef khronos_int64_t GLint64;
typedef khronos_uint64_t GLuint64;
typedef khronos_intptr_t GLintptr;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef khronos_int32_t GLfixed;
typedef khronos_int64_t GLint64;
typedef khronos_uint64_t GLuint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64EXT;
typedef khronos_intptr_t GLintptr;
typedef khronos_ssize_t GLsizeiptr;
typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;


	typedef void (APIENTRYP PFNGLACCUMPROC) (GLenum op, GLfloat value);
	PFNGLACCUMPROC methodp_glAccum{nullptr};
	static v8::Handle<v8::Value> method_glAccum(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAccum && args.Length() >= 2){
			obj->methodp_glAccum(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLACCUMXOESPROC) (GLenum op, GLfixed value);
	PFNGLACCUMXOESPROC methodp_glAccumxOES{nullptr};
	static v8::Handle<v8::Value> method_glAccumxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAccumxOES && args.Length() >= 2){
			obj->methodp_glAccumxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
	PFNGLACTIVEPROGRAMEXTPROC methodp_glActiveProgramEXT{nullptr};
	static v8::Handle<v8::Value> method_glActiveProgramEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glActiveProgramEXT && args.Length() >= 1){
			obj->methodp_glActiveProgramEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);
	PFNGLACTIVESHADERPROGRAMPROC methodp_glActiveShaderProgram{nullptr};
	static v8::Handle<v8::Value> method_glActiveShaderProgram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glActiveShaderProgram && args.Length() >= 2){
			obj->methodp_glActiveShaderProgram(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */,
				(GLuint )(args[1]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMEXTPROC) (GLuint pipeline, GLuint program);
	PFNGLACTIVESHADERPROGRAMEXTPROC methodp_glActiveShaderProgramEXT{nullptr};
	static v8::Handle<v8::Value> method_glActiveShaderProgramEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glActiveShaderProgramEXT && args.Length() >= 2){
			obj->methodp_glActiveShaderProgramEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */,
				(GLuint )(args[1]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
	PFNGLACTIVESTENCILFACEEXTPROC methodp_glActiveStencilFaceEXT{nullptr};
	static v8::Handle<v8::Value> method_glActiveStencilFaceEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glActiveStencilFaceEXT && args.Length() >= 1){
			obj->methodp_glActiveStencilFaceEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum face */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);
	PFNGLACTIVETEXTUREPROC methodp_glActiveTexture{nullptr};
	static v8::Handle<v8::Value> method_glActiveTexture(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glActiveTexture && args.Length() >= 1){
			obj->methodp_glActiveTexture(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
	PFNGLACTIVETEXTUREARBPROC methodp_glActiveTextureARB{nullptr};
	static v8::Handle<v8::Value> method_glActiveTextureARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glActiveTextureARB && args.Length() >= 1){
			obj->methodp_glActiveTextureARB(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
	PFNGLACTIVEVARYINGNVPROC methodp_glActiveVaryingNV{nullptr};
	static v8::Handle<v8::Value> method_glActiveVaryingNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glActiveVaryingNV && args.Length() >= 2){
			obj->methodp_glActiveVaryingNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
	PFNGLALPHAFRAGMENTOP1ATIPROC methodp_glAlphaFragmentOp1ATI{nullptr};
	static v8::Handle<v8::Value> method_glAlphaFragmentOp1ATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAlphaFragmentOp1ATI && args.Length() >= 6){
			obj->methodp_glAlphaFragmentOp1ATI(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint dst */,
				(GLuint )(args[2]->NumberValue())/* GLuint dstMod */,
				(GLuint )(args[3]->NumberValue())/* GLuint arg1 */,
				(GLuint )(args[4]->NumberValue())/* GLuint arg1Rep */,
				(GLuint )(args[5]->NumberValue())/* GLuint arg1Mod */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
	PFNGLALPHAFRAGMENTOP2ATIPROC methodp_glAlphaFragmentOp2ATI{nullptr};
	static v8::Handle<v8::Value> method_glAlphaFragmentOp2ATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAlphaFragmentOp2ATI && args.Length() >= 9){
			obj->methodp_glAlphaFragmentOp2ATI(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint dst */,
				(GLuint )(args[2]->NumberValue())/* GLuint dstMod */,
				(GLuint )(args[3]->NumberValue())/* GLuint arg1 */,
				(GLuint )(args[4]->NumberValue())/* GLuint arg1Rep */,
				(GLuint )(args[5]->NumberValue())/* GLuint arg1Mod */,
				(GLuint )(args[6]->NumberValue())/* GLuint arg2 */,
				(GLuint )(args[7]->NumberValue())/* GLuint arg2Rep */,
				(GLuint )(args[8]->NumberValue())/* GLuint arg2Mod */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
	PFNGLALPHAFRAGMENTOP3ATIPROC methodp_glAlphaFragmentOp3ATI{nullptr};
	static v8::Handle<v8::Value> method_glAlphaFragmentOp3ATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAlphaFragmentOp3ATI && args.Length() >= 12){
			obj->methodp_glAlphaFragmentOp3ATI(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint dst */,
				(GLuint )(args[2]->NumberValue())/* GLuint dstMod */,
				(GLuint )(args[3]->NumberValue())/* GLuint arg1 */,
				(GLuint )(args[4]->NumberValue())/* GLuint arg1Rep */,
				(GLuint )(args[5]->NumberValue())/* GLuint arg1Mod */,
				(GLuint )(args[6]->NumberValue())/* GLuint arg2 */,
				(GLuint )(args[7]->NumberValue())/* GLuint arg2Rep */,
				(GLuint )(args[8]->NumberValue())/* GLuint arg2Mod */,
				(GLuint )(args[9]->NumberValue())/* GLuint arg3 */,
				(GLuint )(args[10]->NumberValue())/* GLuint arg3Rep */,
				(GLuint )(args[11]->NumberValue())/* GLuint arg3Mod */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLALPHAFUNCPROC) (GLenum func, GLfloat ref);
	PFNGLALPHAFUNCPROC methodp_glAlphaFunc{nullptr};
	static v8::Handle<v8::Value> method_glAlphaFunc(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAlphaFunc && args.Length() >= 2){
			obj->methodp_glAlphaFunc(
				(GLenum )(args[0]->NumberValue())/* GLenum func */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat ref */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLALPHAFUNCQCOMPROC) (GLenum func, GLclampf ref);
	PFNGLALPHAFUNCQCOMPROC methodp_glAlphaFuncQCOM{nullptr};
	static v8::Handle<v8::Value> method_glAlphaFuncQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAlphaFuncQCOM && args.Length() >= 2){
			obj->methodp_glAlphaFuncQCOM(
				(GLenum )(args[0]->NumberValue())/* GLenum func */,
				(GLclampf )(args[1]->NumberValue())/* GLclampf ref */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLALPHAFUNCXPROC) (GLenum func, GLfixed ref);
	PFNGLALPHAFUNCXPROC methodp_glAlphaFuncx{nullptr};
	static v8::Handle<v8::Value> method_glAlphaFuncx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAlphaFuncx && args.Length() >= 2){
			obj->methodp_glAlphaFuncx(
				(GLenum )(args[0]->NumberValue())/* GLenum func */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed ref */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLALPHAFUNCXOESPROC) (GLenum func, GLfixed ref);
	PFNGLALPHAFUNCXOESPROC methodp_glAlphaFuncxOES{nullptr};
	static v8::Handle<v8::Value> method_glAlphaFuncxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAlphaFuncxOES && args.Length() >= 2){
			obj->methodp_glAlphaFuncxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum func */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed ref */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
	PFNGLAPPLYTEXTUREEXTPROC methodp_glApplyTextureEXT{nullptr};
	static v8::Handle<v8::Value> method_glApplyTextureEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glApplyTextureEXT && args.Length() >= 1){
			obj->methodp_glApplyTextureEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);
	PFNGLAREPROGRAMSRESIDENTNVPROC methodp_glAreProgramsResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glAreProgramsResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAreProgramsResidentNV && args.Length() >= 3){
			obj->methodp_glAreProgramsResidentNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *programs */,
				(GLboolean *)((int64_t)args[2]->NumberValue())/* GLboolean *residences */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
	PFNGLARETEXTURESRESIDENTPROC methodp_glAreTexturesResident{nullptr};
	static v8::Handle<v8::Value> method_glAreTexturesResident(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAreTexturesResident && args.Length() >= 3){
			obj->methodp_glAreTexturesResident(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *textures */,
				(GLboolean *)((int64_t)args[2]->NumberValue())/* GLboolean *residences */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
	PFNGLARETEXTURESRESIDENTEXTPROC methodp_glAreTexturesResidentEXT{nullptr};
	static v8::Handle<v8::Value> method_glAreTexturesResidentEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAreTexturesResidentEXT && args.Length() >= 3){
			obj->methodp_glAreTexturesResidentEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *textures */,
				(GLboolean *)((int64_t)args[2]->NumberValue())/* GLboolean *residences */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLARRAYELEMENTPROC) (GLint i);
	PFNGLARRAYELEMENTPROC methodp_glArrayElement{nullptr};
	static v8::Handle<v8::Value> method_glArrayElement(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glArrayElement && args.Length() >= 1){
			obj->methodp_glArrayElement(
				(GLint )(args[0]->NumberValue())/* GLint i */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC) (GLint i);
	PFNGLARRAYELEMENTEXTPROC methodp_glArrayElementEXT{nullptr};
	static v8::Handle<v8::Value> method_glArrayElementEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glArrayElementEXT && args.Length() >= 1){
			obj->methodp_glArrayElementEXT(
				(GLint )(args[0]->NumberValue())/* GLint i */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
	PFNGLARRAYOBJECTATIPROC methodp_glArrayObjectATI{nullptr};
	static v8::Handle<v8::Value> method_glArrayObjectATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glArrayObjectATI && args.Length() >= 6){
			obj->methodp_glArrayObjectATI(
				(GLenum )(args[0]->NumberValue())/* GLenum array */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(GLuint )(args[4]->NumberValue())/* GLuint buffer */,
				(GLuint )(args[5]->NumberValue())/* GLuint offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
	PFNGLASYNCMARKERSGIXPROC methodp_glAsyncMarkerSGIX{nullptr};
	static v8::Handle<v8::Value> method_glAsyncMarkerSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAsyncMarkerSGIX && args.Length() >= 1){
			obj->methodp_glAsyncMarkerSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint marker */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
	PFNGLATTACHOBJECTARBPROC methodp_glAttachObjectARB{nullptr};
	static v8::Handle<v8::Value> method_glAttachObjectARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAttachObjectARB && args.Length() >= 2){
			obj->methodp_glAttachObjectARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB containerObj */,
				(GLhandleARB )(args[1]->NumberValue())/* GLhandleARB obj */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
	PFNGLATTACHSHADERPROC methodp_glAttachShader{nullptr};
	static v8::Handle<v8::Value> method_glAttachShader(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glAttachShader && args.Length() >= 2){
			obj->methodp_glAttachShader(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint shader */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINPROC) (GLenum mode);
	PFNGLBEGINPROC methodp_glBegin{nullptr};
	static v8::Handle<v8::Value> method_glBegin(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBegin && args.Length() >= 1){
			obj->methodp_glBegin(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
	PFNGLBEGINCONDITIONALRENDERPROC methodp_glBeginConditionalRender{nullptr};
	static v8::Handle<v8::Value> method_glBeginConditionalRender(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginConditionalRender && args.Length() >= 2){
			obj->methodp_glBeginConditionalRender(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
	PFNGLBEGINCONDITIONALRENDERNVPROC methodp_glBeginConditionalRenderNV{nullptr};
	static v8::Handle<v8::Value> method_glBeginConditionalRenderNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginConditionalRenderNV && args.Length() >= 2){
			obj->methodp_glBeginConditionalRenderNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id);
	PFNGLBEGINCONDITIONALRENDERNVXPROC methodp_glBeginConditionalRenderNVX{nullptr};
	static v8::Handle<v8::Value> method_glBeginConditionalRenderNVX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginConditionalRenderNVX && args.Length() >= 1){
			obj->methodp_glBeginConditionalRenderNVX(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) ();
	PFNGLBEGINFRAGMENTSHADERATIPROC methodp_glBeginFragmentShaderATI{nullptr};
	static v8::Handle<v8::Value> method_glBeginFragmentShaderATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginFragmentShaderATI && args.Length() >= 0){
			obj->methodp_glBeginFragmentShaderATI(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
	PFNGLBEGINOCCLUSIONQUERYNVPROC methodp_glBeginOcclusionQueryNV{nullptr};
	static v8::Handle<v8::Value> method_glBeginOcclusionQueryNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginOcclusionQueryNV && args.Length() >= 1){
			obj->methodp_glBeginOcclusionQueryNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
	PFNGLBEGINPERFMONITORAMDPROC methodp_glBeginPerfMonitorAMD{nullptr};
	static v8::Handle<v8::Value> method_glBeginPerfMonitorAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginPerfMonitorAMD && args.Length() >= 1){
			obj->methodp_glBeginPerfMonitorAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint monitor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle);
	PFNGLBEGINPERFQUERYINTELPROC methodp_glBeginPerfQueryINTEL{nullptr};
	static v8::Handle<v8::Value> method_glBeginPerfQueryINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginPerfQueryINTEL && args.Length() >= 1){
			obj->methodp_glBeginPerfQueryINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint queryHandle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
	PFNGLBEGINQUERYPROC methodp_glBeginQuery{nullptr};
	static v8::Handle<v8::Value> method_glBeginQuery(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginQuery && args.Length() >= 2){
			obj->methodp_glBeginQuery(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
	PFNGLBEGINQUERYARBPROC methodp_glBeginQueryARB{nullptr};
	static v8::Handle<v8::Value> method_glBeginQueryARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginQueryARB && args.Length() >= 2){
			obj->methodp_glBeginQueryARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINQUERYEXTPROC) (GLenum target, GLuint id);
	PFNGLBEGINQUERYEXTPROC methodp_glBeginQueryEXT{nullptr};
	static v8::Handle<v8::Value> method_glBeginQueryEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginQueryEXT && args.Length() >= 2){
			obj->methodp_glBeginQueryEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
	PFNGLBEGINQUERYINDEXEDPROC methodp_glBeginQueryIndexed{nullptr};
	static v8::Handle<v8::Value> method_glBeginQueryIndexed(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginQueryIndexed && args.Length() >= 3){
			obj->methodp_glBeginQueryIndexed(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
	PFNGLBEGINTRANSFORMFEEDBACKPROC methodp_glBeginTransformFeedback{nullptr};
	static v8::Handle<v8::Value> method_glBeginTransformFeedback(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginTransformFeedback && args.Length() >= 1){
			obj->methodp_glBeginTransformFeedback(
				(GLenum )(args[0]->NumberValue())/* GLenum primitiveMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);
	PFNGLBEGINTRANSFORMFEEDBACKEXTPROC methodp_glBeginTransformFeedbackEXT{nullptr};
	static v8::Handle<v8::Value> method_glBeginTransformFeedbackEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginTransformFeedbackEXT && args.Length() >= 1){
			obj->methodp_glBeginTransformFeedbackEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum primitiveMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
	PFNGLBEGINTRANSFORMFEEDBACKNVPROC methodp_glBeginTransformFeedbackNV{nullptr};
	static v8::Handle<v8::Value> method_glBeginTransformFeedbackNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginTransformFeedbackNV && args.Length() >= 1){
			obj->methodp_glBeginTransformFeedbackNV(
				(GLenum )(args[0]->NumberValue())/* GLenum primitiveMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC) ();
	PFNGLBEGINVERTEXSHADEREXTPROC methodp_glBeginVertexShaderEXT{nullptr};
	static v8::Handle<v8::Value> method_glBeginVertexShaderEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginVertexShaderEXT && args.Length() >= 0){
			obj->methodp_glBeginVertexShaderEXT(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
	PFNGLBEGINVIDEOCAPTURENVPROC methodp_glBeginVideoCaptureNV{nullptr};
	static v8::Handle<v8::Value> method_glBeginVideoCaptureNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBeginVideoCaptureNV && args.Length() >= 1){
			obj->methodp_glBeginVideoCaptureNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);
	PFNGLBINDATTRIBLOCATIONPROC methodp_glBindAttribLocation{nullptr};
	static v8::Handle<v8::Value> method_glBindAttribLocation(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindAttribLocation && args.Length() >= 3){
			obj->methodp_glBindAttribLocation(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);
	PFNGLBINDATTRIBLOCATIONARBPROC methodp_glBindAttribLocationARB{nullptr};
	static v8::Handle<v8::Value> method_glBindAttribLocationARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindAttribLocationARB && args.Length() >= 3){
			obj->methodp_glBindAttribLocationARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLcharARB *)((int64_t)args[2]->NumberValue())/* const GLcharARB *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
	PFNGLBINDBUFFERPROC methodp_glBindBuffer{nullptr};
	static v8::Handle<v8::Value> method_glBindBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBuffer && args.Length() >= 2){
			obj->methodp_glBindBuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
	PFNGLBINDBUFFERARBPROC methodp_glBindBufferARB{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferARB && args.Length() >= 2){
			obj->methodp_glBindBufferARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
	PFNGLBINDBUFFERBASEPROC methodp_glBindBufferBase{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferBase(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferBase && args.Length() >= 3){
			obj->methodp_glBindBufferBase(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);
	PFNGLBINDBUFFERBASEEXTPROC methodp_glBindBufferBaseEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferBaseEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferBaseEXT && args.Length() >= 3){
			obj->methodp_glBindBufferBaseEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
	PFNGLBINDBUFFERBASENVPROC methodp_glBindBufferBaseNV{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferBaseNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferBaseNV && args.Length() >= 3){
			obj->methodp_glBindBufferBaseNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
	PFNGLBINDBUFFEROFFSETEXTPROC methodp_glBindBufferOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferOffsetEXT && args.Length() >= 4){
			obj->methodp_glBindBufferOffsetEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
	PFNGLBINDBUFFEROFFSETNVPROC methodp_glBindBufferOffsetNV{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferOffsetNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferOffsetNV && args.Length() >= 4){
			obj->methodp_glBindBufferOffsetNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	PFNGLBINDBUFFERRANGEPROC methodp_glBindBufferRange{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferRange(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferRange && args.Length() >= 5){
			obj->methodp_glBindBufferRange(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[4]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	PFNGLBINDBUFFERRANGEEXTPROC methodp_glBindBufferRangeEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferRangeEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferRangeEXT && args.Length() >= 5){
			obj->methodp_glBindBufferRangeEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[4]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
	PFNGLBINDBUFFERRANGENVPROC methodp_glBindBufferRangeNV{nullptr};
	static v8::Handle<v8::Value> method_glBindBufferRangeNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBufferRangeNV && args.Length() >= 5){
			obj->methodp_glBindBufferRangeNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[4]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
	PFNGLBINDBUFFERSBASEPROC methodp_glBindBuffersBase{nullptr};
	static v8::Handle<v8::Value> method_glBindBuffersBase(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBuffersBase && args.Length() >= 4){
			obj->methodp_glBindBuffersBase(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *buffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
	PFNGLBINDBUFFERSRANGEPROC methodp_glBindBuffersRange{nullptr};
	static v8::Handle<v8::Value> method_glBindBuffersRange(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindBuffersRange && args.Length() >= 6){
			obj->methodp_glBindBuffersRange(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *buffers */,
				(const GLintptr *)((int64_t)args[4]->NumberValue())/* const GLintptr *offsets */,
				(const GLsizeiptr *)((int64_t)args[5]->NumberValue())/* const GLsizeiptr *sizes */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);
	PFNGLBINDFRAGDATALOCATIONPROC methodp_glBindFragDataLocation{nullptr};
	static v8::Handle<v8::Value> method_glBindFragDataLocation(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindFragDataLocation && args.Length() >= 3){
			obj->methodp_glBindFragDataLocation(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint color */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
	PFNGLBINDFRAGDATALOCATIONEXTPROC methodp_glBindFragDataLocationEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindFragDataLocationEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindFragDataLocationEXT && args.Length() >= 3){
			obj->methodp_glBindFragDataLocationEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint color */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
	PFNGLBINDFRAGDATALOCATIONINDEXEDPROC methodp_glBindFragDataLocationIndexed{nullptr};
	static v8::Handle<v8::Value> method_glBindFragDataLocationIndexed(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindFragDataLocationIndexed && args.Length() >= 4){
			obj->methodp_glBindFragDataLocationIndexed(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint colorNumber */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(const GLchar *)((int64_t)args[3]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
	PFNGLBINDFRAGMENTSHADERATIPROC methodp_glBindFragmentShaderATI{nullptr};
	static v8::Handle<v8::Value> method_glBindFragmentShaderATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindFragmentShaderATI && args.Length() >= 1){
			obj->methodp_glBindFragmentShaderATI(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
	PFNGLBINDFRAMEBUFFERPROC methodp_glBindFramebuffer{nullptr};
	static v8::Handle<v8::Value> method_glBindFramebuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindFramebuffer && args.Length() >= 2){
			obj->methodp_glBindFramebuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint framebuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
	PFNGLBINDFRAMEBUFFEREXTPROC methodp_glBindFramebufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindFramebufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindFramebufferEXT && args.Length() >= 2){
			obj->methodp_glBindFramebufferEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint framebuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEROESPROC) (GLenum target, GLuint framebuffer);
	PFNGLBINDFRAMEBUFFEROESPROC methodp_glBindFramebufferOES{nullptr};
	static v8::Handle<v8::Value> method_glBindFramebufferOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindFramebufferOES && args.Length() >= 2){
			obj->methodp_glBindFramebufferOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint framebuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
	PFNGLBINDIMAGETEXTUREPROC methodp_glBindImageTexture{nullptr};
	static v8::Handle<v8::Value> method_glBindImageTexture(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindImageTexture && args.Length() >= 7){
			obj->methodp_glBindImageTexture(
				(GLuint )(args[0]->NumberValue())/* GLuint unit */,
				(GLuint )(args[1]->NumberValue())/* GLuint texture */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean layered */,
				(GLint )(args[4]->NumberValue())/* GLint layer */,
				(GLenum )(args[5]->NumberValue())/* GLenum access */,
				(GLenum )(args[6]->NumberValue())/* GLenum format */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
	PFNGLBINDIMAGETEXTUREEXTPROC methodp_glBindImageTextureEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindImageTextureEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindImageTextureEXT && args.Length() >= 7){
			obj->methodp_glBindImageTextureEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint texture */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean layered */,
				(GLint )(args[4]->NumberValue())/* GLint layer */,
				(GLenum )(args[5]->NumberValue())/* GLenum access */,
				(GLint )(args[6]->NumberValue())/* GLint format */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);
	PFNGLBINDIMAGETEXTURESPROC methodp_glBindImageTextures{nullptr};
	static v8::Handle<v8::Value> method_glBindImageTextures(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindImageTextures && args.Length() >= 3){
			obj->methodp_glBindImageTextures(
				(GLuint )(args[0]->NumberValue())/* GLuint first */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *textures */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
	PFNGLBINDLIGHTPARAMETEREXTPROC methodp_glBindLightParameterEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindLightParameterEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindLightParameterEXT && args.Length() >= 2){
			obj->methodp_glBindLightParameterEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
	PFNGLBINDMATERIALPARAMETEREXTPROC methodp_glBindMaterialParameterEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindMaterialParameterEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindMaterialParameterEXT && args.Length() >= 2){
			obj->methodp_glBindMaterialParameterEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
	PFNGLBINDMULTITEXTUREEXTPROC methodp_glBindMultiTextureEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindMultiTextureEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindMultiTextureEXT && args.Length() >= 3){
			obj->methodp_glBindMultiTextureEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLBINDPARAMETEREXTPROC) (GLenum value);
	PFNGLBINDPARAMETEREXTPROC methodp_glBindParameterEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindParameterEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindParameterEXT && args.Length() >= 1){
			obj->methodp_glBindParameterEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
	PFNGLBINDPROGRAMARBPROC methodp_glBindProgramARB{nullptr};
	static v8::Handle<v8::Value> method_glBindProgramARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindProgramARB && args.Length() >= 2){
			obj->methodp_glBindProgramARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
	PFNGLBINDPROGRAMNVPROC methodp_glBindProgramNV{nullptr};
	static v8::Handle<v8::Value> method_glBindProgramNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindProgramNV && args.Length() >= 2){
			obj->methodp_glBindProgramNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);
	PFNGLBINDPROGRAMPIPELINEPROC methodp_glBindProgramPipeline{nullptr};
	static v8::Handle<v8::Value> method_glBindProgramPipeline(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindProgramPipeline && args.Length() >= 1){
			obj->methodp_glBindProgramPipeline(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEEXTPROC) (GLuint pipeline);
	PFNGLBINDPROGRAMPIPELINEEXTPROC methodp_glBindProgramPipelineEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindProgramPipelineEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindProgramPipelineEXT && args.Length() >= 1){
			obj->methodp_glBindProgramPipelineEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
	PFNGLBINDRENDERBUFFERPROC methodp_glBindRenderbuffer{nullptr};
	static v8::Handle<v8::Value> method_glBindRenderbuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindRenderbuffer && args.Length() >= 2){
			obj->methodp_glBindRenderbuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
	PFNGLBINDRENDERBUFFEREXTPROC methodp_glBindRenderbufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindRenderbufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindRenderbufferEXT && args.Length() >= 2){
			obj->methodp_glBindRenderbufferEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDRENDERBUFFEROESPROC) (GLenum target, GLuint renderbuffer);
	PFNGLBINDRENDERBUFFEROESPROC methodp_glBindRenderbufferOES{nullptr};
	static v8::Handle<v8::Value> method_glBindRenderbufferOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindRenderbufferOES && args.Length() >= 2){
			obj->methodp_glBindRenderbufferOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
	PFNGLBINDSAMPLERPROC methodp_glBindSampler{nullptr};
	static v8::Handle<v8::Value> method_glBindSampler(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindSampler && args.Length() >= 2){
			obj->methodp_glBindSampler(
				(GLuint )(args[0]->NumberValue())/* GLuint unit */,
				(GLuint )(args[1]->NumberValue())/* GLuint sampler */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers);
	PFNGLBINDSAMPLERSPROC methodp_glBindSamplers{nullptr};
	static v8::Handle<v8::Value> method_glBindSamplers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindSamplers && args.Length() >= 3){
			obj->methodp_glBindSamplers(
				(GLuint )(args[0]->NumberValue())/* GLuint first */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *samplers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
	PFNGLBINDTEXGENPARAMETEREXTPROC methodp_glBindTexGenParameterEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindTexGenParameterEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindTexGenParameterEXT && args.Length() >= 3){
			obj->methodp_glBindTexGenParameterEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum unit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);
	PFNGLBINDTEXTUREPROC methodp_glBindTexture{nullptr};
	static v8::Handle<v8::Value> method_glBindTexture(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindTexture && args.Length() >= 2){
			obj->methodp_glBindTexture(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
	PFNGLBINDTEXTUREEXTPROC methodp_glBindTextureEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindTextureEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindTextureEXT && args.Length() >= 2){
			obj->methodp_glBindTextureEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
	PFNGLBINDTEXTUREUNITPARAMETEREXTPROC methodp_glBindTextureUnitParameterEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindTextureUnitParameterEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindTextureUnitParameterEXT && args.Length() >= 2){
			obj->methodp_glBindTextureUnitParameterEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum unit */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);
	PFNGLBINDTEXTURESPROC methodp_glBindTextures{nullptr};
	static v8::Handle<v8::Value> method_glBindTextures(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindTextures && args.Length() >= 3){
			obj->methodp_glBindTextures(
				(GLuint )(args[0]->NumberValue())/* GLuint first */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *textures */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
	PFNGLBINDTRANSFORMFEEDBACKPROC methodp_glBindTransformFeedback{nullptr};
	static v8::Handle<v8::Value> method_glBindTransformFeedback(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindTransformFeedback && args.Length() >= 2){
			obj->methodp_glBindTransformFeedback(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);
	PFNGLBINDTRANSFORMFEEDBACKNVPROC methodp_glBindTransformFeedbackNV{nullptr};
	static v8::Handle<v8::Value> method_glBindTransformFeedbackNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindTransformFeedbackNV && args.Length() >= 2){
			obj->methodp_glBindTransformFeedbackNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);
	PFNGLBINDVERTEXARRAYPROC methodp_glBindVertexArray{nullptr};
	static v8::Handle<v8::Value> method_glBindVertexArray(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindVertexArray && args.Length() >= 1){
			obj->methodp_glBindVertexArray(
				(GLuint )(args[0]->NumberValue())/* GLuint array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
	PFNGLBINDVERTEXARRAYAPPLEPROC methodp_glBindVertexArrayAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glBindVertexArrayAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindVertexArrayAPPLE && args.Length() >= 1){
			obj->methodp_glBindVertexArrayAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDVERTEXARRAYOESPROC) (GLuint array);
	PFNGLBINDVERTEXARRAYOESPROC methodp_glBindVertexArrayOES{nullptr};
	static v8::Handle<v8::Value> method_glBindVertexArrayOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindVertexArrayOES && args.Length() >= 1){
			obj->methodp_glBindVertexArrayOES(
				(GLuint )(args[0]->NumberValue())/* GLuint array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	PFNGLBINDVERTEXBUFFERPROC methodp_glBindVertexBuffer{nullptr};
	static v8::Handle<v8::Value> method_glBindVertexBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindVertexBuffer && args.Length() >= 4){
			obj->methodp_glBindVertexBuffer(
				(GLuint )(args[0]->NumberValue())/* GLuint bindingindex */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[2]->NumberValue())/* GLintptr offset */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
	PFNGLBINDVERTEXBUFFERSPROC methodp_glBindVertexBuffers{nullptr};
	static v8::Handle<v8::Value> method_glBindVertexBuffers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindVertexBuffers && args.Length() >= 5){
			obj->methodp_glBindVertexBuffers(
				(GLuint )(args[0]->NumberValue())/* GLuint first */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *buffers */,
				(const GLintptr *)((int64_t)args[3]->NumberValue())/* const GLintptr *offsets */,
				(const GLsizei *)((int64_t)args[4]->NumberValue())/* const GLsizei *strides */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
	PFNGLBINDVERTEXSHADEREXTPROC methodp_glBindVertexShaderEXT{nullptr};
	static v8::Handle<v8::Value> method_glBindVertexShaderEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindVertexShaderEXT && args.Length() >= 1){
			obj->methodp_glBindVertexShaderEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
	PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC methodp_glBindVideoCaptureStreamBufferNV{nullptr};
	static v8::Handle<v8::Value> method_glBindVideoCaptureStreamBufferNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindVideoCaptureStreamBufferNV && args.Length() >= 4){
			obj->methodp_glBindVideoCaptureStreamBufferNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint )(args[1]->NumberValue())/* GLuint stream */,
				(GLenum )(args[2]->NumberValue())/* GLenum frame_region */,
				(GLintptrARB )(args[3]->NumberValue())/* GLintptrARB offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
	PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC methodp_glBindVideoCaptureStreamTextureNV{nullptr};
	static v8::Handle<v8::Value> method_glBindVideoCaptureStreamTextureNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBindVideoCaptureStreamTextureNV && args.Length() >= 5){
			obj->methodp_glBindVideoCaptureStreamTextureNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint )(args[1]->NumberValue())/* GLuint stream */,
				(GLenum )(args[2]->NumberValue())/* GLenum frame_region */,
				(GLenum )(args[3]->NumberValue())/* GLenum target */,
				(GLuint )(args[4]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);
	PFNGLBINORMAL3BEXTPROC methodp_glBinormal3bEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3bEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3bEXT && args.Length() >= 3){
			obj->methodp_glBinormal3bEXT(
				(GLbyte )(args[0]->NumberValue())/* GLbyte bx */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte by */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte bz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);
	PFNGLBINORMAL3BVEXTPROC methodp_glBinormal3bvEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3bvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3bvEXT && args.Length() >= 1){
			obj->methodp_glBinormal3bvEXT(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);
	PFNGLBINORMAL3DEXTPROC methodp_glBinormal3dEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3dEXT && args.Length() >= 3){
			obj->methodp_glBinormal3dEXT(
				(GLdouble )(args[0]->NumberValue())/* GLdouble bx */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble by */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble bz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);
	PFNGLBINORMAL3DVEXTPROC methodp_glBinormal3dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3dvEXT && args.Length() >= 1){
			obj->methodp_glBinormal3dvEXT(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);
	PFNGLBINORMAL3FEXTPROC methodp_glBinormal3fEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3fEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3fEXT && args.Length() >= 3){
			obj->methodp_glBinormal3fEXT(
				(GLfloat )(args[0]->NumberValue())/* GLfloat bx */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat by */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat bz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);
	PFNGLBINORMAL3FVEXTPROC methodp_glBinormal3fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3fvEXT && args.Length() >= 1){
			obj->methodp_glBinormal3fvEXT(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);
	PFNGLBINORMAL3IEXTPROC methodp_glBinormal3iEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3iEXT && args.Length() >= 3){
			obj->methodp_glBinormal3iEXT(
				(GLint )(args[0]->NumberValue())/* GLint bx */,
				(GLint )(args[1]->NumberValue())/* GLint by */,
				(GLint )(args[2]->NumberValue())/* GLint bz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3IVEXTPROC) (const GLint *v);
	PFNGLBINORMAL3IVEXTPROC methodp_glBinormal3ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3ivEXT && args.Length() >= 1){
			obj->methodp_glBinormal3ivEXT(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);
	PFNGLBINORMAL3SEXTPROC methodp_glBinormal3sEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3sEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3sEXT && args.Length() >= 3){
			obj->methodp_glBinormal3sEXT(
				(GLshort )(args[0]->NumberValue())/* GLshort bx */,
				(GLshort )(args[1]->NumberValue())/* GLshort by */,
				(GLshort )(args[2]->NumberValue())/* GLshort bz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);
	PFNGLBINORMAL3SVEXTPROC methodp_glBinormal3svEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormal3svEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormal3svEXT && args.Length() >= 1){
			obj->methodp_glBinormal3svEXT(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);
	PFNGLBINORMALPOINTEREXTPROC methodp_glBinormalPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glBinormalPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBinormalPointerEXT && args.Length() >= 3){
			obj->methodp_glBinormalPointerEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBITMAPPROC) (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
	PFNGLBITMAPPROC methodp_glBitmap{nullptr};
	static v8::Handle<v8::Value> method_glBitmap(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBitmap && args.Length() >= 7){
			obj->methodp_glBitmap(
				(GLsizei )(args[0]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei height */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat xorig */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat yorig */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat xmove */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat ymove */,
				(const GLubyte *)((int64_t)args[6]->NumberValue())/* const GLubyte *bitmap */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBITMAPXOESPROC) (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);
	PFNGLBITMAPXOESPROC methodp_glBitmapxOES{nullptr};
	static v8::Handle<v8::Value> method_glBitmapxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBitmapxOES && args.Length() >= 7){
			obj->methodp_glBitmapxOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei height */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed xorig */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed yorig */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed xmove */,
				(GLfixed )(args[5]->NumberValue())/* GLfixed ymove */,
				(const GLubyte *)((int64_t)args[6]->NumberValue())/* const GLubyte *bitmap */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDBARRIERNVPROC) ();
	PFNGLBLENDBARRIERNVPROC methodp_glBlendBarrierNV{nullptr};
	static v8::Handle<v8::Value> method_glBlendBarrierNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendBarrierNV && args.Length() >= 0){
			obj->methodp_glBlendBarrierNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDBARRIERKHRPROC) ();
	PFNGLBLENDBARRIERKHRPROC methodp_glBlendBarrierKHR{nullptr};
	static v8::Handle<v8::Value> method_glBlendBarrierKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendBarrierKHR && args.Length() >= 0){
			obj->methodp_glBlendBarrierKHR(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	PFNGLBLENDCOLORPROC methodp_glBlendColor{nullptr};
	static v8::Handle<v8::Value> method_glBlendColor(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendColor && args.Length() >= 4){
			obj->methodp_glBlendColor(
				(GLfloat )(args[0]->NumberValue())/* GLfloat red */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat green */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat blue */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	PFNGLBLENDCOLOREXTPROC methodp_glBlendColorEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlendColorEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendColorEXT && args.Length() >= 4){
			obj->methodp_glBlendColorEXT(
				(GLfloat )(args[0]->NumberValue())/* GLfloat red */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat green */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat blue */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
	PFNGLBLENDCOLORXOESPROC methodp_glBlendColorxOES{nullptr};
	static v8::Handle<v8::Value> method_glBlendColorxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendColorxOES && args.Length() >= 4){
			obj->methodp_glBlendColorxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed red */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed green */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed blue */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);
	PFNGLBLENDEQUATIONPROC methodp_glBlendEquation{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquation(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquation && args.Length() >= 1){
			obj->methodp_glBlendEquation(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
	PFNGLBLENDEQUATIONEXTPROC methodp_glBlendEquationEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationEXT && args.Length() >= 1){
			obj->methodp_glBlendEquationEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);
	PFNGLBLENDEQUATIONINDEXEDAMDPROC methodp_glBlendEquationIndexedAMD{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationIndexedAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationIndexedAMD && args.Length() >= 2){
			obj->methodp_glBlendEquationIndexedAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONOESPROC) (GLenum mode);
	PFNGLBLENDEQUATIONOESPROC methodp_glBlendEquationOES{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationOES && args.Length() >= 1){
			obj->methodp_glBlendEquationOES(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
	PFNGLBLENDEQUATIONSEPARATEPROC methodp_glBlendEquationSeparate{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationSeparate(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationSeparate && args.Length() >= 2){
			obj->methodp_glBlendEquationSeparate(
				(GLenum )(args[0]->NumberValue())/* GLenum modeRGB */,
				(GLenum )(args[1]->NumberValue())/* GLenum modeAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
	PFNGLBLENDEQUATIONSEPARATEEXTPROC methodp_glBlendEquationSeparateEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationSeparateEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationSeparateEXT && args.Length() >= 2){
			obj->methodp_glBlendEquationSeparateEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum modeRGB */,
				(GLenum )(args[1]->NumberValue())/* GLenum modeAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC methodp_glBlendEquationSeparateIndexedAMD{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationSeparateIndexedAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationSeparateIndexedAMD && args.Length() >= 3){
			obj->methodp_glBlendEquationSeparateIndexedAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum modeRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum modeAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEOESPROC) (GLenum modeRGB, GLenum modeAlpha);
	PFNGLBLENDEQUATIONSEPARATEOESPROC methodp_glBlendEquationSeparateOES{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationSeparateOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationSeparateOES && args.Length() >= 2){
			obj->methodp_glBlendEquationSeparateOES(
				(GLenum )(args[0]->NumberValue())/* GLenum modeRGB */,
				(GLenum )(args[1]->NumberValue())/* GLenum modeAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	PFNGLBLENDEQUATIONSEPARATEIPROC methodp_glBlendEquationSeparatei{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationSeparatei(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationSeparatei && args.Length() >= 3){
			obj->methodp_glBlendEquationSeparatei(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum modeRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum modeAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	PFNGLBLENDEQUATIONSEPARATEIARBPROC methodp_glBlendEquationSeparateiARB{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationSeparateiARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationSeparateiARB && args.Length() >= 3){
			obj->methodp_glBlendEquationSeparateiARB(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum modeRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum modeAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIEXTPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
	PFNGLBLENDEQUATIONSEPARATEIEXTPROC methodp_glBlendEquationSeparateiEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationSeparateiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationSeparateiEXT && args.Length() >= 3){
			obj->methodp_glBlendEquationSeparateiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum modeRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum modeAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
	PFNGLBLENDEQUATIONIPROC methodp_glBlendEquationi{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationi(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationi && args.Length() >= 2){
			obj->methodp_glBlendEquationi(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONIEXTPROC) (GLuint buf, GLenum mode);
	PFNGLBLENDEQUATIONIEXTPROC methodp_glBlendEquationiEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationiEXT && args.Length() >= 2){
			obj->methodp_glBlendEquationiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);
	PFNGLBLENDEQUATIONIARBPROC methodp_glBlendEquationiARB{nullptr};
	static v8::Handle<v8::Value> method_glBlendEquationiARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendEquationiARB && args.Length() >= 2){
			obj->methodp_glBlendEquationiARB(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor);
	PFNGLBLENDFUNCPROC methodp_glBlendFunc{nullptr};
	static v8::Handle<v8::Value> method_glBlendFunc(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFunc && args.Length() >= 2){
			obj->methodp_glBlendFunc(
				(GLenum )(args[0]->NumberValue())/* GLenum sfactor */,
				(GLenum )(args[1]->NumberValue())/* GLenum dfactor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);
	PFNGLBLENDFUNCINDEXEDAMDPROC methodp_glBlendFuncIndexedAMD{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncIndexedAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncIndexedAMD && args.Length() >= 3){
			obj->methodp_glBlendFuncIndexedAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum src */,
				(GLenum )(args[2]->NumberValue())/* GLenum dst */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	PFNGLBLENDFUNCSEPARATEPROC methodp_glBlendFuncSeparate{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncSeparate(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncSeparate && args.Length() >= 4){
			obj->methodp_glBlendFuncSeparate(
				(GLenum )(args[0]->NumberValue())/* GLenum sfactorRGB */,
				(GLenum )(args[1]->NumberValue())/* GLenum dfactorRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum sfactorAlpha */,
				(GLenum )(args[3]->NumberValue())/* GLenum dfactorAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	PFNGLBLENDFUNCSEPARATEEXTPROC methodp_glBlendFuncSeparateEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncSeparateEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncSeparateEXT && args.Length() >= 4){
			obj->methodp_glBlendFuncSeparateEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum sfactorRGB */,
				(GLenum )(args[1]->NumberValue())/* GLenum dfactorRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum sfactorAlpha */,
				(GLenum )(args[3]->NumberValue())/* GLenum dfactorAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	PFNGLBLENDFUNCSEPARATEINGRPROC methodp_glBlendFuncSeparateINGR{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncSeparateINGR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncSeparateINGR && args.Length() >= 4){
			obj->methodp_glBlendFuncSeparateINGR(
				(GLenum )(args[0]->NumberValue())/* GLenum sfactorRGB */,
				(GLenum )(args[1]->NumberValue())/* GLenum dfactorRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum sfactorAlpha */,
				(GLenum )(args[3]->NumberValue())/* GLenum dfactorAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC methodp_glBlendFuncSeparateIndexedAMD{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncSeparateIndexedAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncSeparateIndexedAMD && args.Length() >= 5){
			obj->methodp_glBlendFuncSeparateIndexedAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum srcRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum dstRGB */,
				(GLenum )(args[3]->NumberValue())/* GLenum srcAlpha */,
				(GLenum )(args[4]->NumberValue())/* GLenum dstAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEOESPROC) (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	PFNGLBLENDFUNCSEPARATEOESPROC methodp_glBlendFuncSeparateOES{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncSeparateOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncSeparateOES && args.Length() >= 4){
			obj->methodp_glBlendFuncSeparateOES(
				(GLenum )(args[0]->NumberValue())/* GLenum srcRGB */,
				(GLenum )(args[1]->NumberValue())/* GLenum dstRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum srcAlpha */,
				(GLenum )(args[3]->NumberValue())/* GLenum dstAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	PFNGLBLENDFUNCSEPARATEIPROC methodp_glBlendFuncSeparatei{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncSeparatei(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncSeparatei && args.Length() >= 5){
			obj->methodp_glBlendFuncSeparatei(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum srcRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum dstRGB */,
				(GLenum )(args[3]->NumberValue())/* GLenum srcAlpha */,
				(GLenum )(args[4]->NumberValue())/* GLenum dstAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	PFNGLBLENDFUNCSEPARATEIARBPROC methodp_glBlendFuncSeparateiARB{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncSeparateiARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncSeparateiARB && args.Length() >= 5){
			obj->methodp_glBlendFuncSeparateiARB(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum srcRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum dstRGB */,
				(GLenum )(args[3]->NumberValue())/* GLenum srcAlpha */,
				(GLenum )(args[4]->NumberValue())/* GLenum dstAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIEXTPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
	PFNGLBLENDFUNCSEPARATEIEXTPROC methodp_glBlendFuncSeparateiEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlendFuncSeparateiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFuncSeparateiEXT && args.Length() >= 5){
			obj->methodp_glBlendFuncSeparateiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum srcRGB */,
				(GLenum )(args[2]->NumberValue())/* GLenum dstRGB */,
				(GLenum )(args[3]->NumberValue())/* GLenum srcAlpha */,
				(GLenum )(args[4]->NumberValue())/* GLenum dstAlpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
	PFNGLBLENDFUNCIPROC methodp_glBlendFunci{nullptr};
	static v8::Handle<v8::Value> method_glBlendFunci(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFunci && args.Length() >= 3){
			obj->methodp_glBlendFunci(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum src */,
				(GLenum )(args[2]->NumberValue())/* GLenum dst */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);
	PFNGLBLENDFUNCIARBPROC methodp_glBlendFunciARB{nullptr};
	static v8::Handle<v8::Value> method_glBlendFunciARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFunciARB && args.Length() >= 3){
			obj->methodp_glBlendFunciARB(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum src */,
				(GLenum )(args[2]->NumberValue())/* GLenum dst */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDFUNCIEXTPROC) (GLuint buf, GLenum src, GLenum dst);
	PFNGLBLENDFUNCIEXTPROC methodp_glBlendFunciEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlendFunciEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendFunciEXT && args.Length() >= 3){
			obj->methodp_glBlendFunciEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buf */,
				(GLenum )(args[1]->NumberValue())/* GLenum src */,
				(GLenum )(args[2]->NumberValue())/* GLenum dst */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);
	PFNGLBLENDPARAMETERINVPROC methodp_glBlendParameteriNV{nullptr};
	static v8::Handle<v8::Value> method_glBlendParameteriNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlendParameteriNV && args.Length() >= 2){
			obj->methodp_glBlendParameteriNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	PFNGLBLITFRAMEBUFFERPROC methodp_glBlitFramebuffer{nullptr};
	static v8::Handle<v8::Value> method_glBlitFramebuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlitFramebuffer && args.Length() >= 10){
			obj->methodp_glBlitFramebuffer(
				(GLint )(args[0]->NumberValue())/* GLint srcX0 */,
				(GLint )(args[1]->NumberValue())/* GLint srcY0 */,
				(GLint )(args[2]->NumberValue())/* GLint srcX1 */,
				(GLint )(args[3]->NumberValue())/* GLint srcY1 */,
				(GLint )(args[4]->NumberValue())/* GLint dstX0 */,
				(GLint )(args[5]->NumberValue())/* GLint dstY0 */,
				(GLint )(args[6]->NumberValue())/* GLint dstX1 */,
				(GLint )(args[7]->NumberValue())/* GLint dstY1 */,
				(GLbitfield )(args[8]->NumberValue())/* GLbitfield mask */,
				(GLenum )(args[9]->NumberValue())/* GLenum filter */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERANGLEPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	PFNGLBLITFRAMEBUFFERANGLEPROC methodp_glBlitFramebufferANGLE{nullptr};
	static v8::Handle<v8::Value> method_glBlitFramebufferANGLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlitFramebufferANGLE && args.Length() >= 10){
			obj->methodp_glBlitFramebufferANGLE(
				(GLint )(args[0]->NumberValue())/* GLint srcX0 */,
				(GLint )(args[1]->NumberValue())/* GLint srcY0 */,
				(GLint )(args[2]->NumberValue())/* GLint srcX1 */,
				(GLint )(args[3]->NumberValue())/* GLint srcY1 */,
				(GLint )(args[4]->NumberValue())/* GLint dstX0 */,
				(GLint )(args[5]->NumberValue())/* GLint dstY0 */,
				(GLint )(args[6]->NumberValue())/* GLint dstX1 */,
				(GLint )(args[7]->NumberValue())/* GLint dstY1 */,
				(GLbitfield )(args[8]->NumberValue())/* GLbitfield mask */,
				(GLenum )(args[9]->NumberValue())/* GLenum filter */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	PFNGLBLITFRAMEBUFFEREXTPROC methodp_glBlitFramebufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glBlitFramebufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlitFramebufferEXT && args.Length() >= 10){
			obj->methodp_glBlitFramebufferEXT(
				(GLint )(args[0]->NumberValue())/* GLint srcX0 */,
				(GLint )(args[1]->NumberValue())/* GLint srcY0 */,
				(GLint )(args[2]->NumberValue())/* GLint srcX1 */,
				(GLint )(args[3]->NumberValue())/* GLint srcY1 */,
				(GLint )(args[4]->NumberValue())/* GLint dstX0 */,
				(GLint )(args[5]->NumberValue())/* GLint dstY0 */,
				(GLint )(args[6]->NumberValue())/* GLint dstX1 */,
				(GLint )(args[7]->NumberValue())/* GLint dstY1 */,
				(GLbitfield )(args[8]->NumberValue())/* GLbitfield mask */,
				(GLenum )(args[9]->NumberValue())/* GLenum filter */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERNVPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
	PFNGLBLITFRAMEBUFFERNVPROC methodp_glBlitFramebufferNV{nullptr};
	static v8::Handle<v8::Value> method_glBlitFramebufferNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBlitFramebufferNV && args.Length() >= 10){
			obj->methodp_glBlitFramebufferNV(
				(GLint )(args[0]->NumberValue())/* GLint srcX0 */,
				(GLint )(args[1]->NumberValue())/* GLint srcY0 */,
				(GLint )(args[2]->NumberValue())/* GLint srcX1 */,
				(GLint )(args[3]->NumberValue())/* GLint srcY1 */,
				(GLint )(args[4]->NumberValue())/* GLint dstX0 */,
				(GLint )(args[5]->NumberValue())/* GLint dstY0 */,
				(GLint )(args[6]->NumberValue())/* GLint dstX1 */,
				(GLint )(args[7]->NumberValue())/* GLint dstY1 */,
				(GLbitfield )(args[8]->NumberValue())/* GLbitfield mask */,
				(GLenum )(args[9]->NumberValue())/* GLenum filter */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
	PFNGLBUFFERADDRESSRANGENVPROC methodp_glBufferAddressRangeNV{nullptr};
	static v8::Handle<v8::Value> method_glBufferAddressRangeNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBufferAddressRangeNV && args.Length() >= 4){
			obj->methodp_glBufferAddressRangeNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT address */,
				(GLsizeiptr )(args[3]->NumberValue())/* GLsizeiptr length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
	PFNGLBUFFERDATAPROC methodp_glBufferData{nullptr};
	static v8::Handle<v8::Value> method_glBufferData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBufferData && args.Length() >= 4){
			obj->methodp_glBufferData(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizeiptr )(args[1]->NumberValue())/* GLsizeiptr size */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *data */,
				(GLenum )(args[3]->NumberValue())/* GLenum usage */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);
	PFNGLBUFFERDATAARBPROC methodp_glBufferDataARB{nullptr};
	static v8::Handle<v8::Value> method_glBufferDataARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBufferDataARB && args.Length() >= 4){
			obj->methodp_glBufferDataARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizeiptrARB )(args[1]->NumberValue())/* GLsizeiptrARB size */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *data */,
				(GLenum )(args[3]->NumberValue())/* GLenum usage */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
	PFNGLBUFFERPARAMETERIAPPLEPROC methodp_glBufferParameteriAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glBufferParameteriAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBufferParameteriAPPLE && args.Length() >= 3){
			obj->methodp_glBufferParameteriAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
	PFNGLBUFFERSTORAGEPROC methodp_glBufferStorage{nullptr};
	static v8::Handle<v8::Value> method_glBufferStorage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBufferStorage && args.Length() >= 4){
			obj->methodp_glBufferStorage(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizeiptr )(args[1]->NumberValue())/* GLsizeiptr size */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *data */,
				(GLbitfield )(args[3]->NumberValue())/* GLbitfield flags */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
	PFNGLBUFFERSUBDATAPROC methodp_glBufferSubData{nullptr};
	static v8::Handle<v8::Value> method_glBufferSubData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBufferSubData && args.Length() >= 4){
			obj->methodp_glBufferSubData(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr size */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);
	PFNGLBUFFERSUBDATAARBPROC methodp_glBufferSubDataARB{nullptr};
	static v8::Handle<v8::Value> method_glBufferSubDataARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glBufferSubDataARB && args.Length() >= 4){
			obj->methodp_glBufferSubDataARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptrARB )(args[1]->NumberValue())/* GLintptrARB offset */,
				(GLsizeiptrARB )(args[2]->NumberValue())/* GLsizeiptrARB size */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCALLLISTPROC) (GLuint list);
	PFNGLCALLLISTPROC methodp_glCallList{nullptr};
	static v8::Handle<v8::Value> method_glCallList(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCallList && args.Length() >= 1){
			obj->methodp_glCallList(
				(GLuint )(args[0]->NumberValue())/* GLuint list */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCALLLISTSPROC) (GLsizei n, GLenum type, const void *lists);
	PFNGLCALLLISTSPROC methodp_glCallLists{nullptr};
	static v8::Handle<v8::Value> method_glCallLists(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCallLists && args.Length() >= 3){
			obj->methodp_glCallLists(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *lists */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
	PFNGLCHECKFRAMEBUFFERSTATUSPROC methodp_glCheckFramebufferStatus{nullptr};
	static v8::Handle<v8::Value> method_glCheckFramebufferStatus(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCheckFramebufferStatus && args.Length() >= 1){
			obj->methodp_glCheckFramebufferStatus(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
	PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC methodp_glCheckFramebufferStatusEXT{nullptr};
	static v8::Handle<v8::Value> method_glCheckFramebufferStatusEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCheckFramebufferStatusEXT && args.Length() >= 1){
			obj->methodp_glCheckFramebufferStatusEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSOESPROC) (GLenum target);
	PFNGLCHECKFRAMEBUFFERSTATUSOESPROC methodp_glCheckFramebufferStatusOES{nullptr};
	static v8::Handle<v8::Value> method_glCheckFramebufferStatusOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCheckFramebufferStatusOES && args.Length() >= 1){
			obj->methodp_glCheckFramebufferStatusOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
	PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC methodp_glCheckNamedFramebufferStatusEXT{nullptr};
	static v8::Handle<v8::Value> method_glCheckNamedFramebufferStatusEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCheckNamedFramebufferStatusEXT && args.Length() >= 2){
			obj->methodp_glCheckNamedFramebufferStatusEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
	PFNGLCLAMPCOLORPROC methodp_glClampColor{nullptr};
	static v8::Handle<v8::Value> method_glClampColor(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClampColor && args.Length() >= 2){
			obj->methodp_glClampColor(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum clamp */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
	PFNGLCLAMPCOLORARBPROC methodp_glClampColorARB{nullptr};
	static v8::Handle<v8::Value> method_glClampColorARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClampColorARB && args.Length() >= 2){
			obj->methodp_glClampColorARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum clamp */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);
	PFNGLCLEARPROC methodp_glClear{nullptr};
	static v8::Handle<v8::Value> method_glClear(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClear && args.Length() >= 1){
			obj->methodp_glClear(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARACCUMPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	PFNGLCLEARACCUMPROC methodp_glClearAccum{nullptr};
	static v8::Handle<v8::Value> method_glClearAccum(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearAccum && args.Length() >= 4){
			obj->methodp_glClearAccum(
				(GLfloat )(args[0]->NumberValue())/* GLfloat red */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat green */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat blue */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARACCUMXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
	PFNGLCLEARACCUMXOESPROC methodp_glClearAccumxOES{nullptr};
	static v8::Handle<v8::Value> method_glClearAccumxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearAccumxOES && args.Length() >= 4){
			obj->methodp_glClearAccumxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed red */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed green */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed blue */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
	PFNGLCLEARBUFFERDATAPROC methodp_glClearBufferData{nullptr};
	static v8::Handle<v8::Value> method_glClearBufferData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearBufferData && args.Length() >= 5){
			obj->methodp_glClearBufferData(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	PFNGLCLEARBUFFERSUBDATAPROC methodp_glClearBufferSubData{nullptr};
	static v8::Handle<v8::Value> method_glClearBufferSubData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearBufferSubData && args.Length() >= 7){
			obj->methodp_glClearBufferSubData(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLintptr )(args[2]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[3]->NumberValue())/* GLsizeiptr size */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
	PFNGLCLEARBUFFERFIPROC methodp_glClearBufferfi{nullptr};
	static v8::Handle<v8::Value> method_glClearBufferfi(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearBufferfi && args.Length() >= 4){
			obj->methodp_glClearBufferfi(
				(GLenum )(args[0]->NumberValue())/* GLenum buffer */,
				(GLint )(args[1]->NumberValue())/* GLint drawbuffer */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat depth */,
				(GLint )(args[3]->NumberValue())/* GLint stencil */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
	PFNGLCLEARBUFFERFVPROC methodp_glClearBufferfv{nullptr};
	static v8::Handle<v8::Value> method_glClearBufferfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearBufferfv && args.Length() >= 3){
			obj->methodp_glClearBufferfv(
				(GLenum )(args[0]->NumberValue())/* GLenum buffer */,
				(GLint )(args[1]->NumberValue())/* GLint drawbuffer */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);
	PFNGLCLEARBUFFERIVPROC methodp_glClearBufferiv{nullptr};
	static v8::Handle<v8::Value> method_glClearBufferiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearBufferiv && args.Length() >= 3){
			obj->methodp_glClearBufferiv(
				(GLenum )(args[0]->NumberValue())/* GLenum buffer */,
				(GLint )(args[1]->NumberValue())/* GLint drawbuffer */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);
	PFNGLCLEARBUFFERUIVPROC methodp_glClearBufferuiv{nullptr};
	static v8::Handle<v8::Value> method_glClearBufferuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearBufferuiv && args.Length() >= 3){
			obj->methodp_glClearBufferuiv(
				(GLenum )(args[0]->NumberValue())/* GLenum buffer */,
				(GLint )(args[1]->NumberValue())/* GLint drawbuffer */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	PFNGLCLEARCOLORPROC methodp_glClearColor{nullptr};
	static v8::Handle<v8::Value> method_glClearColor(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearColor && args.Length() >= 4){
			obj->methodp_glClearColor(
				(GLfloat )(args[0]->NumberValue())/* GLfloat red */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat green */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat blue */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
	PFNGLCLEARCOLORIIEXTPROC methodp_glClearColorIiEXT{nullptr};
	static v8::Handle<v8::Value> method_glClearColorIiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearColorIiEXT && args.Length() >= 4){
			obj->methodp_glClearColorIiEXT(
				(GLint )(args[0]->NumberValue())/* GLint red */,
				(GLint )(args[1]->NumberValue())/* GLint green */,
				(GLint )(args[2]->NumberValue())/* GLint blue */,
				(GLint )(args[3]->NumberValue())/* GLint alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
	PFNGLCLEARCOLORIUIEXTPROC methodp_glClearColorIuiEXT{nullptr};
	static v8::Handle<v8::Value> method_glClearColorIuiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearColorIuiEXT && args.Length() >= 4){
			obj->methodp_glClearColorIuiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint red */,
				(GLuint )(args[1]->NumberValue())/* GLuint green */,
				(GLuint )(args[2]->NumberValue())/* GLuint blue */,
				(GLuint )(args[3]->NumberValue())/* GLuint alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARCOLORXPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
	PFNGLCLEARCOLORXPROC methodp_glClearColorx{nullptr};
	static v8::Handle<v8::Value> method_glClearColorx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearColorx && args.Length() >= 4){
			obj->methodp_glClearColorx(
				(GLfixed )(args[0]->NumberValue())/* GLfixed red */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed green */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed blue */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
	PFNGLCLEARCOLORXOESPROC methodp_glClearColorxOES{nullptr};
	static v8::Handle<v8::Value> method_glClearColorxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearColorxOES && args.Length() >= 4){
			obj->methodp_glClearColorxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed red */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed green */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed blue */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARDEPTHPROC) (GLdouble depth);
	PFNGLCLEARDEPTHPROC methodp_glClearDepth{nullptr};
	static v8::Handle<v8::Value> method_glClearDepth(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearDepth && args.Length() >= 1){
			obj->methodp_glClearDepth(
				(GLdouble )(args[0]->NumberValue())/* GLdouble depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
	PFNGLCLEARDEPTHDNVPROC methodp_glClearDepthdNV{nullptr};
	static v8::Handle<v8::Value> method_glClearDepthdNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearDepthdNV && args.Length() >= 1){
			obj->methodp_glClearDepthdNV(
				(GLdouble )(args[0]->NumberValue())/* GLdouble depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d);
	PFNGLCLEARDEPTHFPROC methodp_glClearDepthf{nullptr};
	static v8::Handle<v8::Value> method_glClearDepthf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearDepthf && args.Length() >= 1){
			obj->methodp_glClearDepthf(
				(GLfloat )(args[0]->NumberValue())/* GLfloat d */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARDEPTHFOESPROC) (GLclampf depth);
	PFNGLCLEARDEPTHFOESPROC methodp_glClearDepthfOES{nullptr};
	static v8::Handle<v8::Value> method_glClearDepthfOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearDepthfOES && args.Length() >= 1){
			obj->methodp_glClearDepthfOES(
				(GLclampf )(args[0]->NumberValue())/* GLclampf depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARDEPTHXPROC) (GLfixed depth);
	PFNGLCLEARDEPTHXPROC methodp_glClearDepthx{nullptr};
	static v8::Handle<v8::Value> method_glClearDepthx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearDepthx && args.Length() >= 1){
			obj->methodp_glClearDepthx(
				(GLfixed )(args[0]->NumberValue())/* GLfixed depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARDEPTHXOESPROC) (GLfixed depth);
	PFNGLCLEARDEPTHXOESPROC methodp_glClearDepthxOES{nullptr};
	static v8::Handle<v8::Value> method_glClearDepthxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearDepthxOES && args.Length() >= 1){
			obj->methodp_glClearDepthxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARINDEXPROC) (GLfloat c);
	PFNGLCLEARINDEXPROC methodp_glClearIndex{nullptr};
	static v8::Handle<v8::Value> method_glClearIndex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearIndex && args.Length() >= 1){
			obj->methodp_glClearIndex(
				(GLfloat )(args[0]->NumberValue())/* GLfloat c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
	PFNGLCLEARNAMEDBUFFERDATAEXTPROC methodp_glClearNamedBufferDataEXT{nullptr};
	static v8::Handle<v8::Value> method_glClearNamedBufferDataEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearNamedBufferDataEXT && args.Length() >= 5){
			obj->methodp_glClearNamedBufferDataEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
	PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC methodp_glClearNamedBufferSubDataEXT{nullptr};
	static v8::Handle<v8::Value> method_glClearNamedBufferSubDataEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearNamedBufferSubDataEXT && args.Length() >= 7){
			obj->methodp_glClearNamedBufferSubDataEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr offset */,
				(GLsizeiptr )(args[3]->NumberValue())/* GLsizeiptr size */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARSTENCILPROC) (GLint s);
	PFNGLCLEARSTENCILPROC methodp_glClearStencil{nullptr};
	static v8::Handle<v8::Value> method_glClearStencil(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearStencil && args.Length() >= 1){
			obj->methodp_glClearStencil(
				(GLint )(args[0]->NumberValue())/* GLint s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
	PFNGLCLEARTEXIMAGEPROC methodp_glClearTexImage{nullptr};
	static v8::Handle<v8::Value> method_glClearTexImage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearTexImage && args.Length() >= 5){
			obj->methodp_glClearTexImage(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
	PFNGLCLEARTEXSUBIMAGEPROC methodp_glClearTexSubImage{nullptr};
	static v8::Handle<v8::Value> method_glClearTexSubImage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClearTexSubImage && args.Length() >= 11){
			obj->methodp_glClearTexSubImage(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLenum )(args[9]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
	PFNGLCLIENTACTIVETEXTUREPROC methodp_glClientActiveTexture{nullptr};
	static v8::Handle<v8::Value> method_glClientActiveTexture(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClientActiveTexture && args.Length() >= 1){
			obj->methodp_glClientActiveTexture(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
	PFNGLCLIENTACTIVETEXTUREARBPROC methodp_glClientActiveTextureARB{nullptr};
	static v8::Handle<v8::Value> method_glClientActiveTextureARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClientActiveTextureARB && args.Length() >= 1){
			obj->methodp_glClientActiveTextureARB(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
	PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC methodp_glClientActiveVertexStreamATI{nullptr};
	static v8::Handle<v8::Value> method_glClientActiveVertexStreamATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClientActiveVertexStreamATI && args.Length() >= 1){
			obj->methodp_glClientActiveVertexStreamATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
	PFNGLCLIENTATTRIBDEFAULTEXTPROC methodp_glClientAttribDefaultEXT{nullptr};
	static v8::Handle<v8::Value> method_glClientAttribDefaultEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClientAttribDefaultEXT && args.Length() >= 1){
			obj->methodp_glClientAttribDefaultEXT(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
	PFNGLCLIENTWAITSYNCPROC methodp_glClientWaitSync{nullptr};
	static v8::Handle<v8::Value> method_glClientWaitSync(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClientWaitSync && args.Length() >= 3){
			obj->methodp_glClientWaitSync(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield flags */,
				(GLuint64 )(args[2]->NumberValue())/* GLuint64 timeout */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
	PFNGLCLIENTWAITSYNCAPPLEPROC methodp_glClientWaitSyncAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glClientWaitSyncAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClientWaitSyncAPPLE && args.Length() >= 3){
			obj->methodp_glClientWaitSyncAPPLE(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield flags */,
				(GLuint64 )(args[2]->NumberValue())/* GLuint64 timeout */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIPPLANEPROC) (GLenum plane, const GLdouble *equation);
	PFNGLCLIPPLANEPROC methodp_glClipPlane{nullptr};
	static v8::Handle<v8::Value> method_glClipPlane(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClipPlane && args.Length() >= 2){
			obj->methodp_glClipPlane(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIPPLANEFPROC) (GLenum p, const GLfloat *eqn);
	PFNGLCLIPPLANEFPROC methodp_glClipPlanef{nullptr};
	static v8::Handle<v8::Value> method_glClipPlanef(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClipPlanef && args.Length() >= 2){
			obj->methodp_glClipPlanef(
				(GLenum )(args[0]->NumberValue())/* GLenum p */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *eqn */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIPPLANEFIMGPROC) (GLenum p, const GLfloat *eqn);
	PFNGLCLIPPLANEFIMGPROC methodp_glClipPlanefIMG{nullptr};
	static v8::Handle<v8::Value> method_glClipPlanefIMG(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClipPlanefIMG && args.Length() >= 2){
			obj->methodp_glClipPlanefIMG(
				(GLenum )(args[0]->NumberValue())/* GLenum p */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *eqn */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat *equation);
	PFNGLCLIPPLANEFOESPROC methodp_glClipPlanefOES{nullptr};
	static v8::Handle<v8::Value> method_glClipPlanefOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClipPlanefOES && args.Length() >= 2){
			obj->methodp_glClipPlanefOES(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIPPLANEXPROC) (GLenum plane, const GLfixed *equation);
	PFNGLCLIPPLANEXPROC methodp_glClipPlanex{nullptr};
	static v8::Handle<v8::Value> method_glClipPlanex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClipPlanex && args.Length() >= 2){
			obj->methodp_glClipPlanex(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIPPLANEXIMGPROC) (GLenum p, const GLfixed *eqn);
	PFNGLCLIPPLANEXIMGPROC methodp_glClipPlanexIMG{nullptr};
	static v8::Handle<v8::Value> method_glClipPlanexIMG(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClipPlanexIMG && args.Length() >= 2){
			obj->methodp_glClipPlanexIMG(
				(GLenum )(args[0]->NumberValue())/* GLenum p */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *eqn */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCLIPPLANEXOESPROC) (GLenum plane, const GLfixed *equation);
	PFNGLCLIPPLANEXOESPROC methodp_glClipPlanexOES{nullptr};
	static v8::Handle<v8::Value> method_glClipPlanexOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glClipPlanexOES && args.Length() >= 2){
			obj->methodp_glClipPlanexOES(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
	PFNGLCOLOR3BPROC methodp_glColor3b{nullptr};
	static v8::Handle<v8::Value> method_glColor3b(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3b && args.Length() >= 3){
			obj->methodp_glColor3b(
				(GLbyte )(args[0]->NumberValue())/* GLbyte red */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte green */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3BVPROC) (const GLbyte *v);
	PFNGLCOLOR3BVPROC methodp_glColor3bv{nullptr};
	static v8::Handle<v8::Value> method_glColor3bv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3bv && args.Length() >= 1){
			obj->methodp_glColor3bv(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
	PFNGLCOLOR3DPROC methodp_glColor3d{nullptr};
	static v8::Handle<v8::Value> method_glColor3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3d && args.Length() >= 3){
			obj->methodp_glColor3d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble red */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble green */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3DVPROC) (const GLdouble *v);
	PFNGLCOLOR3DVPROC methodp_glColor3dv{nullptr};
	static v8::Handle<v8::Value> method_glColor3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3dv && args.Length() >= 1){
			obj->methodp_glColor3dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
	PFNGLCOLOR3FPROC methodp_glColor3f{nullptr};
	static v8::Handle<v8::Value> method_glColor3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3f && args.Length() >= 3){
			obj->methodp_glColor3f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat red */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat green */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
	PFNGLCOLOR3FVERTEX3FSUNPROC methodp_glColor3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glColor3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3fVertex3fSUN && args.Length() >= 6){
			obj->methodp_glColor3fVertex3fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat g */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);
	PFNGLCOLOR3FVERTEX3FVSUNPROC methodp_glColor3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glColor3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3fVertex3fvSUN && args.Length() >= 2){
			obj->methodp_glColor3fVertex3fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *c */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3FVPROC) (const GLfloat *v);
	PFNGLCOLOR3FVPROC methodp_glColor3fv{nullptr};
	static v8::Handle<v8::Value> method_glColor3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3fv && args.Length() >= 1){
			obj->methodp_glColor3fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
	PFNGLCOLOR3HNVPROC methodp_glColor3hNV{nullptr};
	static v8::Handle<v8::Value> method_glColor3hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3hNV && args.Length() >= 3){
			obj->methodp_glColor3hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV red */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV green */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);
	PFNGLCOLOR3HVNVPROC methodp_glColor3hvNV{nullptr};
	static v8::Handle<v8::Value> method_glColor3hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3hvNV && args.Length() >= 1){
			obj->methodp_glColor3hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3IPROC) (GLint red, GLint green, GLint blue);
	PFNGLCOLOR3IPROC methodp_glColor3i{nullptr};
	static v8::Handle<v8::Value> method_glColor3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3i && args.Length() >= 3){
			obj->methodp_glColor3i(
				(GLint )(args[0]->NumberValue())/* GLint red */,
				(GLint )(args[1]->NumberValue())/* GLint green */,
				(GLint )(args[2]->NumberValue())/* GLint blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3IVPROC) (const GLint *v);
	PFNGLCOLOR3IVPROC methodp_glColor3iv{nullptr};
	static v8::Handle<v8::Value> method_glColor3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3iv && args.Length() >= 1){
			obj->methodp_glColor3iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
	PFNGLCOLOR3SPROC methodp_glColor3s{nullptr};
	static v8::Handle<v8::Value> method_glColor3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3s && args.Length() >= 3){
			obj->methodp_glColor3s(
				(GLshort )(args[0]->NumberValue())/* GLshort red */,
				(GLshort )(args[1]->NumberValue())/* GLshort green */,
				(GLshort )(args[2]->NumberValue())/* GLshort blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3SVPROC) (const GLshort *v);
	PFNGLCOLOR3SVPROC methodp_glColor3sv{nullptr};
	static v8::Handle<v8::Value> method_glColor3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3sv && args.Length() >= 1){
			obj->methodp_glColor3sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
	PFNGLCOLOR3UBPROC methodp_glColor3ub{nullptr};
	static v8::Handle<v8::Value> method_glColor3ub(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3ub && args.Length() >= 3){
			obj->methodp_glColor3ub(
				(GLubyte )(args[0]->NumberValue())/* GLubyte red */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte green */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3UBVPROC) (const GLubyte *v);
	PFNGLCOLOR3UBVPROC methodp_glColor3ubv{nullptr};
	static v8::Handle<v8::Value> method_glColor3ubv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3ubv && args.Length() >= 1){
			obj->methodp_glColor3ubv(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
	PFNGLCOLOR3UIPROC methodp_glColor3ui{nullptr};
	static v8::Handle<v8::Value> method_glColor3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3ui && args.Length() >= 3){
			obj->methodp_glColor3ui(
				(GLuint )(args[0]->NumberValue())/* GLuint red */,
				(GLuint )(args[1]->NumberValue())/* GLuint green */,
				(GLuint )(args[2]->NumberValue())/* GLuint blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3UIVPROC) (const GLuint *v);
	PFNGLCOLOR3UIVPROC methodp_glColor3uiv{nullptr};
	static v8::Handle<v8::Value> method_glColor3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3uiv && args.Length() >= 1){
			obj->methodp_glColor3uiv(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
	PFNGLCOLOR3USPROC methodp_glColor3us{nullptr};
	static v8::Handle<v8::Value> method_glColor3us(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3us && args.Length() >= 3){
			obj->methodp_glColor3us(
				(GLushort )(args[0]->NumberValue())/* GLushort red */,
				(GLushort )(args[1]->NumberValue())/* GLushort green */,
				(GLushort )(args[2]->NumberValue())/* GLushort blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3USVPROC) (const GLushort *v);
	PFNGLCOLOR3USVPROC methodp_glColor3usv{nullptr};
	static v8::Handle<v8::Value> method_glColor3usv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3usv && args.Length() >= 1){
			obj->methodp_glColor3usv(
				(const GLushort *)((int64_t)args[0]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3XOESPROC) (GLfixed red, GLfixed green, GLfixed blue);
	PFNGLCOLOR3XOESPROC methodp_glColor3xOES{nullptr};
	static v8::Handle<v8::Value> method_glColor3xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3xOES && args.Length() >= 3){
			obj->methodp_glColor3xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed red */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed green */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR3XVOESPROC) (const GLfixed *components);
	PFNGLCOLOR3XVOESPROC methodp_glColor3xvOES{nullptr};
	static v8::Handle<v8::Value> method_glColor3xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor3xvOES && args.Length() >= 1){
			obj->methodp_glColor3xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *components */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4BPROC) (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
	PFNGLCOLOR4BPROC methodp_glColor4b{nullptr};
	static v8::Handle<v8::Value> method_glColor4b(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4b && args.Length() >= 4){
			obj->methodp_glColor4b(
				(GLbyte )(args[0]->NumberValue())/* GLbyte red */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte green */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte blue */,
				(GLbyte )(args[3]->NumberValue())/* GLbyte alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4BVPROC) (const GLbyte *v);
	PFNGLCOLOR4BVPROC methodp_glColor4bv{nullptr};
	static v8::Handle<v8::Value> method_glColor4bv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4bv && args.Length() >= 1){
			obj->methodp_glColor4bv(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4DPROC) (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
	PFNGLCOLOR4DPROC methodp_glColor4d{nullptr};
	static v8::Handle<v8::Value> method_glColor4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4d && args.Length() >= 4){
			obj->methodp_glColor4d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble red */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble green */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble blue */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4DVPROC) (const GLdouble *v);
	PFNGLCOLOR4DVPROC methodp_glColor4dv{nullptr};
	static v8::Handle<v8::Value> method_glColor4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4dv && args.Length() >= 1){
			obj->methodp_glColor4dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4FPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	PFNGLCOLOR4FPROC methodp_glColor4f{nullptr};
	static v8::Handle<v8::Value> method_glColor4f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4f && args.Length() >= 4){
			obj->methodp_glColor4f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat red */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat green */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat blue */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC methodp_glColor4fNormal3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glColor4fNormal3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4fNormal3fVertex3fSUN && args.Length() >= 10){
			obj->methodp_glColor4fNormal3fVertex3fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat g */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat a */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[9]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
	PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC methodp_glColor4fNormal3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glColor4fNormal3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4fNormal3fVertex3fvSUN && args.Length() >= 3){
			obj->methodp_glColor4fNormal3fVertex3fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *c */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4FVPROC) (const GLfloat *v);
	PFNGLCOLOR4FVPROC methodp_glColor4fv{nullptr};
	static v8::Handle<v8::Value> method_glColor4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4fv && args.Length() >= 1){
			obj->methodp_glColor4fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
	PFNGLCOLOR4HNVPROC methodp_glColor4hNV{nullptr};
	static v8::Handle<v8::Value> method_glColor4hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4hNV && args.Length() >= 4){
			obj->methodp_glColor4hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV red */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV green */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV blue */,
				(GLhalfNV )(args[3]->NumberValue())/* GLhalfNV alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);
	PFNGLCOLOR4HVNVPROC methodp_glColor4hvNV{nullptr};
	static v8::Handle<v8::Value> method_glColor4hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4hvNV && args.Length() >= 1){
			obj->methodp_glColor4hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4IPROC) (GLint red, GLint green, GLint blue, GLint alpha);
	PFNGLCOLOR4IPROC methodp_glColor4i{nullptr};
	static v8::Handle<v8::Value> method_glColor4i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4i && args.Length() >= 4){
			obj->methodp_glColor4i(
				(GLint )(args[0]->NumberValue())/* GLint red */,
				(GLint )(args[1]->NumberValue())/* GLint green */,
				(GLint )(args[2]->NumberValue())/* GLint blue */,
				(GLint )(args[3]->NumberValue())/* GLint alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4IVPROC) (const GLint *v);
	PFNGLCOLOR4IVPROC methodp_glColor4iv{nullptr};
	static v8::Handle<v8::Value> method_glColor4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4iv && args.Length() >= 1){
			obj->methodp_glColor4iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4SPROC) (GLshort red, GLshort green, GLshort blue, GLshort alpha);
	PFNGLCOLOR4SPROC methodp_glColor4s{nullptr};
	static v8::Handle<v8::Value> method_glColor4s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4s && args.Length() >= 4){
			obj->methodp_glColor4s(
				(GLshort )(args[0]->NumberValue())/* GLshort red */,
				(GLshort )(args[1]->NumberValue())/* GLshort green */,
				(GLshort )(args[2]->NumberValue())/* GLshort blue */,
				(GLshort )(args[3]->NumberValue())/* GLshort alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4SVPROC) (const GLshort *v);
	PFNGLCOLOR4SVPROC methodp_glColor4sv{nullptr};
	static v8::Handle<v8::Value> method_glColor4sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4sv && args.Length() >= 1){
			obj->methodp_glColor4sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4UBPROC) (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
	PFNGLCOLOR4UBPROC methodp_glColor4ub{nullptr};
	static v8::Handle<v8::Value> method_glColor4ub(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4ub && args.Length() >= 4){
			obj->methodp_glColor4ub(
				(GLubyte )(args[0]->NumberValue())/* GLubyte red */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte green */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte blue */,
				(GLubyte )(args[3]->NumberValue())/* GLubyte alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
	PFNGLCOLOR4UBVERTEX2FSUNPROC methodp_glColor4ubVertex2fSUN{nullptr};
	static v8::Handle<v8::Value> method_glColor4ubVertex2fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4ubVertex2fSUN && args.Length() >= 6){
			obj->methodp_glColor4ubVertex2fSUN(
				(GLubyte )(args[0]->NumberValue())/* GLubyte r */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte g */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte b */,
				(GLubyte )(args[3]->NumberValue())/* GLubyte a */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);
	PFNGLCOLOR4UBVERTEX2FVSUNPROC methodp_glColor4ubVertex2fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glColor4ubVertex2fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4ubVertex2fvSUN && args.Length() >= 2){
			obj->methodp_glColor4ubVertex2fvSUN(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *c */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
	PFNGLCOLOR4UBVERTEX3FSUNPROC methodp_glColor4ubVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glColor4ubVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4ubVertex3fSUN && args.Length() >= 7){
			obj->methodp_glColor4ubVertex3fSUN(
				(GLubyte )(args[0]->NumberValue())/* GLubyte r */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte g */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte b */,
				(GLubyte )(args[3]->NumberValue())/* GLubyte a */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
	PFNGLCOLOR4UBVERTEX3FVSUNPROC methodp_glColor4ubVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glColor4ubVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4ubVertex3fvSUN && args.Length() >= 2){
			obj->methodp_glColor4ubVertex3fvSUN(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *c */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4UBVPROC) (const GLubyte *v);
	PFNGLCOLOR4UBVPROC methodp_glColor4ubv{nullptr};
	static v8::Handle<v8::Value> method_glColor4ubv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4ubv && args.Length() >= 1){
			obj->methodp_glColor4ubv(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4UIPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
	PFNGLCOLOR4UIPROC methodp_glColor4ui{nullptr};
	static v8::Handle<v8::Value> method_glColor4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4ui && args.Length() >= 4){
			obj->methodp_glColor4ui(
				(GLuint )(args[0]->NumberValue())/* GLuint red */,
				(GLuint )(args[1]->NumberValue())/* GLuint green */,
				(GLuint )(args[2]->NumberValue())/* GLuint blue */,
				(GLuint )(args[3]->NumberValue())/* GLuint alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4UIVPROC) (const GLuint *v);
	PFNGLCOLOR4UIVPROC methodp_glColor4uiv{nullptr};
	static v8::Handle<v8::Value> method_glColor4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4uiv && args.Length() >= 1){
			obj->methodp_glColor4uiv(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4USPROC) (GLushort red, GLushort green, GLushort blue, GLushort alpha);
	PFNGLCOLOR4USPROC methodp_glColor4us{nullptr};
	static v8::Handle<v8::Value> method_glColor4us(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4us && args.Length() >= 4){
			obj->methodp_glColor4us(
				(GLushort )(args[0]->NumberValue())/* GLushort red */,
				(GLushort )(args[1]->NumberValue())/* GLushort green */,
				(GLushort )(args[2]->NumberValue())/* GLushort blue */,
				(GLushort )(args[3]->NumberValue())/* GLushort alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4USVPROC) (const GLushort *v);
	PFNGLCOLOR4USVPROC methodp_glColor4usv{nullptr};
	static v8::Handle<v8::Value> method_glColor4usv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4usv && args.Length() >= 1){
			obj->methodp_glColor4usv(
				(const GLushort *)((int64_t)args[0]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4XPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
	PFNGLCOLOR4XPROC methodp_glColor4x{nullptr};
	static v8::Handle<v8::Value> method_glColor4x(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4x && args.Length() >= 4){
			obj->methodp_glColor4x(
				(GLfixed )(args[0]->NumberValue())/* GLfixed red */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed green */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed blue */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4XOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
	PFNGLCOLOR4XOESPROC methodp_glColor4xOES{nullptr};
	static v8::Handle<v8::Value> method_glColor4xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4xOES && args.Length() >= 4){
			obj->methodp_glColor4xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed red */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed green */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed blue */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLOR4XVOESPROC) (const GLfixed *components);
	PFNGLCOLOR4XVOESPROC methodp_glColor4xvOES{nullptr};
	static v8::Handle<v8::Value> method_glColor4xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColor4xvOES && args.Length() >= 1){
			obj->methodp_glColor4xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *components */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
	PFNGLCOLORFORMATNVPROC methodp_glColorFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glColorFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorFormatNV && args.Length() >= 3){
			obj->methodp_glColorFormatNV(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
	PFNGLCOLORFRAGMENTOP1ATIPROC methodp_glColorFragmentOp1ATI{nullptr};
	static v8::Handle<v8::Value> method_glColorFragmentOp1ATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorFragmentOp1ATI && args.Length() >= 7){
			obj->methodp_glColorFragmentOp1ATI(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint dst */,
				(GLuint )(args[2]->NumberValue())/* GLuint dstMask */,
				(GLuint )(args[3]->NumberValue())/* GLuint dstMod */,
				(GLuint )(args[4]->NumberValue())/* GLuint arg1 */,
				(GLuint )(args[5]->NumberValue())/* GLuint arg1Rep */,
				(GLuint )(args[6]->NumberValue())/* GLuint arg1Mod */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
	PFNGLCOLORFRAGMENTOP2ATIPROC methodp_glColorFragmentOp2ATI{nullptr};
	static v8::Handle<v8::Value> method_glColorFragmentOp2ATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorFragmentOp2ATI && args.Length() >= 10){
			obj->methodp_glColorFragmentOp2ATI(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint dst */,
				(GLuint )(args[2]->NumberValue())/* GLuint dstMask */,
				(GLuint )(args[3]->NumberValue())/* GLuint dstMod */,
				(GLuint )(args[4]->NumberValue())/* GLuint arg1 */,
				(GLuint )(args[5]->NumberValue())/* GLuint arg1Rep */,
				(GLuint )(args[6]->NumberValue())/* GLuint arg1Mod */,
				(GLuint )(args[7]->NumberValue())/* GLuint arg2 */,
				(GLuint )(args[8]->NumberValue())/* GLuint arg2Rep */,
				(GLuint )(args[9]->NumberValue())/* GLuint arg2Mod */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
	PFNGLCOLORFRAGMENTOP3ATIPROC methodp_glColorFragmentOp3ATI{nullptr};
	static v8::Handle<v8::Value> method_glColorFragmentOp3ATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorFragmentOp3ATI && args.Length() >= 13){
			obj->methodp_glColorFragmentOp3ATI(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint dst */,
				(GLuint )(args[2]->NumberValue())/* GLuint dstMask */,
				(GLuint )(args[3]->NumberValue())/* GLuint dstMod */,
				(GLuint )(args[4]->NumberValue())/* GLuint arg1 */,
				(GLuint )(args[5]->NumberValue())/* GLuint arg1Rep */,
				(GLuint )(args[6]->NumberValue())/* GLuint arg1Mod */,
				(GLuint )(args[7]->NumberValue())/* GLuint arg2 */,
				(GLuint )(args[8]->NumberValue())/* GLuint arg2Rep */,
				(GLuint )(args[9]->NumberValue())/* GLuint arg2Mod */,
				(GLuint )(args[10]->NumberValue())/* GLuint arg3 */,
				(GLuint )(args[11]->NumberValue())/* GLuint arg3Rep */,
				(GLuint )(args[12]->NumberValue())/* GLuint arg3Mod */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	PFNGLCOLORMASKPROC methodp_glColorMask{nullptr};
	static v8::Handle<v8::Value> method_glColorMask(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorMask && args.Length() >= 4){
			obj->methodp_glColorMask(
				(GLboolean )(args[0]->NumberValue())/* GLboolean red */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean green */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean blue */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	PFNGLCOLORMASKINDEXEDEXTPROC methodp_glColorMaskIndexedEXT{nullptr};
	static v8::Handle<v8::Value> method_glColorMaskIndexedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorMaskIndexedEXT && args.Length() >= 5){
			obj->methodp_glColorMaskIndexedEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean r */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean g */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean b */,
				(GLboolean )(args[4]->NumberValue())/* GLboolean a */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	PFNGLCOLORMASKIPROC methodp_glColorMaski{nullptr};
	static v8::Handle<v8::Value> method_glColorMaski(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorMaski && args.Length() >= 5){
			obj->methodp_glColorMaski(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean r */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean g */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean b */,
				(GLboolean )(args[4]->NumberValue())/* GLboolean a */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORMASKIEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	PFNGLCOLORMASKIEXTPROC methodp_glColorMaskiEXT{nullptr};
	static v8::Handle<v8::Value> method_glColorMaskiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorMaskiEXT && args.Length() >= 5){
			obj->methodp_glColorMaskiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean r */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean g */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean b */,
				(GLboolean )(args[4]->NumberValue())/* GLboolean a */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORMATERIALPROC) (GLenum face, GLenum mode);
	PFNGLCOLORMATERIALPROC methodp_glColorMaterial{nullptr};
	static v8::Handle<v8::Value> method_glColorMaterial(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorMaterial && args.Length() >= 2){
			obj->methodp_glColorMaterial(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);
	PFNGLCOLORP3UIPROC methodp_glColorP3ui{nullptr};
	static v8::Handle<v8::Value> method_glColorP3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorP3ui && args.Length() >= 2){
			obj->methodp_glColorP3ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint color */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);
	PFNGLCOLORP3UIVPROC methodp_glColorP3uiv{nullptr};
	static v8::Handle<v8::Value> method_glColorP3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorP3uiv && args.Length() >= 2){
			obj->methodp_glColorP3uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *color */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);
	PFNGLCOLORP4UIPROC methodp_glColorP4ui{nullptr};
	static v8::Handle<v8::Value> method_glColorP4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorP4ui && args.Length() >= 2){
			obj->methodp_glColorP4ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint color */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);
	PFNGLCOLORP4UIVPROC methodp_glColorP4uiv{nullptr};
	static v8::Handle<v8::Value> method_glColorP4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorP4uiv && args.Length() >= 2){
			obj->methodp_glColorP4uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *color */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLCOLORPOINTERPROC methodp_glColorPointer{nullptr};
	static v8::Handle<v8::Value> method_glColorPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorPointer && args.Length() >= 4){
			obj->methodp_glColorPointer(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
	PFNGLCOLORPOINTEREXTPROC methodp_glColorPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glColorPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorPointerEXT && args.Length() >= 5){
			obj->methodp_glColorPointerEXT(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
	PFNGLCOLORPOINTERLISTIBMPROC methodp_glColorPointerListIBM{nullptr};
	static v8::Handle<v8::Value> method_glColorPointerListIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorPointerListIBM && args.Length() >= 5){
			obj->methodp_glColorPointerListIBM(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLint )(args[2]->NumberValue())/* GLint stride */,
				(const void **)((int64_t)args[3]->NumberValue())/* const void **pointer */,
				(GLint )(args[4]->NumberValue())/* GLint ptrstride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);
	PFNGLCOLORPOINTERVINTELPROC methodp_glColorPointervINTEL{nullptr};
	static v8::Handle<v8::Value> method_glColorPointervINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorPointervINTEL && args.Length() >= 3){
			obj->methodp_glColorPointervINTEL(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void **)((int64_t)args[2]->NumberValue())/* const void **pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
	PFNGLCOLORSUBTABLEPROC methodp_glColorSubTable{nullptr};
	static v8::Handle<v8::Value> method_glColorSubTable(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorSubTable && args.Length() >= 6){
			obj->methodp_glColorSubTable(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei start */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);
	PFNGLCOLORSUBTABLEEXTPROC methodp_glColorSubTableEXT{nullptr};
	static v8::Handle<v8::Value> method_glColorSubTableEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorSubTableEXT && args.Length() >= 6){
			obj->methodp_glColorSubTableEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei start */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
	PFNGLCOLORTABLEPROC methodp_glColorTable{nullptr};
	static v8::Handle<v8::Value> method_glColorTable(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorTable && args.Length() >= 6){
			obj->methodp_glColorTable(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *table */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table);
	PFNGLCOLORTABLEEXTPROC methodp_glColorTableEXT{nullptr};
	static v8::Handle<v8::Value> method_glColorTableEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorTableEXT && args.Length() >= 6){
			obj->methodp_glColorTableEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalFormat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *table */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLCOLORTABLEPARAMETERFVPROC methodp_glColorTableParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glColorTableParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorTableParameterfv && args.Length() >= 3){
			obj->methodp_glColorTableParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLCOLORTABLEPARAMETERFVSGIPROC methodp_glColorTableParameterfvSGI{nullptr};
	static v8::Handle<v8::Value> method_glColorTableParameterfvSGI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorTableParameterfvSGI && args.Length() >= 3){
			obj->methodp_glColorTableParameterfvSGI(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLCOLORTABLEPARAMETERIVPROC methodp_glColorTableParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glColorTableParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorTableParameteriv && args.Length() >= 3){
			obj->methodp_glColorTableParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLCOLORTABLEPARAMETERIVSGIPROC methodp_glColorTableParameterivSGI{nullptr};
	static v8::Handle<v8::Value> method_glColorTableParameterivSGI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorTableParameterivSGI && args.Length() >= 3){
			obj->methodp_glColorTableParameterivSGI(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);
	PFNGLCOLORTABLESGIPROC methodp_glColorTableSGI{nullptr};
	static v8::Handle<v8::Value> method_glColorTableSGI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glColorTableSGI && args.Length() >= 6){
			obj->methodp_glColorTableSGI(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *table */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
	PFNGLCOMBINERINPUTNVPROC methodp_glCombinerInputNV{nullptr};
	static v8::Handle<v8::Value> method_glCombinerInputNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCombinerInputNV && args.Length() >= 6){
			obj->methodp_glCombinerInputNV(
				(GLenum )(args[0]->NumberValue())/* GLenum stage */,
				(GLenum )(args[1]->NumberValue())/* GLenum portion */,
				(GLenum )(args[2]->NumberValue())/* GLenum variable */,
				(GLenum )(args[3]->NumberValue())/* GLenum input */,
				(GLenum )(args[4]->NumberValue())/* GLenum mapping */,
				(GLenum )(args[5]->NumberValue())/* GLenum componentUsage */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
	PFNGLCOMBINEROUTPUTNVPROC methodp_glCombinerOutputNV{nullptr};
	static v8::Handle<v8::Value> method_glCombinerOutputNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCombinerOutputNV && args.Length() >= 10){
			obj->methodp_glCombinerOutputNV(
				(GLenum )(args[0]->NumberValue())/* GLenum stage */,
				(GLenum )(args[1]->NumberValue())/* GLenum portion */,
				(GLenum )(args[2]->NumberValue())/* GLenum abOutput */,
				(GLenum )(args[3]->NumberValue())/* GLenum cdOutput */,
				(GLenum )(args[4]->NumberValue())/* GLenum sumOutput */,
				(GLenum )(args[5]->NumberValue())/* GLenum scale */,
				(GLenum )(args[6]->NumberValue())/* GLenum bias */,
				(GLboolean )(args[7]->NumberValue())/* GLboolean abDotProduct */,
				(GLboolean )(args[8]->NumberValue())/* GLboolean cdDotProduct */,
				(GLboolean )(args[9]->NumberValue())/* GLboolean muxSum */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
	PFNGLCOMBINERPARAMETERFNVPROC methodp_glCombinerParameterfNV{nullptr};
	static v8::Handle<v8::Value> method_glCombinerParameterfNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCombinerParameterfNV && args.Length() >= 2){
			obj->methodp_glCombinerParameterfNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);
	PFNGLCOMBINERPARAMETERFVNVPROC methodp_glCombinerParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glCombinerParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCombinerParameterfvNV && args.Length() >= 2){
			obj->methodp_glCombinerParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
	PFNGLCOMBINERPARAMETERINVPROC methodp_glCombinerParameteriNV{nullptr};
	static v8::Handle<v8::Value> method_glCombinerParameteriNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCombinerParameteriNV && args.Length() >= 2){
			obj->methodp_glCombinerParameteriNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
	PFNGLCOMBINERPARAMETERIVNVPROC methodp_glCombinerParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glCombinerParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCombinerParameterivNV && args.Length() >= 2){
			obj->methodp_glCombinerParameterivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);
	PFNGLCOMBINERSTAGEPARAMETERFVNVPROC methodp_glCombinerStageParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glCombinerStageParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCombinerStageParameterfvNV && args.Length() >= 3){
			obj->methodp_glCombinerStageParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum stage */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);
	PFNGLCOMPILESHADERPROC methodp_glCompileShader{nullptr};
	static v8::Handle<v8::Value> method_glCompileShader(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompileShader && args.Length() >= 1){
			obj->methodp_glCompileShader(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
	PFNGLCOMPILESHADERARBPROC methodp_glCompileShaderARB{nullptr};
	static v8::Handle<v8::Value> method_glCompileShaderARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompileShaderARB && args.Length() >= 1){
			obj->methodp_glCompileShaderARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB shaderObj */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);
	PFNGLCOMPILESHADERINCLUDEARBPROC methodp_glCompileShaderIncludeARB{nullptr};
	static v8::Handle<v8::Value> method_glCompileShaderIncludeARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompileShaderIncludeARB && args.Length() >= 4){
			obj->methodp_glCompileShaderIncludeARB(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLchar *const*)((int64_t)args[2]->NumberValue())/* const GLchar *const*path */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC methodp_glCompressedMultiTexImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedMultiTexImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedMultiTexImage1DEXT && args.Length() >= 8){
			obj->methodp_glCompressedMultiTexImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLint )(args[5]->NumberValue())/* GLint border */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC methodp_glCompressedMultiTexImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedMultiTexImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedMultiTexImage2DEXT && args.Length() >= 9){
			obj->methodp_glCompressedMultiTexImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC methodp_glCompressedMultiTexImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedMultiTexImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedMultiTexImage3DEXT && args.Length() >= 10){
			obj->methodp_glCompressedMultiTexImage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei depth */,
				(GLint )(args[7]->NumberValue())/* GLint border */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC methodp_glCompressedMultiTexSubImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedMultiTexSubImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedMultiTexSubImage1DEXT && args.Length() >= 8){
			obj->methodp_glCompressedMultiTexSubImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLenum )(args[5]->NumberValue())/* GLenum format */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC methodp_glCompressedMultiTexSubImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedMultiTexSubImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedMultiTexSubImage2DEXT && args.Length() >= 10){
			obj->methodp_glCompressedMultiTexSubImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC methodp_glCompressedMultiTexSubImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedMultiTexSubImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedMultiTexSubImage3DEXT && args.Length() >= 12){
			obj->methodp_glCompressedMultiTexSubImage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[9]->NumberValue())/* GLenum format */,
				(GLsizei )(args[10]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[11]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXIMAGE1DPROC methodp_glCompressedTexImage1D{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexImage1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexImage1D && args.Length() >= 7){
			obj->methodp_glCompressedTexImage1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLint )(args[4]->NumberValue())/* GLint border */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXIMAGE1DARBPROC methodp_glCompressedTexImage1DARB{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexImage1DARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexImage1DARB && args.Length() >= 7){
			obj->methodp_glCompressedTexImage1DARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLint )(args[4]->NumberValue())/* GLint border */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXIMAGE2DPROC methodp_glCompressedTexImage2D{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexImage2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexImage2D && args.Length() >= 8){
			obj->methodp_glCompressedTexImage2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLint )(args[5]->NumberValue())/* GLint border */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXIMAGE2DARBPROC methodp_glCompressedTexImage2DARB{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexImage2DARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexImage2DARB && args.Length() >= 8){
			obj->methodp_glCompressedTexImage2DARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLint )(args[5]->NumberValue())/* GLint border */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXIMAGE3DPROC methodp_glCompressedTexImage3D{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexImage3D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexImage3D && args.Length() >= 9){
			obj->methodp_glCompressedTexImage3D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXIMAGE3DARBPROC methodp_glCompressedTexImage3DARB{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexImage3DARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexImage3DARB && args.Length() >= 9){
			obj->methodp_glCompressedTexImage3DARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DOESPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXIMAGE3DOESPROC methodp_glCompressedTexImage3DOES{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexImage3DOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexImage3DOES && args.Length() >= 9){
			obj->methodp_glCompressedTexImage3DOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC methodp_glCompressedTexSubImage1D{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexSubImage1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexSubImage1D && args.Length() >= 7){
			obj->methodp_glCompressedTexSubImage1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC methodp_glCompressedTexSubImage1DARB{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexSubImage1DARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexSubImage1DARB && args.Length() >= 7){
			obj->methodp_glCompressedTexSubImage1DARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC methodp_glCompressedTexSubImage2D{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexSubImage2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexSubImage2D && args.Length() >= 9){
			obj->methodp_glCompressedTexSubImage2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLenum )(args[6]->NumberValue())/* GLenum format */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC methodp_glCompressedTexSubImage2DARB{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexSubImage2DARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexSubImage2DARB && args.Length() >= 9){
			obj->methodp_glCompressedTexSubImage2DARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLenum )(args[6]->NumberValue())/* GLenum format */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC methodp_glCompressedTexSubImage3D{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexSubImage3D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexSubImage3D && args.Length() >= 11){
			obj->methodp_glCompressedTexSubImage3D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLsizei )(args[9]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC methodp_glCompressedTexSubImage3DARB{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexSubImage3DARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexSubImage3DARB && args.Length() >= 11){
			obj->methodp_glCompressedTexSubImage3DARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLsizei )(args[9]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
	PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC methodp_glCompressedTexSubImage3DOES{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTexSubImage3DOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTexSubImage3DOES && args.Length() >= 11){
			obj->methodp_glCompressedTexSubImage3DOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLsizei )(args[9]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC methodp_glCompressedTextureImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTextureImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTextureImage1DEXT && args.Length() >= 8){
			obj->methodp_glCompressedTextureImage1DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLint )(args[5]->NumberValue())/* GLint border */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC methodp_glCompressedTextureImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTextureImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTextureImage2DEXT && args.Length() >= 9){
			obj->methodp_glCompressedTextureImage2DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC methodp_glCompressedTextureImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTextureImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTextureImage3DEXT && args.Length() >= 10){
			obj->methodp_glCompressedTextureImage3DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei depth */,
				(GLint )(args[7]->NumberValue())/* GLint border */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC methodp_glCompressedTextureSubImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTextureSubImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTextureSubImage1DEXT && args.Length() >= 8){
			obj->methodp_glCompressedTextureSubImage1DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLenum )(args[5]->NumberValue())/* GLenum format */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC methodp_glCompressedTextureSubImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTextureSubImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTextureSubImage2DEXT && args.Length() >= 10){
			obj->methodp_glCompressedTextureSubImage2DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);
	PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC methodp_glCompressedTextureSubImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCompressedTextureSubImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCompressedTextureSubImage3DEXT && args.Length() >= 12){
			obj->methodp_glCompressedTextureSubImage3DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[9]->NumberValue())/* GLenum format */,
				(GLsizei )(args[10]->NumberValue())/* GLsizei imageSize */,
				(const void *)((int64_t)args[11]->NumberValue())/* const void *bits */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
	PFNGLCONVOLUTIONFILTER1DPROC methodp_glConvolutionFilter1D{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionFilter1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionFilter1D && args.Length() >= 6){
			obj->methodp_glConvolutionFilter1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);
	PFNGLCONVOLUTIONFILTER1DEXTPROC methodp_glConvolutionFilter1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionFilter1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionFilter1DEXT && args.Length() >= 6){
			obj->methodp_glConvolutionFilter1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
	PFNGLCONVOLUTIONFILTER2DPROC methodp_glConvolutionFilter2D{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionFilter2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionFilter2D && args.Length() >= 7){
			obj->methodp_glConvolutionFilter2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);
	PFNGLCONVOLUTIONFILTER2DEXTPROC methodp_glConvolutionFilter2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionFilter2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionFilter2DEXT && args.Length() >= 7){
			obj->methodp_glConvolutionFilter2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
	PFNGLCONVOLUTIONPARAMETERFPROC methodp_glConvolutionParameterf{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameterf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameterf && args.Length() >= 3){
			obj->methodp_glConvolutionParameterf(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);
	PFNGLCONVOLUTIONPARAMETERFEXTPROC methodp_glConvolutionParameterfEXT{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameterfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameterfEXT && args.Length() >= 3){
			obj->methodp_glConvolutionParameterfEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLCONVOLUTIONPARAMETERFVPROC methodp_glConvolutionParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameterfv && args.Length() >= 3){
			obj->methodp_glConvolutionParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLCONVOLUTIONPARAMETERFVEXTPROC methodp_glConvolutionParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameterfvEXT && args.Length() >= 3){
			obj->methodp_glConvolutionParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
	PFNGLCONVOLUTIONPARAMETERIPROC methodp_glConvolutionParameteri{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameteri(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameteri && args.Length() >= 3){
			obj->methodp_glConvolutionParameteri(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);
	PFNGLCONVOLUTIONPARAMETERIEXTPROC methodp_glConvolutionParameteriEXT{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameteriEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameteriEXT && args.Length() >= 3){
			obj->methodp_glConvolutionParameteriEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLCONVOLUTIONPARAMETERIVPROC methodp_glConvolutionParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameteriv && args.Length() >= 3){
			obj->methodp_glConvolutionParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLCONVOLUTIONPARAMETERIVEXTPROC methodp_glConvolutionParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameterivEXT && args.Length() >= 3){
			obj->methodp_glConvolutionParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);
	PFNGLCONVOLUTIONPARAMETERXOESPROC methodp_glConvolutionParameterxOES{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameterxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameterxOES && args.Length() >= 3){
			obj->methodp_glConvolutionParameterxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
	PFNGLCONVOLUTIONPARAMETERXVOESPROC methodp_glConvolutionParameterxvOES{nullptr};
	static v8::Handle<v8::Value> method_glConvolutionParameterxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glConvolutionParameterxvOES && args.Length() >= 3){
			obj->methodp_glConvolutionParameterxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	PFNGLCOPYBUFFERSUBDATAPROC methodp_glCopyBufferSubData{nullptr};
	static v8::Handle<v8::Value> method_glCopyBufferSubData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyBufferSubData && args.Length() >= 5){
			obj->methodp_glCopyBufferSubData(
				(GLenum )(args[0]->NumberValue())/* GLenum readTarget */,
				(GLenum )(args[1]->NumberValue())/* GLenum writeTarget */,
				(GLintptr )(args[2]->NumberValue())/* GLintptr readOffset */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr writeOffset */,
				(GLsizeiptr )(args[4]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATANVPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	PFNGLCOPYBUFFERSUBDATANVPROC methodp_glCopyBufferSubDataNV{nullptr};
	static v8::Handle<v8::Value> method_glCopyBufferSubDataNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyBufferSubDataNV && args.Length() >= 5){
			obj->methodp_glCopyBufferSubDataNV(
				(GLenum )(args[0]->NumberValue())/* GLenum readTarget */,
				(GLenum )(args[1]->NumberValue())/* GLenum writeTarget */,
				(GLintptr )(args[2]->NumberValue())/* GLintptr readOffset */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr writeOffset */,
				(GLsizeiptr )(args[4]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
	PFNGLCOPYCOLORSUBTABLEPROC methodp_glCopyColorSubTable{nullptr};
	static v8::Handle<v8::Value> method_glCopyColorSubTable(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyColorSubTable && args.Length() >= 5){
			obj->methodp_glCopyColorSubTable(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei start */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
	PFNGLCOPYCOLORSUBTABLEEXTPROC methodp_glCopyColorSubTableEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyColorSubTableEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyColorSubTableEXT && args.Length() >= 5){
			obj->methodp_glCopyColorSubTableEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei start */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	PFNGLCOPYCOLORTABLEPROC methodp_glCopyColorTable{nullptr};
	static v8::Handle<v8::Value> method_glCopyColorTable(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyColorTable && args.Length() >= 5){
			obj->methodp_glCopyColorTable(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	PFNGLCOPYCOLORTABLESGIPROC methodp_glCopyColorTableSGI{nullptr};
	static v8::Handle<v8::Value> method_glCopyColorTableSGI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyColorTableSGI && args.Length() >= 5){
			obj->methodp_glCopyColorTableSGI(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	PFNGLCOPYCONVOLUTIONFILTER1DPROC methodp_glCopyConvolutionFilter1D{nullptr};
	static v8::Handle<v8::Value> method_glCopyConvolutionFilter1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyConvolutionFilter1D && args.Length() >= 5){
			obj->methodp_glCopyConvolutionFilter1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC methodp_glCopyConvolutionFilter1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyConvolutionFilter1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyConvolutionFilter1DEXT && args.Length() >= 5){
			obj->methodp_glCopyConvolutionFilter1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYCONVOLUTIONFILTER2DPROC methodp_glCopyConvolutionFilter2D{nullptr};
	static v8::Handle<v8::Value> method_glCopyConvolutionFilter2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyConvolutionFilter2D && args.Length() >= 6){
			obj->methodp_glCopyConvolutionFilter2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC methodp_glCopyConvolutionFilter2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyConvolutionFilter2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyConvolutionFilter2DEXT && args.Length() >= 6){
			obj->methodp_glCopyConvolutionFilter2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	PFNGLCOPYIMAGESUBDATAPROC methodp_glCopyImageSubData{nullptr};
	static v8::Handle<v8::Value> method_glCopyImageSubData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyImageSubData && args.Length() >= 15){
			obj->methodp_glCopyImageSubData(
				(GLuint )(args[0]->NumberValue())/* GLuint srcName */,
				(GLenum )(args[1]->NumberValue())/* GLenum srcTarget */,
				(GLint )(args[2]->NumberValue())/* GLint srcLevel */,
				(GLint )(args[3]->NumberValue())/* GLint srcX */,
				(GLint )(args[4]->NumberValue())/* GLint srcY */,
				(GLint )(args[5]->NumberValue())/* GLint srcZ */,
				(GLuint )(args[6]->NumberValue())/* GLuint dstName */,
				(GLenum )(args[7]->NumberValue())/* GLenum dstTarget */,
				(GLint )(args[8]->NumberValue())/* GLint dstLevel */,
				(GLint )(args[9]->NumberValue())/* GLint dstX */,
				(GLint )(args[10]->NumberValue())/* GLint dstY */,
				(GLint )(args[11]->NumberValue())/* GLint dstZ */,
				(GLsizei )(args[12]->NumberValue())/* GLsizei srcWidth */,
				(GLsizei )(args[13]->NumberValue())/* GLsizei srcHeight */,
				(GLsizei )(args[14]->NumberValue())/* GLsizei srcDepth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAEXTPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
	PFNGLCOPYIMAGESUBDATAEXTPROC methodp_glCopyImageSubDataEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyImageSubDataEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyImageSubDataEXT && args.Length() >= 15){
			obj->methodp_glCopyImageSubDataEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint srcName */,
				(GLenum )(args[1]->NumberValue())/* GLenum srcTarget */,
				(GLint )(args[2]->NumberValue())/* GLint srcLevel */,
				(GLint )(args[3]->NumberValue())/* GLint srcX */,
				(GLint )(args[4]->NumberValue())/* GLint srcY */,
				(GLint )(args[5]->NumberValue())/* GLint srcZ */,
				(GLuint )(args[6]->NumberValue())/* GLuint dstName */,
				(GLenum )(args[7]->NumberValue())/* GLenum dstTarget */,
				(GLint )(args[8]->NumberValue())/* GLint dstLevel */,
				(GLint )(args[9]->NumberValue())/* GLint dstX */,
				(GLint )(args[10]->NumberValue())/* GLint dstY */,
				(GLint )(args[11]->NumberValue())/* GLint dstZ */,
				(GLsizei )(args[12]->NumberValue())/* GLsizei srcWidth */,
				(GLsizei )(args[13]->NumberValue())/* GLsizei srcHeight */,
				(GLsizei )(args[14]->NumberValue())/* GLsizei srcDepth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
	PFNGLCOPYIMAGESUBDATANVPROC methodp_glCopyImageSubDataNV{nullptr};
	static v8::Handle<v8::Value> method_glCopyImageSubDataNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyImageSubDataNV && args.Length() >= 15){
			obj->methodp_glCopyImageSubDataNV(
				(GLuint )(args[0]->NumberValue())/* GLuint srcName */,
				(GLenum )(args[1]->NumberValue())/* GLenum srcTarget */,
				(GLint )(args[2]->NumberValue())/* GLint srcLevel */,
				(GLint )(args[3]->NumberValue())/* GLint srcX */,
				(GLint )(args[4]->NumberValue())/* GLint srcY */,
				(GLint )(args[5]->NumberValue())/* GLint srcZ */,
				(GLuint )(args[6]->NumberValue())/* GLuint dstName */,
				(GLenum )(args[7]->NumberValue())/* GLenum dstTarget */,
				(GLint )(args[8]->NumberValue())/* GLint dstLevel */,
				(GLint )(args[9]->NumberValue())/* GLint dstX */,
				(GLint )(args[10]->NumberValue())/* GLint dstY */,
				(GLint )(args[11]->NumberValue())/* GLint dstZ */,
				(GLsizei )(args[12]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[13]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[14]->NumberValue())/* GLsizei depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	PFNGLCOPYMULTITEXIMAGE1DEXTPROC methodp_glCopyMultiTexImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyMultiTexImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyMultiTexImage1DEXT && args.Length() >= 8){
			obj->methodp_glCopyMultiTexImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[4]->NumberValue())/* GLint x */,
				(GLint )(args[5]->NumberValue())/* GLint y */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLint )(args[7]->NumberValue())/* GLint border */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	PFNGLCOPYMULTITEXIMAGE2DEXTPROC methodp_glCopyMultiTexImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyMultiTexImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyMultiTexImage2DEXT && args.Length() >= 9){
			obj->methodp_glCopyMultiTexImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[4]->NumberValue())/* GLint x */,
				(GLint )(args[5]->NumberValue())/* GLint y */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */,
				(GLint )(args[8]->NumberValue())/* GLint border */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC methodp_glCopyMultiTexSubImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyMultiTexSubImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyMultiTexSubImage1DEXT && args.Length() >= 7){
			obj->methodp_glCopyMultiTexSubImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint x */,
				(GLint )(args[5]->NumberValue())/* GLint y */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC methodp_glCopyMultiTexSubImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyMultiTexSubImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyMultiTexSubImage2DEXT && args.Length() >= 9){
			obj->methodp_glCopyMultiTexSubImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLint )(args[5]->NumberValue())/* GLint x */,
				(GLint )(args[6]->NumberValue())/* GLint y */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC methodp_glCopyMultiTexSubImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyMultiTexSubImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyMultiTexSubImage3DEXT && args.Length() >= 10){
			obj->methodp_glCopyMultiTexSubImage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */,
				(GLint )(args[6]->NumberValue())/* GLint x */,
				(GLint )(args[7]->NumberValue())/* GLint y */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[9]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);
	PFNGLCOPYPATHNVPROC methodp_glCopyPathNV{nullptr};
	static v8::Handle<v8::Value> method_glCopyPathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyPathNV && args.Length() >= 2){
			obj->methodp_glCopyPathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint resultPath */,
				(GLuint )(args[1]->NumberValue())/* GLuint srcPath */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
	PFNGLCOPYPIXELSPROC methodp_glCopyPixels{nullptr};
	static v8::Handle<v8::Value> method_glCopyPixels(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyPixels && args.Length() >= 5){
			obj->methodp_glCopyPixels(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	PFNGLCOPYTEXIMAGE1DPROC methodp_glCopyTexImage1D{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexImage1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexImage1D && args.Length() >= 7){
			obj->methodp_glCopyTexImage1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[3]->NumberValue())/* GLint x */,
				(GLint )(args[4]->NumberValue())/* GLint y */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLint )(args[6]->NumberValue())/* GLint border */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	PFNGLCOPYTEXIMAGE1DEXTPROC methodp_glCopyTexImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexImage1DEXT && args.Length() >= 7){
			obj->methodp_glCopyTexImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[3]->NumberValue())/* GLint x */,
				(GLint )(args[4]->NumberValue())/* GLint y */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLint )(args[6]->NumberValue())/* GLint border */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	PFNGLCOPYTEXIMAGE2DPROC methodp_glCopyTexImage2D{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexImage2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexImage2D && args.Length() >= 8){
			obj->methodp_glCopyTexImage2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[3]->NumberValue())/* GLint x */,
				(GLint )(args[4]->NumberValue())/* GLint y */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLint )(args[7]->NumberValue())/* GLint border */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	PFNGLCOPYTEXIMAGE2DEXTPROC methodp_glCopyTexImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexImage2DEXT && args.Length() >= 8){
			obj->methodp_glCopyTexImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[3]->NumberValue())/* GLint x */,
				(GLint )(args[4]->NumberValue())/* GLint y */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLint )(args[7]->NumberValue())/* GLint border */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	PFNGLCOPYTEXSUBIMAGE1DPROC methodp_glCopyTexSubImage1D{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexSubImage1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexSubImage1D && args.Length() >= 6){
			obj->methodp_glCopyTexSubImage1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint x */,
				(GLint )(args[4]->NumberValue())/* GLint y */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	PFNGLCOPYTEXSUBIMAGE1DEXTPROC methodp_glCopyTexSubImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexSubImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexSubImage1DEXT && args.Length() >= 6){
			obj->methodp_glCopyTexSubImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint x */,
				(GLint )(args[4]->NumberValue())/* GLint y */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYTEXSUBIMAGE2DPROC methodp_glCopyTexSubImage2D{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexSubImage2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexSubImage2D && args.Length() >= 8){
			obj->methodp_glCopyTexSubImage2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint x */,
				(GLint )(args[5]->NumberValue())/* GLint y */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYTEXSUBIMAGE2DEXTPROC methodp_glCopyTexSubImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexSubImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexSubImage2DEXT && args.Length() >= 8){
			obj->methodp_glCopyTexSubImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint x */,
				(GLint )(args[5]->NumberValue())/* GLint y */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYTEXSUBIMAGE3DPROC methodp_glCopyTexSubImage3D{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexSubImage3D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexSubImage3D && args.Length() >= 9){
			obj->methodp_glCopyTexSubImage3D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLint )(args[5]->NumberValue())/* GLint x */,
				(GLint )(args[6]->NumberValue())/* GLint y */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYTEXSUBIMAGE3DEXTPROC methodp_glCopyTexSubImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexSubImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexSubImage3DEXT && args.Length() >= 9){
			obj->methodp_glCopyTexSubImage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLint )(args[5]->NumberValue())/* GLint x */,
				(GLint )(args[6]->NumberValue())/* GLint y */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYTEXSUBIMAGE3DOESPROC methodp_glCopyTexSubImage3DOES{nullptr};
	static v8::Handle<v8::Value> method_glCopyTexSubImage3DOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTexSubImage3DOES && args.Length() >= 9){
			obj->methodp_glCopyTexSubImage3DOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLint )(args[5]->NumberValue())/* GLint x */,
				(GLint )(args[6]->NumberValue())/* GLint y */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	PFNGLCOPYTEXTUREIMAGE1DEXTPROC methodp_glCopyTextureImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTextureImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTextureImage1DEXT && args.Length() >= 8){
			obj->methodp_glCopyTextureImage1DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[4]->NumberValue())/* GLint x */,
				(GLint )(args[5]->NumberValue())/* GLint y */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLint )(args[7]->NumberValue())/* GLint border */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	PFNGLCOPYTEXTUREIMAGE2DEXTPROC methodp_glCopyTextureImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTextureImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTextureImage2DEXT && args.Length() >= 9){
			obj->methodp_glCopyTextureImage2DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLint )(args[4]->NumberValue())/* GLint x */,
				(GLint )(args[5]->NumberValue())/* GLint y */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */,
				(GLint )(args[8]->NumberValue())/* GLint border */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXTURELEVELSAPPLEPROC) (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount);
	PFNGLCOPYTEXTURELEVELSAPPLEPROC methodp_glCopyTextureLevelsAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glCopyTextureLevelsAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTextureLevelsAPPLE && args.Length() >= 4){
			obj->methodp_glCopyTextureLevelsAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint destinationTexture */,
				(GLuint )(args[1]->NumberValue())/* GLuint sourceTexture */,
				(GLint )(args[2]->NumberValue())/* GLint sourceBaseLevel */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei sourceLevelCount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC methodp_glCopyTextureSubImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTextureSubImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTextureSubImage1DEXT && args.Length() >= 7){
			obj->methodp_glCopyTextureSubImage1DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint x */,
				(GLint )(args[5]->NumberValue())/* GLint y */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC methodp_glCopyTextureSubImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTextureSubImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTextureSubImage2DEXT && args.Length() >= 9){
			obj->methodp_glCopyTextureSubImage2DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLint )(args[5]->NumberValue())/* GLint x */,
				(GLint )(args[6]->NumberValue())/* GLint y */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC methodp_glCopyTextureSubImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glCopyTextureSubImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCopyTextureSubImage3DEXT && args.Length() >= 10){
			obj->methodp_glCopyTextureSubImage3DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */,
				(GLint )(args[6]->NumberValue())/* GLint x */,
				(GLint )(args[7]->NumberValue())/* GLint y */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[9]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
	PFNGLCOVERFILLPATHINSTANCEDNVPROC methodp_glCoverFillPathInstancedNV{nullptr};
	static v8::Handle<v8::Value> method_glCoverFillPathInstancedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCoverFillPathInstancedNV && args.Length() >= 7){
			obj->methodp_glCoverFillPathInstancedNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei numPaths */,
				(GLenum )(args[1]->NumberValue())/* GLenum pathNameType */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *paths */,
				(GLuint )(args[3]->NumberValue())/* GLuint pathBase */,
				(GLenum )(args[4]->NumberValue())/* GLenum coverMode */,
				(GLenum )(args[5]->NumberValue())/* GLenum transformType */,
				(const GLfloat *)((int64_t)args[6]->NumberValue())/* const GLfloat *transformValues */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);
	PFNGLCOVERFILLPATHNVPROC methodp_glCoverFillPathNV{nullptr};
	static v8::Handle<v8::Value> method_glCoverFillPathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCoverFillPathNV && args.Length() >= 2){
			obj->methodp_glCoverFillPathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum coverMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);
	PFNGLCOVERSTROKEPATHINSTANCEDNVPROC methodp_glCoverStrokePathInstancedNV{nullptr};
	static v8::Handle<v8::Value> method_glCoverStrokePathInstancedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCoverStrokePathInstancedNV && args.Length() >= 7){
			obj->methodp_glCoverStrokePathInstancedNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei numPaths */,
				(GLenum )(args[1]->NumberValue())/* GLenum pathNameType */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *paths */,
				(GLuint )(args[3]->NumberValue())/* GLuint pathBase */,
				(GLenum )(args[4]->NumberValue())/* GLenum coverMode */,
				(GLenum )(args[5]->NumberValue())/* GLenum transformType */,
				(const GLfloat *)((int64_t)args[6]->NumberValue())/* const GLfloat *transformValues */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);
	PFNGLCOVERSTROKEPATHNVPROC methodp_glCoverStrokePathNV{nullptr};
	static v8::Handle<v8::Value> method_glCoverStrokePathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCoverStrokePathNV && args.Length() >= 2){
			obj->methodp_glCoverStrokePathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum coverMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOVERAGEMASKNVPROC) (GLboolean mask);
	PFNGLCOVERAGEMASKNVPROC methodp_glCoverageMaskNV{nullptr};
	static v8::Handle<v8::Value> method_glCoverageMaskNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCoverageMaskNV && args.Length() >= 1){
			obj->methodp_glCoverageMaskNV(
				(GLboolean )(args[0]->NumberValue())/* GLboolean mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCOVERAGEOPERATIONNVPROC) (GLenum operation);
	PFNGLCOVERAGEOPERATIONNVPROC methodp_glCoverageOperationNV{nullptr};
	static v8::Handle<v8::Value> method_glCoverageOperationNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCoverageOperationNV && args.Length() >= 1){
			obj->methodp_glCoverageOperationNV(
				(GLenum )(args[0]->NumberValue())/* GLenum operation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint *queryHandle);
	PFNGLCREATEPERFQUERYINTELPROC methodp_glCreatePerfQueryINTEL{nullptr};
	static v8::Handle<v8::Value> method_glCreatePerfQueryINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreatePerfQueryINTEL && args.Length() >= 2){
			obj->methodp_glCreatePerfQueryINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint queryId */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *queryHandle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) ();
	PFNGLCREATEPROGRAMPROC methodp_glCreateProgram{nullptr};
	static v8::Handle<v8::Value> method_glCreateProgram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreateProgram && args.Length() >= 0){
			obj->methodp_glCreateProgram(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLhandleARB (APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC) ();
	PFNGLCREATEPROGRAMOBJECTARBPROC methodp_glCreateProgramObjectARB{nullptr};
	static v8::Handle<v8::Value> method_glCreateProgramObjectARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreateProgramObjectARB && args.Length() >= 0){
			obj->methodp_glCreateProgramObjectARB(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
	PFNGLCREATESHADERPROC methodp_glCreateShader{nullptr};
	static v8::Handle<v8::Value> method_glCreateShader(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreateShader && args.Length() >= 1){
			obj->methodp_glCreateShader(
				(GLenum )(args[0]->NumberValue())/* GLenum type */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLhandleARB (APIENTRYP PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
	PFNGLCREATESHADEROBJECTARBPROC methodp_glCreateShaderObjectARB{nullptr};
	static v8::Handle<v8::Value> method_glCreateShaderObjectARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreateShaderObjectARB && args.Length() >= 1){
			obj->methodp_glCreateShaderObjectARB(
				(GLenum )(args[0]->NumberValue())/* GLenum shaderType */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);
	PFNGLCREATESHADERPROGRAMEXTPROC methodp_glCreateShaderProgramEXT{nullptr};
	static v8::Handle<v8::Value> method_glCreateShaderProgramEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreateShaderProgramEXT && args.Length() >= 2){
			obj->methodp_glCreateShaderProgramEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *string */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings);
	PFNGLCREATESHADERPROGRAMVPROC methodp_glCreateShaderProgramv{nullptr};
	static v8::Handle<v8::Value> method_glCreateShaderProgramv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreateShaderProgramv && args.Length() >= 3){
			obj->methodp_glCreateShaderProgramv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLchar *const*)((int64_t)args[2]->NumberValue())/* const GLchar *const*strings */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVEXTPROC) (GLenum type, GLsizei count, const GLchar **strings);
	PFNGLCREATESHADERPROGRAMVEXTPROC methodp_glCreateShaderProgramvEXT{nullptr};
	static v8::Handle<v8::Value> method_glCreateShaderProgramvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreateShaderProgramvEXT && args.Length() >= 3){
			obj->methodp_glCreateShaderProgramvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLchar **)((int64_t)args[2]->NumberValue())/* const GLchar **strings */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
	PFNGLCREATESYNCFROMCLEVENTARBPROC methodp_glCreateSyncFromCLeventARB{nullptr};
	static v8::Handle<v8::Value> method_glCreateSyncFromCLeventARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCreateSyncFromCLeventARB && args.Length() >= 3){
			obj->methodp_glCreateSyncFromCLeventARB(
				(struct _cl_context *)((int64_t)args[0]->NumberValue())/* struct _cl_context *context */,
				(struct _cl_event *)((int64_t)args[1]->NumberValue())/* struct _cl_event *event */,
				(GLbitfield )(args[2]->NumberValue())/* GLbitfield flags */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCULLFACEPROC) (GLenum mode);
	PFNGLCULLFACEPROC methodp_glCullFace{nullptr};
	static v8::Handle<v8::Value> method_glCullFace(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCullFace && args.Length() >= 1){
			obj->methodp_glCullFace(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);
	PFNGLCULLPARAMETERDVEXTPROC methodp_glCullParameterdvEXT{nullptr};
	static v8::Handle<v8::Value> method_glCullParameterdvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCullParameterdvEXT && args.Length() >= 2){
			obj->methodp_glCullParameterdvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[1]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);
	PFNGLCULLPARAMETERFVEXTPROC methodp_glCullParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glCullParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCullParameterfvEXT && args.Length() >= 2){
			obj->methodp_glCullParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
	PFNGLCURRENTPALETTEMATRIXARBPROC methodp_glCurrentPaletteMatrixARB{nullptr};
	static v8::Handle<v8::Value> method_glCurrentPaletteMatrixARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCurrentPaletteMatrixARB && args.Length() >= 1){
			obj->methodp_glCurrentPaletteMatrixARB(
				(GLint )(args[0]->NumberValue())/* GLint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXOESPROC) (GLuint matrixpaletteindex);
	PFNGLCURRENTPALETTEMATRIXOESPROC methodp_glCurrentPaletteMatrixOES{nullptr};
	static v8::Handle<v8::Value> method_glCurrentPaletteMatrixOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glCurrentPaletteMatrixOES && args.Length() >= 1){
			obj->methodp_glCurrentPaletteMatrixOES(
				(GLuint )(args[0]->NumberValue())/* GLuint matrixpaletteindex */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);
	PFNGLDEBUGMESSAGECALLBACKPROC methodp_glDebugMessageCallback{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageCallback(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageCallback && args.Length() >= 2){
			obj->methodp_glDebugMessageCallback(
				(GLDEBUGPROC )((int64_t)args[0]->NumberValue())/* GLDEBUGPROC callback */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *userParam */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam);
	PFNGLDEBUGMESSAGECALLBACKAMDPROC methodp_glDebugMessageCallbackAMD{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageCallbackAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageCallbackAMD && args.Length() >= 2){
			obj->methodp_glDebugMessageCallbackAMD(
				(GLDEBUGPROCAMD )((int64_t)args[0]->NumberValue())/* GLDEBUGPROCAMD callback */,
				(void *)((int64_t)args[1]->NumberValue())/* void *userParam */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);
	PFNGLDEBUGMESSAGECALLBACKARBPROC methodp_glDebugMessageCallbackARB{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageCallbackARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageCallbackARB && args.Length() >= 2){
			obj->methodp_glDebugMessageCallbackARB(
				(GLDEBUGPROCARB )((int64_t)args[0]->NumberValue())/* GLDEBUGPROCARB callback */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *userParam */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKKHRPROC) (GLDEBUGPROCKHR callback, const void *userParam);
	PFNGLDEBUGMESSAGECALLBACKKHRPROC methodp_glDebugMessageCallbackKHR{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageCallbackKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageCallbackKHR && args.Length() >= 2){
			obj->methodp_glDebugMessageCallbackKHR(
				(GLDEBUGPROCKHR )((int64_t)args[0]->NumberValue())/* GLDEBUGPROCKHR callback */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *userParam */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	PFNGLDEBUGMESSAGECONTROLPROC methodp_glDebugMessageControl{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageControl(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageControl && args.Length() >= 6){
			obj->methodp_glDebugMessageControl(
				(GLenum )(args[0]->NumberValue())/* GLenum source */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLenum )(args[2]->NumberValue())/* GLenum severity */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[4]->NumberValue())/* const GLuint *ids */,
				(GLboolean )(args[5]->NumberValue())/* GLboolean enabled */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	PFNGLDEBUGMESSAGECONTROLARBPROC methodp_glDebugMessageControlARB{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageControlARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageControlARB && args.Length() >= 6){
			obj->methodp_glDebugMessageControlARB(
				(GLenum )(args[0]->NumberValue())/* GLenum source */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLenum )(args[2]->NumberValue())/* GLenum severity */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[4]->NumberValue())/* const GLuint *ids */,
				(GLboolean )(args[5]->NumberValue())/* GLboolean enabled */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLKHRPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	PFNGLDEBUGMESSAGECONTROLKHRPROC methodp_glDebugMessageControlKHR{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageControlKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageControlKHR && args.Length() >= 6){
			obj->methodp_glDebugMessageControlKHR(
				(GLenum )(args[0]->NumberValue())/* GLenum source */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLenum )(args[2]->NumberValue())/* GLenum severity */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[4]->NumberValue())/* const GLuint *ids */,
				(GLboolean )(args[5]->NumberValue())/* GLboolean enabled */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
	PFNGLDEBUGMESSAGEENABLEAMDPROC methodp_glDebugMessageEnableAMD{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageEnableAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageEnableAMD && args.Length() >= 5){
			obj->methodp_glDebugMessageEnableAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum category */,
				(GLenum )(args[1]->NumberValue())/* GLenum severity */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *ids */,
				(GLboolean )(args[4]->NumberValue())/* GLboolean enabled */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	PFNGLDEBUGMESSAGEINSERTPROC methodp_glDebugMessageInsert{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageInsert(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageInsert && args.Length() >= 6){
			obj->methodp_glDebugMessageInsert(
				(GLenum )(args[0]->NumberValue())/* GLenum source */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLuint )(args[2]->NumberValue())/* GLuint id */,
				(GLenum )(args[3]->NumberValue())/* GLenum severity */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[5]->NumberValue())/* const GLchar *buf */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
	PFNGLDEBUGMESSAGEINSERTAMDPROC methodp_glDebugMessageInsertAMD{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageInsertAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageInsertAMD && args.Length() >= 5){
			obj->methodp_glDebugMessageInsertAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum category */,
				(GLenum )(args[1]->NumberValue())/* GLenum severity */,
				(GLuint )(args[2]->NumberValue())/* GLuint id */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[4]->NumberValue())/* const GLchar *buf */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	PFNGLDEBUGMESSAGEINSERTARBPROC methodp_glDebugMessageInsertARB{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageInsertARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageInsertARB && args.Length() >= 6){
			obj->methodp_glDebugMessageInsertARB(
				(GLenum )(args[0]->NumberValue())/* GLenum source */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLuint )(args[2]->NumberValue())/* GLuint id */,
				(GLenum )(args[3]->NumberValue())/* GLenum severity */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[5]->NumberValue())/* const GLchar *buf */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTKHRPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
	PFNGLDEBUGMESSAGEINSERTKHRPROC methodp_glDebugMessageInsertKHR{nullptr};
	static v8::Handle<v8::Value> method_glDebugMessageInsertKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDebugMessageInsertKHR && args.Length() >= 6){
			obj->methodp_glDebugMessageInsertKHR(
				(GLenum )(args[0]->NumberValue())/* GLenum source */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLuint )(args[2]->NumberValue())/* GLuint id */,
				(GLenum )(args[3]->NumberValue())/* GLenum severity */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[5]->NumberValue())/* const GLchar *buf */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEFORMSGIXPROC) (GLbitfield mask);
	PFNGLDEFORMSGIXPROC methodp_glDeformSGIX{nullptr};
	static v8::Handle<v8::Value> method_glDeformSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeformSGIX && args.Length() >= 1){
			obj->methodp_glDeformSGIX(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
	PFNGLDEFORMATIONMAP3DSGIXPROC methodp_glDeformationMap3dSGIX{nullptr};
	static v8::Handle<v8::Value> method_glDeformationMap3dSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeformationMap3dSGIX && args.Length() >= 14){
			obj->methodp_glDeformationMap3dSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble u1 */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble u2 */,
				(GLint )(args[3]->NumberValue())/* GLint ustride */,
				(GLint )(args[4]->NumberValue())/* GLint uorder */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble v1 */,
				(GLdouble )(args[6]->NumberValue())/* GLdouble v2 */,
				(GLint )(args[7]->NumberValue())/* GLint vstride */,
				(GLint )(args[8]->NumberValue())/* GLint vorder */,
				(GLdouble )(args[9]->NumberValue())/* GLdouble w1 */,
				(GLdouble )(args[10]->NumberValue())/* GLdouble w2 */,
				(GLint )(args[11]->NumberValue())/* GLint wstride */,
				(GLint )(args[12]->NumberValue())/* GLint worder */,
				(const GLdouble *)((int64_t)args[13]->NumberValue())/* const GLdouble *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
	PFNGLDEFORMATIONMAP3FSGIXPROC methodp_glDeformationMap3fSGIX{nullptr};
	static v8::Handle<v8::Value> method_glDeformationMap3fSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeformationMap3fSGIX && args.Length() >= 14){
			obj->methodp_glDeformationMap3fSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat u1 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat u2 */,
				(GLint )(args[3]->NumberValue())/* GLint ustride */,
				(GLint )(args[4]->NumberValue())/* GLint uorder */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat v2 */,
				(GLint )(args[7]->NumberValue())/* GLint vstride */,
				(GLint )(args[8]->NumberValue())/* GLint vorder */,
				(GLfloat )(args[9]->NumberValue())/* GLfloat w1 */,
				(GLfloat )(args[10]->NumberValue())/* GLfloat w2 */,
				(GLint )(args[11]->NumberValue())/* GLint wstride */,
				(GLint )(args[12]->NumberValue())/* GLint worder */,
				(const GLfloat *)((int64_t)args[13]->NumberValue())/* const GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
	PFNGLDELETEASYNCMARKERSSGIXPROC methodp_glDeleteAsyncMarkersSGIX{nullptr};
	static v8::Handle<v8::Value> method_glDeleteAsyncMarkersSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteAsyncMarkersSGIX && args.Length() >= 2){
			obj->methodp_glDeleteAsyncMarkersSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint marker */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei range */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
	PFNGLDELETEBUFFERSPROC methodp_glDeleteBuffers{nullptr};
	static v8::Handle<v8::Value> method_glDeleteBuffers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteBuffers && args.Length() >= 2){
			obj->methodp_glDeleteBuffers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *buffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);
	PFNGLDELETEBUFFERSARBPROC methodp_glDeleteBuffersARB{nullptr};
	static v8::Handle<v8::Value> method_glDeleteBuffersARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteBuffersARB && args.Length() >= 2){
			obj->methodp_glDeleteBuffersARB(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *buffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);
	PFNGLDELETEFENCESAPPLEPROC methodp_glDeleteFencesAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glDeleteFencesAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteFencesAPPLE && args.Length() >= 2){
			obj->methodp_glDeleteFencesAPPLE(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *fences */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);
	PFNGLDELETEFENCESNVPROC methodp_glDeleteFencesNV{nullptr};
	static v8::Handle<v8::Value> method_glDeleteFencesNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteFencesNV && args.Length() >= 2){
			obj->methodp_glDeleteFencesNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *fences */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
	PFNGLDELETEFRAGMENTSHADERATIPROC methodp_glDeleteFragmentShaderATI{nullptr};
	static v8::Handle<v8::Value> method_glDeleteFragmentShaderATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteFragmentShaderATI && args.Length() >= 1){
			obj->methodp_glDeleteFragmentShaderATI(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);
	PFNGLDELETEFRAMEBUFFERSPROC methodp_glDeleteFramebuffers{nullptr};
	static v8::Handle<v8::Value> method_glDeleteFramebuffers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteFramebuffers && args.Length() >= 2){
			obj->methodp_glDeleteFramebuffers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *framebuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers);
	PFNGLDELETEFRAMEBUFFERSEXTPROC methodp_glDeleteFramebuffersEXT{nullptr};
	static v8::Handle<v8::Value> method_glDeleteFramebuffersEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteFramebuffersEXT && args.Length() >= 2){
			obj->methodp_glDeleteFramebuffersEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *framebuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSOESPROC) (GLsizei n, const GLuint *framebuffers);
	PFNGLDELETEFRAMEBUFFERSOESPROC methodp_glDeleteFramebuffersOES{nullptr};
	static v8::Handle<v8::Value> method_glDeleteFramebuffersOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteFramebuffersOES && args.Length() >= 2){
			obj->methodp_glDeleteFramebuffersOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *framebuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETELISTSPROC) (GLuint list, GLsizei range);
	PFNGLDELETELISTSPROC methodp_glDeleteLists{nullptr};
	static v8::Handle<v8::Value> method_glDeleteLists(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteLists && args.Length() >= 2){
			obj->methodp_glDeleteLists(
				(GLuint )(args[0]->NumberValue())/* GLuint list */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei range */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
	PFNGLDELETENAMEDSTRINGARBPROC methodp_glDeleteNamedStringARB{nullptr};
	static v8::Handle<v8::Value> method_glDeleteNamedStringARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteNamedStringARB && args.Length() >= 2){
			obj->methodp_glDeleteNamedStringARB(
				(GLint )(args[0]->NumberValue())/* GLint namelen */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names);
	PFNGLDELETENAMESAMDPROC methodp_glDeleteNamesAMD{nullptr};
	static v8::Handle<v8::Value> method_glDeleteNamesAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteNamesAMD && args.Length() >= 3){
			obj->methodp_glDeleteNamesAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum identifier */,
				(GLuint )(args[1]->NumberValue())/* GLuint num */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *names */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
	PFNGLDELETEOBJECTARBPROC methodp_glDeleteObjectARB{nullptr};
	static v8::Handle<v8::Value> method_glDeleteObjectARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteObjectARB && args.Length() >= 1){
			obj->methodp_glDeleteObjectARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB obj */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);
	PFNGLDELETEOCCLUSIONQUERIESNVPROC methodp_glDeleteOcclusionQueriesNV{nullptr};
	static v8::Handle<v8::Value> method_glDeleteOcclusionQueriesNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteOcclusionQueriesNV && args.Length() >= 2){
			obj->methodp_glDeleteOcclusionQueriesNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range);
	PFNGLDELETEPATHSNVPROC methodp_glDeletePathsNV{nullptr};
	static v8::Handle<v8::Value> method_glDeletePathsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeletePathsNV && args.Length() >= 2){
			obj->methodp_glDeletePathsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei range */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
	PFNGLDELETEPERFMONITORSAMDPROC methodp_glDeletePerfMonitorsAMD{nullptr};
	static v8::Handle<v8::Value> method_glDeletePerfMonitorsAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeletePerfMonitorsAMD && args.Length() >= 2){
			obj->methodp_glDeletePerfMonitorsAMD(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *monitors */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle);
	PFNGLDELETEPERFQUERYINTELPROC methodp_glDeletePerfQueryINTEL{nullptr};
	static v8::Handle<v8::Value> method_glDeletePerfQueryINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeletePerfQueryINTEL && args.Length() >= 1){
			obj->methodp_glDeletePerfQueryINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint queryHandle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);
	PFNGLDELETEPROGRAMPROC methodp_glDeleteProgram{nullptr};
	static v8::Handle<v8::Value> method_glDeleteProgram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteProgram && args.Length() >= 1){
			obj->methodp_glDeleteProgram(
				(GLuint )(args[0]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);
	PFNGLDELETEPROGRAMPIPELINESPROC methodp_glDeleteProgramPipelines{nullptr};
	static v8::Handle<v8::Value> method_glDeleteProgramPipelines(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteProgramPipelines && args.Length() >= 2){
			obj->methodp_glDeleteProgramPipelines(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *pipelines */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESEXTPROC) (GLsizei n, const GLuint *pipelines);
	PFNGLDELETEPROGRAMPIPELINESEXTPROC methodp_glDeleteProgramPipelinesEXT{nullptr};
	static v8::Handle<v8::Value> method_glDeleteProgramPipelinesEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteProgramPipelinesEXT && args.Length() >= 2){
			obj->methodp_glDeleteProgramPipelinesEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *pipelines */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);
	PFNGLDELETEPROGRAMSARBPROC methodp_glDeleteProgramsARB{nullptr};
	static v8::Handle<v8::Value> method_glDeleteProgramsARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteProgramsARB && args.Length() >= 2){
			obj->methodp_glDeleteProgramsARB(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *programs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
	PFNGLDELETEPROGRAMSNVPROC methodp_glDeleteProgramsNV{nullptr};
	static v8::Handle<v8::Value> method_glDeleteProgramsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteProgramsNV && args.Length() >= 2){
			obj->methodp_glDeleteProgramsNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *programs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);
	PFNGLDELETEQUERIESPROC methodp_glDeleteQueries{nullptr};
	static v8::Handle<v8::Value> method_glDeleteQueries(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteQueries && args.Length() >= 2){
			obj->methodp_glDeleteQueries(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);
	PFNGLDELETEQUERIESARBPROC methodp_glDeleteQueriesARB{nullptr};
	static v8::Handle<v8::Value> method_glDeleteQueriesARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteQueriesARB && args.Length() >= 2){
			obj->methodp_glDeleteQueriesARB(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEQUERIESEXTPROC) (GLsizei n, const GLuint *ids);
	PFNGLDELETEQUERIESEXTPROC methodp_glDeleteQueriesEXT{nullptr};
	static v8::Handle<v8::Value> method_glDeleteQueriesEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteQueriesEXT && args.Length() >= 2){
			obj->methodp_glDeleteQueriesEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);
	PFNGLDELETERENDERBUFFERSPROC methodp_glDeleteRenderbuffers{nullptr};
	static v8::Handle<v8::Value> method_glDeleteRenderbuffers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteRenderbuffers && args.Length() >= 2){
			obj->methodp_glDeleteRenderbuffers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *renderbuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers);
	PFNGLDELETERENDERBUFFERSEXTPROC methodp_glDeleteRenderbuffersEXT{nullptr};
	static v8::Handle<v8::Value> method_glDeleteRenderbuffersEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteRenderbuffersEXT && args.Length() >= 2){
			obj->methodp_glDeleteRenderbuffersEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *renderbuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSOESPROC) (GLsizei n, const GLuint *renderbuffers);
	PFNGLDELETERENDERBUFFERSOESPROC methodp_glDeleteRenderbuffersOES{nullptr};
	static v8::Handle<v8::Value> method_glDeleteRenderbuffersOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteRenderbuffersOES && args.Length() >= 2){
			obj->methodp_glDeleteRenderbuffersOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *renderbuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);
	PFNGLDELETESAMPLERSPROC methodp_glDeleteSamplers{nullptr};
	static v8::Handle<v8::Value> method_glDeleteSamplers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteSamplers && args.Length() >= 2){
			obj->methodp_glDeleteSamplers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *samplers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
	PFNGLDELETESHADERPROC methodp_glDeleteShader{nullptr};
	static v8::Handle<v8::Value> method_glDeleteShader(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteShader && args.Length() >= 1){
			obj->methodp_glDeleteShader(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);
	PFNGLDELETESYNCPROC methodp_glDeleteSync{nullptr};
	static v8::Handle<v8::Value> method_glDeleteSync(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteSync && args.Length() >= 1){
			obj->methodp_glDeleteSync(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETESYNCAPPLEPROC) (GLsync sync);
	PFNGLDELETESYNCAPPLEPROC methodp_glDeleteSyncAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glDeleteSyncAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteSyncAPPLE && args.Length() >= 1){
			obj->methodp_glDeleteSyncAPPLE(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);
	PFNGLDELETETEXTURESPROC methodp_glDeleteTextures{nullptr};
	static v8::Handle<v8::Value> method_glDeleteTextures(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteTextures && args.Length() >= 2){
			obj->methodp_glDeleteTextures(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *textures */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);
	PFNGLDELETETEXTURESEXTPROC methodp_glDeleteTexturesEXT{nullptr};
	static v8::Handle<v8::Value> method_glDeleteTexturesEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteTexturesEXT && args.Length() >= 2){
			obj->methodp_glDeleteTexturesEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *textures */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);
	PFNGLDELETETRANSFORMFEEDBACKSPROC methodp_glDeleteTransformFeedbacks{nullptr};
	static v8::Handle<v8::Value> method_glDeleteTransformFeedbacks(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteTransformFeedbacks && args.Length() >= 2){
			obj->methodp_glDeleteTransformFeedbacks(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids);
	PFNGLDELETETRANSFORMFEEDBACKSNVPROC methodp_glDeleteTransformFeedbacksNV{nullptr};
	static v8::Handle<v8::Value> method_glDeleteTransformFeedbacksNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteTransformFeedbacksNV && args.Length() >= 2){
			obj->methodp_glDeleteTransformFeedbacksNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
	PFNGLDELETEVERTEXARRAYSPROC methodp_glDeleteVertexArrays{nullptr};
	static v8::Handle<v8::Value> method_glDeleteVertexArrays(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteVertexArrays && args.Length() >= 2){
			obj->methodp_glDeleteVertexArrays(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *arrays */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
	PFNGLDELETEVERTEXARRAYSAPPLEPROC methodp_glDeleteVertexArraysAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glDeleteVertexArraysAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteVertexArraysAPPLE && args.Length() >= 2){
			obj->methodp_glDeleteVertexArraysAPPLE(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *arrays */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSOESPROC) (GLsizei n, const GLuint *arrays);
	PFNGLDELETEVERTEXARRAYSOESPROC methodp_glDeleteVertexArraysOES{nullptr};
	static v8::Handle<v8::Value> method_glDeleteVertexArraysOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteVertexArraysOES && args.Length() >= 2){
			obj->methodp_glDeleteVertexArraysOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *arrays */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
	PFNGLDELETEVERTEXSHADEREXTPROC methodp_glDeleteVertexShaderEXT{nullptr};
	static v8::Handle<v8::Value> method_glDeleteVertexShaderEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDeleteVertexShaderEXT && args.Length() >= 1){
			obj->methodp_glDeleteVertexShaderEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
	PFNGLDEPTHBOUNDSEXTPROC methodp_glDepthBoundsEXT{nullptr};
	static v8::Handle<v8::Value> method_glDepthBoundsEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthBoundsEXT && args.Length() >= 2){
			obj->methodp_glDepthBoundsEXT(
				(GLclampd )(args[0]->NumberValue())/* GLclampd zmin */,
				(GLclampd )(args[1]->NumberValue())/* GLclampd zmax */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
	PFNGLDEPTHBOUNDSDNVPROC methodp_glDepthBoundsdNV{nullptr};
	static v8::Handle<v8::Value> method_glDepthBoundsdNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthBoundsdNV && args.Length() >= 2){
			obj->methodp_glDepthBoundsdNV(
				(GLdouble )(args[0]->NumberValue())/* GLdouble zmin */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble zmax */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHFUNCPROC) (GLenum func);
	PFNGLDEPTHFUNCPROC methodp_glDepthFunc{nullptr};
	static v8::Handle<v8::Value> method_glDepthFunc(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthFunc && args.Length() >= 1){
			obj->methodp_glDepthFunc(
				(GLenum )(args[0]->NumberValue())/* GLenum func */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHMASKPROC) (GLboolean flag);
	PFNGLDEPTHMASKPROC methodp_glDepthMask{nullptr};
	static v8::Handle<v8::Value> method_glDepthMask(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthMask && args.Length() >= 1){
			obj->methodp_glDepthMask(
				(GLboolean )(args[0]->NumberValue())/* GLboolean flag */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHRANGEPROC) (GLdouble near, GLdouble far);
	PFNGLDEPTHRANGEPROC methodp_glDepthRange{nullptr};
	static v8::Handle<v8::Value> method_glDepthRange(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthRange && args.Length() >= 2){
			obj->methodp_glDepthRange(
				(GLdouble )(args[0]->NumberValue())/* GLdouble near */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble far */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v);
	PFNGLDEPTHRANGEARRAYVPROC methodp_glDepthRangeArrayv{nullptr};
	static v8::Handle<v8::Value> method_glDepthRangeArrayv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthRangeArrayv && args.Length() >= 3){
			obj->methodp_glDepthRangeArrayv(
				(GLuint )(args[0]->NumberValue())/* GLuint first */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);
	PFNGLDEPTHRANGEINDEXEDPROC methodp_glDepthRangeIndexed{nullptr};
	static v8::Handle<v8::Value> method_glDepthRangeIndexed(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthRangeIndexed && args.Length() >= 3){
			obj->methodp_glDepthRangeIndexed(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble n */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
	PFNGLDEPTHRANGEDNVPROC methodp_glDepthRangedNV{nullptr};
	static v8::Handle<v8::Value> method_glDepthRangedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthRangedNV && args.Length() >= 2){
			obj->methodp_glDepthRangedNV(
				(GLdouble )(args[0]->NumberValue())/* GLdouble zNear */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble zFar */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);
	PFNGLDEPTHRANGEFPROC methodp_glDepthRangef{nullptr};
	static v8::Handle<v8::Value> method_glDepthRangef(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthRangef && args.Length() >= 2){
			obj->methodp_glDepthRangef(
				(GLfloat )(args[0]->NumberValue())/* GLfloat n */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f);
	PFNGLDEPTHRANGEFOESPROC methodp_glDepthRangefOES{nullptr};
	static v8::Handle<v8::Value> method_glDepthRangefOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthRangefOES && args.Length() >= 2){
			obj->methodp_glDepthRangefOES(
				(GLclampf )(args[0]->NumberValue())/* GLclampf n */,
				(GLclampf )(args[1]->NumberValue())/* GLclampf f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHRANGEXPROC) (GLfixed n, GLfixed f);
	PFNGLDEPTHRANGEXPROC methodp_glDepthRangex{nullptr};
	static v8::Handle<v8::Value> method_glDepthRangex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthRangex && args.Length() >= 2){
			obj->methodp_glDepthRangex(
				(GLfixed )(args[0]->NumberValue())/* GLfixed n */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDEPTHRANGEXOESPROC) (GLfixed n, GLfixed f);
	PFNGLDEPTHRANGEXOESPROC methodp_glDepthRangexOES{nullptr};
	static v8::Handle<v8::Value> method_glDepthRangexOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDepthRangexOES && args.Length() >= 2){
			obj->methodp_glDepthRangexOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed n */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
	PFNGLDETACHOBJECTARBPROC methodp_glDetachObjectARB{nullptr};
	static v8::Handle<v8::Value> method_glDetachObjectARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDetachObjectARB && args.Length() >= 2){
			obj->methodp_glDetachObjectARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB containerObj */,
				(GLhandleARB )(args[1]->NumberValue())/* GLhandleARB attachedObj */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
	PFNGLDETACHSHADERPROC methodp_glDetachShader{nullptr};
	static v8::Handle<v8::Value> method_glDetachShader(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDetachShader && args.Length() >= 2){
			obj->methodp_glDetachShader(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint shader */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
	PFNGLDETAILTEXFUNCSGISPROC methodp_glDetailTexFuncSGIS{nullptr};
	static v8::Handle<v8::Value> method_glDetailTexFuncSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDetailTexFuncSGIS && args.Length() >= 3){
			obj->methodp_glDetailTexFuncSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei n */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);
	PFNGLDISABLEPROC methodp_glDisable{nullptr};
	static v8::Handle<v8::Value> method_glDisable(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisable && args.Length() >= 1){
			obj->methodp_glDisable(
				(GLenum )(args[0]->NumberValue())/* GLenum cap */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEPROC) (GLenum array);
	PFNGLDISABLECLIENTSTATEPROC methodp_glDisableClientState{nullptr};
	static v8::Handle<v8::Value> method_glDisableClientState(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableClientState && args.Length() >= 1){
			obj->methodp_glDisableClientState(
				(GLenum )(args[0]->NumberValue())/* GLenum array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
	PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC methodp_glDisableClientStateIndexedEXT{nullptr};
	static v8::Handle<v8::Value> method_glDisableClientStateIndexedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableClientStateIndexedEXT && args.Length() >= 2){
			obj->methodp_glDisableClientStateIndexedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum array */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
	PFNGLDISABLECLIENTSTATEIEXTPROC methodp_glDisableClientStateiEXT{nullptr};
	static v8::Handle<v8::Value> method_glDisableClientStateiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableClientStateiEXT && args.Length() >= 2){
			obj->methodp_glDisableClientStateiEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum array */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl);
	PFNGLDISABLEDRIVERCONTROLQCOMPROC methodp_glDisableDriverControlQCOM{nullptr};
	static v8::Handle<v8::Value> method_glDisableDriverControlQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableDriverControlQCOM && args.Length() >= 1){
			obj->methodp_glDisableDriverControlQCOM(
				(GLuint )(args[0]->NumberValue())/* GLuint driverControl */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
	PFNGLDISABLEINDEXEDEXTPROC methodp_glDisableIndexedEXT{nullptr};
	static v8::Handle<v8::Value> method_glDisableIndexedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableIndexedEXT && args.Length() >= 2){
			obj->methodp_glDisableIndexedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
	PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC methodp_glDisableVariantClientStateEXT{nullptr};
	static v8::Handle<v8::Value> method_glDisableVariantClientStateEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableVariantClientStateEXT && args.Length() >= 1){
			obj->methodp_glDisableVariantClientStateEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
	PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC methodp_glDisableVertexArrayAttribEXT{nullptr};
	static v8::Handle<v8::Value> method_glDisableVertexArrayAttribEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableVertexArrayAttribEXT && args.Length() >= 2){
			obj->methodp_glDisableVertexArrayAttribEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
	PFNGLDISABLEVERTEXARRAYEXTPROC methodp_glDisableVertexArrayEXT{nullptr};
	static v8::Handle<v8::Value> method_glDisableVertexArrayEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableVertexArrayEXT && args.Length() >= 2){
			obj->methodp_glDisableVertexArrayEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLenum )(args[1]->NumberValue())/* GLenum array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
	PFNGLDISABLEVERTEXATTRIBAPPLEPROC methodp_glDisableVertexAttribAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glDisableVertexAttribAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableVertexAttribAPPLE && args.Length() >= 2){
			obj->methodp_glDisableVertexAttribAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
	PFNGLDISABLEVERTEXATTRIBARRAYPROC methodp_glDisableVertexAttribArray{nullptr};
	static v8::Handle<v8::Value> method_glDisableVertexAttribArray(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableVertexAttribArray && args.Length() >= 1){
			obj->methodp_glDisableVertexAttribArray(
				(GLuint )(args[0]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
	PFNGLDISABLEVERTEXATTRIBARRAYARBPROC methodp_glDisableVertexAttribArrayARB{nullptr};
	static v8::Handle<v8::Value> method_glDisableVertexAttribArrayARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableVertexAttribArrayARB && args.Length() >= 1){
			obj->methodp_glDisableVertexAttribArrayARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);
	PFNGLDISABLEIPROC methodp_glDisablei{nullptr};
	static v8::Handle<v8::Value> method_glDisablei(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisablei && args.Length() >= 2){
			obj->methodp_glDisablei(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISABLEIEXTPROC) (GLenum target, GLuint index);
	PFNGLDISABLEIEXTPROC methodp_glDisableiEXT{nullptr};
	static v8::Handle<v8::Value> method_glDisableiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDisableiEXT && args.Length() >= 2){
			obj->methodp_glDisableiEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISCARDFRAMEBUFFEREXTPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);
	PFNGLDISCARDFRAMEBUFFEREXTPROC methodp_glDiscardFramebufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glDiscardFramebufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDiscardFramebufferEXT && args.Length() >= 3){
			obj->methodp_glDiscardFramebufferEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei numAttachments */,
				(const GLenum *)((int64_t)args[2]->NumberValue())/* const GLenum *attachments */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
	PFNGLDISPATCHCOMPUTEPROC methodp_glDispatchCompute{nullptr};
	static v8::Handle<v8::Value> method_glDispatchCompute(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDispatchCompute && args.Length() >= 3){
			obj->methodp_glDispatchCompute(
				(GLuint )(args[0]->NumberValue())/* GLuint num_groups_x */,
				(GLuint )(args[1]->NumberValue())/* GLuint num_groups_y */,
				(GLuint )(args[2]->NumberValue())/* GLuint num_groups_z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
	PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC methodp_glDispatchComputeGroupSizeARB{nullptr};
	static v8::Handle<v8::Value> method_glDispatchComputeGroupSizeARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDispatchComputeGroupSizeARB && args.Length() >= 6){
			obj->methodp_glDispatchComputeGroupSizeARB(
				(GLuint )(args[0]->NumberValue())/* GLuint num_groups_x */,
				(GLuint )(args[1]->NumberValue())/* GLuint num_groups_y */,
				(GLuint )(args[2]->NumberValue())/* GLuint num_groups_z */,
				(GLuint )(args[3]->NumberValue())/* GLuint group_size_x */,
				(GLuint )(args[4]->NumberValue())/* GLuint group_size_y */,
				(GLuint )(args[5]->NumberValue())/* GLuint group_size_z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);
	PFNGLDISPATCHCOMPUTEINDIRECTPROC methodp_glDispatchComputeIndirect{nullptr};
	static v8::Handle<v8::Value> method_glDispatchComputeIndirect(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDispatchComputeIndirect && args.Length() >= 1){
			obj->methodp_glDispatchComputeIndirect(
				(GLintptr )(args[0]->NumberValue())/* GLintptr indirect */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count);
	PFNGLDRAWARRAYSPROC methodp_glDrawArrays{nullptr};
	static v8::Handle<v8::Value> method_glDrawArrays(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArrays && args.Length() >= 3){
			obj->methodp_glDrawArrays(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
	PFNGLDRAWARRAYSEXTPROC methodp_glDrawArraysEXT{nullptr};
	static v8::Handle<v8::Value> method_glDrawArraysEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArraysEXT && args.Length() >= 3){
			obj->methodp_glDrawArraysEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);
	PFNGLDRAWARRAYSINDIRECTPROC methodp_glDrawArraysIndirect{nullptr};
	static v8::Handle<v8::Value> method_glDrawArraysIndirect(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArraysIndirect && args.Length() >= 2){
			obj->methodp_glDrawArraysIndirect(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *indirect */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
	PFNGLDRAWARRAYSINSTANCEDPROC methodp_glDrawArraysInstanced{nullptr};
	static v8::Handle<v8::Value> method_glDrawArraysInstanced(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArraysInstanced && args.Length() >= 4){
			obj->methodp_glDrawArraysInstanced(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei instancecount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDANGLEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
	PFNGLDRAWARRAYSINSTANCEDANGLEPROC methodp_glDrawArraysInstancedANGLE{nullptr};
	static v8::Handle<v8::Value> method_glDrawArraysInstancedANGLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArraysInstancedANGLE && args.Length() >= 4){
			obj->methodp_glDrawArraysInstancedANGLE(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
	PFNGLDRAWARRAYSINSTANCEDARBPROC methodp_glDrawArraysInstancedARB{nullptr};
	static v8::Handle<v8::Value> method_glDrawArraysInstancedARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArraysInstancedARB && args.Length() >= 4){
			obj->methodp_glDrawArraysInstancedARB(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
	PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC methodp_glDrawArraysInstancedBaseInstance{nullptr};
	static v8::Handle<v8::Value> method_glDrawArraysInstancedBaseInstance(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArraysInstancedBaseInstance && args.Length() >= 5){
			obj->methodp_glDrawArraysInstancedBaseInstance(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei instancecount */,
				(GLuint )(args[4]->NumberValue())/* GLuint baseinstance */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
	PFNGLDRAWARRAYSINSTANCEDEXTPROC methodp_glDrawArraysInstancedEXT{nullptr};
	static v8::Handle<v8::Value> method_glDrawArraysInstancedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArraysInstancedEXT && args.Length() >= 4){
			obj->methodp_glDrawArraysInstancedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint start */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDNVPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
	PFNGLDRAWARRAYSINSTANCEDNVPROC methodp_glDrawArraysInstancedNV{nullptr};
	static v8::Handle<v8::Value> method_glDrawArraysInstancedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawArraysInstancedNV && args.Length() >= 4){
			obj->methodp_glDrawArraysInstancedNV(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWBUFFERPROC) (GLenum mode);
	PFNGLDRAWBUFFERPROC methodp_glDrawBuffer{nullptr};
	static v8::Handle<v8::Value> method_glDrawBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawBuffer && args.Length() >= 1){
			obj->methodp_glDrawBuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);
	PFNGLDRAWBUFFERSPROC methodp_glDrawBuffers{nullptr};
	static v8::Handle<v8::Value> method_glDrawBuffers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawBuffers && args.Length() >= 2){
			obj->methodp_glDrawBuffers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLenum *)((int64_t)args[1]->NumberValue())/* const GLenum *bufs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);
	PFNGLDRAWBUFFERSARBPROC methodp_glDrawBuffersARB{nullptr};
	static v8::Handle<v8::Value> method_glDrawBuffersARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawBuffersARB && args.Length() >= 2){
			obj->methodp_glDrawBuffersARB(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLenum *)((int64_t)args[1]->NumberValue())/* const GLenum *bufs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);
	PFNGLDRAWBUFFERSATIPROC methodp_glDrawBuffersATI{nullptr};
	static v8::Handle<v8::Value> method_glDrawBuffersATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawBuffersATI && args.Length() >= 2){
			obj->methodp_glDrawBuffersATI(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLenum *)((int64_t)args[1]->NumberValue())/* const GLenum *bufs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWBUFFERSEXTPROC) (GLsizei n, const GLenum *bufs);
	PFNGLDRAWBUFFERSEXTPROC methodp_glDrawBuffersEXT{nullptr};
	static v8::Handle<v8::Value> method_glDrawBuffersEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawBuffersEXT && args.Length() >= 2){
			obj->methodp_glDrawBuffersEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLenum *)((int64_t)args[1]->NumberValue())/* const GLenum *bufs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWBUFFERSINDEXEDEXTPROC) (GLint n, const GLenum *location, const GLint *indices);
	PFNGLDRAWBUFFERSINDEXEDEXTPROC methodp_glDrawBuffersIndexedEXT{nullptr};
	static v8::Handle<v8::Value> method_glDrawBuffersIndexedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawBuffersIndexedEXT && args.Length() >= 3){
			obj->methodp_glDrawBuffersIndexedEXT(
				(GLint )(args[0]->NumberValue())/* GLint n */,
				(const GLenum *)((int64_t)args[1]->NumberValue())/* const GLenum *location */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *indices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWBUFFERSNVPROC) (GLsizei n, const GLenum *bufs);
	PFNGLDRAWBUFFERSNVPROC methodp_glDrawBuffersNV{nullptr};
	static v8::Handle<v8::Value> method_glDrawBuffersNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawBuffersNV && args.Length() >= 2){
			obj->methodp_glDrawBuffersNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLenum *)((int64_t)args[1]->NumberValue())/* const GLenum *bufs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
	PFNGLDRAWELEMENTARRAYAPPLEPROC methodp_glDrawElementArrayAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementArrayAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementArrayAPPLE && args.Length() >= 3){
			obj->methodp_glDrawElementArrayAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
	PFNGLDRAWELEMENTARRAYATIPROC methodp_glDrawElementArrayATI{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementArrayATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementArrayATI && args.Length() >= 2){
			obj->methodp_glDrawElementArrayATI(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices);
	PFNGLDRAWELEMENTSPROC methodp_glDrawElements{nullptr};
	static v8::Handle<v8::Value> method_glDrawElements(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElements && args.Length() >= 4){
			obj->methodp_glDrawElements(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	PFNGLDRAWELEMENTSBASEVERTEXPROC methodp_glDrawElementsBaseVertex{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsBaseVertex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsBaseVertex && args.Length() >= 5){
			obj->methodp_glDrawElementsBaseVertex(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLint )(args[4]->NumberValue())/* GLint basevertex */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);
	PFNGLDRAWELEMENTSINDIRECTPROC methodp_glDrawElementsIndirect{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsIndirect(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsIndirect && args.Length() >= 3){
			obj->methodp_glDrawElementsIndirect(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *indirect */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
	PFNGLDRAWELEMENTSINSTANCEDPROC methodp_glDrawElementsInstanced{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsInstanced(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsInstanced && args.Length() >= 5){
			obj->methodp_glDrawElementsInstanced(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei instancecount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDANGLEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
	PFNGLDRAWELEMENTSINSTANCEDANGLEPROC methodp_glDrawElementsInstancedANGLE{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsInstancedANGLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsInstancedANGLE && args.Length() >= 5){
			obj->methodp_glDrawElementsInstancedANGLE(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
	PFNGLDRAWELEMENTSINSTANCEDARBPROC methodp_glDrawElementsInstancedARB{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsInstancedARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsInstancedARB && args.Length() >= 5){
			obj->methodp_glDrawElementsInstancedARB(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
	PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC methodp_glDrawElementsInstancedBaseInstance{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsInstancedBaseInstance(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsInstancedBaseInstance && args.Length() >= 6){
			obj->methodp_glDrawElementsInstancedBaseInstance(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei instancecount */,
				(GLuint )(args[5]->NumberValue())/* GLuint baseinstance */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
	PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC methodp_glDrawElementsInstancedBaseVertex{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsInstancedBaseVertex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsInstancedBaseVertex && args.Length() >= 6){
			obj->methodp_glDrawElementsInstancedBaseVertex(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei instancecount */,
				(GLint )(args[5]->NumberValue())/* GLint basevertex */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
	PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC methodp_glDrawElementsInstancedBaseVertexBaseInstance{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsInstancedBaseVertexBaseInstance(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsInstancedBaseVertexBaseInstance && args.Length() >= 7){
			obj->methodp_glDrawElementsInstancedBaseVertexBaseInstance(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei instancecount */,
				(GLint )(args[5]->NumberValue())/* GLint basevertex */,
				(GLuint )(args[6]->NumberValue())/* GLuint baseinstance */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
	PFNGLDRAWELEMENTSINSTANCEDEXTPROC methodp_glDrawElementsInstancedEXT{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsInstancedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsInstancedEXT && args.Length() >= 5){
			obj->methodp_glDrawElementsInstancedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDNVPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);
	PFNGLDRAWELEMENTSINSTANCEDNVPROC methodp_glDrawElementsInstancedNV{nullptr};
	static v8::Handle<v8::Value> method_glDrawElementsInstancedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawElementsInstancedNV && args.Length() >= 5){
			obj->methodp_glDrawElementsInstancedNV(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);
	PFNGLDRAWMESHARRAYSSUNPROC methodp_glDrawMeshArraysSUN{nullptr};
	static v8::Handle<v8::Value> method_glDrawMeshArraysSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawMeshArraysSUN && args.Length() >= 4){
			obj->methodp_glDrawMeshArraysSUN(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint first */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWPIXELSPROC) (GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	PFNGLDRAWPIXELSPROC methodp_glDrawPixels{nullptr};
	static v8::Handle<v8::Value> method_glDrawPixels(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawPixels && args.Length() >= 5){
			obj->methodp_glDrawPixels(
				(GLsizei )(args[0]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei height */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
	PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC methodp_glDrawRangeElementArrayAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glDrawRangeElementArrayAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawRangeElementArrayAPPLE && args.Length() >= 5){
			obj->methodp_glDrawRangeElementArrayAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint start */,
				(GLuint )(args[2]->NumberValue())/* GLuint end */,
				(GLint )(args[3]->NumberValue())/* GLint first */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei count */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
	PFNGLDRAWRANGEELEMENTARRAYATIPROC methodp_glDrawRangeElementArrayATI{nullptr};
	static v8::Handle<v8::Value> method_glDrawRangeElementArrayATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawRangeElementArrayATI && args.Length() >= 4){
			obj->methodp_glDrawRangeElementArrayATI(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint start */,
				(GLuint )(args[2]->NumberValue())/* GLuint end */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
	PFNGLDRAWRANGEELEMENTSPROC methodp_glDrawRangeElements{nullptr};
	static v8::Handle<v8::Value> method_glDrawRangeElements(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawRangeElements && args.Length() >= 6){
			obj->methodp_glDrawRangeElements(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint start */,
				(GLuint )(args[2]->NumberValue())/* GLuint end */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *indices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
	PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC methodp_glDrawRangeElementsBaseVertex{nullptr};
	static v8::Handle<v8::Value> method_glDrawRangeElementsBaseVertex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawRangeElementsBaseVertex && args.Length() >= 7){
			obj->methodp_glDrawRangeElementsBaseVertex(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint start */,
				(GLuint )(args[2]->NumberValue())/* GLuint end */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *indices */,
				(GLint )(args[6]->NumberValue())/* GLint basevertex */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
	PFNGLDRAWRANGEELEMENTSEXTPROC methodp_glDrawRangeElementsEXT{nullptr};
	static v8::Handle<v8::Value> method_glDrawRangeElementsEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawRangeElementsEXT && args.Length() >= 6){
			obj->methodp_glDrawRangeElementsEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint start */,
				(GLuint )(args[2]->NumberValue())/* GLuint end */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *indices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXFOESPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
	PFNGLDRAWTEXFOESPROC methodp_glDrawTexfOES{nullptr};
	static v8::Handle<v8::Value> method_glDrawTexfOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTexfOES && args.Length() >= 5){
			obj->methodp_glDrawTexfOES(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat width */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXFVOESPROC) (const GLfloat *coords);
	PFNGLDRAWTEXFVOESPROC methodp_glDrawTexfvOES{nullptr};
	static v8::Handle<v8::Value> method_glDrawTexfvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTexfvOES && args.Length() >= 1){
			obj->methodp_glDrawTexfvOES(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXIOESPROC) (GLint x, GLint y, GLint z, GLint width, GLint height);
	PFNGLDRAWTEXIOESPROC methodp_glDrawTexiOES{nullptr};
	static v8::Handle<v8::Value> method_glDrawTexiOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTexiOES && args.Length() >= 5){
			obj->methodp_glDrawTexiOES(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */,
				(GLint )(args[3]->NumberValue())/* GLint width */,
				(GLint )(args[4]->NumberValue())/* GLint height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXIVOESPROC) (const GLint *coords);
	PFNGLDRAWTEXIVOESPROC methodp_glDrawTexivOES{nullptr};
	static v8::Handle<v8::Value> method_glDrawTexivOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTexivOES && args.Length() >= 1){
			obj->methodp_glDrawTexivOES(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXSOESPROC) (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
	PFNGLDRAWTEXSOESPROC methodp_glDrawTexsOES{nullptr};
	static v8::Handle<v8::Value> method_glDrawTexsOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTexsOES && args.Length() >= 5){
			obj->methodp_glDrawTexsOES(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */,
				(GLshort )(args[3]->NumberValue())/* GLshort width */,
				(GLshort )(args[4]->NumberValue())/* GLshort height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXSVOESPROC) (const GLshort *coords);
	PFNGLDRAWTEXSVOESPROC methodp_glDrawTexsvOES{nullptr};
	static v8::Handle<v8::Value> method_glDrawTexsvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTexsvOES && args.Length() >= 1){
			obj->methodp_glDrawTexsvOES(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
	PFNGLDRAWTEXTURENVPROC methodp_glDrawTextureNV{nullptr};
	static v8::Handle<v8::Value> method_glDrawTextureNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTextureNV && args.Length() >= 11){
			obj->methodp_glDrawTextureNV(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLuint )(args[1]->NumberValue())/* GLuint sampler */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat x0 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat y0 */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat x1 */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat y1 */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat s0 */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat t0 */,
				(GLfloat )(args[9]->NumberValue())/* GLfloat s1 */,
				(GLfloat )(args[10]->NumberValue())/* GLfloat t1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXXOESPROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
	PFNGLDRAWTEXXOESPROC methodp_glDrawTexxOES{nullptr};
	static v8::Handle<v8::Value> method_glDrawTexxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTexxOES && args.Length() >= 5){
			obj->methodp_glDrawTexxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed z */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed width */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTEXXVOESPROC) (const GLfixed *coords);
	PFNGLDRAWTEXXVOESPROC methodp_glDrawTexxvOES{nullptr};
	static v8::Handle<v8::Value> method_glDrawTexxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTexxvOES && args.Length() >= 1){
			obj->methodp_glDrawTexxvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);
	PFNGLDRAWTRANSFORMFEEDBACKPROC methodp_glDrawTransformFeedback{nullptr};
	static v8::Handle<v8::Value> method_glDrawTransformFeedback(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTransformFeedback && args.Length() >= 2){
			obj->methodp_glDrawTransformFeedback(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);
	PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC methodp_glDrawTransformFeedbackInstanced{nullptr};
	static v8::Handle<v8::Value> method_glDrawTransformFeedbackInstanced(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTransformFeedbackInstanced && args.Length() >= 3){
			obj->methodp_glDrawTransformFeedbackInstanced(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei instancecount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);
	PFNGLDRAWTRANSFORMFEEDBACKNVPROC methodp_glDrawTransformFeedbackNV{nullptr};
	static v8::Handle<v8::Value> method_glDrawTransformFeedbackNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTransformFeedbackNV && args.Length() >= 2){
			obj->methodp_glDrawTransformFeedbackNV(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
	PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC methodp_glDrawTransformFeedbackStream{nullptr};
	static v8::Handle<v8::Value> method_glDrawTransformFeedbackStream(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTransformFeedbackStream && args.Length() >= 3){
			obj->methodp_glDrawTransformFeedbackStream(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */,
				(GLuint )(args[2]->NumberValue())/* GLuint stream */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
	PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC methodp_glDrawTransformFeedbackStreamInstanced{nullptr};
	static v8::Handle<v8::Value> method_glDrawTransformFeedbackStreamInstanced(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glDrawTransformFeedbackStreamInstanced && args.Length() >= 4){
			obj->methodp_glDrawTransformFeedbackStreamInstanced(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */,
				(GLuint )(args[2]->NumberValue())/* GLuint stream */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei instancecount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLeglImageOES image);
	PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC methodp_glEGLImageTargetRenderbufferStorageOES{nullptr};
	static v8::Handle<v8::Value> method_glEGLImageTargetRenderbufferStorageOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEGLImageTargetRenderbufferStorageOES && args.Length() >= 2){
			obj->methodp_glEGLImageTargetRenderbufferStorageOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLeglImageOES )((int64_t)args[1]->NumberValue())/* GLeglImageOES image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) (GLenum target, GLeglImageOES image);
	PFNGLEGLIMAGETARGETTEXTURE2DOESPROC methodp_glEGLImageTargetTexture2DOES{nullptr};
	static v8::Handle<v8::Value> method_glEGLImageTargetTexture2DOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEGLImageTargetTexture2DOES && args.Length() >= 2){
			obj->methodp_glEGLImageTargetTexture2DOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLeglImageOES )((int64_t)args[1]->NumberValue())/* GLeglImageOES image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEDGEFLAGPROC) (GLboolean flag);
	PFNGLEDGEFLAGPROC methodp_glEdgeFlag{nullptr};
	static v8::Handle<v8::Value> method_glEdgeFlag(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEdgeFlag && args.Length() >= 1){
			obj->methodp_glEdgeFlag(
				(GLboolean )(args[0]->NumberValue())/* GLboolean flag */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
	PFNGLEDGEFLAGFORMATNVPROC methodp_glEdgeFlagFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glEdgeFlagFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEdgeFlagFormatNV && args.Length() >= 1){
			obj->methodp_glEdgeFlagFormatNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERPROC) (GLsizei stride, const void *pointer);
	PFNGLEDGEFLAGPOINTERPROC methodp_glEdgeFlagPointer{nullptr};
	static v8::Handle<v8::Value> method_glEdgeFlagPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEdgeFlagPointer && args.Length() >= 2){
			obj->methodp_glEdgeFlagPointer(
				(GLsizei )(args[0]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
	PFNGLEDGEFLAGPOINTEREXTPROC methodp_glEdgeFlagPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glEdgeFlagPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEdgeFlagPointerEXT && args.Length() >= 3){
			obj->methodp_glEdgeFlagPointerEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei stride */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLboolean *)((int64_t)args[2]->NumberValue())/* const GLboolean *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean **pointer, GLint ptrstride);
	PFNGLEDGEFLAGPOINTERLISTIBMPROC methodp_glEdgeFlagPointerListIBM{nullptr};
	static v8::Handle<v8::Value> method_glEdgeFlagPointerListIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEdgeFlagPointerListIBM && args.Length() >= 3){
			obj->methodp_glEdgeFlagPointerListIBM(
				(GLint )(args[0]->NumberValue())/* GLint stride */,
				(const GLboolean **)((int64_t)args[1]->NumberValue())/* const GLboolean **pointer */,
				(GLint )(args[2]->NumberValue())/* GLint ptrstride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEDGEFLAGVPROC) (const GLboolean *flag);
	PFNGLEDGEFLAGVPROC methodp_glEdgeFlagv{nullptr};
	static v8::Handle<v8::Value> method_glEdgeFlagv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEdgeFlagv && args.Length() >= 1){
			obj->methodp_glEdgeFlagv(
				(const GLboolean *)((int64_t)args[0]->NumberValue())/* const GLboolean *flag */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer);
	PFNGLELEMENTPOINTERAPPLEPROC methodp_glElementPointerAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glElementPointerAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glElementPointerAPPLE && args.Length() >= 2){
			obj->methodp_glElementPointerAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void *pointer);
	PFNGLELEMENTPOINTERATIPROC methodp_glElementPointerATI{nullptr};
	static v8::Handle<v8::Value> method_glElementPointerATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glElementPointerATI && args.Length() >= 2){
			obj->methodp_glElementPointerATI(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);
	PFNGLENABLEPROC methodp_glEnable{nullptr};
	static v8::Handle<v8::Value> method_glEnable(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnable && args.Length() >= 1){
			obj->methodp_glEnable(
				(GLenum )(args[0]->NumberValue())/* GLenum cap */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLECLIENTSTATEPROC) (GLenum array);
	PFNGLENABLECLIENTSTATEPROC methodp_glEnableClientState{nullptr};
	static v8::Handle<v8::Value> method_glEnableClientState(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableClientState && args.Length() >= 1){
			obj->methodp_glEnableClientState(
				(GLenum )(args[0]->NumberValue())/* GLenum array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
	PFNGLENABLECLIENTSTATEINDEXEDEXTPROC methodp_glEnableClientStateIndexedEXT{nullptr};
	static v8::Handle<v8::Value> method_glEnableClientStateIndexedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableClientStateIndexedEXT && args.Length() >= 2){
			obj->methodp_glEnableClientStateIndexedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum array */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);
	PFNGLENABLECLIENTSTATEIEXTPROC methodp_glEnableClientStateiEXT{nullptr};
	static v8::Handle<v8::Value> method_glEnableClientStateiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableClientStateiEXT && args.Length() >= 2){
			obj->methodp_glEnableClientStateiEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum array */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEDRIVERCONTROLQCOMPROC) (GLuint driverControl);
	PFNGLENABLEDRIVERCONTROLQCOMPROC methodp_glEnableDriverControlQCOM{nullptr};
	static v8::Handle<v8::Value> method_glEnableDriverControlQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableDriverControlQCOM && args.Length() >= 1){
			obj->methodp_glEnableDriverControlQCOM(
				(GLuint )(args[0]->NumberValue())/* GLuint driverControl */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
	PFNGLENABLEINDEXEDEXTPROC methodp_glEnableIndexedEXT{nullptr};
	static v8::Handle<v8::Value> method_glEnableIndexedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableIndexedEXT && args.Length() >= 2){
			obj->methodp_glEnableIndexedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
	PFNGLENABLEVARIANTCLIENTSTATEEXTPROC methodp_glEnableVariantClientStateEXT{nullptr};
	static v8::Handle<v8::Value> method_glEnableVariantClientStateEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableVariantClientStateEXT && args.Length() >= 1){
			obj->methodp_glEnableVariantClientStateEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);
	PFNGLENABLEVERTEXARRAYATTRIBEXTPROC methodp_glEnableVertexArrayAttribEXT{nullptr};
	static v8::Handle<v8::Value> method_glEnableVertexArrayAttribEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableVertexArrayAttribEXT && args.Length() >= 2){
			obj->methodp_glEnableVertexArrayAttribEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);
	PFNGLENABLEVERTEXARRAYEXTPROC methodp_glEnableVertexArrayEXT{nullptr};
	static v8::Handle<v8::Value> method_glEnableVertexArrayEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableVertexArrayEXT && args.Length() >= 2){
			obj->methodp_glEnableVertexArrayEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLenum )(args[1]->NumberValue())/* GLenum array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
	PFNGLENABLEVERTEXATTRIBAPPLEPROC methodp_glEnableVertexAttribAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glEnableVertexAttribAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableVertexAttribAPPLE && args.Length() >= 2){
			obj->methodp_glEnableVertexAttribAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
	PFNGLENABLEVERTEXATTRIBARRAYPROC methodp_glEnableVertexAttribArray{nullptr};
	static v8::Handle<v8::Value> method_glEnableVertexAttribArray(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableVertexAttribArray && args.Length() >= 1){
			obj->methodp_glEnableVertexAttribArray(
				(GLuint )(args[0]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
	PFNGLENABLEVERTEXATTRIBARRAYARBPROC methodp_glEnableVertexAttribArrayARB{nullptr};
	static v8::Handle<v8::Value> method_glEnableVertexAttribArrayARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableVertexAttribArrayARB && args.Length() >= 1){
			obj->methodp_glEnableVertexAttribArrayARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);
	PFNGLENABLEIPROC methodp_glEnablei{nullptr};
	static v8::Handle<v8::Value> method_glEnablei(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnablei && args.Length() >= 2){
			obj->methodp_glEnablei(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENABLEIEXTPROC) (GLenum target, GLuint index);
	PFNGLENABLEIEXTPROC methodp_glEnableiEXT{nullptr};
	static v8::Handle<v8::Value> method_glEnableiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnableiEXT && args.Length() >= 2){
			obj->methodp_glEnableiEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDPROC) ();
	PFNGLENDPROC methodp_glEnd{nullptr};
	static v8::Handle<v8::Value> method_glEnd(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEnd && args.Length() >= 0){
			obj->methodp_glEnd(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) ();
	PFNGLENDCONDITIONALRENDERPROC methodp_glEndConditionalRender{nullptr};
	static v8::Handle<v8::Value> method_glEndConditionalRender(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndConditionalRender && args.Length() >= 0){
			obj->methodp_glEndConditionalRender(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) ();
	PFNGLENDCONDITIONALRENDERNVPROC methodp_glEndConditionalRenderNV{nullptr};
	static v8::Handle<v8::Value> method_glEndConditionalRenderNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndConditionalRenderNV && args.Length() >= 0){
			obj->methodp_glEndConditionalRenderNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVXPROC) ();
	PFNGLENDCONDITIONALRENDERNVXPROC methodp_glEndConditionalRenderNVX{nullptr};
	static v8::Handle<v8::Value> method_glEndConditionalRenderNVX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndConditionalRenderNVX && args.Length() >= 0){
			obj->methodp_glEndConditionalRenderNVX(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC) ();
	PFNGLENDFRAGMENTSHADERATIPROC methodp_glEndFragmentShaderATI{nullptr};
	static v8::Handle<v8::Value> method_glEndFragmentShaderATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndFragmentShaderATI && args.Length() >= 0){
			obj->methodp_glEndFragmentShaderATI(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDLISTPROC) ();
	PFNGLENDLISTPROC methodp_glEndList{nullptr};
	static v8::Handle<v8::Value> method_glEndList(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndList && args.Length() >= 0){
			obj->methodp_glEndList(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC) ();
	PFNGLENDOCCLUSIONQUERYNVPROC methodp_glEndOcclusionQueryNV{nullptr};
	static v8::Handle<v8::Value> method_glEndOcclusionQueryNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndOcclusionQueryNV && args.Length() >= 0){
			obj->methodp_glEndOcclusionQueryNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
	PFNGLENDPERFMONITORAMDPROC methodp_glEndPerfMonitorAMD{nullptr};
	static v8::Handle<v8::Value> method_glEndPerfMonitorAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndPerfMonitorAMD && args.Length() >= 1){
			obj->methodp_glEndPerfMonitorAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint monitor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle);
	PFNGLENDPERFQUERYINTELPROC methodp_glEndPerfQueryINTEL{nullptr};
	static v8::Handle<v8::Value> method_glEndPerfQueryINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndPerfQueryINTEL && args.Length() >= 1){
			obj->methodp_glEndPerfQueryINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint queryHandle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);
	PFNGLENDQUERYPROC methodp_glEndQuery{nullptr};
	static v8::Handle<v8::Value> method_glEndQuery(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndQuery && args.Length() >= 1){
			obj->methodp_glEndQuery(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDQUERYARBPROC) (GLenum target);
	PFNGLENDQUERYARBPROC methodp_glEndQueryARB{nullptr};
	static v8::Handle<v8::Value> method_glEndQueryARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndQueryARB && args.Length() >= 1){
			obj->methodp_glEndQueryARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDQUERYEXTPROC) (GLenum target);
	PFNGLENDQUERYEXTPROC methodp_glEndQueryEXT{nullptr};
	static v8::Handle<v8::Value> method_glEndQueryEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndQueryEXT && args.Length() >= 1){
			obj->methodp_glEndQueryEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
	PFNGLENDQUERYINDEXEDPROC methodp_glEndQueryIndexed{nullptr};
	static v8::Handle<v8::Value> method_glEndQueryIndexed(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndQueryIndexed && args.Length() >= 2){
			obj->methodp_glEndQueryIndexed(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDTILINGQCOMPROC) (GLbitfield preserveMask);
	PFNGLENDTILINGQCOMPROC methodp_glEndTilingQCOM{nullptr};
	static v8::Handle<v8::Value> method_glEndTilingQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndTilingQCOM && args.Length() >= 1){
			obj->methodp_glEndTilingQCOM(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield preserveMask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) ();
	PFNGLENDTRANSFORMFEEDBACKPROC methodp_glEndTransformFeedback{nullptr};
	static v8::Handle<v8::Value> method_glEndTransformFeedback(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndTransformFeedback && args.Length() >= 0){
			obj->methodp_glEndTransformFeedback(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC) ();
	PFNGLENDTRANSFORMFEEDBACKEXTPROC methodp_glEndTransformFeedbackEXT{nullptr};
	static v8::Handle<v8::Value> method_glEndTransformFeedbackEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndTransformFeedbackEXT && args.Length() >= 0){
			obj->methodp_glEndTransformFeedbackEXT(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC) ();
	PFNGLENDTRANSFORMFEEDBACKNVPROC methodp_glEndTransformFeedbackNV{nullptr};
	static v8::Handle<v8::Value> method_glEndTransformFeedbackNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndTransformFeedbackNV && args.Length() >= 0){
			obj->methodp_glEndTransformFeedbackNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC) ();
	PFNGLENDVERTEXSHADEREXTPROC methodp_glEndVertexShaderEXT{nullptr};
	static v8::Handle<v8::Value> method_glEndVertexShaderEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndVertexShaderEXT && args.Length() >= 0){
			obj->methodp_glEndVertexShaderEXT(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
	PFNGLENDVIDEOCAPTURENVPROC methodp_glEndVideoCaptureNV{nullptr};
	static v8::Handle<v8::Value> method_glEndVideoCaptureNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEndVideoCaptureNV && args.Length() >= 1){
			obj->methodp_glEndVideoCaptureNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD1DPROC) (GLdouble u);
	PFNGLEVALCOORD1DPROC methodp_glEvalCoord1d{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord1d && args.Length() >= 1){
			obj->methodp_glEvalCoord1d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble u */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD1DVPROC) (const GLdouble *u);
	PFNGLEVALCOORD1DVPROC methodp_glEvalCoord1dv{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord1dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord1dv && args.Length() >= 1){
			obj->methodp_glEvalCoord1dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *u */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD1FPROC) (GLfloat u);
	PFNGLEVALCOORD1FPROC methodp_glEvalCoord1f{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord1f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord1f && args.Length() >= 1){
			obj->methodp_glEvalCoord1f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat u */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD1FVPROC) (const GLfloat *u);
	PFNGLEVALCOORD1FVPROC methodp_glEvalCoord1fv{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord1fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord1fv && args.Length() >= 1){
			obj->methodp_glEvalCoord1fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *u */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD1XOESPROC) (GLfixed u);
	PFNGLEVALCOORD1XOESPROC methodp_glEvalCoord1xOES{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord1xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord1xOES && args.Length() >= 1){
			obj->methodp_glEvalCoord1xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed u */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD1XVOESPROC) (const GLfixed *coords);
	PFNGLEVALCOORD1XVOESPROC methodp_glEvalCoord1xvOES{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord1xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord1xvOES && args.Length() >= 1){
			obj->methodp_glEvalCoord1xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD2DPROC) (GLdouble u, GLdouble v);
	PFNGLEVALCOORD2DPROC methodp_glEvalCoord2d{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord2d && args.Length() >= 2){
			obj->methodp_glEvalCoord2d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble u */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD2DVPROC) (const GLdouble *u);
	PFNGLEVALCOORD2DVPROC methodp_glEvalCoord2dv{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord2dv && args.Length() >= 1){
			obj->methodp_glEvalCoord2dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *u */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD2FPROC) (GLfloat u, GLfloat v);
	PFNGLEVALCOORD2FPROC methodp_glEvalCoord2f{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord2f && args.Length() >= 2){
			obj->methodp_glEvalCoord2f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat u */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD2FVPROC) (const GLfloat *u);
	PFNGLEVALCOORD2FVPROC methodp_glEvalCoord2fv{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord2fv && args.Length() >= 1){
			obj->methodp_glEvalCoord2fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *u */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD2XOESPROC) (GLfixed u, GLfixed v);
	PFNGLEVALCOORD2XOESPROC methodp_glEvalCoord2xOES{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord2xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord2xOES && args.Length() >= 2){
			obj->methodp_glEvalCoord2xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed u */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALCOORD2XVOESPROC) (const GLfixed *coords);
	PFNGLEVALCOORD2XVOESPROC methodp_glEvalCoord2xvOES{nullptr};
	static v8::Handle<v8::Value> method_glEvalCoord2xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalCoord2xvOES && args.Length() >= 1){
			obj->methodp_glEvalCoord2xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
	PFNGLEVALMAPSNVPROC methodp_glEvalMapsNV{nullptr};
	static v8::Handle<v8::Value> method_glEvalMapsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalMapsNV && args.Length() >= 2){
			obj->methodp_glEvalMapsNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALMESH1PROC) (GLenum mode, GLint i1, GLint i2);
	PFNGLEVALMESH1PROC methodp_glEvalMesh1{nullptr};
	static v8::Handle<v8::Value> method_glEvalMesh1(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalMesh1 && args.Length() >= 3){
			obj->methodp_glEvalMesh1(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint i1 */,
				(GLint )(args[2]->NumberValue())/* GLint i2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALMESH2PROC) (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
	PFNGLEVALMESH2PROC methodp_glEvalMesh2{nullptr};
	static v8::Handle<v8::Value> method_glEvalMesh2(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalMesh2 && args.Length() >= 5){
			obj->methodp_glEvalMesh2(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLint )(args[1]->NumberValue())/* GLint i1 */,
				(GLint )(args[2]->NumberValue())/* GLint i2 */,
				(GLint )(args[3]->NumberValue())/* GLint j1 */,
				(GLint )(args[4]->NumberValue())/* GLint j2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALPOINT1PROC) (GLint i);
	PFNGLEVALPOINT1PROC methodp_glEvalPoint1{nullptr};
	static v8::Handle<v8::Value> method_glEvalPoint1(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalPoint1 && args.Length() >= 1){
			obj->methodp_glEvalPoint1(
				(GLint )(args[0]->NumberValue())/* GLint i */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEVALPOINT2PROC) (GLint i, GLint j);
	PFNGLEVALPOINT2PROC methodp_glEvalPoint2{nullptr};
	static v8::Handle<v8::Value> method_glEvalPoint2(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glEvalPoint2 && args.Length() >= 2){
			obj->methodp_glEvalPoint2(
				(GLint )(args[0]->NumberValue())/* GLint i */,
				(GLint )(args[1]->NumberValue())/* GLint j */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);
	PFNGLEXECUTEPROGRAMNVPROC methodp_glExecuteProgramNV{nullptr};
	static v8::Handle<v8::Value> method_glExecuteProgramNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExecuteProgramNV && args.Length() >= 3){
			obj->methodp_glExecuteProgramNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETBUFFERPOINTERVQCOMPROC) (GLenum target, void **params);
	PFNGLEXTGETBUFFERPOINTERVQCOMPROC methodp_glExtGetBufferPointervQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetBufferPointervQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetBufferPointervQCOM && args.Length() >= 2){
			obj->methodp_glExtGetBufferPointervQCOM(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(void **)((int64_t)args[1]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETBUFFERSQCOMPROC) (GLuint *buffers, GLint maxBuffers, GLint *numBuffers);
	PFNGLEXTGETBUFFERSQCOMPROC methodp_glExtGetBuffersQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetBuffersQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetBuffersQCOM && args.Length() >= 3){
			obj->methodp_glExtGetBuffersQCOM(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *buffers */,
				(GLint )(args[1]->NumberValue())/* GLint maxBuffers */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *numBuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETFRAMEBUFFERSQCOMPROC) (GLuint *framebuffers, GLint maxFramebuffers, GLint *numFramebuffers);
	PFNGLEXTGETFRAMEBUFFERSQCOMPROC methodp_glExtGetFramebuffersQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetFramebuffersQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetFramebuffersQCOM && args.Length() >= 3){
			obj->methodp_glExtGetFramebuffersQCOM(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *framebuffers */,
				(GLint )(args[1]->NumberValue())/* GLint maxFramebuffers */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *numFramebuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC) (GLuint program, GLenum shadertype, GLchar *source, GLint *length);
	PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC methodp_glExtGetProgramBinarySourceQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetProgramBinarySourceQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetProgramBinarySourceQCOM && args.Length() >= 4){
			obj->methodp_glExtGetProgramBinarySourceQCOM(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum shadertype */,
				(GLchar *)((int64_t)args[2]->NumberValue())/* GLchar *source */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETPROGRAMSQCOMPROC) (GLuint *programs, GLint maxPrograms, GLint *numPrograms);
	PFNGLEXTGETPROGRAMSQCOMPROC methodp_glExtGetProgramsQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetProgramsQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetProgramsQCOM && args.Length() >= 3){
			obj->methodp_glExtGetProgramsQCOM(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *programs */,
				(GLint )(args[1]->NumberValue())/* GLint maxPrograms */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *numPrograms */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETRENDERBUFFERSQCOMPROC) (GLuint *renderbuffers, GLint maxRenderbuffers, GLint *numRenderbuffers);
	PFNGLEXTGETRENDERBUFFERSQCOMPROC methodp_glExtGetRenderbuffersQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetRenderbuffersQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetRenderbuffersQCOM && args.Length() >= 3){
			obj->methodp_glExtGetRenderbuffersQCOM(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *renderbuffers */,
				(GLint )(args[1]->NumberValue())/* GLint maxRenderbuffers */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *numRenderbuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETSHADERSQCOMPROC) (GLuint *shaders, GLint maxShaders, GLint *numShaders);
	PFNGLEXTGETSHADERSQCOMPROC methodp_glExtGetShadersQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetShadersQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetShadersQCOM && args.Length() >= 3){
			obj->methodp_glExtGetShadersQCOM(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *shaders */,
				(GLint )(args[1]->NumberValue())/* GLint maxShaders */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *numShaders */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC) (GLuint texture, GLenum face, GLint level, GLenum pname, GLint *params);
	PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC methodp_glExtGetTexLevelParameterivQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetTexLevelParameterivQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetTexLevelParameterivQCOM && args.Length() >= 5){
			obj->methodp_glExtGetTexLevelParameterivQCOM(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum face */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETTEXSUBIMAGEQCOMPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void *texels);
	PFNGLEXTGETTEXSUBIMAGEQCOMPROC methodp_glExtGetTexSubImageQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetTexSubImageQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetTexSubImageQCOM && args.Length() >= 11){
			obj->methodp_glExtGetTexSubImageQCOM(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLenum )(args[9]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[10]->NumberValue())/* void *texels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTGETTEXTURESQCOMPROC) (GLuint *textures, GLint maxTextures, GLint *numTextures);
	PFNGLEXTGETTEXTURESQCOMPROC methodp_glExtGetTexturesQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtGetTexturesQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtGetTexturesQCOM && args.Length() >= 3){
			obj->methodp_glExtGetTexturesQCOM(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *textures */,
				(GLint )(args[1]->NumberValue())/* GLint maxTextures */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *numTextures */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLEXTISPROGRAMBINARYQCOMPROC) (GLuint program);
	PFNGLEXTISPROGRAMBINARYQCOMPROC methodp_glExtIsProgramBinaryQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtIsProgramBinaryQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtIsProgramBinaryQCOM && args.Length() >= 1){
			obj->methodp_glExtIsProgramBinaryQCOM(
				(GLuint )(args[0]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC) (GLenum target, GLenum pname, GLint param);
	PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC methodp_glExtTexObjectStateOverrideiQCOM{nullptr};
	static v8::Handle<v8::Value> method_glExtTexObjectStateOverrideiQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtTexObjectStateOverrideiQCOM && args.Length() >= 3){
			obj->methodp_glExtTexObjectStateOverrideiQCOM(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
	PFNGLEXTRACTCOMPONENTEXTPROC methodp_glExtractComponentEXT{nullptr};
	static v8::Handle<v8::Value> method_glExtractComponentEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glExtractComponentEXT && args.Length() >= 3){
			obj->methodp_glExtractComponentEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint res */,
				(GLuint )(args[1]->NumberValue())/* GLuint src */,
				(GLuint )(args[2]->NumberValue())/* GLuint num */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFEEDBACKBUFFERPROC) (GLsizei size, GLenum type, GLfloat *buffer);
	PFNGLFEEDBACKBUFFERPROC methodp_glFeedbackBuffer{nullptr};
	static v8::Handle<v8::Value> method_glFeedbackBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFeedbackBuffer && args.Length() >= 3){
			obj->methodp_glFeedbackBuffer(
				(GLsizei )(args[0]->NumberValue())/* GLsizei size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFEEDBACKBUFFERXOESPROC) (GLsizei n, GLenum type, const GLfixed *buffer);
	PFNGLFEEDBACKBUFFERXOESPROC methodp_glFeedbackBufferxOES{nullptr};
	static v8::Handle<v8::Value> method_glFeedbackBufferxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFeedbackBufferxOES && args.Length() >= 3){
			obj->methodp_glFeedbackBufferxOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);
	PFNGLFENCESYNCPROC methodp_glFenceSync{nullptr};
	static v8::Handle<v8::Value> method_glFenceSync(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFenceSync && args.Length() >= 2){
			obj->methodp_glFenceSync(
				(GLenum )(args[0]->NumberValue())/* GLenum condition */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield flags */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLsync (APIENTRYP PFNGLFENCESYNCAPPLEPROC) (GLenum condition, GLbitfield flags);
	PFNGLFENCESYNCAPPLEPROC methodp_glFenceSyncAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glFenceSyncAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFenceSyncAPPLE && args.Length() >= 2){
			obj->methodp_glFenceSyncAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum condition */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield flags */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
	PFNGLFINALCOMBINERINPUTNVPROC methodp_glFinalCombinerInputNV{nullptr};
	static v8::Handle<v8::Value> method_glFinalCombinerInputNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFinalCombinerInputNV && args.Length() >= 4){
			obj->methodp_glFinalCombinerInputNV(
				(GLenum )(args[0]->NumberValue())/* GLenum variable */,
				(GLenum )(args[1]->NumberValue())/* GLenum input */,
				(GLenum )(args[2]->NumberValue())/* GLenum mapping */,
				(GLenum )(args[3]->NumberValue())/* GLenum componentUsage */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFINISHPROC) ();
	PFNGLFINISHPROC methodp_glFinish{nullptr};
	static v8::Handle<v8::Value> method_glFinish(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFinish && args.Length() >= 0){
			obj->methodp_glFinish(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);
	PFNGLFINISHASYNCSGIXPROC methodp_glFinishAsyncSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFinishAsyncSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFinishAsyncSGIX && args.Length() >= 1){
			obj->methodp_glFinishAsyncSGIX(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *markerp */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
	PFNGLFINISHFENCEAPPLEPROC methodp_glFinishFenceAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glFinishFenceAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFinishFenceAPPLE && args.Length() >= 1){
			obj->methodp_glFinishFenceAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);
	PFNGLFINISHFENCENVPROC methodp_glFinishFenceNV{nullptr};
	static v8::Handle<v8::Value> method_glFinishFenceNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFinishFenceNV && args.Length() >= 1){
			obj->methodp_glFinishFenceNV(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
	PFNGLFINISHOBJECTAPPLEPROC methodp_glFinishObjectAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glFinishObjectAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFinishObjectAPPLE && args.Length() >= 2){
			obj->methodp_glFinishObjectAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum object */,
				(GLint )(args[1]->NumberValue())/* GLint name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFINISHTEXTURESUNXPROC) ();
	PFNGLFINISHTEXTURESUNXPROC methodp_glFinishTextureSUNX{nullptr};
	static v8::Handle<v8::Value> method_glFinishTextureSUNX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFinishTextureSUNX && args.Length() >= 0){
			obj->methodp_glFinishTextureSUNX(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHPROC) ();
	PFNGLFLUSHPROC methodp_glFlush{nullptr};
	static v8::Handle<v8::Value> method_glFlush(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlush && args.Length() >= 0){
			obj->methodp_glFlush(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
	PFNGLFLUSHMAPPEDBUFFERRANGEPROC methodp_glFlushMappedBufferRange{nullptr};
	static v8::Handle<v8::Value> method_glFlushMappedBufferRange(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushMappedBufferRange && args.Length() >= 3){
			obj->methodp_glFlushMappedBufferRange(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
	PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC methodp_glFlushMappedBufferRangeAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glFlushMappedBufferRangeAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushMappedBufferRangeAPPLE && args.Length() >= 3){
			obj->methodp_glFlushMappedBufferRangeAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
	PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC methodp_glFlushMappedBufferRangeEXT{nullptr};
	static v8::Handle<v8::Value> method_glFlushMappedBufferRangeEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushMappedBufferRangeEXT && args.Length() >= 3){
			obj->methodp_glFlushMappedBufferRangeEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
	PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC methodp_glFlushMappedNamedBufferRangeEXT{nullptr};
	static v8::Handle<v8::Value> method_glFlushMappedNamedBufferRangeEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushMappedNamedBufferRangeEXT && args.Length() >= 3){
			obj->methodp_glFlushMappedNamedBufferRangeEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
	PFNGLFLUSHPIXELDATARANGENVPROC methodp_glFlushPixelDataRangeNV{nullptr};
	static v8::Handle<v8::Value> method_glFlushPixelDataRangeNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushPixelDataRangeNV && args.Length() >= 1){
			obj->methodp_glFlushPixelDataRangeNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHRASTERSGIXPROC) ();
	PFNGLFLUSHRASTERSGIXPROC methodp_glFlushRasterSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFlushRasterSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushRasterSGIX && args.Length() >= 0){
			obj->methodp_glFlushRasterSGIX(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHSTATICDATAIBMPROC) (GLenum target);
	PFNGLFLUSHSTATICDATAIBMPROC methodp_glFlushStaticDataIBM{nullptr};
	static v8::Handle<v8::Value> method_glFlushStaticDataIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushStaticDataIBM && args.Length() >= 1){
			obj->methodp_glFlushStaticDataIBM(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);
	PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC methodp_glFlushVertexArrayRangeAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glFlushVertexArrayRangeAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushVertexArrayRangeAPPLE && args.Length() >= 2){
			obj->methodp_glFlushVertexArrayRangeAPPLE(
				(GLsizei )(args[0]->NumberValue())/* GLsizei length */,
				(void *)((int64_t)args[1]->NumberValue())/* void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC) ();
	PFNGLFLUSHVERTEXARRAYRANGENVPROC methodp_glFlushVertexArrayRangeNV{nullptr};
	static v8::Handle<v8::Value> method_glFlushVertexArrayRangeNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFlushVertexArrayRangeNV && args.Length() >= 0){
			obj->methodp_glFlushVertexArrayRangeNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
	PFNGLFOGCOORDFORMATNVPROC methodp_glFogCoordFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordFormatNV && args.Length() >= 2){
			obj->methodp_glFogCoordFormatNV(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer);
	PFNGLFOGCOORDPOINTERPROC methodp_glFogCoordPointer{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordPointer && args.Length() >= 3){
			obj->methodp_glFogCoordPointer(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);
	PFNGLFOGCOORDPOINTEREXTPROC methodp_glFogCoordPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordPointerEXT && args.Length() >= 3){
			obj->methodp_glFogCoordPointerEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);
	PFNGLFOGCOORDPOINTERLISTIBMPROC methodp_glFogCoordPointerListIBM{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordPointerListIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordPointerListIBM && args.Length() >= 4){
			obj->methodp_glFogCoordPointerListIBM(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLint )(args[1]->NumberValue())/* GLint stride */,
				(const void **)((int64_t)args[2]->NumberValue())/* const void **pointer */,
				(GLint )(args[3]->NumberValue())/* GLint ptrstride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDDPROC) (GLdouble coord);
	PFNGLFOGCOORDDPROC methodp_glFogCoordd{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordd(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordd && args.Length() >= 1){
			obj->methodp_glFogCoordd(
				(GLdouble )(args[0]->NumberValue())/* GLdouble coord */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
	PFNGLFOGCOORDDEXTPROC methodp_glFogCoorddEXT{nullptr};
	static v8::Handle<v8::Value> method_glFogCoorddEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoorddEXT && args.Length() >= 1){
			obj->methodp_glFogCoorddEXT(
				(GLdouble )(args[0]->NumberValue())/* GLdouble coord */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
	PFNGLFOGCOORDDVPROC methodp_glFogCoorddv{nullptr};
	static v8::Handle<v8::Value> method_glFogCoorddv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoorddv && args.Length() >= 1){
			obj->methodp_glFogCoorddv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *coord */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
	PFNGLFOGCOORDDVEXTPROC methodp_glFogCoorddvEXT{nullptr};
	static v8::Handle<v8::Value> method_glFogCoorddvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoorddvEXT && args.Length() >= 1){
			obj->methodp_glFogCoorddvEXT(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *coord */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDFPROC) (GLfloat coord);
	PFNGLFOGCOORDFPROC methodp_glFogCoordf{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordf && args.Length() >= 1){
			obj->methodp_glFogCoordf(
				(GLfloat )(args[0]->NumberValue())/* GLfloat coord */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
	PFNGLFOGCOORDFEXTPROC methodp_glFogCoordfEXT{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordfEXT && args.Length() >= 1){
			obj->methodp_glFogCoordfEXT(
				(GLfloat )(args[0]->NumberValue())/* GLfloat coord */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
	PFNGLFOGCOORDFVPROC methodp_glFogCoordfv{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordfv && args.Length() >= 1){
			obj->methodp_glFogCoordfv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *coord */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
	PFNGLFOGCOORDFVEXTPROC methodp_glFogCoordfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordfvEXT && args.Length() >= 1){
			obj->methodp_glFogCoordfvEXT(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *coord */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);
	PFNGLFOGCOORDHNVPROC methodp_glFogCoordhNV{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordhNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordhNV && args.Length() >= 1){
			obj->methodp_glFogCoordhNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV fog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);
	PFNGLFOGCOORDHVNVPROC methodp_glFogCoordhvNV{nullptr};
	static v8::Handle<v8::Value> method_glFogCoordhvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogCoordhvNV && args.Length() >= 1){
			obj->methodp_glFogCoordhvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *fog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);
	PFNGLFOGFUNCSGISPROC methodp_glFogFuncSGIS{nullptr};
	static v8::Handle<v8::Value> method_glFogFuncSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogFuncSGIS && args.Length() >= 2){
			obj->methodp_glFogFuncSGIS(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGFPROC) (GLenum pname, GLfloat param);
	PFNGLFOGFPROC methodp_glFogf{nullptr};
	static v8::Handle<v8::Value> method_glFogf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogf && args.Length() >= 2){
			obj->methodp_glFogf(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGFVPROC) (GLenum pname, const GLfloat *params);
	PFNGLFOGFVPROC methodp_glFogfv{nullptr};
	static v8::Handle<v8::Value> method_glFogfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogfv && args.Length() >= 2){
			obj->methodp_glFogfv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGIPROC) (GLenum pname, GLint param);
	PFNGLFOGIPROC methodp_glFogi{nullptr};
	static v8::Handle<v8::Value> method_glFogi(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogi && args.Length() >= 2){
			obj->methodp_glFogi(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGIVPROC) (GLenum pname, const GLint *params);
	PFNGLFOGIVPROC methodp_glFogiv{nullptr};
	static v8::Handle<v8::Value> method_glFogiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogiv && args.Length() >= 2){
			obj->methodp_glFogiv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGXPROC) (GLenum pname, GLfixed param);
	PFNGLFOGXPROC methodp_glFogx{nullptr};
	static v8::Handle<v8::Value> method_glFogx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogx && args.Length() >= 2){
			obj->methodp_glFogx(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGXOESPROC) (GLenum pname, GLfixed param);
	PFNGLFOGXOESPROC methodp_glFogxOES{nullptr};
	static v8::Handle<v8::Value> method_glFogxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogxOES && args.Length() >= 2){
			obj->methodp_glFogxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGXVPROC) (GLenum pname, const GLfixed *param);
	PFNGLFOGXVPROC methodp_glFogxv{nullptr};
	static v8::Handle<v8::Value> method_glFogxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogxv && args.Length() >= 2){
			obj->methodp_glFogxv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFOGXVOESPROC) (GLenum pname, const GLfixed *param);
	PFNGLFOGXVOESPROC methodp_glFogxvOES{nullptr};
	static v8::Handle<v8::Value> method_glFogxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFogxvOES && args.Length() >= 2){
			obj->methodp_glFogxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
	PFNGLFRAGMENTCOLORMATERIALSGIXPROC methodp_glFragmentColorMaterialSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentColorMaterialSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentColorMaterialSGIX && args.Length() >= 2){
			obj->methodp_glFragmentColorMaterialSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
	PFNGLFRAGMENTLIGHTMODELFSGIXPROC methodp_glFragmentLightModelfSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentLightModelfSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentLightModelfSGIX && args.Length() >= 2){
			obj->methodp_glFragmentLightModelfSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);
	PFNGLFRAGMENTLIGHTMODELFVSGIXPROC methodp_glFragmentLightModelfvSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentLightModelfvSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentLightModelfvSGIX && args.Length() >= 2){
			obj->methodp_glFragmentLightModelfvSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
	PFNGLFRAGMENTLIGHTMODELISGIXPROC methodp_glFragmentLightModeliSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentLightModeliSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentLightModeliSGIX && args.Length() >= 2){
			obj->methodp_glFragmentLightModeliSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);
	PFNGLFRAGMENTLIGHTMODELIVSGIXPROC methodp_glFragmentLightModelivSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentLightModelivSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentLightModelivSGIX && args.Length() >= 2){
			obj->methodp_glFragmentLightModelivSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
	PFNGLFRAGMENTLIGHTFSGIXPROC methodp_glFragmentLightfSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentLightfSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentLightfSGIX && args.Length() >= 3){
			obj->methodp_glFragmentLightfSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);
	PFNGLFRAGMENTLIGHTFVSGIXPROC methodp_glFragmentLightfvSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentLightfvSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentLightfvSGIX && args.Length() >= 3){
			obj->methodp_glFragmentLightfvSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
	PFNGLFRAGMENTLIGHTISGIXPROC methodp_glFragmentLightiSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentLightiSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentLightiSGIX && args.Length() >= 3){
			obj->methodp_glFragmentLightiSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);
	PFNGLFRAGMENTLIGHTIVSGIXPROC methodp_glFragmentLightivSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentLightivSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentLightivSGIX && args.Length() >= 3){
			obj->methodp_glFragmentLightivSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);
	PFNGLFRAGMENTMATERIALFSGIXPROC methodp_glFragmentMaterialfSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentMaterialfSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentMaterialfSGIX && args.Length() >= 3){
			obj->methodp_glFragmentMaterialfSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);
	PFNGLFRAGMENTMATERIALFVSGIXPROC methodp_glFragmentMaterialfvSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentMaterialfvSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentMaterialfvSGIX && args.Length() >= 3){
			obj->methodp_glFragmentMaterialfvSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);
	PFNGLFRAGMENTMATERIALISGIXPROC methodp_glFragmentMaterialiSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentMaterialiSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentMaterialiSGIX && args.Length() >= 3){
			obj->methodp_glFragmentMaterialiSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);
	PFNGLFRAGMENTMATERIALIVSGIXPROC methodp_glFragmentMaterialivSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFragmentMaterialivSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFragmentMaterialivSGIX && args.Length() >= 3){
			obj->methodp_glFragmentMaterialivSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC) ();
	PFNGLFRAMETERMINATORGREMEDYPROC methodp_glFrameTerminatorGREMEDY{nullptr};
	static v8::Handle<v8::Value> method_glFrameTerminatorGREMEDY(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFrameTerminatorGREMEDY && args.Length() >= 0){
			obj->methodp_glFrameTerminatorGREMEDY(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
	PFNGLFRAMEZOOMSGIXPROC methodp_glFrameZoomSGIX{nullptr};
	static v8::Handle<v8::Value> method_glFrameZoomSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFrameZoomSGIX && args.Length() >= 1){
			obj->methodp_glFrameZoomSGIX(
				(GLint )(args[0]->NumberValue())/* GLint factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
	PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC methodp_glFramebufferDrawBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferDrawBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferDrawBufferEXT && args.Length() >= 2){
			obj->methodp_glFramebufferDrawBufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
	PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC methodp_glFramebufferDrawBuffersEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferDrawBuffersEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferDrawBuffersEXT && args.Length() >= 3){
			obj->methodp_glFramebufferDrawBuffersEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei n */,
				(const GLenum *)((int64_t)args[2]->NumberValue())/* const GLenum *bufs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
	PFNGLFRAMEBUFFERPARAMETERIPROC methodp_glFramebufferParameteri{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferParameteri(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferParameteri && args.Length() >= 3){
			obj->methodp_glFramebufferParameteri(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
	PFNGLFRAMEBUFFERREADBUFFEREXTPROC methodp_glFramebufferReadBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferReadBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferReadBufferEXT && args.Length() >= 2){
			obj->methodp_glFramebufferReadBufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	PFNGLFRAMEBUFFERRENDERBUFFERPROC methodp_glFramebufferRenderbuffer{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferRenderbuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferRenderbuffer && args.Length() >= 4){
			obj->methodp_glFramebufferRenderbuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum renderbuffertarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC methodp_glFramebufferRenderbufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferRenderbufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferRenderbufferEXT && args.Length() >= 4){
			obj->methodp_glFramebufferRenderbufferEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum renderbuffertarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEROESPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	PFNGLFRAMEBUFFERRENDERBUFFEROESPROC methodp_glFramebufferRenderbufferOES{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferRenderbufferOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferRenderbufferOES && args.Length() >= 4){
			obj->methodp_glFramebufferRenderbufferOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum renderbuffertarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
	PFNGLFRAMEBUFFERTEXTUREPROC methodp_glFramebufferTexture{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture && args.Length() >= 4){
			obj->methodp_glFramebufferTexture(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	PFNGLFRAMEBUFFERTEXTURE1DPROC methodp_glFramebufferTexture1D{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture1D && args.Length() >= 5){
			obj->methodp_glFramebufferTexture1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	PFNGLFRAMEBUFFERTEXTURE1DEXTPROC methodp_glFramebufferTexture1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture1DEXT && args.Length() >= 5){
			obj->methodp_glFramebufferTexture1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	PFNGLFRAMEBUFFERTEXTURE2DPROC methodp_glFramebufferTexture2D{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture2D && args.Length() >= 5){
			obj->methodp_glFramebufferTexture2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	PFNGLFRAMEBUFFERTEXTURE2DEXTPROC methodp_glFramebufferTexture2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture2DEXT && args.Length() >= 5){
			obj->methodp_glFramebufferTexture2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
	PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC methodp_glFramebufferTexture2DMultisampleEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture2DMultisampleEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture2DMultisampleEXT && args.Length() >= 6){
			obj->methodp_glFramebufferTexture2DMultisampleEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei samples */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
	PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC methodp_glFramebufferTexture2DMultisampleIMG{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture2DMultisampleIMG(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture2DMultisampleIMG && args.Length() >= 6){
			obj->methodp_glFramebufferTexture2DMultisampleIMG(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei samples */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DOESPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	PFNGLFRAMEBUFFERTEXTURE2DOESPROC methodp_glFramebufferTexture2DOES{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture2DOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture2DOES && args.Length() >= 5){
			obj->methodp_glFramebufferTexture2DOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	PFNGLFRAMEBUFFERTEXTURE3DPROC methodp_glFramebufferTexture3D{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture3D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture3D && args.Length() >= 6){
			obj->methodp_glFramebufferTexture3D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	PFNGLFRAMEBUFFERTEXTURE3DEXTPROC methodp_glFramebufferTexture3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture3DEXT && args.Length() >= 6){
			obj->methodp_glFramebufferTexture3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DOESPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	PFNGLFRAMEBUFFERTEXTURE3DOESPROC methodp_glFramebufferTexture3DOES{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTexture3DOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTexture3DOES && args.Length() >= 6){
			obj->methodp_glFramebufferTexture3DOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
	PFNGLFRAMEBUFFERTEXTUREARBPROC methodp_glFramebufferTextureARB{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTextureARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTextureARB && args.Length() >= 4){
			obj->methodp_glFramebufferTextureARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
	PFNGLFRAMEBUFFERTEXTUREEXTPROC methodp_glFramebufferTextureEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTextureEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTextureEXT && args.Length() >= 4){
			obj->methodp_glFramebufferTextureEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
	PFNGLFRAMEBUFFERTEXTUREFACEARBPROC methodp_glFramebufferTextureFaceARB{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTextureFaceARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTextureFaceARB && args.Length() >= 5){
			obj->methodp_glFramebufferTextureFaceARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */,
				(GLenum )(args[4]->NumberValue())/* GLenum face */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
	PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC methodp_glFramebufferTextureFaceEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTextureFaceEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTextureFaceEXT && args.Length() >= 5){
			obj->methodp_glFramebufferTextureFaceEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */,
				(GLenum )(args[4]->NumberValue())/* GLenum face */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	PFNGLFRAMEBUFFERTEXTURELAYERPROC methodp_glFramebufferTextureLayer{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTextureLayer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTextureLayer && args.Length() >= 5){
			obj->methodp_glFramebufferTextureLayer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */,
				(GLint )(args[4]->NumberValue())/* GLint layer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	PFNGLFRAMEBUFFERTEXTURELAYERARBPROC methodp_glFramebufferTextureLayerARB{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTextureLayerARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTextureLayerARB && args.Length() >= 5){
			obj->methodp_glFramebufferTextureLayerARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */,
				(GLint )(args[4]->NumberValue())/* GLint layer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
	PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC methodp_glFramebufferTextureLayerEXT{nullptr};
	static v8::Handle<v8::Value> method_glFramebufferTextureLayerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFramebufferTextureLayerEXT && args.Length() >= 5){
			obj->methodp_glFramebufferTextureLayerEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */,
				(GLint )(args[4]->NumberValue())/* GLint layer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
	PFNGLFREEOBJECTBUFFERATIPROC methodp_glFreeObjectBufferATI{nullptr};
	static v8::Handle<v8::Value> method_glFreeObjectBufferATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFreeObjectBufferATI && args.Length() >= 1){
			obj->methodp_glFreeObjectBufferATI(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRONTFACEPROC) (GLenum mode);
	PFNGLFRONTFACEPROC methodp_glFrontFace{nullptr};
	static v8::Handle<v8::Value> method_glFrontFace(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFrontFace && args.Length() >= 1){
			obj->methodp_glFrontFace(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRUSTUMPROC) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	PFNGLFRUSTUMPROC methodp_glFrustum{nullptr};
	static v8::Handle<v8::Value> method_glFrustum(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFrustum && args.Length() >= 6){
			obj->methodp_glFrustum(
				(GLdouble )(args[0]->NumberValue())/* GLdouble left */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble right */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble bottom */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble top */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble zNear */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble zFar */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRUSTUMFPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
	PFNGLFRUSTUMFPROC methodp_glFrustumf{nullptr};
	static v8::Handle<v8::Value> method_glFrustumf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFrustumf && args.Length() >= 6){
			obj->methodp_glFrustumf(
				(GLfloat )(args[0]->NumberValue())/* GLfloat l */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat n */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
	PFNGLFRUSTUMFOESPROC methodp_glFrustumfOES{nullptr};
	static v8::Handle<v8::Value> method_glFrustumfOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFrustumfOES && args.Length() >= 6){
			obj->methodp_glFrustumfOES(
				(GLfloat )(args[0]->NumberValue())/* GLfloat l */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat n */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRUSTUMXPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
	PFNGLFRUSTUMXPROC methodp_glFrustumx{nullptr};
	static v8::Handle<v8::Value> method_glFrustumx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFrustumx && args.Length() >= 6){
			obj->methodp_glFrustumx(
				(GLfixed )(args[0]->NumberValue())/* GLfixed l */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed r */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed b */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed n */,
				(GLfixed )(args[5]->NumberValue())/* GLfixed f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLFRUSTUMXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
	PFNGLFRUSTUMXOESPROC methodp_glFrustumxOES{nullptr};
	static v8::Handle<v8::Value> method_glFrustumxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glFrustumxOES && args.Length() >= 6){
			obj->methodp_glFrustumxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed l */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed r */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed b */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed n */,
				(GLfixed )(args[5]->NumberValue())/* GLfixed f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
	PFNGLGENASYNCMARKERSSGIXPROC methodp_glGenAsyncMarkersSGIX{nullptr};
	static v8::Handle<v8::Value> method_glGenAsyncMarkersSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenAsyncMarkersSGIX && args.Length() >= 1){
			obj->methodp_glGenAsyncMarkersSGIX(
				(GLsizei )(args[0]->NumberValue())/* GLsizei range */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
	PFNGLGENBUFFERSPROC methodp_glGenBuffers{nullptr};
	static v8::Handle<v8::Value> method_glGenBuffers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenBuffers && args.Length() >= 2){
			obj->methodp_glGenBuffers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *buffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);
	PFNGLGENBUFFERSARBPROC methodp_glGenBuffersARB{nullptr};
	static v8::Handle<v8::Value> method_glGenBuffersARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenBuffersARB && args.Length() >= 2){
			obj->methodp_glGenBuffersARB(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *buffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);
	PFNGLGENFENCESAPPLEPROC methodp_glGenFencesAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glGenFencesAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenFencesAPPLE && args.Length() >= 2){
			obj->methodp_glGenFencesAPPLE(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *fences */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
	PFNGLGENFENCESNVPROC methodp_glGenFencesNV{nullptr};
	static v8::Handle<v8::Value> method_glGenFencesNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenFencesNV && args.Length() >= 2){
			obj->methodp_glGenFencesNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *fences */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
	PFNGLGENFRAGMENTSHADERSATIPROC methodp_glGenFragmentShadersATI{nullptr};
	static v8::Handle<v8::Value> method_glGenFragmentShadersATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenFragmentShadersATI && args.Length() >= 1){
			obj->methodp_glGenFragmentShadersATI(
				(GLuint )(args[0]->NumberValue())/* GLuint range */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
	PFNGLGENFRAMEBUFFERSPROC methodp_glGenFramebuffers{nullptr};
	static v8::Handle<v8::Value> method_glGenFramebuffers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenFramebuffers && args.Length() >= 2){
			obj->methodp_glGenFramebuffers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *framebuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers);
	PFNGLGENFRAMEBUFFERSEXTPROC methodp_glGenFramebuffersEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenFramebuffersEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenFramebuffersEXT && args.Length() >= 2){
			obj->methodp_glGenFramebuffersEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *framebuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSOESPROC) (GLsizei n, GLuint *framebuffers);
	PFNGLGENFRAMEBUFFERSOESPROC methodp_glGenFramebuffersOES{nullptr};
	static v8::Handle<v8::Value> method_glGenFramebuffersOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenFramebuffersOES && args.Length() >= 2){
			obj->methodp_glGenFramebuffersOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *framebuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGENLISTSPROC) (GLsizei range);
	PFNGLGENLISTSPROC methodp_glGenLists{nullptr};
	static v8::Handle<v8::Value> method_glGenLists(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenLists && args.Length() >= 1){
			obj->methodp_glGenLists(
				(GLsizei )(args[0]->NumberValue())/* GLsizei range */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names);
	PFNGLGENNAMESAMDPROC methodp_glGenNamesAMD{nullptr};
	static v8::Handle<v8::Value> method_glGenNamesAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenNamesAMD && args.Length() >= 3){
			obj->methodp_glGenNamesAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum identifier */,
				(GLuint )(args[1]->NumberValue())/* GLuint num */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *names */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);
	PFNGLGENOCCLUSIONQUERIESNVPROC methodp_glGenOcclusionQueriesNV{nullptr};
	static v8::Handle<v8::Value> method_glGenOcclusionQueriesNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenOcclusionQueriesNV && args.Length() >= 2){
			obj->methodp_glGenOcclusionQueriesNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGENPATHSNVPROC) (GLsizei range);
	PFNGLGENPATHSNVPROC methodp_glGenPathsNV{nullptr};
	static v8::Handle<v8::Value> method_glGenPathsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenPathsNV && args.Length() >= 1){
			obj->methodp_glGenPathsNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei range */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
	PFNGLGENPERFMONITORSAMDPROC methodp_glGenPerfMonitorsAMD{nullptr};
	static v8::Handle<v8::Value> method_glGenPerfMonitorsAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenPerfMonitorsAMD && args.Length() >= 2){
			obj->methodp_glGenPerfMonitorsAMD(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *monitors */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);
	PFNGLGENPROGRAMPIPELINESPROC methodp_glGenProgramPipelines{nullptr};
	static v8::Handle<v8::Value> method_glGenProgramPipelines(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenProgramPipelines && args.Length() >= 2){
			obj->methodp_glGenProgramPipelines(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *pipelines */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESEXTPROC) (GLsizei n, GLuint *pipelines);
	PFNGLGENPROGRAMPIPELINESEXTPROC methodp_glGenProgramPipelinesEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenProgramPipelinesEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenProgramPipelinesEXT && args.Length() >= 2){
			obj->methodp_glGenProgramPipelinesEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *pipelines */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);
	PFNGLGENPROGRAMSARBPROC methodp_glGenProgramsARB{nullptr};
	static v8::Handle<v8::Value> method_glGenProgramsARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenProgramsARB && args.Length() >= 2){
			obj->methodp_glGenProgramsARB(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *programs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);
	PFNGLGENPROGRAMSNVPROC methodp_glGenProgramsNV{nullptr};
	static v8::Handle<v8::Value> method_glGenProgramsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenProgramsNV && args.Length() >= 2){
			obj->methodp_glGenProgramsNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *programs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);
	PFNGLGENQUERIESPROC methodp_glGenQueries{nullptr};
	static v8::Handle<v8::Value> method_glGenQueries(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenQueries && args.Length() >= 2){
			obj->methodp_glGenQueries(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);
	PFNGLGENQUERIESARBPROC methodp_glGenQueriesARB{nullptr};
	static v8::Handle<v8::Value> method_glGenQueriesARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenQueriesARB && args.Length() >= 2){
			obj->methodp_glGenQueriesARB(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENQUERIESEXTPROC) (GLsizei n, GLuint *ids);
	PFNGLGENQUERIESEXTPROC methodp_glGenQueriesEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenQueriesEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenQueriesEXT && args.Length() >= 2){
			obj->methodp_glGenQueriesEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
	PFNGLGENRENDERBUFFERSPROC methodp_glGenRenderbuffers{nullptr};
	static v8::Handle<v8::Value> method_glGenRenderbuffers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenRenderbuffers && args.Length() >= 2){
			obj->methodp_glGenRenderbuffers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *renderbuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers);
	PFNGLGENRENDERBUFFERSEXTPROC methodp_glGenRenderbuffersEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenRenderbuffersEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenRenderbuffersEXT && args.Length() >= 2){
			obj->methodp_glGenRenderbuffersEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *renderbuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENRENDERBUFFERSOESPROC) (GLsizei n, GLuint *renderbuffers);
	PFNGLGENRENDERBUFFERSOESPROC methodp_glGenRenderbuffersOES{nullptr};
	static v8::Handle<v8::Value> method_glGenRenderbuffersOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenRenderbuffersOES && args.Length() >= 2){
			obj->methodp_glGenRenderbuffersOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *renderbuffers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);
	PFNGLGENSAMPLERSPROC methodp_glGenSamplers{nullptr};
	static v8::Handle<v8::Value> method_glGenSamplers(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenSamplers && args.Length() >= 2){
			obj->methodp_glGenSamplers(
				(GLsizei )(args[0]->NumberValue())/* GLsizei count */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *samplers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
	PFNGLGENSYMBOLSEXTPROC methodp_glGenSymbolsEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenSymbolsEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenSymbolsEXT && args.Length() >= 4){
			obj->methodp_glGenSymbolsEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum datatype */,
				(GLenum )(args[1]->NumberValue())/* GLenum storagetype */,
				(GLenum )(args[2]->NumberValue())/* GLenum range */,
				(GLuint )(args[3]->NumberValue())/* GLuint components */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);
	PFNGLGENTEXTURESPROC methodp_glGenTextures{nullptr};
	static v8::Handle<v8::Value> method_glGenTextures(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenTextures && args.Length() >= 2){
			obj->methodp_glGenTextures(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *textures */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);
	PFNGLGENTEXTURESEXTPROC methodp_glGenTexturesEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenTexturesEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenTexturesEXT && args.Length() >= 2){
			obj->methodp_glGenTexturesEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *textures */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
	PFNGLGENTRANSFORMFEEDBACKSPROC methodp_glGenTransformFeedbacks{nullptr};
	static v8::Handle<v8::Value> method_glGenTransformFeedbacks(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenTransformFeedbacks && args.Length() >= 2){
			obj->methodp_glGenTransformFeedbacks(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids);
	PFNGLGENTRANSFORMFEEDBACKSNVPROC methodp_glGenTransformFeedbacksNV{nullptr};
	static v8::Handle<v8::Value> method_glGenTransformFeedbacksNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenTransformFeedbacksNV && args.Length() >= 2){
			obj->methodp_glGenTransformFeedbacksNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *ids */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
	PFNGLGENVERTEXARRAYSPROC methodp_glGenVertexArrays{nullptr};
	static v8::Handle<v8::Value> method_glGenVertexArrays(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenVertexArrays && args.Length() >= 2){
			obj->methodp_glGenVertexArrays(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *arrays */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays);
	PFNGLGENVERTEXARRAYSAPPLEPROC methodp_glGenVertexArraysAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glGenVertexArraysAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenVertexArraysAPPLE && args.Length() >= 2){
			obj->methodp_glGenVertexArraysAPPLE(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *arrays */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENVERTEXARRAYSOESPROC) (GLsizei n, GLuint *arrays);
	PFNGLGENVERTEXARRAYSOESPROC methodp_glGenVertexArraysOES{nullptr};
	static v8::Handle<v8::Value> method_glGenVertexArraysOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenVertexArraysOES && args.Length() >= 2){
			obj->methodp_glGenVertexArraysOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *arrays */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
	PFNGLGENVERTEXSHADERSEXTPROC methodp_glGenVertexShadersEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenVertexShadersEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenVertexShadersEXT && args.Length() >= 1){
			obj->methodp_glGenVertexShadersEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint range */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);
	PFNGLGENERATEMIPMAPPROC methodp_glGenerateMipmap{nullptr};
	static v8::Handle<v8::Value> method_glGenerateMipmap(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenerateMipmap && args.Length() >= 1){
			obj->methodp_glGenerateMipmap(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
	PFNGLGENERATEMIPMAPEXTPROC methodp_glGenerateMipmapEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenerateMipmapEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenerateMipmapEXT && args.Length() >= 1){
			obj->methodp_glGenerateMipmapEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENERATEMIPMAPOESPROC) (GLenum target);
	PFNGLGENERATEMIPMAPOESPROC methodp_glGenerateMipmapOES{nullptr};
	static v8::Handle<v8::Value> method_glGenerateMipmapOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenerateMipmapOES && args.Length() >= 1){
			obj->methodp_glGenerateMipmapOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
	PFNGLGENERATEMULTITEXMIPMAPEXTPROC methodp_glGenerateMultiTexMipmapEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenerateMultiTexMipmapEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenerateMultiTexMipmapEXT && args.Length() >= 2){
			obj->methodp_glGenerateMultiTexMipmapEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
	PFNGLGENERATETEXTUREMIPMAPEXTPROC methodp_glGenerateTextureMipmapEXT{nullptr};
	static v8::Handle<v8::Value> method_glGenerateTextureMipmapEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGenerateTextureMipmapEXT && args.Length() >= 2){
			obj->methodp_glGenerateTextureMipmapEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
	PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC methodp_glGetActiveAtomicCounterBufferiv{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveAtomicCounterBufferiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveAtomicCounterBufferiv && args.Length() >= 4){
			obj->methodp_glGetActiveAtomicCounterBufferiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint bufferIndex */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	PFNGLGETACTIVEATTRIBPROC methodp_glGetActiveAttrib{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveAttrib(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveAttrib && args.Length() >= 7){
			obj->methodp_glGetActiveAttrib(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *size */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *type */,
				(GLchar *)((int64_t)args[6]->NumberValue())/* GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
	PFNGLGETACTIVEATTRIBARBPROC methodp_glGetActiveAttribARB{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveAttribARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveAttribARB && args.Length() >= 7){
			obj->methodp_glGetActiveAttribARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei maxLength */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *size */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *type */,
				(GLcharARB *)((int64_t)args[6]->NumberValue())/* GLcharARB *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
	PFNGLGETACTIVESUBROUTINENAMEPROC methodp_glGetActiveSubroutineName{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveSubroutineName(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveSubroutineName && args.Length() >= 6){
			obj->methodp_glGetActiveSubroutineName(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum shadertype */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei bufsize */,
				(GLsizei *)((int64_t)args[4]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[5]->NumberValue())/* GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
	PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC methodp_glGetActiveSubroutineUniformName{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveSubroutineUniformName(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveSubroutineUniformName && args.Length() >= 6){
			obj->methodp_glGetActiveSubroutineUniformName(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum shadertype */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei bufsize */,
				(GLsizei *)((int64_t)args[4]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[5]->NumberValue())/* GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
	PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC methodp_glGetActiveSubroutineUniformiv{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveSubroutineUniformiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveSubroutineUniformiv && args.Length() >= 5){
			obj->methodp_glGetActiveSubroutineUniformiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum shadertype */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
	PFNGLGETACTIVEUNIFORMPROC methodp_glGetActiveUniform{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveUniform(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveUniform && args.Length() >= 7){
			obj->methodp_glGetActiveUniform(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *size */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *type */,
				(GLchar *)((int64_t)args[6]->NumberValue())/* GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
	PFNGLGETACTIVEUNIFORMARBPROC methodp_glGetActiveUniformARB{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveUniformARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveUniformARB && args.Length() >= 7){
			obj->methodp_glGetActiveUniformARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei maxLength */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *size */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *type */,
				(GLcharARB *)((int64_t)args[6]->NumberValue())/* GLcharARB *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
	PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC methodp_glGetActiveUniformBlockName{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveUniformBlockName(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveUniformBlockName && args.Length() >= 5){
			obj->methodp_glGetActiveUniformBlockName(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint uniformBlockIndex */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[4]->NumberValue())/* GLchar *uniformBlockName */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
	PFNGLGETACTIVEUNIFORMBLOCKIVPROC methodp_glGetActiveUniformBlockiv{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveUniformBlockiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveUniformBlockiv && args.Length() >= 4){
			obj->methodp_glGetActiveUniformBlockiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint uniformBlockIndex */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
	PFNGLGETACTIVEUNIFORMNAMEPROC methodp_glGetActiveUniformName{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveUniformName(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveUniformName && args.Length() >= 5){
			obj->methodp_glGetActiveUniformName(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint uniformIndex */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[4]->NumberValue())/* GLchar *uniformName */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
	PFNGLGETACTIVEUNIFORMSIVPROC methodp_glGetActiveUniformsiv{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveUniformsiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveUniformsiv && args.Length() >= 5){
			obj->methodp_glGetActiveUniformsiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei uniformCount */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *uniformIndices */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
	PFNGLGETACTIVEVARYINGNVPROC methodp_glGetActiveVaryingNV{nullptr};
	static v8::Handle<v8::Value> method_glGetActiveVaryingNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetActiveVaryingNV && args.Length() >= 7){
			obj->methodp_glGetActiveVaryingNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLsizei *)((int64_t)args[4]->NumberValue())/* GLsizei *size */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *type */,
				(GLchar *)((int64_t)args[6]->NumberValue())/* GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);
	PFNGLGETARRAYOBJECTFVATIPROC methodp_glGetArrayObjectfvATI{nullptr};
	static v8::Handle<v8::Value> method_glGetArrayObjectfvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetArrayObjectfvATI && args.Length() >= 3){
			obj->methodp_glGetArrayObjectfvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum array */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);
	PFNGLGETARRAYOBJECTIVATIPROC methodp_glGetArrayObjectivATI{nullptr};
	static v8::Handle<v8::Value> method_glGetArrayObjectivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetArrayObjectivATI && args.Length() >= 3){
			obj->methodp_glGetArrayObjectivATI(
				(GLenum )(args[0]->NumberValue())/* GLenum array */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
	PFNGLGETATTACHEDOBJECTSARBPROC methodp_glGetAttachedObjectsARB{nullptr};
	static v8::Handle<v8::Value> method_glGetAttachedObjectsARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetAttachedObjectsARB && args.Length() >= 4){
			obj->methodp_glGetAttachedObjectsARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB containerObj */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei maxCount */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *count */,
				(GLhandleARB *)((int64_t)args[3]->NumberValue())/* GLhandleARB *obj */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
	PFNGLGETATTACHEDSHADERSPROC methodp_glGetAttachedShaders{nullptr};
	static v8::Handle<v8::Value> method_glGetAttachedShaders(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetAttachedShaders && args.Length() >= 4){
			obj->methodp_glGetAttachedShaders(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei maxCount */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *count */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *shaders */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
	PFNGLGETATTRIBLOCATIONPROC methodp_glGetAttribLocation{nullptr};
	static v8::Handle<v8::Value> method_glGetAttribLocation(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetAttribLocation && args.Length() >= 2){
			obj->methodp_glGetAttribLocation(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
	PFNGLGETATTRIBLOCATIONARBPROC methodp_glGetAttribLocationARB{nullptr};
	static v8::Handle<v8::Value> method_glGetAttribLocationARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetAttribLocationARB && args.Length() >= 2){
			obj->methodp_glGetAttribLocationARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */,
				(const GLcharARB *)((int64_t)args[1]->NumberValue())/* const GLcharARB *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
	PFNGLGETBOOLEANINDEXEDVEXTPROC methodp_glGetBooleanIndexedvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetBooleanIndexedvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBooleanIndexedvEXT && args.Length() >= 3){
			obj->methodp_glGetBooleanIndexedvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLboolean *)((int64_t)args[2]->NumberValue())/* GLboolean *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
	PFNGLGETBOOLEANI_VPROC methodp_glGetBooleani_v{nullptr};
	static v8::Handle<v8::Value> method_glGetBooleani_v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBooleani_v && args.Length() >= 3){
			obj->methodp_glGetBooleani_v(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLboolean *)((int64_t)args[2]->NumberValue())/* GLboolean *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBOOLEANVPROC) (GLenum pname, GLboolean *data);
	PFNGLGETBOOLEANVPROC methodp_glGetBooleanv{nullptr};
	static v8::Handle<v8::Value> method_glGetBooleanv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBooleanv && args.Length() >= 2){
			obj->methodp_glGetBooleanv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLboolean *)((int64_t)args[1]->NumberValue())/* GLboolean *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);
	PFNGLGETBUFFERPARAMETERI64VPROC methodp_glGetBufferParameteri64v{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferParameteri64v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferParameteri64v && args.Length() >= 3){
			obj->methodp_glGetBufferParameteri64v(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint64 *)((int64_t)args[2]->NumberValue())/* GLint64 *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETBUFFERPARAMETERIVPROC methodp_glGetBufferParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferParameteriv && args.Length() >= 3){
			obj->methodp_glGetBufferParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETBUFFERPARAMETERIVARBPROC methodp_glGetBufferParameterivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferParameterivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferParameterivARB && args.Length() >= 3){
			obj->methodp_glGetBufferParameterivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);
	PFNGLGETBUFFERPARAMETERUI64VNVPROC methodp_glGetBufferParameterui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferParameterui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferParameterui64vNV && args.Length() >= 3){
			obj->methodp_glGetBufferParameterui64vNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint64EXT *)((int64_t)args[2]->NumberValue())/* GLuint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params);
	PFNGLGETBUFFERPOINTERVPROC methodp_glGetBufferPointerv{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferPointerv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferPointerv && args.Length() >= 3){
			obj->methodp_glGetBufferPointerv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, void **params);
	PFNGLGETBUFFERPOINTERVARBPROC methodp_glGetBufferPointervARB{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferPointervARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferPointervARB && args.Length() >= 3){
			obj->methodp_glGetBufferPointervARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVOESPROC) (GLenum target, GLenum pname, void **params);
	PFNGLGETBUFFERPOINTERVOESPROC methodp_glGetBufferPointervOES{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferPointervOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferPointervOES && args.Length() >= 3){
			obj->methodp_glGetBufferPointervOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data);
	PFNGLGETBUFFERSUBDATAPROC methodp_glGetBufferSubData{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferSubData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferSubData && args.Length() >= 4){
			obj->methodp_glGetBufferSubData(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr size */,
				(void *)((int64_t)args[3]->NumberValue())/* void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);
	PFNGLGETBUFFERSUBDATAARBPROC methodp_glGetBufferSubDataARB{nullptr};
	static v8::Handle<v8::Value> method_glGetBufferSubDataARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetBufferSubDataARB && args.Length() >= 4){
			obj->methodp_glGetBufferSubDataARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptrARB )(args[1]->NumberValue())/* GLintptrARB offset */,
				(GLsizeiptrARB )(args[2]->NumberValue())/* GLsizeiptrARB size */,
				(void *)((int64_t)args[3]->NumberValue())/* void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCLIPPLANEPROC) (GLenum plane, GLdouble *equation);
	PFNGLGETCLIPPLANEPROC methodp_glGetClipPlane{nullptr};
	static v8::Handle<v8::Value> method_glGetClipPlane(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetClipPlane && args.Length() >= 2){
			obj->methodp_glGetClipPlane(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(GLdouble *)((int64_t)args[1]->NumberValue())/* GLdouble *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCLIPPLANEFPROC) (GLenum plane, GLfloat *equation);
	PFNGLGETCLIPPLANEFPROC methodp_glGetClipPlanef{nullptr};
	static v8::Handle<v8::Value> method_glGetClipPlanef(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetClipPlanef && args.Length() >= 2){
			obj->methodp_glGetClipPlanef(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat *equation);
	PFNGLGETCLIPPLANEFOESPROC methodp_glGetClipPlanefOES{nullptr};
	static v8::Handle<v8::Value> method_glGetClipPlanefOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetClipPlanefOES && args.Length() >= 2){
			obj->methodp_glGetClipPlanefOES(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCLIPPLANEXPROC) (GLenum plane, GLfixed *equation);
	PFNGLGETCLIPPLANEXPROC methodp_glGetClipPlanex{nullptr};
	static v8::Handle<v8::Value> method_glGetClipPlanex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetClipPlanex && args.Length() >= 2){
			obj->methodp_glGetClipPlanex(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(GLfixed *)((int64_t)args[1]->NumberValue())/* GLfixed *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCLIPPLANEXOESPROC) (GLenum plane, GLfixed *equation);
	PFNGLGETCLIPPLANEXOESPROC methodp_glGetClipPlanexOES{nullptr};
	static v8::Handle<v8::Value> method_glGetClipPlanexOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetClipPlanexOES && args.Length() >= 2){
			obj->methodp_glGetClipPlanexOES(
				(GLenum )(args[0]->NumberValue())/* GLenum plane */,
				(GLfixed *)((int64_t)args[1]->NumberValue())/* GLfixed *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, void *table);
	PFNGLGETCOLORTABLEPROC methodp_glGetColorTable{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTable(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTable && args.Length() >= 4){
			obj->methodp_glGetColorTable(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[3]->NumberValue())/* void *table */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void *data);
	PFNGLGETCOLORTABLEEXTPROC methodp_glGetColorTableEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTableEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTableEXT && args.Length() >= 4){
			obj->methodp_glGetColorTableEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[3]->NumberValue())/* void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETCOLORTABLEPARAMETERFVPROC methodp_glGetColorTableParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTableParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTableParameterfv && args.Length() >= 3){
			obj->methodp_glGetColorTableParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETCOLORTABLEPARAMETERFVEXTPROC methodp_glGetColorTableParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTableParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTableParameterfvEXT && args.Length() >= 3){
			obj->methodp_glGetColorTableParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETCOLORTABLEPARAMETERFVSGIPROC methodp_glGetColorTableParameterfvSGI{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTableParameterfvSGI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTableParameterfvSGI && args.Length() >= 3){
			obj->methodp_glGetColorTableParameterfvSGI(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETCOLORTABLEPARAMETERIVPROC methodp_glGetColorTableParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTableParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTableParameteriv && args.Length() >= 3){
			obj->methodp_glGetColorTableParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETCOLORTABLEPARAMETERIVEXTPROC methodp_glGetColorTableParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTableParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTableParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetColorTableParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETCOLORTABLEPARAMETERIVSGIPROC methodp_glGetColorTableParameterivSGI{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTableParameterivSGI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTableParameterivSGI && args.Length() >= 3){
			obj->methodp_glGetColorTableParameterivSGI(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void *table);
	PFNGLGETCOLORTABLESGIPROC methodp_glGetColorTableSGI{nullptr};
	static v8::Handle<v8::Value> method_glGetColorTableSGI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetColorTableSGI && args.Length() >= 4){
			obj->methodp_glGetColorTableSGI(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[3]->NumberValue())/* void *table */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
	PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC methodp_glGetCombinerInputParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetCombinerInputParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCombinerInputParameterfvNV && args.Length() >= 5){
			obj->methodp_glGetCombinerInputParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum stage */,
				(GLenum )(args[1]->NumberValue())/* GLenum portion */,
				(GLenum )(args[2]->NumberValue())/* GLenum variable */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[4]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
	PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC methodp_glGetCombinerInputParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetCombinerInputParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCombinerInputParameterivNV && args.Length() >= 5){
			obj->methodp_glGetCombinerInputParameterivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum stage */,
				(GLenum )(args[1]->NumberValue())/* GLenum portion */,
				(GLenum )(args[2]->NumberValue())/* GLenum variable */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
	PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC methodp_glGetCombinerOutputParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetCombinerOutputParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCombinerOutputParameterfvNV && args.Length() >= 4){
			obj->methodp_glGetCombinerOutputParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum stage */,
				(GLenum )(args[1]->NumberValue())/* GLenum portion */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
	PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC methodp_glGetCombinerOutputParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetCombinerOutputParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCombinerOutputParameterivNV && args.Length() >= 4){
			obj->methodp_glGetCombinerOutputParameterivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum stage */,
				(GLenum )(args[1]->NumberValue())/* GLenum portion */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);
	PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC methodp_glGetCombinerStageParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetCombinerStageParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCombinerStageParameterfvNV && args.Length() >= 3){
			obj->methodp_glGetCombinerStageParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum stage */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, void *img);
	PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC methodp_glGetCompressedMultiTexImageEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetCompressedMultiTexImageEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCompressedMultiTexImageEXT && args.Length() >= 4){
			obj->methodp_glGetCompressedMultiTexImageEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint lod */,
				(void *)((int64_t)args[3]->NumberValue())/* void *img */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, void *img);
	PFNGLGETCOMPRESSEDTEXIMAGEPROC methodp_glGetCompressedTexImage{nullptr};
	static v8::Handle<v8::Value> method_glGetCompressedTexImage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCompressedTexImage && args.Length() >= 3){
			obj->methodp_glGetCompressedTexImage(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(void *)((int64_t)args[2]->NumberValue())/* void *img */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, void *img);
	PFNGLGETCOMPRESSEDTEXIMAGEARBPROC methodp_glGetCompressedTexImageARB{nullptr};
	static v8::Handle<v8::Value> method_glGetCompressedTexImageARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCompressedTexImageARB && args.Length() >= 3){
			obj->methodp_glGetCompressedTexImageARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(void *)((int64_t)args[2]->NumberValue())/* void *img */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, void *img);
	PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC methodp_glGetCompressedTextureImageEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetCompressedTextureImageEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetCompressedTextureImageEXT && args.Length() >= 4){
			obj->methodp_glGetCompressedTextureImageEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint lod */,
				(void *)((int64_t)args[3]->NumberValue())/* void *img */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, void *image);
	PFNGLGETCONVOLUTIONFILTERPROC methodp_glGetConvolutionFilter{nullptr};
	static v8::Handle<v8::Value> method_glGetConvolutionFilter(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetConvolutionFilter && args.Length() >= 4){
			obj->methodp_glGetConvolutionFilter(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[3]->NumberValue())/* void *image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *image);
	PFNGLGETCONVOLUTIONFILTEREXTPROC methodp_glGetConvolutionFilterEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetConvolutionFilterEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetConvolutionFilterEXT && args.Length() >= 4){
			obj->methodp_glGetConvolutionFilterEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[3]->NumberValue())/* void *image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETCONVOLUTIONPARAMETERFVPROC methodp_glGetConvolutionParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glGetConvolutionParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetConvolutionParameterfv && args.Length() >= 3){
			obj->methodp_glGetConvolutionParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC methodp_glGetConvolutionParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetConvolutionParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetConvolutionParameterfvEXT && args.Length() >= 3){
			obj->methodp_glGetConvolutionParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETCONVOLUTIONPARAMETERIVPROC methodp_glGetConvolutionParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetConvolutionParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetConvolutionParameteriv && args.Length() >= 3){
			obj->methodp_glGetConvolutionParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC methodp_glGetConvolutionParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetConvolutionParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetConvolutionParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetConvolutionParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
	PFNGLGETCONVOLUTIONPARAMETERXVOESPROC methodp_glGetConvolutionParameterxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetConvolutionParameterxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetConvolutionParameterxvOES && args.Length() >= 3){
			obj->methodp_glGetConvolutionParameterxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	PFNGLGETDEBUGMESSAGELOGPROC methodp_glGetDebugMessageLog{nullptr};
	static v8::Handle<v8::Value> method_glGetDebugMessageLog(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDebugMessageLog && args.Length() >= 8){
			obj->methodp_glGetDebugMessageLog(
				(GLuint )(args[0]->NumberValue())/* GLuint count */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLenum *)((int64_t)args[2]->NumberValue())/* GLenum *sources */,
				(GLenum *)((int64_t)args[3]->NumberValue())/* GLenum *types */,
				(GLuint *)((int64_t)args[4]->NumberValue())/* GLuint *ids */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *severities */,
				(GLsizei *)((int64_t)args[6]->NumberValue())/* GLsizei *lengths */,
				(GLchar *)((int64_t)args[7]->NumberValue())/* GLchar *messageLog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
	PFNGLGETDEBUGMESSAGELOGAMDPROC methodp_glGetDebugMessageLogAMD{nullptr};
	static v8::Handle<v8::Value> method_glGetDebugMessageLogAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDebugMessageLogAMD && args.Length() >= 7){
			obj->methodp_glGetDebugMessageLogAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint count */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufsize */,
				(GLenum *)((int64_t)args[2]->NumberValue())/* GLenum *categories */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *severities */,
				(GLuint *)((int64_t)args[4]->NumberValue())/* GLuint *ids */,
				(GLsizei *)((int64_t)args[5]->NumberValue())/* GLsizei *lengths */,
				(GLchar *)((int64_t)args[6]->NumberValue())/* GLchar *message */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	PFNGLGETDEBUGMESSAGELOGARBPROC methodp_glGetDebugMessageLogARB{nullptr};
	static v8::Handle<v8::Value> method_glGetDebugMessageLogARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDebugMessageLogARB && args.Length() >= 8){
			obj->methodp_glGetDebugMessageLogARB(
				(GLuint )(args[0]->NumberValue())/* GLuint count */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLenum *)((int64_t)args[2]->NumberValue())/* GLenum *sources */,
				(GLenum *)((int64_t)args[3]->NumberValue())/* GLenum *types */,
				(GLuint *)((int64_t)args[4]->NumberValue())/* GLuint *ids */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *severities */,
				(GLsizei *)((int64_t)args[6]->NumberValue())/* GLsizei *lengths */,
				(GLchar *)((int64_t)args[7]->NumberValue())/* GLchar *messageLog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGKHRPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
	PFNGLGETDEBUGMESSAGELOGKHRPROC methodp_glGetDebugMessageLogKHR{nullptr};
	static v8::Handle<v8::Value> method_glGetDebugMessageLogKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDebugMessageLogKHR && args.Length() >= 8){
			obj->methodp_glGetDebugMessageLogKHR(
				(GLuint )(args[0]->NumberValue())/* GLuint count */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLenum *)((int64_t)args[2]->NumberValue())/* GLenum *sources */,
				(GLenum *)((int64_t)args[3]->NumberValue())/* GLenum *types */,
				(GLuint *)((int64_t)args[4]->NumberValue())/* GLuint *ids */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *severities */,
				(GLsizei *)((int64_t)args[6]->NumberValue())/* GLsizei *lengths */,
				(GLchar *)((int64_t)args[7]->NumberValue())/* GLchar *messageLog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
	PFNGLGETDETAILTEXFUNCSGISPROC methodp_glGetDetailTexFuncSGIS{nullptr};
	static v8::Handle<v8::Value> method_glGetDetailTexFuncSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDetailTexFuncSGIS && args.Length() >= 2){
			obj->methodp_glGetDetailTexFuncSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);
	PFNGLGETDOUBLEINDEXEDVEXTPROC methodp_glGetDoubleIndexedvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetDoubleIndexedvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDoubleIndexedvEXT && args.Length() >= 3){
			obj->methodp_glGetDoubleIndexedvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);
	PFNGLGETDOUBLEI_VPROC methodp_glGetDoublei_v{nullptr};
	static v8::Handle<v8::Value> method_glGetDoublei_v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDoublei_v && args.Length() >= 3){
			obj->methodp_glGetDoublei_v(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params);
	PFNGLGETDOUBLEI_VEXTPROC methodp_glGetDoublei_vEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetDoublei_vEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDoublei_vEXT && args.Length() >= 3){
			obj->methodp_glGetDoublei_vEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETDOUBLEVPROC) (GLenum pname, GLdouble *data);
	PFNGLGETDOUBLEVPROC methodp_glGetDoublev{nullptr};
	static v8::Handle<v8::Value> method_glGetDoublev(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDoublev && args.Length() >= 2){
			obj->methodp_glGetDoublev(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[1]->NumberValue())/* GLdouble *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETDRIVERCONTROLSTRINGQCOMPROC) (GLuint driverControl, GLsizei bufSize, GLsizei *length, GLchar *driverControlString);
	PFNGLGETDRIVERCONTROLSTRINGQCOMPROC methodp_glGetDriverControlStringQCOM{nullptr};
	static v8::Handle<v8::Value> method_glGetDriverControlStringQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDriverControlStringQCOM && args.Length() >= 4){
			obj->methodp_glGetDriverControlStringQCOM(
				(GLuint )(args[0]->NumberValue())/* GLuint driverControl */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *driverControlString */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETDRIVERCONTROLSQCOMPROC) (GLint *num, GLsizei size, GLuint *driverControls);
	PFNGLGETDRIVERCONTROLSQCOMPROC methodp_glGetDriverControlsQCOM{nullptr};
	static v8::Handle<v8::Value> method_glGetDriverControlsQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetDriverControlsQCOM && args.Length() >= 3){
			obj->methodp_glGetDriverControlsQCOM(
				(GLint *)((int64_t)args[0]->NumberValue())/* GLint *num */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei size */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *driverControls */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLGETERRORPROC) ();
	PFNGLGETERRORPROC methodp_glGetError{nullptr};
	static v8::Handle<v8::Value> method_glGetError(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetError && args.Length() >= 0){
			obj->methodp_glGetError(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);
	PFNGLGETFENCEIVNVPROC methodp_glGetFenceivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetFenceivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFenceivNV && args.Length() >= 3){
			obj->methodp_glGetFenceivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);
	PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC methodp_glGetFinalCombinerInputParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetFinalCombinerInputParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFinalCombinerInputParameterfvNV && args.Length() >= 3){
			obj->methodp_glGetFinalCombinerInputParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum variable */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);
	PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC methodp_glGetFinalCombinerInputParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetFinalCombinerInputParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFinalCombinerInputParameterivNV && args.Length() >= 3){
			obj->methodp_glGetFinalCombinerInputParameterivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum variable */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint *queryId);
	PFNGLGETFIRSTPERFQUERYIDINTELPROC methodp_glGetFirstPerfQueryIdINTEL{nullptr};
	static v8::Handle<v8::Value> method_glGetFirstPerfQueryIdINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFirstPerfQueryIdINTEL && args.Length() >= 1){
			obj->methodp_glGetFirstPerfQueryIdINTEL(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *queryId */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFIXEDVPROC) (GLenum pname, GLfixed *params);
	PFNGLGETFIXEDVPROC methodp_glGetFixedv{nullptr};
	static v8::Handle<v8::Value> method_glGetFixedv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFixedv && args.Length() >= 2){
			obj->methodp_glGetFixedv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[1]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFIXEDVOESPROC) (GLenum pname, GLfixed *params);
	PFNGLGETFIXEDVOESPROC methodp_glGetFixedvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetFixedvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFixedvOES && args.Length() >= 2){
			obj->methodp_glGetFixedvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[1]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);
	PFNGLGETFLOATINDEXEDVEXTPROC methodp_glGetFloatIndexedvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetFloatIndexedvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFloatIndexedvEXT && args.Length() >= 3){
			obj->methodp_glGetFloatIndexedvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);
	PFNGLGETFLOATI_VPROC methodp_glGetFloati_v{nullptr};
	static v8::Handle<v8::Value> method_glGetFloati_v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFloati_v && args.Length() >= 3){
			obj->methodp_glGetFloati_v(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);
	PFNGLGETFLOATI_VEXTPROC methodp_glGetFloati_vEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetFloati_vEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFloati_vEXT && args.Length() >= 3){
			obj->methodp_glGetFloati_vEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFLOATVPROC) (GLenum pname, GLfloat *data);
	PFNGLGETFLOATVPROC methodp_glGetFloatv{nullptr};
	static v8::Handle<v8::Value> method_glGetFloatv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFloatv && args.Length() >= 2){
			obj->methodp_glGetFloatv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);
	PFNGLGETFOGFUNCSGISPROC methodp_glGetFogFuncSGIS{nullptr};
	static v8::Handle<v8::Value> method_glGetFogFuncSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFogFuncSGIS && args.Length() >= 1){
			obj->methodp_glGetFogFuncSGIS(
				(GLfloat *)((int64_t)args[0]->NumberValue())/* GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);
	PFNGLGETFRAGDATAINDEXPROC methodp_glGetFragDataIndex{nullptr};
	static v8::Handle<v8::Value> method_glGetFragDataIndex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFragDataIndex && args.Length() >= 2){
			obj->methodp_glGetFragDataIndex(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);
	PFNGLGETFRAGDATALOCATIONPROC methodp_glGetFragDataLocation{nullptr};
	static v8::Handle<v8::Value> method_glGetFragDataLocation(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFragDataLocation && args.Length() >= 2){
			obj->methodp_glGetFragDataLocation(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
	PFNGLGETFRAGDATALOCATIONEXTPROC methodp_glGetFragDataLocationEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetFragDataLocationEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFragDataLocationEXT && args.Length() >= 2){
			obj->methodp_glGetFragDataLocationEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);
	PFNGLGETFRAGMENTLIGHTFVSGIXPROC methodp_glGetFragmentLightfvSGIX{nullptr};
	static v8::Handle<v8::Value> method_glGetFragmentLightfvSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFragmentLightfvSGIX && args.Length() >= 3){
			obj->methodp_glGetFragmentLightfvSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);
	PFNGLGETFRAGMENTLIGHTIVSGIXPROC methodp_glGetFragmentLightivSGIX{nullptr};
	static v8::Handle<v8::Value> method_glGetFragmentLightivSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFragmentLightivSGIX && args.Length() >= 3){
			obj->methodp_glGetFragmentLightivSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);
	PFNGLGETFRAGMENTMATERIALFVSGIXPROC methodp_glGetFragmentMaterialfvSGIX{nullptr};
	static v8::Handle<v8::Value> method_glGetFragmentMaterialfvSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFragmentMaterialfvSGIX && args.Length() >= 3){
			obj->methodp_glGetFragmentMaterialfvSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);
	PFNGLGETFRAGMENTMATERIALIVSGIXPROC methodp_glGetFragmentMaterialivSGIX{nullptr};
	static v8::Handle<v8::Value> method_glGetFragmentMaterialivSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFragmentMaterialivSGIX && args.Length() >= 3){
			obj->methodp_glGetFragmentMaterialivSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
	PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC methodp_glGetFramebufferAttachmentParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetFramebufferAttachmentParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFramebufferAttachmentParameteriv && args.Length() >= 4){
			obj->methodp_glGetFramebufferAttachmentParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
	PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC methodp_glGetFramebufferAttachmentParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetFramebufferAttachmentParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFramebufferAttachmentParameterivEXT && args.Length() >= 4){
			obj->methodp_glGetFramebufferAttachmentParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
	PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC methodp_glGetFramebufferAttachmentParameterivOES{nullptr};
	static v8::Handle<v8::Value> method_glGetFramebufferAttachmentParameterivOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFramebufferAttachmentParameterivOES && args.Length() >= 4){
			obj->methodp_glGetFramebufferAttachmentParameterivOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETFRAMEBUFFERPARAMETERIVPROC methodp_glGetFramebufferParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetFramebufferParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFramebufferParameteriv && args.Length() >= 3){
			obj->methodp_glGetFramebufferParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
	PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC methodp_glGetFramebufferParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetFramebufferParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetFramebufferParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetFramebufferParameterivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) ();
	PFNGLGETGRAPHICSRESETSTATUSARBPROC methodp_glGetGraphicsResetStatusARB{nullptr};
	static v8::Handle<v8::Value> method_glGetGraphicsResetStatusARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetGraphicsResetStatusARB && args.Length() >= 0){
			obj->methodp_glGetGraphicsResetStatusARB(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSEXTPROC) ();
	PFNGLGETGRAPHICSRESETSTATUSEXTPROC methodp_glGetGraphicsResetStatusEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetGraphicsResetStatusEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetGraphicsResetStatusEXT && args.Length() >= 0){
			obj->methodp_glGetGraphicsResetStatusEXT(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLhandleARB (APIENTRYP PFNGLGETHANDLEARBPROC) (GLenum pname);
	PFNGLGETHANDLEARBPROC methodp_glGetHandleARB{nullptr};
	static v8::Handle<v8::Value> method_glGetHandleARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetHandleARB && args.Length() >= 1){
			obj->methodp_glGetHandleARB(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
	PFNGLGETHISTOGRAMPROC methodp_glGetHistogram{nullptr};
	static v8::Handle<v8::Value> method_glGetHistogram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetHistogram && args.Length() >= 5){
			obj->methodp_glGetHistogram(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean reset */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[4]->NumberValue())/* void *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
	PFNGLGETHISTOGRAMEXTPROC methodp_glGetHistogramEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetHistogramEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetHistogramEXT && args.Length() >= 5){
			obj->methodp_glGetHistogramEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean reset */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[4]->NumberValue())/* void *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETHISTOGRAMPARAMETERFVPROC methodp_glGetHistogramParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glGetHistogramParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetHistogramParameterfv && args.Length() >= 3){
			obj->methodp_glGetHistogramParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETHISTOGRAMPARAMETERFVEXTPROC methodp_glGetHistogramParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetHistogramParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetHistogramParameterfvEXT && args.Length() >= 3){
			obj->methodp_glGetHistogramParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETHISTOGRAMPARAMETERIVPROC methodp_glGetHistogramParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetHistogramParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetHistogramParameteriv && args.Length() >= 3){
			obj->methodp_glGetHistogramParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETHISTOGRAMPARAMETERIVEXTPROC methodp_glGetHistogramParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetHistogramParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetHistogramParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetHistogramParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
	PFNGLGETHISTOGRAMPARAMETERXVOESPROC methodp_glGetHistogramParameterxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetHistogramParameterxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetHistogramParameterxvOES && args.Length() >= 3){
			obj->methodp_glGetHistogramParameterxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
	PFNGLGETIMAGEHANDLEARBPROC methodp_glGetImageHandleARB{nullptr};
	static v8::Handle<v8::Value> method_glGetImageHandleARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetImageHandleARB && args.Length() >= 5){
			obj->methodp_glGetImageHandleARB(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean layered */,
				(GLint )(args[3]->NumberValue())/* GLint layer */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint64 (APIENTRYP PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
	PFNGLGETIMAGEHANDLENVPROC methodp_glGetImageHandleNV{nullptr};
	static v8::Handle<v8::Value> method_glGetImageHandleNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetImageHandleNV && args.Length() >= 5){
			obj->methodp_glGetImageHandleNV(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean layered */,
				(GLint )(args[3]->NumberValue())/* GLint layer */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC methodp_glGetImageTransformParameterfvHP{nullptr};
	static v8::Handle<v8::Value> method_glGetImageTransformParameterfvHP(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetImageTransformParameterfvHP && args.Length() >= 3){
			obj->methodp_glGetImageTransformParameterfvHP(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC methodp_glGetImageTransformParameterivHP{nullptr};
	static v8::Handle<v8::Value> method_glGetImageTransformParameterivHP(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetImageTransformParameterivHP && args.Length() >= 3){
			obj->methodp_glGetImageTransformParameterivHP(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
	PFNGLGETINFOLOGARBPROC methodp_glGetInfoLogARB{nullptr};
	static v8::Handle<v8::Value> method_glGetInfoLogARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInfoLogARB && args.Length() >= 4){
			obj->methodp_glGetInfoLogARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB obj */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei maxLength */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLcharARB *)((int64_t)args[3]->NumberValue())/* GLcharARB *infoLog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC) ();
	PFNGLGETINSTRUMENTSSGIXPROC methodp_glGetInstrumentsSGIX{nullptr};
	static v8::Handle<v8::Value> method_glGetInstrumentsSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInstrumentsSGIX && args.Length() >= 0){
			obj->methodp_glGetInstrumentsSGIX(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
	PFNGLGETINTEGER64I_VPROC methodp_glGetInteger64i_v{nullptr};
	static v8::Handle<v8::Value> method_glGetInteger64i_v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInteger64i_v && args.Length() >= 3){
			obj->methodp_glGetInteger64i_v(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint64 *)((int64_t)args[2]->NumberValue())/* GLint64 *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data);
	PFNGLGETINTEGER64VPROC methodp_glGetInteger64v{nullptr};
	static v8::Handle<v8::Value> method_glGetInteger64v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInteger64v && args.Length() >= 2){
			obj->methodp_glGetInteger64v(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint64 *)((int64_t)args[1]->NumberValue())/* GLint64 *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGER64VAPPLEPROC) (GLenum pname, GLint64 *params);
	PFNGLGETINTEGER64VAPPLEPROC methodp_glGetInteger64vAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glGetInteger64vAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInteger64vAPPLE && args.Length() >= 2){
			obj->methodp_glGetInteger64vAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint64 *)((int64_t)args[1]->NumberValue())/* GLint64 *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
	PFNGLGETINTEGERINDEXEDVEXTPROC methodp_glGetIntegerIndexedvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetIntegerIndexedvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetIntegerIndexedvEXT && args.Length() >= 3){
			obj->methodp_glGetIntegerIndexedvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
	PFNGLGETINTEGERI_VPROC methodp_glGetIntegeri_v{nullptr};
	static v8::Handle<v8::Value> method_glGetIntegeri_v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetIntegeri_v && args.Length() >= 3){
			obj->methodp_glGetIntegeri_v(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGERI_VEXTPROC) (GLenum target, GLuint index, GLint *data);
	PFNGLGETINTEGERI_VEXTPROC methodp_glGetIntegeri_vEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetIntegeri_vEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetIntegeri_vEXT && args.Length() >= 3){
			obj->methodp_glGetIntegeri_vEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);
	PFNGLGETINTEGERUI64I_VNVPROC methodp_glGetIntegerui64i_vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetIntegerui64i_vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetIntegerui64i_vNV && args.Length() >= 3){
			obj->methodp_glGetIntegerui64i_vNV(
				(GLenum )(args[0]->NumberValue())/* GLenum value */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint64EXT *)((int64_t)args[2]->NumberValue())/* GLuint64EXT *result */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);
	PFNGLGETINTEGERUI64VNVPROC methodp_glGetIntegerui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetIntegerui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetIntegerui64vNV && args.Length() >= 2){
			obj->methodp_glGetIntegerui64vNV(
				(GLenum )(args[0]->NumberValue())/* GLenum value */,
				(GLuint64EXT *)((int64_t)args[1]->NumberValue())/* GLuint64EXT *result */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);
	PFNGLGETINTEGERVPROC methodp_glGetIntegerv{nullptr};
	static v8::Handle<v8::Value> method_glGetIntegerv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetIntegerv && args.Length() >= 2){
			obj->methodp_glGetIntegerv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[1]->NumberValue())/* GLint *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
	PFNGLGETINTERNALFORMATI64VPROC methodp_glGetInternalformati64v{nullptr};
	static v8::Handle<v8::Value> method_glGetInternalformati64v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInternalformati64v && args.Length() >= 5){
			obj->methodp_glGetInternalformati64v(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei bufSize */,
				(GLint64 *)((int64_t)args[4]->NumberValue())/* GLint64 *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
	PFNGLGETINTERNALFORMATIVPROC methodp_glGetInternalformativ{nullptr};
	static v8::Handle<v8::Value> method_glGetInternalformativ(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInternalformativ && args.Length() >= 5){
			obj->methodp_glGetInternalformativ(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei bufSize */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
	PFNGLGETINVARIANTBOOLEANVEXTPROC methodp_glGetInvariantBooleanvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetInvariantBooleanvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInvariantBooleanvEXT && args.Length() >= 3){
			obj->methodp_glGetInvariantBooleanvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLboolean *)((int64_t)args[2]->NumberValue())/* GLboolean *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
	PFNGLGETINVARIANTFLOATVEXTPROC methodp_glGetInvariantFloatvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetInvariantFloatvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInvariantFloatvEXT && args.Length() >= 3){
			obj->methodp_glGetInvariantFloatvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
	PFNGLGETINVARIANTINTEGERVEXTPROC methodp_glGetInvariantIntegervEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetInvariantIntegervEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetInvariantIntegervEXT && args.Length() >= 3){
			obj->methodp_glGetInvariantIntegervEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLIGHTFVPROC) (GLenum light, GLenum pname, GLfloat *params);
	PFNGLGETLIGHTFVPROC methodp_glGetLightfv{nullptr};
	static v8::Handle<v8::Value> method_glGetLightfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetLightfv && args.Length() >= 3){
			obj->methodp_glGetLightfv(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLIGHTIVPROC) (GLenum light, GLenum pname, GLint *params);
	PFNGLGETLIGHTIVPROC methodp_glGetLightiv{nullptr};
	static v8::Handle<v8::Value> method_glGetLightiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetLightiv && args.Length() >= 3){
			obj->methodp_glGetLightiv(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed *params);
	PFNGLGETLIGHTXOESPROC methodp_glGetLightxOES{nullptr};
	static v8::Handle<v8::Value> method_glGetLightxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetLightxOES && args.Length() >= 3){
			obj->methodp_glGetLightxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLIGHTXVPROC) (GLenum light, GLenum pname, GLfixed *params);
	PFNGLGETLIGHTXVPROC methodp_glGetLightxv{nullptr};
	static v8::Handle<v8::Value> method_glGetLightxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetLightxv && args.Length() >= 3){
			obj->methodp_glGetLightxv(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLIGHTXVOESPROC) (GLenum light, GLenum pname, GLfixed *params);
	PFNGLGETLIGHTXVOESPROC methodp_glGetLightxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetLightxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetLightxvOES && args.Length() >= 3){
			obj->methodp_glGetLightxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);
	PFNGLGETLISTPARAMETERFVSGIXPROC methodp_glGetListParameterfvSGIX{nullptr};
	static v8::Handle<v8::Value> method_glGetListParameterfvSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetListParameterfvSGIX && args.Length() >= 3){
			obj->methodp_glGetListParameterfvSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint list */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);
	PFNGLGETLISTPARAMETERIVSGIXPROC methodp_glGetListParameterivSGIX{nullptr};
	static v8::Handle<v8::Value> method_glGetListParameterivSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetListParameterivSGIX && args.Length() >= 3){
			obj->methodp_glGetListParameterivSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint list */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
	PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC methodp_glGetLocalConstantBooleanvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetLocalConstantBooleanvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetLocalConstantBooleanvEXT && args.Length() >= 3){
			obj->methodp_glGetLocalConstantBooleanvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLboolean *)((int64_t)args[2]->NumberValue())/* GLboolean *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
	PFNGLGETLOCALCONSTANTFLOATVEXTPROC methodp_glGetLocalConstantFloatvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetLocalConstantFloatvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetLocalConstantFloatvEXT && args.Length() >= 3){
			obj->methodp_glGetLocalConstantFloatvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
	PFNGLGETLOCALCONSTANTINTEGERVEXTPROC methodp_glGetLocalConstantIntegervEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetLocalConstantIntegervEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetLocalConstantIntegervEXT && args.Length() >= 3){
			obj->methodp_glGetLocalConstantIntegervEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
	PFNGLGETMAPATTRIBPARAMETERFVNVPROC methodp_glGetMapAttribParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetMapAttribParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapAttribParameterfvNV && args.Length() >= 4){
			obj->methodp_glGetMapAttribParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
	PFNGLGETMAPATTRIBPARAMETERIVNVPROC methodp_glGetMapAttribParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetMapAttribParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapAttribParameterivNV && args.Length() >= 4){
			obj->methodp_glGetMapAttribParameterivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);
	PFNGLGETMAPCONTROLPOINTSNVPROC methodp_glGetMapControlPointsNV{nullptr};
	static v8::Handle<v8::Value> method_glGetMapControlPointsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapControlPointsNV && args.Length() >= 7){
			obj->methodp_glGetMapControlPointsNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei ustride */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei vstride */,
				(GLboolean )(args[5]->NumberValue())/* GLboolean packed */,
				(void *)((int64_t)args[6]->NumberValue())/* void *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETMAPPARAMETERFVNVPROC methodp_glGetMapParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetMapParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapParameterfvNV && args.Length() >= 3){
			obj->methodp_glGetMapParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETMAPPARAMETERIVNVPROC methodp_glGetMapParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetMapParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapParameterivNV && args.Length() >= 3){
			obj->methodp_glGetMapParameterivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPDVPROC) (GLenum target, GLenum query, GLdouble *v);
	PFNGLGETMAPDVPROC methodp_glGetMapdv{nullptr};
	static v8::Handle<v8::Value> method_glGetMapdv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapdv && args.Length() >= 3){
			obj->methodp_glGetMapdv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum query */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPFVPROC) (GLenum target, GLenum query, GLfloat *v);
	PFNGLGETMAPFVPROC methodp_glGetMapfv{nullptr};
	static v8::Handle<v8::Value> method_glGetMapfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapfv && args.Length() >= 3){
			obj->methodp_glGetMapfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum query */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPIVPROC) (GLenum target, GLenum query, GLint *v);
	PFNGLGETMAPIVPROC methodp_glGetMapiv{nullptr};
	static v8::Handle<v8::Value> method_glGetMapiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapiv && args.Length() >= 3){
			obj->methodp_glGetMapiv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum query */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMAPXVOESPROC) (GLenum target, GLenum query, GLfixed *v);
	PFNGLGETMAPXVOESPROC methodp_glGetMapxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetMapxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMapxvOES && args.Length() >= 3){
			obj->methodp_glGetMapxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum query */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMATERIALFVPROC) (GLenum face, GLenum pname, GLfloat *params);
	PFNGLGETMATERIALFVPROC methodp_glGetMaterialfv{nullptr};
	static v8::Handle<v8::Value> method_glGetMaterialfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMaterialfv && args.Length() >= 3){
			obj->methodp_glGetMaterialfv(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMATERIALIVPROC) (GLenum face, GLenum pname, GLint *params);
	PFNGLGETMATERIALIVPROC methodp_glGetMaterialiv{nullptr};
	static v8::Handle<v8::Value> method_glGetMaterialiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMaterialiv && args.Length() >= 3){
			obj->methodp_glGetMaterialiv(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);
	PFNGLGETMATERIALXOESPROC methodp_glGetMaterialxOES{nullptr};
	static v8::Handle<v8::Value> method_glGetMaterialxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMaterialxOES && args.Length() >= 3){
			obj->methodp_glGetMaterialxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMATERIALXVPROC) (GLenum face, GLenum pname, GLfixed *params);
	PFNGLGETMATERIALXVPROC methodp_glGetMaterialxv{nullptr};
	static v8::Handle<v8::Value> method_glGetMaterialxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMaterialxv && args.Length() >= 3){
			obj->methodp_glGetMaterialxv(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMATERIALXVOESPROC) (GLenum face, GLenum pname, GLfixed *params);
	PFNGLGETMATERIALXVOESPROC methodp_glGetMaterialxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetMaterialxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMaterialxvOES && args.Length() >= 3){
			obj->methodp_glGetMaterialxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
	PFNGLGETMINMAXPROC methodp_glGetMinmax{nullptr};
	static v8::Handle<v8::Value> method_glGetMinmax(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMinmax && args.Length() >= 5){
			obj->methodp_glGetMinmax(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean reset */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[4]->NumberValue())/* void *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);
	PFNGLGETMINMAXEXTPROC methodp_glGetMinmaxEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMinmaxEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMinmaxEXT && args.Length() >= 5){
			obj->methodp_glGetMinmaxEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean reset */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[4]->NumberValue())/* void *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETMINMAXPARAMETERFVPROC methodp_glGetMinmaxParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glGetMinmaxParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMinmaxParameterfv && args.Length() >= 3){
			obj->methodp_glGetMinmaxParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETMINMAXPARAMETERFVEXTPROC methodp_glGetMinmaxParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMinmaxParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMinmaxParameterfvEXT && args.Length() >= 3){
			obj->methodp_glGetMinmaxParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETMINMAXPARAMETERIVPROC methodp_glGetMinmaxParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetMinmaxParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMinmaxParameteriv && args.Length() >= 3){
			obj->methodp_glGetMinmaxParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETMINMAXPARAMETERIVEXTPROC methodp_glGetMinmaxParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMinmaxParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMinmaxParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetMinmaxParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETMULTITEXENVFVEXTPROC methodp_glGetMultiTexEnvfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexEnvfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexEnvfvEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexEnvfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
	PFNGLGETMULTITEXENVIVEXTPROC methodp_glGetMultiTexEnvivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexEnvivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexEnvivEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexEnvivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
	PFNGLGETMULTITEXGENDVEXTPROC methodp_glGetMultiTexGendvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexGendvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexGendvEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexGendvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[3]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
	PFNGLGETMULTITEXGENFVEXTPROC methodp_glGetMultiTexGenfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexGenfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexGenfvEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexGenfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
	PFNGLGETMULTITEXGENIVEXTPROC methodp_glGetMultiTexGenivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexGenivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexGenivEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexGenivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
	PFNGLGETMULTITEXIMAGEEXTPROC methodp_glGetMultiTexImageEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexImageEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexImageEXT && args.Length() >= 6){
			obj->methodp_glGetMultiTexImageEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[5]->NumberValue())/* void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
	PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC methodp_glGetMultiTexLevelParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexLevelParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexLevelParameterfvEXT && args.Length() >= 5){
			obj->methodp_glGetMultiTexLevelParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[4]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
	PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC methodp_glGetMultiTexLevelParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexLevelParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexLevelParameterivEXT && args.Length() >= 5){
			obj->methodp_glGetMultiTexLevelParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
	PFNGLGETMULTITEXPARAMETERIIVEXTPROC methodp_glGetMultiTexParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexParameterIivEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexParameterIivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
	PFNGLGETMULTITEXPARAMETERIUIVEXTPROC methodp_glGetMultiTexParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexParameterIuivEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexParameterIuivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETMULTITEXPARAMETERFVEXTPROC methodp_glGetMultiTexParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexParameterfvEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
	PFNGLGETMULTITEXPARAMETERIVEXTPROC methodp_glGetMultiTexParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetMultiTexParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultiTexParameterivEXT && args.Length() >= 4){
			obj->methodp_glGetMultiTexParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);
	PFNGLGETMULTISAMPLEFVPROC methodp_glGetMultisamplefv{nullptr};
	static v8::Handle<v8::Value> method_glGetMultisamplefv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultisamplefv && args.Length() >= 3){
			obj->methodp_glGetMultisamplefv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *val */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val);
	PFNGLGETMULTISAMPLEFVNVPROC methodp_glGetMultisamplefvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetMultisamplefvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetMultisamplefvNV && args.Length() >= 3){
			obj->methodp_glGetMultisamplefvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *val */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);
	PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC methodp_glGetNamedBufferParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedBufferParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedBufferParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetNamedBufferParameterivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);
	PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC methodp_glGetNamedBufferParameterui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedBufferParameterui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedBufferParameterui64vNV && args.Length() >= 3){
			obj->methodp_glGetNamedBufferParameterui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint64EXT *)((int64_t)args[2]->NumberValue())/* GLuint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void **params);
	PFNGLGETNAMEDBUFFERPOINTERVEXTPROC methodp_glGetNamedBufferPointervEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedBufferPointervEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedBufferPointervEXT && args.Length() >= 3){
			obj->methodp_glGetNamedBufferPointervEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
	PFNGLGETNAMEDBUFFERSUBDATAEXTPROC methodp_glGetNamedBufferSubDataEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedBufferSubDataEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedBufferSubDataEXT && args.Length() >= 4){
			obj->methodp_glGetNamedBufferSubDataEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr size */,
				(void *)((int64_t)args[3]->NumberValue())/* void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
	PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC methodp_glGetNamedFramebufferAttachmentParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedFramebufferAttachmentParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedFramebufferAttachmentParameterivEXT && args.Length() >= 4){
			obj->methodp_glGetNamedFramebufferAttachmentParameterivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
	PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC methodp_glGetNamedFramebufferParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedFramebufferParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedFramebufferParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetNamedFramebufferParameterivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);
	PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC methodp_glGetNamedProgramLocalParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedProgramLocalParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedProgramLocalParameterIivEXT && args.Length() >= 4){
			obj->methodp_glGetNamedProgramLocalParameterIivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);
	PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC methodp_glGetNamedProgramLocalParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedProgramLocalParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedProgramLocalParameterIuivEXT && args.Length() >= 4){
			obj->methodp_glGetNamedProgramLocalParameterIuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);
	PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC methodp_glGetNamedProgramLocalParameterdvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedProgramLocalParameterdvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedProgramLocalParameterdvEXT && args.Length() >= 4){
			obj->methodp_glGetNamedProgramLocalParameterdvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLdouble *)((int64_t)args[3]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);
	PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC methodp_glGetNamedProgramLocalParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedProgramLocalParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedProgramLocalParameterfvEXT && args.Length() >= 4){
			obj->methodp_glGetNamedProgramLocalParameterfvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string);
	PFNGLGETNAMEDPROGRAMSTRINGEXTPROC methodp_glGetNamedProgramStringEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedProgramStringEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedProgramStringEXT && args.Length() >= 4){
			obj->methodp_glGetNamedProgramStringEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(void *)((int64_t)args[3]->NumberValue())/* void *string */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);
	PFNGLGETNAMEDPROGRAMIVEXTPROC methodp_glGetNamedProgramivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedProgramivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedProgramivEXT && args.Length() >= 4){
			obj->methodp_glGetNamedProgramivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
	PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC methodp_glGetNamedRenderbufferParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedRenderbufferParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedRenderbufferParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetNamedRenderbufferParameterivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint renderbuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
	PFNGLGETNAMEDSTRINGARBPROC methodp_glGetNamedStringARB{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedStringARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedStringARB && args.Length() >= 5){
			obj->methodp_glGetNamedStringARB(
				(GLint )(args[0]->NumberValue())/* GLint namelen */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *stringlen */,
				(GLchar *)((int64_t)args[4]->NumberValue())/* GLchar *string */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
	PFNGLGETNAMEDSTRINGIVARBPROC methodp_glGetNamedStringivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetNamedStringivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNamedStringivARB && args.Length() >= 4){
			obj->methodp_glGetNamedStringivARB(
				(GLint )(args[0]->NumberValue())/* GLint namelen */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint *nextQueryId);
	PFNGLGETNEXTPERFQUERYIDINTELPROC methodp_glGetNextPerfQueryIdINTEL{nullptr};
	static v8::Handle<v8::Value> method_glGetNextPerfQueryIdINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetNextPerfQueryIdINTEL && args.Length() >= 2){
			obj->methodp_glGetNextPerfQueryIdINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint queryId */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *nextQueryId */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);
	PFNGLGETOBJECTBUFFERFVATIPROC methodp_glGetObjectBufferfvATI{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectBufferfvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectBufferfvATI && args.Length() >= 3){
			obj->methodp_glGetObjectBufferfvATI(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);
	PFNGLGETOBJECTBUFFERIVATIPROC methodp_glGetObjectBufferivATI{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectBufferivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectBufferivATI && args.Length() >= 3){
			obj->methodp_glGetObjectBufferivATI(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
	PFNGLGETOBJECTLABELPROC methodp_glGetObjectLabel{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectLabel(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectLabel && args.Length() >= 5){
			obj->methodp_glGetObjectLabel(
				(GLenum )(args[0]->NumberValue())/* GLenum identifier */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[4]->NumberValue())/* GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
	PFNGLGETOBJECTLABELEXTPROC methodp_glGetObjectLabelEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectLabelEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectLabelEXT && args.Length() >= 5){
			obj->methodp_glGetObjectLabelEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint object */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[4]->NumberValue())/* GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTLABELKHRPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
	PFNGLGETOBJECTLABELKHRPROC methodp_glGetObjectLabelKHR{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectLabelKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectLabelKHR && args.Length() >= 5){
			obj->methodp_glGetObjectLabelKHR(
				(GLenum )(args[0]->NumberValue())/* GLenum identifier */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[4]->NumberValue())/* GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);
	PFNGLGETOBJECTPARAMETERFVARBPROC methodp_glGetObjectParameterfvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectParameterfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectParameterfvARB && args.Length() >= 3){
			obj->methodp_glGetObjectParameterfvARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB obj */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params);
	PFNGLGETOBJECTPARAMETERIVAPPLEPROC methodp_glGetObjectParameterivAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectParameterivAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectParameterivAPPLE && args.Length() >= 4){
			obj->methodp_glGetObjectParameterivAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum objectType */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);
	PFNGLGETOBJECTPARAMETERIVARBPROC methodp_glGetObjectParameterivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectParameterivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectParameterivARB && args.Length() >= 3){
			obj->methodp_glGetObjectParameterivARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB obj */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
	PFNGLGETOBJECTPTRLABELPROC methodp_glGetObjectPtrLabel{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectPtrLabel(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectPtrLabel && args.Length() >= 4){
			obj->methodp_glGetObjectPtrLabel(
				(const void *)((int64_t)args[0]->NumberValue())/* const void *ptr */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELKHRPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
	PFNGLGETOBJECTPTRLABELKHRPROC methodp_glGetObjectPtrLabelKHR{nullptr};
	static v8::Handle<v8::Value> method_glGetObjectPtrLabelKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetObjectPtrLabelKHR && args.Length() >= 4){
			obj->methodp_glGetObjectPtrLabelKHR(
				(const void *)((int64_t)args[0]->NumberValue())/* const void *ptr */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);
	PFNGLGETOCCLUSIONQUERYIVNVPROC methodp_glGetOcclusionQueryivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetOcclusionQueryivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetOcclusionQueryivNV && args.Length() >= 3){
			obj->methodp_glGetOcclusionQueryivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);
	PFNGLGETOCCLUSIONQUERYUIVNVPROC methodp_glGetOcclusionQueryuivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetOcclusionQueryuivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetOcclusionQueryuivNV && args.Length() >= 3){
			obj->methodp_glGetOcclusionQueryuivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);
	PFNGLGETPATHCOLORGENFVNVPROC methodp_glGetPathColorGenfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathColorGenfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathColorGenfvNV && args.Length() >= 3){
			obj->methodp_glGetPathColorGenfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum color */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);
	PFNGLGETPATHCOLORGENIVNVPROC methodp_glGetPathColorGenivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathColorGenivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathColorGenivNV && args.Length() >= 3){
			obj->methodp_glGetPathColorGenivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum color */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);
	PFNGLGETPATHCOMMANDSNVPROC methodp_glGetPathCommandsNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathCommandsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathCommandsNV && args.Length() >= 2){
			obj->methodp_glGetPathCommandsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLubyte *)((int64_t)args[1]->NumberValue())/* GLubyte *commands */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);
	PFNGLGETPATHCOORDSNVPROC methodp_glGetPathCoordsNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathCoordsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathCoordsNV && args.Length() >= 2){
			obj->methodp_glGetPathCoordsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);
	PFNGLGETPATHDASHARRAYNVPROC methodp_glGetPathDashArrayNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathDashArrayNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathDashArrayNV && args.Length() >= 2){
			obj->methodp_glGetPathDashArrayNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *dashArray */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLfloat (APIENTRYP PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);
	PFNGLGETPATHLENGTHNVPROC methodp_glGetPathLengthNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathLengthNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathLengthNV && args.Length() >= 3){
			obj->methodp_glGetPathLengthNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei startSegment */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei numSegments */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);
	PFNGLGETPATHMETRICRANGENVPROC methodp_glGetPathMetricRangeNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathMetricRangeNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathMetricRangeNV && args.Length() >= 5){
			obj->methodp_glGetPathMetricRangeNV(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield metricQueryMask */,
				(GLuint )(args[1]->NumberValue())/* GLuint firstPathName */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei numPaths */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(GLfloat *)((int64_t)args[4]->NumberValue())/* GLfloat *metrics */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);
	PFNGLGETPATHMETRICSNVPROC methodp_glGetPathMetricsNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathMetricsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathMetricsNV && args.Length() >= 7){
			obj->methodp_glGetPathMetricsNV(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield metricQueryMask */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei numPaths */,
				(GLenum )(args[2]->NumberValue())/* GLenum pathNameType */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *paths */,
				(GLuint )(args[4]->NumberValue())/* GLuint pathBase */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei stride */,
				(GLfloat *)((int64_t)args[6]->NumberValue())/* GLfloat *metrics */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);
	PFNGLGETPATHPARAMETERFVNVPROC methodp_glGetPathParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathParameterfvNV && args.Length() >= 3){
			obj->methodp_glGetPathParameterfvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);
	PFNGLGETPATHPARAMETERIVNVPROC methodp_glGetPathParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathParameterivNV && args.Length() >= 3){
			obj->methodp_glGetPathParameterivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);
	PFNGLGETPATHSPACINGNVPROC methodp_glGetPathSpacingNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathSpacingNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathSpacingNV && args.Length() >= 9){
			obj->methodp_glGetPathSpacingNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pathListMode */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei numPaths */,
				(GLenum )(args[2]->NumberValue())/* GLenum pathNameType */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *paths */,
				(GLuint )(args[4]->NumberValue())/* GLuint pathBase */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat advanceScale */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat kerningScale */,
				(GLenum )(args[7]->NumberValue())/* GLenum transformType */,
				(GLfloat *)((int64_t)args[8]->NumberValue())/* GLfloat *returnedSpacing */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);
	PFNGLGETPATHTEXGENFVNVPROC methodp_glGetPathTexGenfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathTexGenfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathTexGenfvNV && args.Length() >= 3){
			obj->methodp_glGetPathTexGenfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum texCoordSet */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);
	PFNGLGETPATHTEXGENIVNVPROC methodp_glGetPathTexGenivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetPathTexGenivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPathTexGenivNV && args.Length() >= 3){
			obj->methodp_glGetPathTexGenivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum texCoordSet */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
	PFNGLGETPERFCOUNTERINFOINTELPROC methodp_glGetPerfCounterInfoINTEL{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfCounterInfoINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfCounterInfoINTEL && args.Length() >= 11){
			obj->methodp_glGetPerfCounterInfoINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint queryId */,
				(GLuint )(args[1]->NumberValue())/* GLuint counterId */,
				(GLuint )(args[2]->NumberValue())/* GLuint counterNameLength */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *counterName */,
				(GLuint )(args[4]->NumberValue())/* GLuint counterDescLength */,
				(GLchar *)((int64_t)args[5]->NumberValue())/* GLchar *counterDesc */,
				(GLuint *)((int64_t)args[6]->NumberValue())/* GLuint *counterOffset */,
				(GLuint *)((int64_t)args[7]->NumberValue())/* GLuint *counterDataSize */,
				(GLuint *)((int64_t)args[8]->NumberValue())/* GLuint *counterTypeEnum */,
				(GLuint *)((int64_t)args[9]->NumberValue())/* GLuint *counterDataTypeEnum */,
				(GLuint64 *)((int64_t)args[10]->NumberValue())/* GLuint64 *rawCounterMaxValue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
	PFNGLGETPERFMONITORCOUNTERDATAAMDPROC methodp_glGetPerfMonitorCounterDataAMD{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfMonitorCounterDataAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfMonitorCounterDataAMD && args.Length() >= 5){
			obj->methodp_glGetPerfMonitorCounterDataAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint monitor */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei dataSize */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *data */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *bytesWritten */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data);
	PFNGLGETPERFMONITORCOUNTERINFOAMDPROC methodp_glGetPerfMonitorCounterInfoAMD{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfMonitorCounterInfoAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfMonitorCounterInfoAMD && args.Length() >= 4){
			obj->methodp_glGetPerfMonitorCounterInfoAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint group */,
				(GLuint )(args[1]->NumberValue())/* GLuint counter */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(void *)((int64_t)args[3]->NumberValue())/* void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
	PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC methodp_glGetPerfMonitorCounterStringAMD{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfMonitorCounterStringAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfMonitorCounterStringAMD && args.Length() >= 5){
			obj->methodp_glGetPerfMonitorCounterStringAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint group */,
				(GLuint )(args[1]->NumberValue())/* GLuint counter */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[4]->NumberValue())/* GLchar *counterString */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
	PFNGLGETPERFMONITORCOUNTERSAMDPROC methodp_glGetPerfMonitorCountersAMD{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfMonitorCountersAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfMonitorCountersAMD && args.Length() >= 5){
			obj->methodp_glGetPerfMonitorCountersAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint group */,
				(GLint *)((int64_t)args[1]->NumberValue())/* GLint *numCounters */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *maxActiveCounters */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei counterSize */,
				(GLuint *)((int64_t)args[4]->NumberValue())/* GLuint *counters */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
	PFNGLGETPERFMONITORGROUPSTRINGAMDPROC methodp_glGetPerfMonitorGroupStringAMD{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfMonitorGroupStringAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfMonitorGroupStringAMD && args.Length() >= 4){
			obj->methodp_glGetPerfMonitorGroupStringAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint group */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *groupString */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
	PFNGLGETPERFMONITORGROUPSAMDPROC methodp_glGetPerfMonitorGroupsAMD{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfMonitorGroupsAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfMonitorGroupsAMD && args.Length() >= 3){
			obj->methodp_glGetPerfMonitorGroupsAMD(
				(GLint *)((int64_t)args[0]->NumberValue())/* GLint *numGroups */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei groupsSize */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *groups */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
	PFNGLGETPERFQUERYDATAINTELPROC methodp_glGetPerfQueryDataINTEL{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfQueryDataINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfQueryDataINTEL && args.Length() >= 5){
			obj->methodp_glGetPerfQueryDataINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint queryHandle */,
				(GLuint )(args[1]->NumberValue())/* GLuint flags */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei dataSize */,
				(GLvoid *)((int64_t)args[3]->NumberValue())/* GLvoid *data */,
				(GLuint *)((int64_t)args[4]->NumberValue())/* GLuint *bytesWritten */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar *queryName, GLuint *queryId);
	PFNGLGETPERFQUERYIDBYNAMEINTELPROC methodp_glGetPerfQueryIdByNameINTEL{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfQueryIdByNameINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfQueryIdByNameINTEL && args.Length() >= 2){
			obj->methodp_glGetPerfQueryIdByNameINTEL(
				(GLchar *)((int64_t)args[0]->NumberValue())/* GLchar *queryName */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *queryId */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
	PFNGLGETPERFQUERYINFOINTELPROC methodp_glGetPerfQueryInfoINTEL{nullptr};
	static v8::Handle<v8::Value> method_glGetPerfQueryInfoINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPerfQueryInfoINTEL && args.Length() >= 7){
			obj->methodp_glGetPerfQueryInfoINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint queryId */,
				(GLuint )(args[1]->NumberValue())/* GLuint queryNameLength */,
				(GLchar *)((int64_t)args[2]->NumberValue())/* GLchar *queryName */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *dataSize */,
				(GLuint *)((int64_t)args[4]->NumberValue())/* GLuint *noCounters */,
				(GLuint *)((int64_t)args[5]->NumberValue())/* GLuint *noInstances */,
				(GLuint *)((int64_t)args[6]->NumberValue())/* GLuint *capsMask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPIXELMAPFVPROC) (GLenum map, GLfloat *values);
	PFNGLGETPIXELMAPFVPROC methodp_glGetPixelMapfv{nullptr};
	static v8::Handle<v8::Value> method_glGetPixelMapfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPixelMapfv && args.Length() >= 2){
			obj->methodp_glGetPixelMapfv(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPIXELMAPUIVPROC) (GLenum map, GLuint *values);
	PFNGLGETPIXELMAPUIVPROC methodp_glGetPixelMapuiv{nullptr};
	static v8::Handle<v8::Value> method_glGetPixelMapuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPixelMapuiv && args.Length() >= 2){
			obj->methodp_glGetPixelMapuiv(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPIXELMAPUSVPROC) (GLenum map, GLushort *values);
	PFNGLGETPIXELMAPUSVPROC methodp_glGetPixelMapusv{nullptr};
	static v8::Handle<v8::Value> method_glGetPixelMapusv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPixelMapusv && args.Length() >= 2){
			obj->methodp_glGetPixelMapusv(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLushort *)((int64_t)args[1]->NumberValue())/* GLushort *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPIXELMAPXVPROC) (GLenum map, GLint size, GLfixed *values);
	PFNGLGETPIXELMAPXVPROC methodp_glGetPixelMapxv{nullptr};
	static v8::Handle<v8::Value> method_glGetPixelMapxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPixelMapxv && args.Length() >= 3){
			obj->methodp_glGetPixelMapxv(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);
	PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC methodp_glGetPixelTexGenParameterfvSGIS{nullptr};
	static v8::Handle<v8::Value> method_glGetPixelTexGenParameterfvSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPixelTexGenParameterfvSGIS && args.Length() >= 2){
			obj->methodp_glGetPixelTexGenParameterfvSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);
	PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC methodp_glGetPixelTexGenParameterivSGIS{nullptr};
	static v8::Handle<v8::Value> method_glGetPixelTexGenParameterivSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPixelTexGenParameterivSGIS && args.Length() >= 2){
			obj->methodp_glGetPixelTexGenParameterivSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[1]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC methodp_glGetPixelTransformParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetPixelTransformParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPixelTransformParameterfvEXT && args.Length() >= 3){
			obj->methodp_glGetPixelTransformParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC methodp_glGetPixelTransformParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetPixelTransformParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPixelTransformParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetPixelTransformParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void **data);
	PFNGLGETPOINTERINDEXEDVEXTPROC methodp_glGetPointerIndexedvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetPointerIndexedvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPointerIndexedvEXT && args.Length() >= 3){
			obj->methodp_glGetPointerIndexedvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(void **)((int64_t)args[2]->NumberValue())/* void **data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);
	PFNGLGETPOINTERI_VEXTPROC methodp_glGetPointeri_vEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetPointeri_vEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPointeri_vEXT && args.Length() >= 3){
			obj->methodp_glGetPointeri_vEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(void **)((int64_t)args[2]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, void **params);
	PFNGLGETPOINTERVPROC methodp_glGetPointerv{nullptr};
	static v8::Handle<v8::Value> method_glGetPointerv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPointerv && args.Length() >= 2){
			obj->methodp_glGetPointerv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[1]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC) (GLenum pname, void **params);
	PFNGLGETPOINTERVEXTPROC methodp_glGetPointervEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetPointervEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPointervEXT && args.Length() >= 2){
			obj->methodp_glGetPointervEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[1]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPOINTERVKHRPROC) (GLenum pname, void **params);
	PFNGLGETPOINTERVKHRPROC methodp_glGetPointervKHR{nullptr};
	static v8::Handle<v8::Value> method_glGetPointervKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPointervKHR && args.Length() >= 2){
			obj->methodp_glGetPointervKHR(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[1]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPOLYGONSTIPPLEPROC) (GLubyte *mask);
	PFNGLGETPOLYGONSTIPPLEPROC methodp_glGetPolygonStipple{nullptr};
	static v8::Handle<v8::Value> method_glGetPolygonStipple(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetPolygonStipple && args.Length() >= 1){
			obj->methodp_glGetPolygonStipple(
				(GLubyte *)((int64_t)args[0]->NumberValue())/* GLubyte *mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
	PFNGLGETPROGRAMBINARYPROC methodp_glGetProgramBinary{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramBinary(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramBinary && args.Length() >= 5){
			obj->methodp_glGetProgramBinary(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLenum *)((int64_t)args[3]->NumberValue())/* GLenum *binaryFormat */,
				(void *)((int64_t)args[4]->NumberValue())/* void *binary */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMBINARYOESPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
	PFNGLGETPROGRAMBINARYOESPROC methodp_glGetProgramBinaryOES{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramBinaryOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramBinaryOES && args.Length() >= 5){
			obj->methodp_glGetProgramBinaryOES(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLenum *)((int64_t)args[3]->NumberValue())/* GLenum *binaryFormat */,
				(void *)((int64_t)args[4]->NumberValue())/* void *binary */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
	PFNGLGETPROGRAMENVPARAMETERIIVNVPROC methodp_glGetProgramEnvParameterIivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramEnvParameterIivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramEnvParameterIivNV && args.Length() >= 3){
			obj->methodp_glGetProgramEnvParameterIivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
	PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC methodp_glGetProgramEnvParameterIuivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramEnvParameterIuivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramEnvParameterIuivNV && args.Length() >= 3){
			obj->methodp_glGetProgramEnvParameterIuivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
	PFNGLGETPROGRAMENVPARAMETERDVARBPROC methodp_glGetProgramEnvParameterdvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramEnvParameterdvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramEnvParameterdvARB && args.Length() >= 3){
			obj->methodp_glGetProgramEnvParameterdvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
	PFNGLGETPROGRAMENVPARAMETERFVARBPROC methodp_glGetProgramEnvParameterfvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramEnvParameterfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramEnvParameterfvARB && args.Length() >= 3){
			obj->methodp_glGetProgramEnvParameterfvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	PFNGLGETPROGRAMINFOLOGPROC methodp_glGetProgramInfoLog{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramInfoLog(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramInfoLog && args.Length() >= 4){
			obj->methodp_glGetProgramInfoLog(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *infoLog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);
	PFNGLGETPROGRAMINTERFACEIVPROC methodp_glGetProgramInterfaceiv{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramInterfaceiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramInterfaceiv && args.Length() >= 4){
			obj->methodp_glGetProgramInterfaceiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum programInterface */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
	PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC methodp_glGetProgramLocalParameterIivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramLocalParameterIivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramLocalParameterIivNV && args.Length() >= 3){
			obj->methodp_glGetProgramLocalParameterIivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
	PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC methodp_glGetProgramLocalParameterIuivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramLocalParameterIuivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramLocalParameterIuivNV && args.Length() >= 3){
			obj->methodp_glGetProgramLocalParameterIuivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
	PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC methodp_glGetProgramLocalParameterdvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramLocalParameterdvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramLocalParameterdvARB && args.Length() >= 3){
			obj->methodp_glGetProgramLocalParameterdvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
	PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC methodp_glGetProgramLocalParameterfvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramLocalParameterfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramLocalParameterfvARB && args.Length() >= 3){
			obj->methodp_glGetProgramLocalParameterfvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
	PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC methodp_glGetProgramNamedParameterdvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramNamedParameterdvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramNamedParameterdvNV && args.Length() >= 4){
			obj->methodp_glGetProgramNamedParameterdvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei len */,
				(const GLubyte *)((int64_t)args[2]->NumberValue())/* const GLubyte *name */,
				(GLdouble *)((int64_t)args[3]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
	PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC methodp_glGetProgramNamedParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramNamedParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramNamedParameterfvNV && args.Length() >= 4){
			obj->methodp_glGetProgramNamedParameterfvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei len */,
				(const GLubyte *)((int64_t)args[2]->NumberValue())/* const GLubyte *name */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
	PFNGLGETPROGRAMPARAMETERDVNVPROC methodp_glGetProgramParameterdvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramParameterdvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramParameterdvNV && args.Length() >= 4){
			obj->methodp_glGetProgramParameterdvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[3]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
	PFNGLGETPROGRAMPARAMETERFVNVPROC methodp_glGetProgramParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramParameterfvNV && args.Length() >= 4){
			obj->methodp_glGetProgramParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	PFNGLGETPROGRAMPIPELINEINFOLOGPROC methodp_glGetProgramPipelineInfoLog{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramPipelineInfoLog(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramPipelineInfoLog && args.Length() >= 4){
			obj->methodp_glGetProgramPipelineInfoLog(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *infoLog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC methodp_glGetProgramPipelineInfoLogEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramPipelineInfoLogEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramPipelineInfoLogEXT && args.Length() >= 4){
			obj->methodp_glGetProgramPipelineInfoLogEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *infoLog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);
	PFNGLGETPROGRAMPIPELINEIVPROC methodp_glGetProgramPipelineiv{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramPipelineiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramPipelineiv && args.Length() >= 3){
			obj->methodp_glGetProgramPipelineiv(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVEXTPROC) (GLuint pipeline, GLenum pname, GLint *params);
	PFNGLGETPROGRAMPIPELINEIVEXTPROC methodp_glGetProgramPipelineivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramPipelineivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramPipelineivEXT && args.Length() >= 3){
			obj->methodp_glGetProgramPipelineivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
	PFNGLGETPROGRAMRESOURCEINDEXPROC methodp_glGetProgramResourceIndex{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramResourceIndex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramResourceIndex && args.Length() >= 3){
			obj->methodp_glGetProgramResourceIndex(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum programInterface */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);
	PFNGLGETPROGRAMRESOURCELOCATIONPROC methodp_glGetProgramResourceLocation{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramResourceLocation(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramResourceLocation && args.Length() >= 3){
			obj->methodp_glGetProgramResourceLocation(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum programInterface */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);
	PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC methodp_glGetProgramResourceLocationIndex{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramResourceLocationIndex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramResourceLocationIndex && args.Length() >= 3){
			obj->methodp_glGetProgramResourceLocationIndex(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum programInterface */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
	PFNGLGETPROGRAMRESOURCENAMEPROC methodp_glGetProgramResourceName{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramResourceName(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramResourceName && args.Length() >= 6){
			obj->methodp_glGetProgramResourceName(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum programInterface */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[4]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[5]->NumberValue())/* GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
	PFNGLGETPROGRAMRESOURCEIVPROC methodp_glGetProgramResourceiv{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramResourceiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramResourceiv && args.Length() >= 8){
			obj->methodp_glGetProgramResourceiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum programInterface */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei propCount */,
				(const GLenum *)((int64_t)args[4]->NumberValue())/* const GLenum *props */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[6]->NumberValue())/* GLsizei *length */,
				(GLint *)((int64_t)args[7]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
	PFNGLGETPROGRAMSTAGEIVPROC methodp_glGetProgramStageiv{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramStageiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramStageiv && args.Length() >= 4){
			obj->methodp_glGetProgramStageiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum shadertype */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void *string);
	PFNGLGETPROGRAMSTRINGARBPROC methodp_glGetProgramStringARB{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramStringARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramStringARB && args.Length() >= 3){
			obj->methodp_glGetProgramStringARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void *)((int64_t)args[2]->NumberValue())/* void *string */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);
	PFNGLGETPROGRAMSTRINGNVPROC methodp_glGetProgramStringNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramStringNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramStringNV && args.Length() >= 3){
			obj->methodp_glGetProgramStringNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLubyte *)((int64_t)args[2]->NumberValue())/* GLubyte *program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param);
	PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC methodp_glGetProgramSubroutineParameteruivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramSubroutineParameteruivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramSubroutineParameteruivNV && args.Length() >= 3){
			obj->methodp_glGetProgramSubroutineParameteruivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
	PFNGLGETPROGRAMIVPROC methodp_glGetProgramiv{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramiv && args.Length() >= 3){
			obj->methodp_glGetProgramiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETPROGRAMIVARBPROC methodp_glGetProgramivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramivARB && args.Length() >= 3){
			obj->methodp_glGetProgramivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);
	PFNGLGETPROGRAMIVNVPROC methodp_glGetProgramivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetProgramivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetProgramivNV && args.Length() >= 3){
			obj->methodp_glGetProgramivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
	PFNGLGETQUERYINDEXEDIVPROC methodp_glGetQueryIndexediv{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryIndexediv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryIndexediv && args.Length() >= 4){
			obj->methodp_glGetQueryIndexediv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);
	PFNGLGETQUERYOBJECTI64VPROC methodp_glGetQueryObjecti64v{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjecti64v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjecti64v && args.Length() >= 3){
			obj->methodp_glGetQueryObjecti64v(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint64 *)((int64_t)args[2]->NumberValue())/* GLint64 *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64 *params);
	PFNGLGETQUERYOBJECTI64VEXTPROC methodp_glGetQueryObjecti64vEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjecti64vEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjecti64vEXT && args.Length() >= 3){
			obj->methodp_glGetQueryObjecti64vEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint64 *)((int64_t)args[2]->NumberValue())/* GLint64 *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);
	PFNGLGETQUERYOBJECTIVPROC methodp_glGetQueryObjectiv{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjectiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjectiv && args.Length() >= 3){
			obj->methodp_glGetQueryObjectiv(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);
	PFNGLGETQUERYOBJECTIVARBPROC methodp_glGetQueryObjectivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjectivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjectivARB && args.Length() >= 3){
			obj->methodp_glGetQueryObjectivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVEXTPROC) (GLuint id, GLenum pname, GLint *params);
	PFNGLGETQUERYOBJECTIVEXTPROC methodp_glGetQueryObjectivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjectivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjectivEXT && args.Length() >= 3){
			obj->methodp_glGetQueryObjectivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);
	PFNGLGETQUERYOBJECTUI64VPROC methodp_glGetQueryObjectui64v{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjectui64v(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjectui64v && args.Length() >= 3){
			obj->methodp_glGetQueryObjectui64v(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint64 *)((int64_t)args[2]->NumberValue())/* GLuint64 *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64 *params);
	PFNGLGETQUERYOBJECTUI64VEXTPROC methodp_glGetQueryObjectui64vEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjectui64vEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjectui64vEXT && args.Length() >= 3){
			obj->methodp_glGetQueryObjectui64vEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint64 *)((int64_t)args[2]->NumberValue())/* GLuint64 *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);
	PFNGLGETQUERYOBJECTUIVPROC methodp_glGetQueryObjectuiv{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjectuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjectuiv && args.Length() >= 3){
			obj->methodp_glGetQueryObjectuiv(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);
	PFNGLGETQUERYOBJECTUIVARBPROC methodp_glGetQueryObjectuivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjectuivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjectuivARB && args.Length() >= 3){
			obj->methodp_glGetQueryObjectuivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVEXTPROC) (GLuint id, GLenum pname, GLuint *params);
	PFNGLGETQUERYOBJECTUIVEXTPROC methodp_glGetQueryObjectuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryObjectuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryObjectuivEXT && args.Length() >= 3){
			obj->methodp_glGetQueryObjectuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETQUERYIVPROC methodp_glGetQueryiv{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryiv && args.Length() >= 3){
			obj->methodp_glGetQueryiv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETQUERYIVARBPROC methodp_glGetQueryivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryivARB && args.Length() >= 3){
			obj->methodp_glGetQueryivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETQUERYIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETQUERYIVEXTPROC methodp_glGetQueryivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetQueryivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetQueryivEXT && args.Length() >= 3){
			obj->methodp_glGetQueryivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETRENDERBUFFERPARAMETERIVPROC methodp_glGetRenderbufferParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetRenderbufferParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetRenderbufferParameteriv && args.Length() >= 3){
			obj->methodp_glGetRenderbufferParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC methodp_glGetRenderbufferParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetRenderbufferParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetRenderbufferParameterivEXT && args.Length() >= 3){
			obj->methodp_glGetRenderbufferParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVOESPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETRENDERBUFFERPARAMETERIVOESPROC methodp_glGetRenderbufferParameterivOES{nullptr};
	static v8::Handle<v8::Value> method_glGetRenderbufferParameterivOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetRenderbufferParameterivOES && args.Length() >= 3){
			obj->methodp_glGetRenderbufferParameterivOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);
	PFNGLGETSAMPLERPARAMETERIIVPROC methodp_glGetSamplerParameterIiv{nullptr};
	static v8::Handle<v8::Value> method_glGetSamplerParameterIiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSamplerParameterIiv && args.Length() >= 3){
			obj->methodp_glGetSamplerParameterIiv(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVEXTPROC) (GLuint sampler, GLenum pname, GLint *params);
	PFNGLGETSAMPLERPARAMETERIIVEXTPROC methodp_glGetSamplerParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetSamplerParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSamplerParameterIivEXT && args.Length() >= 3){
			obj->methodp_glGetSamplerParameterIivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);
	PFNGLGETSAMPLERPARAMETERIUIVPROC methodp_glGetSamplerParameterIuiv{nullptr};
	static v8::Handle<v8::Value> method_glGetSamplerParameterIuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSamplerParameterIuiv && args.Length() >= 3){
			obj->methodp_glGetSamplerParameterIuiv(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVEXTPROC) (GLuint sampler, GLenum pname, GLuint *params);
	PFNGLGETSAMPLERPARAMETERIUIVEXTPROC methodp_glGetSamplerParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetSamplerParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSamplerParameterIuivEXT && args.Length() >= 3){
			obj->methodp_glGetSamplerParameterIuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);
	PFNGLGETSAMPLERPARAMETERFVPROC methodp_glGetSamplerParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glGetSamplerParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSamplerParameterfv && args.Length() >= 3){
			obj->methodp_glGetSamplerParameterfv(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);
	PFNGLGETSAMPLERPARAMETERIVPROC methodp_glGetSamplerParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetSamplerParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSamplerParameteriv && args.Length() >= 3){
			obj->methodp_glGetSamplerParameteriv(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
	PFNGLGETSEPARABLEFILTERPROC methodp_glGetSeparableFilter{nullptr};
	static v8::Handle<v8::Value> method_glGetSeparableFilter(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSeparableFilter && args.Length() >= 6){
			obj->methodp_glGetSeparableFilter(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[3]->NumberValue())/* void *row */,
				(void *)((int64_t)args[4]->NumberValue())/* void *column */,
				(void *)((int64_t)args[5]->NumberValue())/* void *span */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);
	PFNGLGETSEPARABLEFILTEREXTPROC methodp_glGetSeparableFilterEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetSeparableFilterEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSeparableFilterEXT && args.Length() >= 6){
			obj->methodp_glGetSeparableFilterEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[3]->NumberValue())/* void *row */,
				(void *)((int64_t)args[4]->NumberValue())/* void *column */,
				(void *)((int64_t)args[5]->NumberValue())/* void *span */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
	PFNGLGETSHADERINFOLOGPROC methodp_glGetShaderInfoLog{nullptr};
	static v8::Handle<v8::Value> method_glGetShaderInfoLog(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetShaderInfoLog && args.Length() >= 4){
			obj->methodp_glGetShaderInfoLog(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *infoLog */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
	PFNGLGETSHADERPRECISIONFORMATPROC methodp_glGetShaderPrecisionFormat{nullptr};
	static v8::Handle<v8::Value> method_glGetShaderPrecisionFormat(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetShaderPrecisionFormat && args.Length() >= 4){
			obj->methodp_glGetShaderPrecisionFormat(
				(GLenum )(args[0]->NumberValue())/* GLenum shadertype */,
				(GLenum )(args[1]->NumberValue())/* GLenum precisiontype */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *range */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *precision */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
	PFNGLGETSHADERSOURCEPROC methodp_glGetShaderSource{nullptr};
	static v8::Handle<v8::Value> method_glGetShaderSource(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetShaderSource && args.Length() >= 4){
			obj->methodp_glGetShaderSource(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *source */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
	PFNGLGETSHADERSOURCEARBPROC methodp_glGetShaderSourceARB{nullptr};
	static v8::Handle<v8::Value> method_glGetShaderSourceARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetShaderSourceARB && args.Length() >= 4){
			obj->methodp_glGetShaderSourceARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB obj */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei maxLength */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLcharARB *)((int64_t)args[3]->NumberValue())/* GLcharARB *source */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
	PFNGLGETSHADERIVPROC methodp_glGetShaderiv{nullptr};
	static v8::Handle<v8::Value> method_glGetShaderiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetShaderiv && args.Length() >= 3){
			obj->methodp_glGetShaderiv(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
	PFNGLGETSHARPENTEXFUNCSGISPROC methodp_glGetSharpenTexFuncSGIS{nullptr};
	static v8::Handle<v8::Value> method_glGetSharpenTexFuncSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSharpenTexFuncSGIS && args.Length() >= 2){
			obj->methodp_glGetSharpenTexFuncSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);
	PFNGLGETSTRINGPROC methodp_glGetString{nullptr};
	static v8::Handle<v8::Value> method_glGetString(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetString && args.Length() >= 1){
			obj->methodp_glGetString(
				(GLenum )(args[0]->NumberValue())/* GLenum name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
	PFNGLGETSTRINGIPROC methodp_glGetStringi{nullptr};
	static v8::Handle<v8::Value> method_glGetStringi(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetStringi && args.Length() >= 2){
			obj->methodp_glGetStringi(
				(GLenum )(args[0]->NumberValue())/* GLenum name */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);
	PFNGLGETSUBROUTINEINDEXPROC methodp_glGetSubroutineIndex{nullptr};
	static v8::Handle<v8::Value> method_glGetSubroutineIndex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSubroutineIndex && args.Length() >= 3){
			obj->methodp_glGetSubroutineIndex(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum shadertype */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);
	PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC methodp_glGetSubroutineUniformLocation{nullptr};
	static v8::Handle<v8::Value> method_glGetSubroutineUniformLocation(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSubroutineUniformLocation && args.Length() >= 3){
			obj->methodp_glGetSubroutineUniformLocation(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum shadertype */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
	PFNGLGETSYNCIVPROC methodp_glGetSynciv{nullptr};
	static v8::Handle<v8::Value> method_glGetSynciv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSynciv && args.Length() >= 5){
			obj->methodp_glGetSynciv(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETSYNCIVAPPLEPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
	PFNGLGETSYNCIVAPPLEPROC methodp_glGetSyncivAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glGetSyncivAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetSyncivAPPLE && args.Length() >= 5){
			obj->methodp_glGetSyncivAPPLE(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
	PFNGLGETTEXBUMPPARAMETERFVATIPROC methodp_glGetTexBumpParameterfvATI{nullptr};
	static v8::Handle<v8::Value> method_glGetTexBumpParameterfvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexBumpParameterfvATI && args.Length() >= 2){
			obj->methodp_glGetTexBumpParameterfvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[1]->NumberValue())/* GLfloat *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
	PFNGLGETTEXBUMPPARAMETERIVATIPROC methodp_glGetTexBumpParameterivATI{nullptr};
	static v8::Handle<v8::Value> method_glGetTexBumpParameterivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexBumpParameterivATI && args.Length() >= 2){
			obj->methodp_glGetTexBumpParameterivATI(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[1]->NumberValue())/* GLint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXENVFVPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETTEXENVFVPROC methodp_glGetTexEnvfv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexEnvfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexEnvfv && args.Length() >= 3){
			obj->methodp_glGetTexEnvfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXENVIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETTEXENVIVPROC methodp_glGetTexEnviv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexEnviv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexEnviv && args.Length() >= 3){
			obj->methodp_glGetTexEnviv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXENVXVPROC) (GLenum target, GLenum pname, GLfixed *params);
	PFNGLGETTEXENVXVPROC methodp_glGetTexEnvxv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexEnvxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexEnvxv && args.Length() >= 3){
			obj->methodp_glGetTexEnvxv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXENVXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
	PFNGLGETTEXENVXVOESPROC methodp_glGetTexEnvxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetTexEnvxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexEnvxvOES && args.Length() >= 3){
			obj->methodp_glGetTexEnvxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);
	PFNGLGETTEXFILTERFUNCSGISPROC methodp_glGetTexFilterFuncSGIS{nullptr};
	static v8::Handle<v8::Value> method_glGetTexFilterFuncSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexFilterFuncSGIS && args.Length() >= 3){
			obj->methodp_glGetTexFilterFuncSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum filter */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXGENDVPROC) (GLenum coord, GLenum pname, GLdouble *params);
	PFNGLGETTEXGENDVPROC methodp_glGetTexGendv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexGendv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexGendv && args.Length() >= 3){
			obj->methodp_glGetTexGendv(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXGENFVPROC) (GLenum coord, GLenum pname, GLfloat *params);
	PFNGLGETTEXGENFVPROC methodp_glGetTexGenfv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexGenfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexGenfv && args.Length() >= 3){
			obj->methodp_glGetTexGenfv(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXGENFVOESPROC) (GLenum coord, GLenum pname, GLfloat *params);
	PFNGLGETTEXGENFVOESPROC methodp_glGetTexGenfvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetTexGenfvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexGenfvOES && args.Length() >= 3){
			obj->methodp_glGetTexGenfvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXGENIVPROC) (GLenum coord, GLenum pname, GLint *params);
	PFNGLGETTEXGENIVPROC methodp_glGetTexGeniv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexGeniv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexGeniv && args.Length() >= 3){
			obj->methodp_glGetTexGeniv(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXGENIVOESPROC) (GLenum coord, GLenum pname, GLint *params);
	PFNGLGETTEXGENIVOESPROC methodp_glGetTexGenivOES{nullptr};
	static v8::Handle<v8::Value> method_glGetTexGenivOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexGenivOES && args.Length() >= 3){
			obj->methodp_glGetTexGenivOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXGENXVOESPROC) (GLenum coord, GLenum pname, GLfixed *params);
	PFNGLGETTEXGENXVOESPROC methodp_glGetTexGenxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetTexGenxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexGenxvOES && args.Length() >= 3){
			obj->methodp_glGetTexGenxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
	PFNGLGETTEXIMAGEPROC methodp_glGetTexImage{nullptr};
	static v8::Handle<v8::Value> method_glGetTexImage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexImage && args.Length() >= 5){
			obj->methodp_glGetTexImage(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[4]->NumberValue())/* void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC) (GLenum target, GLint level, GLenum pname, GLfloat *params);
	PFNGLGETTEXLEVELPARAMETERFVPROC methodp_glGetTexLevelParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexLevelParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexLevelParameterfv && args.Length() >= 4){
			obj->methodp_glGetTexLevelParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC) (GLenum target, GLint level, GLenum pname, GLint *params);
	PFNGLGETTEXLEVELPARAMETERIVPROC methodp_glGetTexLevelParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexLevelParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexLevelParameteriv && args.Length() >= 4){
			obj->methodp_glGetTexLevelParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERXVOESPROC) (GLenum target, GLint level, GLenum pname, GLfixed *params);
	PFNGLGETTEXLEVELPARAMETERXVOESPROC methodp_glGetTexLevelParameterxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetTexLevelParameterxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexLevelParameterxvOES && args.Length() >= 4){
			obj->methodp_glGetTexLevelParameterxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[3]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETTEXPARAMETERIIVPROC methodp_glGetTexParameterIiv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameterIiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameterIiv && args.Length() >= 3){
			obj->methodp_glGetTexParameterIiv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETTEXPARAMETERIIVEXTPROC methodp_glGetTexParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameterIivEXT && args.Length() >= 3){
			obj->methodp_glGetTexParameterIivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);
	PFNGLGETTEXPARAMETERIUIVPROC methodp_glGetTexParameterIuiv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameterIuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameterIuiv && args.Length() >= 3){
			obj->methodp_glGetTexParameterIuiv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
	PFNGLGETTEXPARAMETERIUIVEXTPROC methodp_glGetTexParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameterIuivEXT && args.Length() >= 3){
			obj->methodp_glGetTexParameterIuivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params);
	PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC methodp_glGetTexParameterPointervAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameterPointervAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameterPointervAPPLE && args.Length() >= 3){
			obj->methodp_glGetTexParameterPointervAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETTEXPARAMETERFVPROC methodp_glGetTexParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameterfv && args.Length() >= 3){
			obj->methodp_glGetTexParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
	PFNGLGETTEXPARAMETERIVPROC methodp_glGetTexParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameteriv && args.Length() >= 3){
			obj->methodp_glGetTexParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERXVPROC) (GLenum target, GLenum pname, GLfixed *params);
	PFNGLGETTEXPARAMETERXVPROC methodp_glGetTexParameterxv{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameterxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameterxv && args.Length() >= 3){
			obj->methodp_glGetTexParameterxv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);
	PFNGLGETTEXPARAMETERXVOESPROC methodp_glGetTexParameterxvOES{nullptr};
	static v8::Handle<v8::Value> method_glGetTexParameterxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTexParameterxvOES && args.Length() >= 3){
			obj->methodp_glGetTexParameterxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed *)((int64_t)args[2]->NumberValue())/* GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture);
	PFNGLGETTEXTUREHANDLEARBPROC methodp_glGetTextureHandleARB{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureHandleARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureHandleARB && args.Length() >= 1){
			obj->methodp_glGetTextureHandleARB(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint64 (APIENTRYP PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture);
	PFNGLGETTEXTUREHANDLENVPROC methodp_glGetTextureHandleNV{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureHandleNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureHandleNV && args.Length() >= 1){
			obj->methodp_glGetTextureHandleNV(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
	PFNGLGETTEXTUREIMAGEEXTPROC methodp_glGetTextureImageEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureImageEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureImageEXT && args.Length() >= 6){
			obj->methodp_glGetTextureImageEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum format */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[5]->NumberValue())/* void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
	PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC methodp_glGetTextureLevelParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureLevelParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureLevelParameterfvEXT && args.Length() >= 5){
			obj->methodp_glGetTextureLevelParameterfvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[4]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
	PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC methodp_glGetTextureLevelParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureLevelParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureLevelParameterivEXT && args.Length() >= 5){
			obj->methodp_glGetTextureLevelParameterivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLenum )(args[3]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
	PFNGLGETTEXTUREPARAMETERIIVEXTPROC methodp_glGetTextureParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureParameterIivEXT && args.Length() >= 4){
			obj->methodp_glGetTextureParameterIivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
	PFNGLGETTEXTUREPARAMETERIUIVEXTPROC methodp_glGetTextureParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureParameterIuivEXT && args.Length() >= 4){
			obj->methodp_glGetTextureParameterIuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
	PFNGLGETTEXTUREPARAMETERFVEXTPROC methodp_glGetTextureParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureParameterfvEXT && args.Length() >= 4){
			obj->methodp_glGetTextureParameterfvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
	PFNGLGETTEXTUREPARAMETERIVEXTPROC methodp_glGetTextureParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureParameterivEXT && args.Length() >= 4){
			obj->methodp_glGetTextureParameterivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler);
	PFNGLGETTEXTURESAMPLERHANDLEARBPROC methodp_glGetTextureSamplerHandleARB{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureSamplerHandleARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureSamplerHandleARB && args.Length() >= 2){
			obj->methodp_glGetTextureSamplerHandleARB(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLuint )(args[1]->NumberValue())/* GLuint sampler */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint64 (APIENTRYP PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler);
	PFNGLGETTEXTURESAMPLERHANDLENVPROC methodp_glGetTextureSamplerHandleNV{nullptr};
	static v8::Handle<v8::Value> method_glGetTextureSamplerHandleNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTextureSamplerHandleNV && args.Length() >= 2){
			obj->methodp_glGetTextureSamplerHandleNV(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLuint )(args[1]->NumberValue())/* GLuint sampler */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);
	PFNGLGETTRACKMATRIXIVNVPROC methodp_glGetTrackMatrixivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetTrackMatrixivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTrackMatrixivNV && args.Length() >= 4){
			obj->methodp_glGetTrackMatrixivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint address */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
	PFNGLGETTRANSFORMFEEDBACKVARYINGPROC methodp_glGetTransformFeedbackVarying{nullptr};
	static v8::Handle<v8::Value> method_glGetTransformFeedbackVarying(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTransformFeedbackVarying && args.Length() >= 7){
			obj->methodp_glGetTransformFeedbackVarying(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLsizei *)((int64_t)args[4]->NumberValue())/* GLsizei *size */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *type */,
				(GLchar *)((int64_t)args[6]->NumberValue())/* GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
	PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC methodp_glGetTransformFeedbackVaryingEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetTransformFeedbackVaryingEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTransformFeedbackVaryingEXT && args.Length() >= 7){
			obj->methodp_glGetTransformFeedbackVaryingEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLsizei *)((int64_t)args[4]->NumberValue())/* GLsizei *size */,
				(GLenum *)((int64_t)args[5]->NumberValue())/* GLenum *type */,
				(GLchar *)((int64_t)args[6]->NumberValue())/* GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
	PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC methodp_glGetTransformFeedbackVaryingNV{nullptr};
	static v8::Handle<v8::Value> method_glGetTransformFeedbackVaryingNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTransformFeedbackVaryingNV && args.Length() >= 3){
			obj->methodp_glGetTransformFeedbackVaryingNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *location */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC) (GLuint shader, GLsizei bufsize, GLsizei *length, GLchar *source);
	PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC methodp_glGetTranslatedShaderSourceANGLE{nullptr};
	static v8::Handle<v8::Value> method_glGetTranslatedShaderSourceANGLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetTranslatedShaderSourceANGLE && args.Length() >= 4){
			obj->methodp_glGetTranslatedShaderSourceANGLE(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufsize */,
				(GLsizei *)((int64_t)args[2]->NumberValue())/* GLsizei *length */,
				(GLchar *)((int64_t)args[3]->NumberValue())/* GLchar *source */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
	PFNGLGETUNIFORMBLOCKINDEXPROC methodp_glGetUniformBlockIndex{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformBlockIndex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformBlockIndex && args.Length() >= 2){
			obj->methodp_glGetUniformBlockIndex(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *uniformBlockName */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
	PFNGLGETUNIFORMBUFFERSIZEEXTPROC methodp_glGetUniformBufferSizeEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformBufferSizeEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformBufferSizeEXT && args.Length() >= 2){
			obj->methodp_glGetUniformBufferSizeEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
	PFNGLGETUNIFORMINDICESPROC methodp_glGetUniformIndices{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformIndices(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformIndices && args.Length() >= 4){
			obj->methodp_glGetUniformIndices(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei uniformCount */,
				(const GLchar *const*)((int64_t)args[2]->NumberValue())/* const GLchar *const*uniformNames */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *uniformIndices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
	PFNGLGETUNIFORMLOCATIONPROC methodp_glGetUniformLocation{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformLocation(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformLocation && args.Length() >= 2){
			obj->methodp_glGetUniformLocation(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
	PFNGLGETUNIFORMLOCATIONARBPROC methodp_glGetUniformLocationARB{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformLocationARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformLocationARB && args.Length() >= 2){
			obj->methodp_glGetUniformLocationARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */,
				(const GLcharARB *)((int64_t)args[1]->NumberValue())/* const GLcharARB *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLintptr (APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
	PFNGLGETUNIFORMOFFSETEXTPROC methodp_glGetUniformOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformOffsetEXT && args.Length() >= 2){
			obj->methodp_glGetUniformOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);
	PFNGLGETUNIFORMSUBROUTINEUIVPROC methodp_glGetUniformSubroutineuiv{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformSubroutineuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformSubroutineuiv && args.Length() >= 3){
			obj->methodp_glGetUniformSubroutineuiv(
				(GLenum )(args[0]->NumberValue())/* GLenum shadertype */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);
	PFNGLGETUNIFORMDVPROC methodp_glGetUniformdv{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformdv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformdv && args.Length() >= 3){
			obj->methodp_glGetUniformdv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);
	PFNGLGETUNIFORMFVPROC methodp_glGetUniformfv{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformfv && args.Length() >= 3){
			obj->methodp_glGetUniformfv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);
	PFNGLGETUNIFORMFVARBPROC methodp_glGetUniformfvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformfvARB && args.Length() >= 3){
			obj->methodp_glGetUniformfvARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params);
	PFNGLGETUNIFORMI64VNVPROC methodp_glGetUniformi64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformi64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformi64vNV && args.Length() >= 3){
			obj->methodp_glGetUniformi64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint64EXT *)((int64_t)args[2]->NumberValue())/* GLint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);
	PFNGLGETUNIFORMIVPROC methodp_glGetUniformiv{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformiv && args.Length() >= 3){
			obj->methodp_glGetUniformiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);
	PFNGLGETUNIFORMIVARBPROC methodp_glGetUniformivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformivARB && args.Length() >= 3){
			obj->methodp_glGetUniformivARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params);
	PFNGLGETUNIFORMUI64VNVPROC methodp_glGetUniformui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformui64vNV && args.Length() >= 3){
			obj->methodp_glGetUniformui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint64EXT *)((int64_t)args[2]->NumberValue())/* GLuint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);
	PFNGLGETUNIFORMUIVPROC methodp_glGetUniformuiv{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformuiv && args.Length() >= 3){
			obj->methodp_glGetUniformuiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
	PFNGLGETUNIFORMUIVEXTPROC methodp_glGetUniformuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetUniformuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetUniformuivEXT && args.Length() >= 3){
			obj->methodp_glGetUniformuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);
	PFNGLGETVARIANTARRAYOBJECTFVATIPROC methodp_glGetVariantArrayObjectfvATI{nullptr};
	static v8::Handle<v8::Value> method_glGetVariantArrayObjectfvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVariantArrayObjectfvATI && args.Length() >= 3){
			obj->methodp_glGetVariantArrayObjectfvATI(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);
	PFNGLGETVARIANTARRAYOBJECTIVATIPROC methodp_glGetVariantArrayObjectivATI{nullptr};
	static v8::Handle<v8::Value> method_glGetVariantArrayObjectivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVariantArrayObjectivATI && args.Length() >= 3){
			obj->methodp_glGetVariantArrayObjectivATI(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
	PFNGLGETVARIANTBOOLEANVEXTPROC methodp_glGetVariantBooleanvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVariantBooleanvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVariantBooleanvEXT && args.Length() >= 3){
			obj->methodp_glGetVariantBooleanvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLboolean *)((int64_t)args[2]->NumberValue())/* GLboolean *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
	PFNGLGETVARIANTFLOATVEXTPROC methodp_glGetVariantFloatvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVariantFloatvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVariantFloatvEXT && args.Length() >= 3){
			obj->methodp_glGetVariantFloatvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
	PFNGLGETVARIANTINTEGERVEXTPROC methodp_glGetVariantIntegervEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVariantIntegervEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVariantIntegervEXT && args.Length() >= 3){
			obj->methodp_glGetVariantIntegervEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, void **data);
	PFNGLGETVARIANTPOINTERVEXTPROC methodp_glGetVariantPointervEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVariantPointervEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVariantPointervEXT && args.Length() >= 3){
			obj->methodp_glGetVariantPointervEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum value */,
				(void **)((int64_t)args[2]->NumberValue())/* void **data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
	PFNGLGETVARYINGLOCATIONNVPROC methodp_glGetVaryingLocationNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVaryingLocationNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVaryingLocationNV && args.Length() >= 2){
			obj->methodp_glGetVaryingLocationNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
	PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC methodp_glGetVertexArrayIntegeri_vEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexArrayIntegeri_vEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexArrayIntegeri_vEXT && args.Length() >= 4){
			obj->methodp_glGetVertexArrayIntegeri_vEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint *param);
	PFNGLGETVERTEXARRAYINTEGERVEXTPROC methodp_glGetVertexArrayIntegervEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexArrayIntegervEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexArrayIntegervEXT && args.Length() >= 3){
			obj->methodp_glGetVertexArrayIntegervEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void **param);
	PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC methodp_glGetVertexArrayPointeri_vEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexArrayPointeri_vEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexArrayPointeri_vEXT && args.Length() >= 4){
			obj->methodp_glGetVertexArrayPointeri_vEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[3]->NumberValue())/* void **param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void **param);
	PFNGLGETVERTEXARRAYPOINTERVEXTPROC methodp_glGetVertexArrayPointervEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexArrayPointervEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexArrayPointervEXT && args.Length() >= 3){
			obj->methodp_glGetVertexArrayPointervEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);
	PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC methodp_glGetVertexAttribArrayObjectfvATI{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribArrayObjectfvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribArrayObjectfvATI && args.Length() >= 3){
			obj->methodp_glGetVertexAttribArrayObjectfvATI(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);
	PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC methodp_glGetVertexAttribArrayObjectivATI{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribArrayObjectivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribArrayObjectivATI && args.Length() >= 3){
			obj->methodp_glGetVertexAttribArrayObjectivATI(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);
	PFNGLGETVERTEXATTRIBIIVPROC methodp_glGetVertexAttribIiv{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribIiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribIiv && args.Length() >= 3){
			obj->methodp_glGetVertexAttribIiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
	PFNGLGETVERTEXATTRIBIIVEXTPROC methodp_glGetVertexAttribIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribIivEXT && args.Length() >= 3){
			obj->methodp_glGetVertexAttribIivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);
	PFNGLGETVERTEXATTRIBIUIVPROC methodp_glGetVertexAttribIuiv{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribIuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribIuiv && args.Length() >= 3){
			obj->methodp_glGetVertexAttribIuiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
	PFNGLGETVERTEXATTRIBIUIVEXTPROC methodp_glGetVertexAttribIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribIuivEXT && args.Length() >= 3){
			obj->methodp_glGetVertexAttribIuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);
	PFNGLGETVERTEXATTRIBLDVPROC methodp_glGetVertexAttribLdv{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribLdv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribLdv && args.Length() >= 3){
			obj->methodp_glGetVertexAttribLdv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params);
	PFNGLGETVERTEXATTRIBLDVEXTPROC methodp_glGetVertexAttribLdvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribLdvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribLdvEXT && args.Length() >= 3){
			obj->methodp_glGetVertexAttribLdvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params);
	PFNGLGETVERTEXATTRIBLI64VNVPROC methodp_glGetVertexAttribLi64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribLi64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribLi64vNV && args.Length() >= 3){
			obj->methodp_glGetVertexAttribLi64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint64EXT *)((int64_t)args[2]->NumberValue())/* GLint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
	PFNGLGETVERTEXATTRIBLUI64VARBPROC methodp_glGetVertexAttribLui64vARB{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribLui64vARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribLui64vARB && args.Length() >= 3){
			obj->methodp_glGetVertexAttribLui64vARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint64EXT *)((int64_t)args[2]->NumberValue())/* GLuint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
	PFNGLGETVERTEXATTRIBLUI64VNVPROC methodp_glGetVertexAttribLui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribLui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribLui64vNV && args.Length() >= 3){
			obj->methodp_glGetVertexAttribLui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint64EXT *)((int64_t)args[2]->NumberValue())/* GLuint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer);
	PFNGLGETVERTEXATTRIBPOINTERVPROC methodp_glGetVertexAttribPointerv{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribPointerv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribPointerv && args.Length() >= 3){
			obj->methodp_glGetVertexAttribPointerv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, void **pointer);
	PFNGLGETVERTEXATTRIBPOINTERVARBPROC methodp_glGetVertexAttribPointervARB{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribPointervARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribPointervARB && args.Length() >= 3){
			obj->methodp_glGetVertexAttribPointervARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, void **pointer);
	PFNGLGETVERTEXATTRIBPOINTERVNVPROC methodp_glGetVertexAttribPointervNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribPointervNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribPointervNV && args.Length() >= 3){
			obj->methodp_glGetVertexAttribPointervNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(void **)((int64_t)args[2]->NumberValue())/* void **pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);
	PFNGLGETVERTEXATTRIBDVPROC methodp_glGetVertexAttribdv{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribdv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribdv && args.Length() >= 3){
			obj->methodp_glGetVertexAttribdv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);
	PFNGLGETVERTEXATTRIBDVARBPROC methodp_glGetVertexAttribdvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribdvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribdvARB && args.Length() >= 3){
			obj->methodp_glGetVertexAttribdvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);
	PFNGLGETVERTEXATTRIBDVNVPROC methodp_glGetVertexAttribdvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribdvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribdvNV && args.Length() >= 3){
			obj->methodp_glGetVertexAttribdvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[2]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);
	PFNGLGETVERTEXATTRIBFVPROC methodp_glGetVertexAttribfv{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribfv && args.Length() >= 3){
			obj->methodp_glGetVertexAttribfv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);
	PFNGLGETVERTEXATTRIBFVARBPROC methodp_glGetVertexAttribfvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribfvARB && args.Length() >= 3){
			obj->methodp_glGetVertexAttribfvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);
	PFNGLGETVERTEXATTRIBFVNVPROC methodp_glGetVertexAttribfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribfvNV && args.Length() >= 3){
			obj->methodp_glGetVertexAttribfvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);
	PFNGLGETVERTEXATTRIBIVPROC methodp_glGetVertexAttribiv{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribiv && args.Length() >= 3){
			obj->methodp_glGetVertexAttribiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);
	PFNGLGETVERTEXATTRIBIVARBPROC methodp_glGetVertexAttribivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribivARB && args.Length() >= 3){
			obj->methodp_glGetVertexAttribivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);
	PFNGLGETVERTEXATTRIBIVNVPROC methodp_glGetVertexAttribivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVertexAttribivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVertexAttribivNV && args.Length() >= 3){
			obj->methodp_glGetVertexAttribivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
	PFNGLGETVIDEOCAPTURESTREAMDVNVPROC methodp_glGetVideoCaptureStreamdvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVideoCaptureStreamdvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVideoCaptureStreamdvNV && args.Length() >= 4){
			obj->methodp_glGetVideoCaptureStreamdvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint )(args[1]->NumberValue())/* GLuint stream */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLdouble *)((int64_t)args[3]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
	PFNGLGETVIDEOCAPTURESTREAMFVNVPROC methodp_glGetVideoCaptureStreamfvNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVideoCaptureStreamfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVideoCaptureStreamfvNV && args.Length() >= 4){
			obj->methodp_glGetVideoCaptureStreamfvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint )(args[1]->NumberValue())/* GLuint stream */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
	PFNGLGETVIDEOCAPTURESTREAMIVNVPROC methodp_glGetVideoCaptureStreamivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVideoCaptureStreamivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVideoCaptureStreamivNV && args.Length() >= 4){
			obj->methodp_glGetVideoCaptureStreamivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint )(args[1]->NumberValue())/* GLuint stream */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params);
	PFNGLGETVIDEOCAPTUREIVNVPROC methodp_glGetVideoCaptureivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVideoCaptureivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVideoCaptureivNV && args.Length() >= 3){
			obj->methodp_glGetVideoCaptureivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params);
	PFNGLGETVIDEOI64VNVPROC methodp_glGetVideoi64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVideoi64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVideoi64vNV && args.Length() >= 3){
			obj->methodp_glGetVideoi64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_slot */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint64EXT *)((int64_t)args[2]->NumberValue())/* GLint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params);
	PFNGLGETVIDEOIVNVPROC methodp_glGetVideoivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVideoivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVideoivNV && args.Length() >= 3){
			obj->methodp_glGetVideoivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_slot */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint *)((int64_t)args[2]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params);
	PFNGLGETVIDEOUI64VNVPROC methodp_glGetVideoui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVideoui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVideoui64vNV && args.Length() >= 3){
			obj->methodp_glGetVideoui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_slot */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint64EXT *)((int64_t)args[2]->NumberValue())/* GLuint64EXT *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params);
	PFNGLGETVIDEOUIVNVPROC methodp_glGetVideouivNV{nullptr};
	static v8::Handle<v8::Value> method_glGetVideouivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetVideouivNV && args.Length() >= 3){
			obj->methodp_glGetVideouivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_slot */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
	PFNGLGETNCOLORTABLEARBPROC methodp_glGetnColorTableARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnColorTableARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnColorTableARB && args.Length() >= 5){
			obj->methodp_glGetnColorTableARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei bufSize */,
				(void *)((int64_t)args[4]->NumberValue())/* void *table */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img);
	PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC methodp_glGetnCompressedTexImageARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnCompressedTexImageARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnCompressedTexImageARB && args.Length() >= 4){
			obj->methodp_glGetnCompressedTexImageARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint lod */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(void *)((int64_t)args[3]->NumberValue())/* void *img */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
	PFNGLGETNCONVOLUTIONFILTERARBPROC methodp_glGetnConvolutionFilterARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnConvolutionFilterARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnConvolutionFilterARB && args.Length() >= 5){
			obj->methodp_glGetnConvolutionFilterARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei bufSize */,
				(void *)((int64_t)args[4]->NumberValue())/* void *image */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
	PFNGLGETNHISTOGRAMARBPROC methodp_glGetnHistogramARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnHistogramARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnHistogramARB && args.Length() >= 6){
			obj->methodp_glGetnHistogramARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean reset */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei bufSize */,
				(void *)((int64_t)args[5]->NumberValue())/* void *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
	PFNGLGETNMAPDVARBPROC methodp_glGetnMapdvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnMapdvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnMapdvARB && args.Length() >= 4){
			obj->methodp_glGetnMapdvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum query */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLdouble *)((int64_t)args[3]->NumberValue())/* GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
	PFNGLGETNMAPFVARBPROC methodp_glGetnMapfvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnMapfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnMapfvARB && args.Length() >= 4){
			obj->methodp_glGetnMapfvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum query */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v);
	PFNGLGETNMAPIVARBPROC methodp_glGetnMapivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnMapivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnMapivARB && args.Length() >= 4){
			obj->methodp_glGetnMapivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum query */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
	PFNGLGETNMINMAXARBPROC methodp_glGetnMinmaxARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnMinmaxARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnMinmaxARB && args.Length() >= 6){
			obj->methodp_glGetnMinmaxARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean reset */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei bufSize */,
				(void *)((int64_t)args[5]->NumberValue())/* void *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values);
	PFNGLGETNPIXELMAPFVARBPROC methodp_glGetnPixelMapfvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnPixelMapfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnPixelMapfvARB && args.Length() >= 3){
			obj->methodp_glGetnPixelMapfvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLfloat *)((int64_t)args[2]->NumberValue())/* GLfloat *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values);
	PFNGLGETNPIXELMAPUIVARBPROC methodp_glGetnPixelMapuivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnPixelMapuivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnPixelMapuivARB && args.Length() >= 3){
			obj->methodp_glGetnPixelMapuivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLuint *)((int64_t)args[2]->NumberValue())/* GLuint *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values);
	PFNGLGETNPIXELMAPUSVARBPROC methodp_glGetnPixelMapusvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnPixelMapusvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnPixelMapusvARB && args.Length() >= 3){
			obj->methodp_glGetnPixelMapusvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei bufSize */,
				(GLushort *)((int64_t)args[2]->NumberValue())/* GLushort *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern);
	PFNGLGETNPOLYGONSTIPPLEARBPROC methodp_glGetnPolygonStippleARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnPolygonStippleARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnPolygonStippleARB && args.Length() >= 2){
			obj->methodp_glGetnPolygonStippleARB(
				(GLsizei )(args[0]->NumberValue())/* GLsizei bufSize */,
				(GLubyte *)((int64_t)args[1]->NumberValue())/* GLubyte *pattern */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
	PFNGLGETNSEPARABLEFILTERARBPROC methodp_glGetnSeparableFilterARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnSeparableFilterARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnSeparableFilterARB && args.Length() >= 8){
			obj->methodp_glGetnSeparableFilterARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei rowBufSize */,
				(void *)((int64_t)args[4]->NumberValue())/* void *row */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei columnBufSize */,
				(void *)((int64_t)args[6]->NumberValue())/* void *column */,
				(void *)((int64_t)args[7]->NumberValue())/* void *span */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
	PFNGLGETNTEXIMAGEARBPROC methodp_glGetnTexImageARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnTexImageARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnTexImageARB && args.Length() >= 6){
			obj->methodp_glGetnTexImageARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei bufSize */,
				(void *)((int64_t)args[5]->NumberValue())/* void *img */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
	PFNGLGETNUNIFORMDVARBPROC methodp_glGetnUniformdvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnUniformdvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnUniformdvARB && args.Length() >= 4){
			obj->methodp_glGetnUniformdvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLdouble *)((int64_t)args[3]->NumberValue())/* GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
	PFNGLGETNUNIFORMFVARBPROC methodp_glGetnUniformfvARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnUniformfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnUniformfvARB && args.Length() >= 4){
			obj->methodp_glGetnUniformfvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNUNIFORMFVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
	PFNGLGETNUNIFORMFVEXTPROC methodp_glGetnUniformfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetnUniformfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnUniformfvEXT && args.Length() >= 4){
			obj->methodp_glGetnUniformfvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLfloat *)((int64_t)args[3]->NumberValue())/* GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
	PFNGLGETNUNIFORMIVARBPROC methodp_glGetnUniformivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnUniformivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnUniformivARB && args.Length() >= 4){
			obj->methodp_glGetnUniformivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNUNIFORMIVEXTPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
	PFNGLGETNUNIFORMIVEXTPROC methodp_glGetnUniformivEXT{nullptr};
	static v8::Handle<v8::Value> method_glGetnUniformivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnUniformivEXT && args.Length() >= 4){
			obj->methodp_glGetnUniformivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
	PFNGLGETNUNIFORMUIVARBPROC methodp_glGetnUniformuivARB{nullptr};
	static v8::Handle<v8::Value> method_glGetnUniformuivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGetnUniformuivARB && args.Length() >= 4){
			obj->methodp_glGetnUniformuivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLuint *)((int64_t)args[3]->NumberValue())/* GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
	PFNGLGLOBALALPHAFACTORBSUNPROC methodp_glGlobalAlphaFactorbSUN{nullptr};
	static v8::Handle<v8::Value> method_glGlobalAlphaFactorbSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGlobalAlphaFactorbSUN && args.Length() >= 1){
			obj->methodp_glGlobalAlphaFactorbSUN(
				(GLbyte )(args[0]->NumberValue())/* GLbyte factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
	PFNGLGLOBALALPHAFACTORDSUNPROC methodp_glGlobalAlphaFactordSUN{nullptr};
	static v8::Handle<v8::Value> method_glGlobalAlphaFactordSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGlobalAlphaFactordSUN && args.Length() >= 1){
			obj->methodp_glGlobalAlphaFactordSUN(
				(GLdouble )(args[0]->NumberValue())/* GLdouble factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
	PFNGLGLOBALALPHAFACTORFSUNPROC methodp_glGlobalAlphaFactorfSUN{nullptr};
	static v8::Handle<v8::Value> method_glGlobalAlphaFactorfSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGlobalAlphaFactorfSUN && args.Length() >= 1){
			obj->methodp_glGlobalAlphaFactorfSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
	PFNGLGLOBALALPHAFACTORISUNPROC methodp_glGlobalAlphaFactoriSUN{nullptr};
	static v8::Handle<v8::Value> method_glGlobalAlphaFactoriSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGlobalAlphaFactoriSUN && args.Length() >= 1){
			obj->methodp_glGlobalAlphaFactoriSUN(
				(GLint )(args[0]->NumberValue())/* GLint factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
	PFNGLGLOBALALPHAFACTORSSUNPROC methodp_glGlobalAlphaFactorsSUN{nullptr};
	static v8::Handle<v8::Value> method_glGlobalAlphaFactorsSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGlobalAlphaFactorsSUN && args.Length() >= 1){
			obj->methodp_glGlobalAlphaFactorsSUN(
				(GLshort )(args[0]->NumberValue())/* GLshort factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
	PFNGLGLOBALALPHAFACTORUBSUNPROC methodp_glGlobalAlphaFactorubSUN{nullptr};
	static v8::Handle<v8::Value> method_glGlobalAlphaFactorubSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGlobalAlphaFactorubSUN && args.Length() >= 1){
			obj->methodp_glGlobalAlphaFactorubSUN(
				(GLubyte )(args[0]->NumberValue())/* GLubyte factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
	PFNGLGLOBALALPHAFACTORUISUNPROC methodp_glGlobalAlphaFactoruiSUN{nullptr};
	static v8::Handle<v8::Value> method_glGlobalAlphaFactoruiSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGlobalAlphaFactoruiSUN && args.Length() >= 1){
			obj->methodp_glGlobalAlphaFactoruiSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
	PFNGLGLOBALALPHAFACTORUSSUNPROC methodp_glGlobalAlphaFactorusSUN{nullptr};
	static v8::Handle<v8::Value> method_glGlobalAlphaFactorusSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glGlobalAlphaFactorusSUN && args.Length() >= 1){
			obj->methodp_glGlobalAlphaFactorusSUN(
				(GLushort )(args[0]->NumberValue())/* GLushort factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLHINTPROC) (GLenum target, GLenum mode);
	PFNGLHINTPROC methodp_glHint{nullptr};
	static v8::Handle<v8::Value> method_glHint(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glHint && args.Length() >= 2){
			obj->methodp_glHint(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLHINTPGIPROC) (GLenum target, GLint mode);
	PFNGLHINTPGIPROC methodp_glHintPGI{nullptr};
	static v8::Handle<v8::Value> method_glHintPGI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glHintPGI && args.Length() >= 2){
			obj->methodp_glHintPGI(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
	PFNGLHISTOGRAMPROC methodp_glHistogram{nullptr};
	static v8::Handle<v8::Value> method_glHistogram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glHistogram && args.Length() >= 4){
			obj->methodp_glHistogram(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei width */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean sink */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
	PFNGLHISTOGRAMEXTPROC methodp_glHistogramEXT{nullptr};
	static v8::Handle<v8::Value> method_glHistogramEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glHistogramEXT && args.Length() >= 4){
			obj->methodp_glHistogramEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei width */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean sink */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const void *params);
	PFNGLIGLOOINTERFACESGIXPROC methodp_glIglooInterfaceSGIX{nullptr};
	static v8::Handle<v8::Value> method_glIglooInterfaceSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIglooInterfaceSGIX && args.Length() >= 2){
			obj->methodp_glIglooInterfaceSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);
	PFNGLIMAGETRANSFORMPARAMETERFHPPROC methodp_glImageTransformParameterfHP{nullptr};
	static v8::Handle<v8::Value> method_glImageTransformParameterfHP(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glImageTransformParameterfHP && args.Length() >= 3){
			obj->methodp_glImageTransformParameterfHP(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLIMAGETRANSFORMPARAMETERFVHPPROC methodp_glImageTransformParameterfvHP{nullptr};
	static v8::Handle<v8::Value> method_glImageTransformParameterfvHP(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glImageTransformParameterfvHP && args.Length() >= 3){
			obj->methodp_glImageTransformParameterfvHP(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);
	PFNGLIMAGETRANSFORMPARAMETERIHPPROC methodp_glImageTransformParameteriHP{nullptr};
	static v8::Handle<v8::Value> method_glImageTransformParameteriHP(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glImageTransformParameteriHP && args.Length() >= 3){
			obj->methodp_glImageTransformParameteriHP(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLIMAGETRANSFORMPARAMETERIVHPPROC methodp_glImageTransformParameterivHP{nullptr};
	static v8::Handle<v8::Value> method_glImageTransformParameterivHP(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glImageTransformParameterivHP && args.Length() >= 3){
			obj->methodp_glImageTransformParameterivHP(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLsync (APIENTRYP PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
	PFNGLIMPORTSYNCEXTPROC methodp_glImportSyncEXT{nullptr};
	static v8::Handle<v8::Value> method_glImportSyncEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glImportSyncEXT && args.Length() >= 3){
			obj->methodp_glImportSyncEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum external_sync_type */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr external_sync */,
				(GLbitfield )(args[2]->NumberValue())/* GLbitfield flags */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
	PFNGLINDEXFORMATNVPROC methodp_glIndexFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glIndexFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexFormatNV && args.Length() >= 2){
			obj->methodp_glIndexFormatNV(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);
	PFNGLINDEXFUNCEXTPROC methodp_glIndexFuncEXT{nullptr};
	static v8::Handle<v8::Value> method_glIndexFuncEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexFuncEXT && args.Length() >= 2){
			obj->methodp_glIndexFuncEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum func */,
				(GLclampf )(args[1]->NumberValue())/* GLclampf ref */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXMASKPROC) (GLuint mask);
	PFNGLINDEXMASKPROC methodp_glIndexMask{nullptr};
	static v8::Handle<v8::Value> method_glIndexMask(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexMask && args.Length() >= 1){
			obj->methodp_glIndexMask(
				(GLuint )(args[0]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
	PFNGLINDEXMATERIALEXTPROC methodp_glIndexMaterialEXT{nullptr};
	static v8::Handle<v8::Value> method_glIndexMaterialEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexMaterialEXT && args.Length() >= 2){
			obj->methodp_glIndexMaterialEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer);
	PFNGLINDEXPOINTERPROC methodp_glIndexPointer{nullptr};
	static v8::Handle<v8::Value> method_glIndexPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexPointer && args.Length() >= 3){
			obj->methodp_glIndexPointer(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);
	PFNGLINDEXPOINTEREXTPROC methodp_glIndexPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glIndexPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexPointerEXT && args.Length() >= 4){
			obj->methodp_glIndexPointerEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);
	PFNGLINDEXPOINTERLISTIBMPROC methodp_glIndexPointerListIBM{nullptr};
	static v8::Handle<v8::Value> method_glIndexPointerListIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexPointerListIBM && args.Length() >= 4){
			obj->methodp_glIndexPointerListIBM(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLint )(args[1]->NumberValue())/* GLint stride */,
				(const void **)((int64_t)args[2]->NumberValue())/* const void **pointer */,
				(GLint )(args[3]->NumberValue())/* GLint ptrstride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXDPROC) (GLdouble c);
	PFNGLINDEXDPROC methodp_glIndexd{nullptr};
	static v8::Handle<v8::Value> method_glIndexd(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexd && args.Length() >= 1){
			obj->methodp_glIndexd(
				(GLdouble )(args[0]->NumberValue())/* GLdouble c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXDVPROC) (const GLdouble *c);
	PFNGLINDEXDVPROC methodp_glIndexdv{nullptr};
	static v8::Handle<v8::Value> method_glIndexdv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexdv && args.Length() >= 1){
			obj->methodp_glIndexdv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXFPROC) (GLfloat c);
	PFNGLINDEXFPROC methodp_glIndexf{nullptr};
	static v8::Handle<v8::Value> method_glIndexf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexf && args.Length() >= 1){
			obj->methodp_glIndexf(
				(GLfloat )(args[0]->NumberValue())/* GLfloat c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXFVPROC) (const GLfloat *c);
	PFNGLINDEXFVPROC methodp_glIndexfv{nullptr};
	static v8::Handle<v8::Value> method_glIndexfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexfv && args.Length() >= 1){
			obj->methodp_glIndexfv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXIPROC) (GLint c);
	PFNGLINDEXIPROC methodp_glIndexi{nullptr};
	static v8::Handle<v8::Value> method_glIndexi(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexi && args.Length() >= 1){
			obj->methodp_glIndexi(
				(GLint )(args[0]->NumberValue())/* GLint c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXIVPROC) (const GLint *c);
	PFNGLINDEXIVPROC methodp_glIndexiv{nullptr};
	static v8::Handle<v8::Value> method_glIndexiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexiv && args.Length() >= 1){
			obj->methodp_glIndexiv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXSPROC) (GLshort c);
	PFNGLINDEXSPROC methodp_glIndexs{nullptr};
	static v8::Handle<v8::Value> method_glIndexs(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexs && args.Length() >= 1){
			obj->methodp_glIndexs(
				(GLshort )(args[0]->NumberValue())/* GLshort c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXSVPROC) (const GLshort *c);
	PFNGLINDEXSVPROC methodp_glIndexsv{nullptr};
	static v8::Handle<v8::Value> method_glIndexsv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexsv && args.Length() >= 1){
			obj->methodp_glIndexsv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXUBPROC) (GLubyte c);
	PFNGLINDEXUBPROC methodp_glIndexub{nullptr};
	static v8::Handle<v8::Value> method_glIndexub(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexub && args.Length() >= 1){
			obj->methodp_glIndexub(
				(GLubyte )(args[0]->NumberValue())/* GLubyte c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXUBVPROC) (const GLubyte *c);
	PFNGLINDEXUBVPROC methodp_glIndexubv{nullptr};
	static v8::Handle<v8::Value> method_glIndexubv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexubv && args.Length() >= 1){
			obj->methodp_glIndexubv(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *c */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXXOESPROC) (GLfixed component);
	PFNGLINDEXXOESPROC methodp_glIndexxOES{nullptr};
	static v8::Handle<v8::Value> method_glIndexxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexxOES && args.Length() >= 1){
			obj->methodp_glIndexxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed component */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINDEXXVOESPROC) (const GLfixed *component);
	PFNGLINDEXXVOESPROC methodp_glIndexxvOES{nullptr};
	static v8::Handle<v8::Value> method_glIndexxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIndexxvOES && args.Length() >= 1){
			obj->methodp_glIndexxvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *component */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINITNAMESPROC) ();
	PFNGLINITNAMESPROC methodp_glInitNames{nullptr};
	static v8::Handle<v8::Value> method_glInitNames(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInitNames && args.Length() >= 0){
			obj->methodp_glInitNames(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
	PFNGLINSERTCOMPONENTEXTPROC methodp_glInsertComponentEXT{nullptr};
	static v8::Handle<v8::Value> method_glInsertComponentEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInsertComponentEXT && args.Length() >= 3){
			obj->methodp_glInsertComponentEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint res */,
				(GLuint )(args[1]->NumberValue())/* GLuint src */,
				(GLuint )(args[2]->NumberValue())/* GLuint num */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar *marker);
	PFNGLINSERTEVENTMARKEREXTPROC methodp_glInsertEventMarkerEXT{nullptr};
	static v8::Handle<v8::Value> method_glInsertEventMarkerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInsertEventMarkerEXT && args.Length() >= 2){
			obj->methodp_glInsertEventMarkerEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *marker */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);
	PFNGLINSTRUMENTSBUFFERSGIXPROC methodp_glInstrumentsBufferSGIX{nullptr};
	static v8::Handle<v8::Value> method_glInstrumentsBufferSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInstrumentsBufferSGIX && args.Length() >= 2){
			obj->methodp_glInstrumentsBufferSGIX(
				(GLsizei )(args[0]->NumberValue())/* GLsizei size */,
				(GLint *)((int64_t)args[1]->NumberValue())/* GLint *buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINTERLEAVEDARRAYSPROC) (GLenum format, GLsizei stride, const void *pointer);
	PFNGLINTERLEAVEDARRAYSPROC methodp_glInterleavedArrays{nullptr};
	static v8::Handle<v8::Value> method_glInterleavedArrays(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInterleavedArrays && args.Length() >= 3){
			obj->methodp_glInterleavedArrays(
				(GLenum )(args[0]->NumberValue())/* GLenum format */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
	PFNGLINTERPOLATEPATHSNVPROC methodp_glInterpolatePathsNV{nullptr};
	static v8::Handle<v8::Value> method_glInterpolatePathsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInterpolatePathsNV && args.Length() >= 4){
			obj->methodp_glInterpolatePathsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint resultPath */,
				(GLuint )(args[1]->NumberValue())/* GLuint pathA */,
				(GLuint )(args[2]->NumberValue())/* GLuint pathB */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat weight */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);
	PFNGLINVALIDATEBUFFERDATAPROC methodp_glInvalidateBufferData{nullptr};
	static v8::Handle<v8::Value> method_glInvalidateBufferData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInvalidateBufferData && args.Length() >= 1){
			obj->methodp_glInvalidateBufferData(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
	PFNGLINVALIDATEBUFFERSUBDATAPROC methodp_glInvalidateBufferSubData{nullptr};
	static v8::Handle<v8::Value> method_glInvalidateBufferSubData(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInvalidateBufferSubData && args.Length() >= 3){
			obj->methodp_glInvalidateBufferSubData(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);
	PFNGLINVALIDATEFRAMEBUFFERPROC methodp_glInvalidateFramebuffer{nullptr};
	static v8::Handle<v8::Value> method_glInvalidateFramebuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInvalidateFramebuffer && args.Length() >= 3){
			obj->methodp_glInvalidateFramebuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei numAttachments */,
				(const GLenum *)((int64_t)args[2]->NumberValue())/* const GLenum *attachments */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLINVALIDATESUBFRAMEBUFFERPROC methodp_glInvalidateSubFramebuffer{nullptr};
	static v8::Handle<v8::Value> method_glInvalidateSubFramebuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInvalidateSubFramebuffer && args.Length() >= 7){
			obj->methodp_glInvalidateSubFramebuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei numAttachments */,
				(const GLenum *)((int64_t)args[2]->NumberValue())/* const GLenum *attachments */,
				(GLint )(args[3]->NumberValue())/* GLint x */,
				(GLint )(args[4]->NumberValue())/* GLint y */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);
	PFNGLINVALIDATETEXIMAGEPROC methodp_glInvalidateTexImage{nullptr};
	static v8::Handle<v8::Value> method_glInvalidateTexImage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInvalidateTexImage && args.Length() >= 2){
			obj->methodp_glInvalidateTexImage(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
	PFNGLINVALIDATETEXSUBIMAGEPROC methodp_glInvalidateTexSubImage{nullptr};
	static v8::Handle<v8::Value> method_glInvalidateTexSubImage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glInvalidateTexSubImage && args.Length() >= 8){
			obj->methodp_glInvalidateTexSubImage(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
	PFNGLISASYNCMARKERSGIXPROC methodp_glIsAsyncMarkerSGIX{nullptr};
	static v8::Handle<v8::Value> method_glIsAsyncMarkerSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsAsyncMarkerSGIX && args.Length() >= 1){
			obj->methodp_glIsAsyncMarkerSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint marker */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);
	PFNGLISBUFFERPROC methodp_glIsBuffer{nullptr};
	static v8::Handle<v8::Value> method_glIsBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsBuffer && args.Length() >= 1){
			obj->methodp_glIsBuffer(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer);
	PFNGLISBUFFERARBPROC methodp_glIsBufferARB{nullptr};
	static v8::Handle<v8::Value> method_glIsBufferARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsBufferARB && args.Length() >= 1){
			obj->methodp_glIsBufferARB(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
	PFNGLISBUFFERRESIDENTNVPROC methodp_glIsBufferResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glIsBufferResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsBufferResidentNV && args.Length() >= 1){
			obj->methodp_glIsBufferResidentNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);
	PFNGLISENABLEDPROC methodp_glIsEnabled{nullptr};
	static v8::Handle<v8::Value> method_glIsEnabled(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsEnabled && args.Length() >= 1){
			obj->methodp_glIsEnabled(
				(GLenum )(args[0]->NumberValue())/* GLenum cap */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
	PFNGLISENABLEDINDEXEDEXTPROC methodp_glIsEnabledIndexedEXT{nullptr};
	static v8::Handle<v8::Value> method_glIsEnabledIndexedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsEnabledIndexedEXT && args.Length() >= 2){
			obj->methodp_glIsEnabledIndexedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);
	PFNGLISENABLEDIPROC methodp_glIsEnabledi{nullptr};
	static v8::Handle<v8::Value> method_glIsEnabledi(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsEnabledi && args.Length() >= 2){
			obj->methodp_glIsEnabledi(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISENABLEDIEXTPROC) (GLenum target, GLuint index);
	PFNGLISENABLEDIEXTPROC methodp_glIsEnablediEXT{nullptr};
	static v8::Handle<v8::Value> method_glIsEnablediEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsEnablediEXT && args.Length() >= 2){
			obj->methodp_glIsEnablediEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISFENCEAPPLEPROC) (GLuint fence);
	PFNGLISFENCEAPPLEPROC methodp_glIsFenceAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glIsFenceAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsFenceAPPLE && args.Length() >= 1){
			obj->methodp_glIsFenceAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);
	PFNGLISFENCENVPROC methodp_glIsFenceNV{nullptr};
	static v8::Handle<v8::Value> method_glIsFenceNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsFenceNV && args.Length() >= 1){
			obj->methodp_glIsFenceNV(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
	PFNGLISFRAMEBUFFERPROC methodp_glIsFramebuffer{nullptr};
	static v8::Handle<v8::Value> method_glIsFramebuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsFramebuffer && args.Length() >= 1){
			obj->methodp_glIsFramebuffer(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
	PFNGLISFRAMEBUFFEREXTPROC methodp_glIsFramebufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glIsFramebufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsFramebufferEXT && args.Length() >= 1){
			obj->methodp_glIsFramebufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEROESPROC) (GLuint framebuffer);
	PFNGLISFRAMEBUFFEROESPROC methodp_glIsFramebufferOES{nullptr};
	static v8::Handle<v8::Value> method_glIsFramebufferOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsFramebufferOES && args.Length() >= 1){
			obj->methodp_glIsFramebufferOES(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle);
	PFNGLISIMAGEHANDLERESIDENTARBPROC methodp_glIsImageHandleResidentARB{nullptr};
	static v8::Handle<v8::Value> method_glIsImageHandleResidentARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsImageHandleResidentARB && args.Length() >= 1){
			obj->methodp_glIsImageHandleResidentARB(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle);
	PFNGLISIMAGEHANDLERESIDENTNVPROC methodp_glIsImageHandleResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glIsImageHandleResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsImageHandleResidentNV && args.Length() >= 1){
			obj->methodp_glIsImageHandleResidentNV(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISLISTPROC) (GLuint list);
	PFNGLISLISTPROC methodp_glIsList{nullptr};
	static v8::Handle<v8::Value> method_glIsList(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsList && args.Length() >= 1){
			obj->methodp_glIsList(
				(GLuint )(args[0]->NumberValue())/* GLuint list */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);
	PFNGLISNAMEAMDPROC methodp_glIsNameAMD{nullptr};
	static v8::Handle<v8::Value> method_glIsNameAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsNameAMD && args.Length() >= 2){
			obj->methodp_glIsNameAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum identifier */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
	PFNGLISNAMEDBUFFERRESIDENTNVPROC methodp_glIsNamedBufferResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glIsNamedBufferResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsNamedBufferResidentNV && args.Length() >= 1){
			obj->methodp_glIsNamedBufferResidentNV(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
	PFNGLISNAMEDSTRINGARBPROC methodp_glIsNamedStringARB{nullptr};
	static v8::Handle<v8::Value> method_glIsNamedStringARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsNamedStringARB && args.Length() >= 2){
			obj->methodp_glIsNamedStringARB(
				(GLint )(args[0]->NumberValue())/* GLint namelen */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
	PFNGLISOBJECTBUFFERATIPROC methodp_glIsObjectBufferATI{nullptr};
	static v8::Handle<v8::Value> method_glIsObjectBufferATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsObjectBufferATI && args.Length() >= 1){
			obj->methodp_glIsObjectBufferATI(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
	PFNGLISOCCLUSIONQUERYNVPROC methodp_glIsOcclusionQueryNV{nullptr};
	static v8::Handle<v8::Value> method_glIsOcclusionQueryNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsOcclusionQueryNV && args.Length() >= 1){
			obj->methodp_glIsOcclusionQueryNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISPATHNVPROC) (GLuint path);
	PFNGLISPATHNVPROC methodp_glIsPathNV{nullptr};
	static v8::Handle<v8::Value> method_glIsPathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsPathNV && args.Length() >= 1){
			obj->methodp_glIsPathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);
	PFNGLISPOINTINFILLPATHNVPROC methodp_glIsPointInFillPathNV{nullptr};
	static v8::Handle<v8::Value> method_glIsPointInFillPathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsPointInFillPathNV && args.Length() >= 4){
			obj->methodp_glIsPointInFillPathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLuint )(args[1]->NumberValue())/* GLuint mask */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);
	PFNGLISPOINTINSTROKEPATHNVPROC methodp_glIsPointInStrokePathNV{nullptr};
	static v8::Handle<v8::Value> method_glIsPointInStrokePathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsPointInStrokePathNV && args.Length() >= 3){
			obj->methodp_glIsPointInStrokePathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);
	PFNGLISPROGRAMPROC methodp_glIsProgram{nullptr};
	static v8::Handle<v8::Value> method_glIsProgram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsProgram && args.Length() >= 1){
			obj->methodp_glIsProgram(
				(GLuint )(args[0]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISPROGRAMARBPROC) (GLuint program);
	PFNGLISPROGRAMARBPROC methodp_glIsProgramARB{nullptr};
	static v8::Handle<v8::Value> method_glIsProgramARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsProgramARB && args.Length() >= 1){
			obj->methodp_glIsProgramARB(
				(GLuint )(args[0]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISPROGRAMNVPROC) (GLuint id);
	PFNGLISPROGRAMNVPROC methodp_glIsProgramNV{nullptr};
	static v8::Handle<v8::Value> method_glIsProgramNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsProgramNV && args.Length() >= 1){
			obj->methodp_glIsProgramNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);
	PFNGLISPROGRAMPIPELINEPROC methodp_glIsProgramPipeline{nullptr};
	static v8::Handle<v8::Value> method_glIsProgramPipeline(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsProgramPipeline && args.Length() >= 1){
			obj->methodp_glIsProgramPipeline(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEEXTPROC) (GLuint pipeline);
	PFNGLISPROGRAMPIPELINEEXTPROC methodp_glIsProgramPipelineEXT{nullptr};
	static v8::Handle<v8::Value> method_glIsProgramPipelineEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsProgramPipelineEXT && args.Length() >= 1){
			obj->methodp_glIsProgramPipelineEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);
	PFNGLISQUERYPROC methodp_glIsQuery{nullptr};
	static v8::Handle<v8::Value> method_glIsQuery(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsQuery && args.Length() >= 1){
			obj->methodp_glIsQuery(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISQUERYARBPROC) (GLuint id);
	PFNGLISQUERYARBPROC methodp_glIsQueryARB{nullptr};
	static v8::Handle<v8::Value> method_glIsQueryARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsQueryARB && args.Length() >= 1){
			obj->methodp_glIsQueryARB(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISQUERYEXTPROC) (GLuint id);
	PFNGLISQUERYEXTPROC methodp_glIsQueryEXT{nullptr};
	static v8::Handle<v8::Value> method_glIsQueryEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsQueryEXT && args.Length() >= 1){
			obj->methodp_glIsQueryEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
	PFNGLISRENDERBUFFERPROC methodp_glIsRenderbuffer{nullptr};
	static v8::Handle<v8::Value> method_glIsRenderbuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsRenderbuffer && args.Length() >= 1){
			obj->methodp_glIsRenderbuffer(
				(GLuint )(args[0]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
	PFNGLISRENDERBUFFEREXTPROC methodp_glIsRenderbufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glIsRenderbufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsRenderbufferEXT && args.Length() >= 1){
			obj->methodp_glIsRenderbufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFEROESPROC) (GLuint renderbuffer);
	PFNGLISRENDERBUFFEROESPROC methodp_glIsRenderbufferOES{nullptr};
	static v8::Handle<v8::Value> method_glIsRenderbufferOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsRenderbufferOES && args.Length() >= 1){
			obj->methodp_glIsRenderbufferOES(
				(GLuint )(args[0]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);
	PFNGLISSAMPLERPROC methodp_glIsSampler{nullptr};
	static v8::Handle<v8::Value> method_glIsSampler(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsSampler && args.Length() >= 1){
			obj->methodp_glIsSampler(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);
	PFNGLISSHADERPROC methodp_glIsShader{nullptr};
	static v8::Handle<v8::Value> method_glIsShader(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsShader && args.Length() >= 1){
			obj->methodp_glIsShader(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);
	PFNGLISSYNCPROC methodp_glIsSync{nullptr};
	static v8::Handle<v8::Value> method_glIsSync(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsSync && args.Length() >= 1){
			obj->methodp_glIsSync(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISSYNCAPPLEPROC) (GLsync sync);
	PFNGLISSYNCAPPLEPROC methodp_glIsSyncAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glIsSyncAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsSyncAPPLE && args.Length() >= 1){
			obj->methodp_glIsSyncAPPLE(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC) (GLuint texture);
	PFNGLISTEXTUREPROC methodp_glIsTexture{nullptr};
	static v8::Handle<v8::Value> method_glIsTexture(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsTexture && args.Length() >= 1){
			obj->methodp_glIsTexture(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISTEXTUREEXTPROC) (GLuint texture);
	PFNGLISTEXTUREEXTPROC methodp_glIsTextureEXT{nullptr};
	static v8::Handle<v8::Value> method_glIsTextureEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsTextureEXT && args.Length() >= 1){
			obj->methodp_glIsTextureEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
	PFNGLISTEXTUREHANDLERESIDENTARBPROC methodp_glIsTextureHandleResidentARB{nullptr};
	static v8::Handle<v8::Value> method_glIsTextureHandleResidentARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsTextureHandleResidentARB && args.Length() >= 1){
			obj->methodp_glIsTextureHandleResidentARB(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
	PFNGLISTEXTUREHANDLERESIDENTNVPROC methodp_glIsTextureHandleResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glIsTextureHandleResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsTextureHandleResidentNV && args.Length() >= 1){
			obj->methodp_glIsTextureHandleResidentNV(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);
	PFNGLISTRANSFORMFEEDBACKPROC methodp_glIsTransformFeedback{nullptr};
	static v8::Handle<v8::Value> method_glIsTransformFeedback(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsTransformFeedback && args.Length() >= 1){
			obj->methodp_glIsTransformFeedback(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);
	PFNGLISTRANSFORMFEEDBACKNVPROC methodp_glIsTransformFeedbackNV{nullptr};
	static v8::Handle<v8::Value> method_glIsTransformFeedbackNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsTransformFeedbackNV && args.Length() >= 1){
			obj->methodp_glIsTransformFeedbackNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
	PFNGLISVARIANTENABLEDEXTPROC methodp_glIsVariantEnabledEXT{nullptr};
	static v8::Handle<v8::Value> method_glIsVariantEnabledEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsVariantEnabledEXT && args.Length() >= 2){
			obj->methodp_glIsVariantEnabledEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum cap */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);
	PFNGLISVERTEXARRAYPROC methodp_glIsVertexArray{nullptr};
	static v8::Handle<v8::Value> method_glIsVertexArray(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsVertexArray && args.Length() >= 1){
			obj->methodp_glIsVertexArray(
				(GLuint )(args[0]->NumberValue())/* GLuint array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
	PFNGLISVERTEXARRAYAPPLEPROC methodp_glIsVertexArrayAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glIsVertexArrayAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsVertexArrayAPPLE && args.Length() >= 1){
			obj->methodp_glIsVertexArrayAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYOESPROC) (GLuint array);
	PFNGLISVERTEXARRAYOESPROC methodp_glIsVertexArrayOES{nullptr};
	static v8::Handle<v8::Value> method_glIsVertexArrayOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsVertexArrayOES && args.Length() >= 1){
			obj->methodp_glIsVertexArrayOES(
				(GLuint )(args[0]->NumberValue())/* GLuint array */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
	PFNGLISVERTEXATTRIBENABLEDAPPLEPROC methodp_glIsVertexAttribEnabledAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glIsVertexAttribEnabledAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glIsVertexAttribEnabledAPPLE && args.Length() >= 2){
			obj->methodp_glIsVertexAttribEnabledAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label);
	PFNGLLABELOBJECTEXTPROC methodp_glLabelObjectEXT{nullptr};
	static v8::Handle<v8::Value> method_glLabelObjectEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLabelObjectEXT && args.Length() >= 4){
			obj->methodp_glLabelObjectEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint object */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[3]->NumberValue())/* const GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);
	PFNGLLIGHTENVISGIXPROC methodp_glLightEnviSGIX{nullptr};
	static v8::Handle<v8::Value> method_glLightEnviSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightEnviSGIX && args.Length() >= 2){
			obj->methodp_glLightEnviSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTMODELFPROC) (GLenum pname, GLfloat param);
	PFNGLLIGHTMODELFPROC methodp_glLightModelf{nullptr};
	static v8::Handle<v8::Value> method_glLightModelf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightModelf && args.Length() >= 2){
			obj->methodp_glLightModelf(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTMODELFVPROC) (GLenum pname, const GLfloat *params);
	PFNGLLIGHTMODELFVPROC methodp_glLightModelfv{nullptr};
	static v8::Handle<v8::Value> method_glLightModelfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightModelfv && args.Length() >= 2){
			obj->methodp_glLightModelfv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTMODELIPROC) (GLenum pname, GLint param);
	PFNGLLIGHTMODELIPROC methodp_glLightModeli{nullptr};
	static v8::Handle<v8::Value> method_glLightModeli(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightModeli && args.Length() >= 2){
			obj->methodp_glLightModeli(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTMODELIVPROC) (GLenum pname, const GLint *params);
	PFNGLLIGHTMODELIVPROC methodp_glLightModeliv{nullptr};
	static v8::Handle<v8::Value> method_glLightModeliv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightModeliv && args.Length() >= 2){
			obj->methodp_glLightModeliv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTMODELXPROC) (GLenum pname, GLfixed param);
	PFNGLLIGHTMODELXPROC methodp_glLightModelx{nullptr};
	static v8::Handle<v8::Value> method_glLightModelx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightModelx && args.Length() >= 2){
			obj->methodp_glLightModelx(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTMODELXOESPROC) (GLenum pname, GLfixed param);
	PFNGLLIGHTMODELXOESPROC methodp_glLightModelxOES{nullptr};
	static v8::Handle<v8::Value> method_glLightModelxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightModelxOES && args.Length() >= 2){
			obj->methodp_glLightModelxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTMODELXVPROC) (GLenum pname, const GLfixed *param);
	PFNGLLIGHTMODELXVPROC methodp_glLightModelxv{nullptr};
	static v8::Handle<v8::Value> method_glLightModelxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightModelxv && args.Length() >= 2){
			obj->methodp_glLightModelxv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTMODELXVOESPROC) (GLenum pname, const GLfixed *param);
	PFNGLLIGHTMODELXVOESPROC methodp_glLightModelxvOES{nullptr};
	static v8::Handle<v8::Value> method_glLightModelxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightModelxvOES && args.Length() >= 2){
			obj->methodp_glLightModelxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTFPROC) (GLenum light, GLenum pname, GLfloat param);
	PFNGLLIGHTFPROC methodp_glLightf{nullptr};
	static v8::Handle<v8::Value> method_glLightf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightf && args.Length() >= 3){
			obj->methodp_glLightf(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTFVPROC) (GLenum light, GLenum pname, const GLfloat *params);
	PFNGLLIGHTFVPROC methodp_glLightfv{nullptr};
	static v8::Handle<v8::Value> method_glLightfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightfv && args.Length() >= 3){
			obj->methodp_glLightfv(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTIPROC) (GLenum light, GLenum pname, GLint param);
	PFNGLLIGHTIPROC methodp_glLighti{nullptr};
	static v8::Handle<v8::Value> method_glLighti(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLighti && args.Length() >= 3){
			obj->methodp_glLighti(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTIVPROC) (GLenum light, GLenum pname, const GLint *params);
	PFNGLLIGHTIVPROC methodp_glLightiv{nullptr};
	static v8::Handle<v8::Value> method_glLightiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightiv && args.Length() >= 3){
			obj->methodp_glLightiv(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTXPROC) (GLenum light, GLenum pname, GLfixed param);
	PFNGLLIGHTXPROC methodp_glLightx{nullptr};
	static v8::Handle<v8::Value> method_glLightx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightx && args.Length() >= 3){
			obj->methodp_glLightx(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed param);
	PFNGLLIGHTXOESPROC methodp_glLightxOES{nullptr};
	static v8::Handle<v8::Value> method_glLightxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightxOES && args.Length() >= 3){
			obj->methodp_glLightxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTXVPROC) (GLenum light, GLenum pname, const GLfixed *params);
	PFNGLLIGHTXVPROC methodp_glLightxv{nullptr};
	static v8::Handle<v8::Value> method_glLightxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightxv && args.Length() >= 3){
			obj->methodp_glLightxv(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLIGHTXVOESPROC) (GLenum light, GLenum pname, const GLfixed *params);
	PFNGLLIGHTXVOESPROC methodp_glLightxvOES{nullptr};
	static v8::Handle<v8::Value> method_glLightxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLightxvOES && args.Length() >= 3){
			obj->methodp_glLightxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum light */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLINESTIPPLEPROC) (GLint factor, GLushort pattern);
	PFNGLLINESTIPPLEPROC methodp_glLineStipple{nullptr};
	static v8::Handle<v8::Value> method_glLineStipple(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLineStipple && args.Length() >= 2){
			obj->methodp_glLineStipple(
				(GLint )(args[0]->NumberValue())/* GLint factor */,
				(GLushort )(args[1]->NumberValue())/* GLushort pattern */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLINEWIDTHPROC) (GLfloat width);
	PFNGLLINEWIDTHPROC methodp_glLineWidth{nullptr};
	static v8::Handle<v8::Value> method_glLineWidth(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLineWidth && args.Length() >= 1){
			obj->methodp_glLineWidth(
				(GLfloat )(args[0]->NumberValue())/* GLfloat width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLINEWIDTHXPROC) (GLfixed width);
	PFNGLLINEWIDTHXPROC methodp_glLineWidthx{nullptr};
	static v8::Handle<v8::Value> method_glLineWidthx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLineWidthx && args.Length() >= 1){
			obj->methodp_glLineWidthx(
				(GLfixed )(args[0]->NumberValue())/* GLfixed width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLINEWIDTHXOESPROC) (GLfixed width);
	PFNGLLINEWIDTHXOESPROC methodp_glLineWidthxOES{nullptr};
	static v8::Handle<v8::Value> method_glLineWidthxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLineWidthxOES && args.Length() >= 1){
			obj->methodp_glLineWidthxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);
	PFNGLLINKPROGRAMPROC methodp_glLinkProgram{nullptr};
	static v8::Handle<v8::Value> method_glLinkProgram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLinkProgram && args.Length() >= 1){
			obj->methodp_glLinkProgram(
				(GLuint )(args[0]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
	PFNGLLINKPROGRAMARBPROC methodp_glLinkProgramARB{nullptr};
	static v8::Handle<v8::Value> method_glLinkProgramARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLinkProgramARB && args.Length() >= 1){
			obj->methodp_glLinkProgramARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLISTBASEPROC) (GLuint base);
	PFNGLLISTBASEPROC methodp_glListBase{nullptr};
	static v8::Handle<v8::Value> method_glListBase(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glListBase && args.Length() >= 1){
			obj->methodp_glListBase(
				(GLuint )(args[0]->NumberValue())/* GLuint base */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);
	PFNGLLISTPARAMETERFSGIXPROC methodp_glListParameterfSGIX{nullptr};
	static v8::Handle<v8::Value> method_glListParameterfSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glListParameterfSGIX && args.Length() >= 3){
			obj->methodp_glListParameterfSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint list */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);
	PFNGLLISTPARAMETERFVSGIXPROC methodp_glListParameterfvSGIX{nullptr};
	static v8::Handle<v8::Value> method_glListParameterfvSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glListParameterfvSGIX && args.Length() >= 3){
			obj->methodp_glListParameterfvSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint list */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);
	PFNGLLISTPARAMETERISGIXPROC methodp_glListParameteriSGIX{nullptr};
	static v8::Handle<v8::Value> method_glListParameteriSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glListParameteriSGIX && args.Length() >= 3){
			obj->methodp_glListParameteriSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint list */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);
	PFNGLLISTPARAMETERIVSGIXPROC methodp_glListParameterivSGIX{nullptr};
	static v8::Handle<v8::Value> method_glListParameterivSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glListParameterivSGIX && args.Length() >= 3){
			obj->methodp_glListParameterivSGIX(
				(GLuint )(args[0]->NumberValue())/* GLuint list */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADIDENTITYPROC) ();
	PFNGLLOADIDENTITYPROC methodp_glLoadIdentity{nullptr};
	static v8::Handle<v8::Value> method_glLoadIdentity(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadIdentity && args.Length() >= 0){
			obj->methodp_glLoadIdentity(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);
	PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC methodp_glLoadIdentityDeformationMapSGIX{nullptr};
	static v8::Handle<v8::Value> method_glLoadIdentityDeformationMapSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadIdentityDeformationMapSGIX && args.Length() >= 1){
			obj->methodp_glLoadIdentityDeformationMapSGIX(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADMATRIXDPROC) (const GLdouble *m);
	PFNGLLOADMATRIXDPROC methodp_glLoadMatrixd{nullptr};
	static v8::Handle<v8::Value> method_glLoadMatrixd(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadMatrixd && args.Length() >= 1){
			obj->methodp_glLoadMatrixd(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADMATRIXFPROC) (const GLfloat *m);
	PFNGLLOADMATRIXFPROC methodp_glLoadMatrixf{nullptr};
	static v8::Handle<v8::Value> method_glLoadMatrixf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadMatrixf && args.Length() >= 1){
			obj->methodp_glLoadMatrixf(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADMATRIXXPROC) (const GLfixed *m);
	PFNGLLOADMATRIXXPROC methodp_glLoadMatrixx{nullptr};
	static v8::Handle<v8::Value> method_glLoadMatrixx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadMatrixx && args.Length() >= 1){
			obj->methodp_glLoadMatrixx(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADMATRIXXOESPROC) (const GLfixed *m);
	PFNGLLOADMATRIXXOESPROC methodp_glLoadMatrixxOES{nullptr};
	static v8::Handle<v8::Value> method_glLoadMatrixxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadMatrixxOES && args.Length() >= 1){
			obj->methodp_glLoadMatrixxOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADNAMEPROC) (GLuint name);
	PFNGLLOADNAMEPROC methodp_glLoadName{nullptr};
	static v8::Handle<v8::Value> method_glLoadName(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadName && args.Length() >= 1){
			obj->methodp_glLoadName(
				(GLuint )(args[0]->NumberValue())/* GLuint name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC) ();
	PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC methodp_glLoadPaletteFromModelViewMatrixOES{nullptr};
	static v8::Handle<v8::Value> method_glLoadPaletteFromModelViewMatrixOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadPaletteFromModelViewMatrixOES && args.Length() >= 0){
			obj->methodp_glLoadPaletteFromModelViewMatrixOES(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
	PFNGLLOADPROGRAMNVPROC methodp_glLoadProgramNV{nullptr};
	static v8::Handle<v8::Value> method_glLoadProgramNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadProgramNV && args.Length() >= 4){
			obj->methodp_glLoadProgramNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei len */,
				(const GLubyte *)((int64_t)args[3]->NumberValue())/* const GLubyte *program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m);
	PFNGLLOADTRANSPOSEMATRIXDPROC methodp_glLoadTransposeMatrixd{nullptr};
	static v8::Handle<v8::Value> method_glLoadTransposeMatrixd(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadTransposeMatrixd && args.Length() >= 1){
			obj->methodp_glLoadTransposeMatrixd(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
	PFNGLLOADTRANSPOSEMATRIXDARBPROC methodp_glLoadTransposeMatrixdARB{nullptr};
	static v8::Handle<v8::Value> method_glLoadTransposeMatrixdARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadTransposeMatrixdARB && args.Length() >= 1){
			obj->methodp_glLoadTransposeMatrixdARB(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m);
	PFNGLLOADTRANSPOSEMATRIXFPROC methodp_glLoadTransposeMatrixf{nullptr};
	static v8::Handle<v8::Value> method_glLoadTransposeMatrixf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadTransposeMatrixf && args.Length() >= 1){
			obj->methodp_glLoadTransposeMatrixf(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
	PFNGLLOADTRANSPOSEMATRIXFARBPROC methodp_glLoadTransposeMatrixfARB{nullptr};
	static v8::Handle<v8::Value> method_glLoadTransposeMatrixfARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadTransposeMatrixfARB && args.Length() >= 1){
			obj->methodp_glLoadTransposeMatrixfARB(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXXOESPROC) (const GLfixed *m);
	PFNGLLOADTRANSPOSEMATRIXXOESPROC methodp_glLoadTransposeMatrixxOES{nullptr};
	static v8::Handle<v8::Value> method_glLoadTransposeMatrixxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLoadTransposeMatrixxOES && args.Length() >= 1){
			obj->methodp_glLoadTransposeMatrixxOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
	PFNGLLOCKARRAYSEXTPROC methodp_glLockArraysEXT{nullptr};
	static v8::Handle<v8::Value> method_glLockArraysEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLockArraysEXT && args.Length() >= 2){
			obj->methodp_glLockArraysEXT(
				(GLint )(args[0]->NumberValue())/* GLint first */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLLOGICOPPROC) (GLenum opcode);
	PFNGLLOGICOPPROC methodp_glLogicOp{nullptr};
	static v8::Handle<v8::Value> method_glLogicOp(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glLogicOp && args.Length() >= 1){
			obj->methodp_glLogicOp(
				(GLenum )(args[0]->NumberValue())/* GLenum opcode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
	PFNGLMAKEBUFFERNONRESIDENTNVPROC methodp_glMakeBufferNonResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glMakeBufferNonResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeBufferNonResidentNV && args.Length() >= 1){
			obj->methodp_glMakeBufferNonResidentNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
	PFNGLMAKEBUFFERRESIDENTNVPROC methodp_glMakeBufferResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glMakeBufferResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeBufferResidentNV && args.Length() >= 2){
			obj->methodp_glMakeBufferResidentNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle);
	PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC methodp_glMakeImageHandleNonResidentARB{nullptr};
	static v8::Handle<v8::Value> method_glMakeImageHandleNonResidentARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeImageHandleNonResidentARB && args.Length() >= 1){
			obj->methodp_glMakeImageHandleNonResidentARB(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle);
	PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC methodp_glMakeImageHandleNonResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glMakeImageHandleNonResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeImageHandleNonResidentNV && args.Length() >= 1){
			obj->methodp_glMakeImageHandleNonResidentNV(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access);
	PFNGLMAKEIMAGEHANDLERESIDENTARBPROC methodp_glMakeImageHandleResidentARB{nullptr};
	static v8::Handle<v8::Value> method_glMakeImageHandleResidentARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeImageHandleResidentARB && args.Length() >= 2){
			obj->methodp_glMakeImageHandleResidentARB(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access);
	PFNGLMAKEIMAGEHANDLERESIDENTNVPROC methodp_glMakeImageHandleResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glMakeImageHandleResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeImageHandleResidentNV && args.Length() >= 2){
			obj->methodp_glMakeImageHandleResidentNV(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);
	PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC methodp_glMakeNamedBufferNonResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glMakeNamedBufferNonResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeNamedBufferNonResidentNV && args.Length() >= 1){
			obj->methodp_glMakeNamedBufferNonResidentNV(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
	PFNGLMAKENAMEDBUFFERRESIDENTNVPROC methodp_glMakeNamedBufferResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glMakeNamedBufferResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeNamedBufferResidentNV && args.Length() >= 2){
			obj->methodp_glMakeNamedBufferResidentNV(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle);
	PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC methodp_glMakeTextureHandleNonResidentARB{nullptr};
	static v8::Handle<v8::Value> method_glMakeTextureHandleNonResidentARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeTextureHandleNonResidentARB && args.Length() >= 1){
			obj->methodp_glMakeTextureHandleNonResidentARB(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle);
	PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC methodp_glMakeTextureHandleNonResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glMakeTextureHandleNonResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeTextureHandleNonResidentNV && args.Length() >= 1){
			obj->methodp_glMakeTextureHandleNonResidentNV(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);
	PFNGLMAKETEXTUREHANDLERESIDENTARBPROC methodp_glMakeTextureHandleResidentARB{nullptr};
	static v8::Handle<v8::Value> method_glMakeTextureHandleResidentARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeTextureHandleResidentARB && args.Length() >= 1){
			obj->methodp_glMakeTextureHandleResidentARB(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);
	PFNGLMAKETEXTUREHANDLERESIDENTNVPROC methodp_glMakeTextureHandleResidentNV{nullptr};
	static v8::Handle<v8::Value> method_glMakeTextureHandleResidentNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMakeTextureHandleResidentNV && args.Length() >= 1){
			obj->methodp_glMakeTextureHandleResidentNV(
				(GLuint64 )(args[0]->NumberValue())/* GLuint64 handle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAP1DPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
	PFNGLMAP1DPROC methodp_glMap1d{nullptr};
	static v8::Handle<v8::Value> method_glMap1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMap1d && args.Length() >= 6){
			obj->methodp_glMap1d(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble u1 */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble u2 */,
				(GLint )(args[3]->NumberValue())/* GLint stride */,
				(GLint )(args[4]->NumberValue())/* GLint order */,
				(const GLdouble *)((int64_t)args[5]->NumberValue())/* const GLdouble *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAP1FPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
	PFNGLMAP1FPROC methodp_glMap1f{nullptr};
	static v8::Handle<v8::Value> method_glMap1f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMap1f && args.Length() >= 6){
			obj->methodp_glMap1f(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat u1 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat u2 */,
				(GLint )(args[3]->NumberValue())/* GLint stride */,
				(GLint )(args[4]->NumberValue())/* GLint order */,
				(const GLfloat *)((int64_t)args[5]->NumberValue())/* const GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAP1XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
	PFNGLMAP1XOESPROC methodp_glMap1xOES{nullptr};
	static v8::Handle<v8::Value> method_glMap1xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMap1xOES && args.Length() >= 6){
			obj->methodp_glMap1xOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed u1 */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed u2 */,
				(GLint )(args[3]->NumberValue())/* GLint stride */,
				(GLint )(args[4]->NumberValue())/* GLint order */,
				(GLfixed )(args[5]->NumberValue())/* GLfixed points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAP2DPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
	PFNGLMAP2DPROC methodp_glMap2d{nullptr};
	static v8::Handle<v8::Value> method_glMap2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMap2d && args.Length() >= 10){
			obj->methodp_glMap2d(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble u1 */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble u2 */,
				(GLint )(args[3]->NumberValue())/* GLint ustride */,
				(GLint )(args[4]->NumberValue())/* GLint uorder */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble v1 */,
				(GLdouble )(args[6]->NumberValue())/* GLdouble v2 */,
				(GLint )(args[7]->NumberValue())/* GLint vstride */,
				(GLint )(args[8]->NumberValue())/* GLint vorder */,
				(const GLdouble *)((int64_t)args[9]->NumberValue())/* const GLdouble *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAP2FPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
	PFNGLMAP2FPROC methodp_glMap2f{nullptr};
	static v8::Handle<v8::Value> method_glMap2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMap2f && args.Length() >= 10){
			obj->methodp_glMap2f(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat u1 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat u2 */,
				(GLint )(args[3]->NumberValue())/* GLint ustride */,
				(GLint )(args[4]->NumberValue())/* GLint uorder */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat v2 */,
				(GLint )(args[7]->NumberValue())/* GLint vstride */,
				(GLint )(args[8]->NumberValue())/* GLint vorder */,
				(const GLfloat *)((int64_t)args[9]->NumberValue())/* const GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAP2XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
	PFNGLMAP2XOESPROC methodp_glMap2xOES{nullptr};
	static v8::Handle<v8::Value> method_glMap2xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMap2xOES && args.Length() >= 10){
			obj->methodp_glMap2xOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed u1 */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed u2 */,
				(GLint )(args[3]->NumberValue())/* GLint ustride */,
				(GLint )(args[4]->NumberValue())/* GLint uorder */,
				(GLfixed )(args[5]->NumberValue())/* GLfixed v1 */,
				(GLfixed )(args[6]->NumberValue())/* GLfixed v2 */,
				(GLint )(args[7]->NumberValue())/* GLint vstride */,
				(GLint )(args[8]->NumberValue())/* GLint vorder */,
				(GLfixed )(args[9]->NumberValue())/* GLfixed points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
	PFNGLMAPBUFFERPROC methodp_glMapBuffer{nullptr};
	static v8::Handle<v8::Value> method_glMapBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapBuffer && args.Length() >= 2){
			obj->methodp_glMapBuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
	PFNGLMAPBUFFERARBPROC methodp_glMapBufferARB{nullptr};
	static v8::Handle<v8::Value> method_glMapBufferARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapBufferARB && args.Length() >= 2){
			obj->methodp_glMapBufferARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPBUFFEROESPROC) (GLenum target, GLenum access);
	PFNGLMAPBUFFEROESPROC methodp_glMapBufferOES{nullptr};
	static v8::Handle<v8::Value> method_glMapBufferOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapBufferOES && args.Length() >= 2){
			obj->methodp_glMapBufferOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	PFNGLMAPBUFFERRANGEPROC methodp_glMapBufferRange{nullptr};
	static v8::Handle<v8::Value> method_glMapBufferRange(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapBufferRange && args.Length() >= 4){
			obj->methodp_glMapBufferRange(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr length */,
				(GLbitfield )(args[3]->NumberValue())/* GLbitfield access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPBUFFERRANGEEXTPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
	PFNGLMAPBUFFERRANGEEXTPROC methodp_glMapBufferRangeEXT{nullptr};
	static v8::Handle<v8::Value> method_glMapBufferRangeEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapBufferRangeEXT && args.Length() >= 4){
			obj->methodp_glMapBufferRangeEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr length */,
				(GLbitfield )(args[3]->NumberValue())/* GLbitfield access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);
	PFNGLMAPCONTROLPOINTSNVPROC methodp_glMapControlPointsNV{nullptr};
	static v8::Handle<v8::Value> method_glMapControlPointsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapControlPointsNV && args.Length() >= 9){
			obj->methodp_glMapControlPointsNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei ustride */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei vstride */,
				(GLint )(args[5]->NumberValue())/* GLint uorder */,
				(GLint )(args[6]->NumberValue())/* GLint vorder */,
				(GLboolean )(args[7]->NumberValue())/* GLboolean packed */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPGRID1DPROC) (GLint un, GLdouble u1, GLdouble u2);
	PFNGLMAPGRID1DPROC methodp_glMapGrid1d{nullptr};
	static v8::Handle<v8::Value> method_glMapGrid1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapGrid1d && args.Length() >= 3){
			obj->methodp_glMapGrid1d(
				(GLint )(args[0]->NumberValue())/* GLint un */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble u1 */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble u2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPGRID1FPROC) (GLint un, GLfloat u1, GLfloat u2);
	PFNGLMAPGRID1FPROC methodp_glMapGrid1f{nullptr};
	static v8::Handle<v8::Value> method_glMapGrid1f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapGrid1f && args.Length() >= 3){
			obj->methodp_glMapGrid1f(
				(GLint )(args[0]->NumberValue())/* GLint un */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat u1 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat u2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPGRID1XOESPROC) (GLint n, GLfixed u1, GLfixed u2);
	PFNGLMAPGRID1XOESPROC methodp_glMapGrid1xOES{nullptr};
	static v8::Handle<v8::Value> method_glMapGrid1xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapGrid1xOES && args.Length() >= 3){
			obj->methodp_glMapGrid1xOES(
				(GLint )(args[0]->NumberValue())/* GLint n */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed u1 */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed u2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPGRID2DPROC) (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
	PFNGLMAPGRID2DPROC methodp_glMapGrid2d{nullptr};
	static v8::Handle<v8::Value> method_glMapGrid2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapGrid2d && args.Length() >= 6){
			obj->methodp_glMapGrid2d(
				(GLint )(args[0]->NumberValue())/* GLint un */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble u1 */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble u2 */,
				(GLint )(args[3]->NumberValue())/* GLint vn */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble v1 */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPGRID2FPROC) (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
	PFNGLMAPGRID2FPROC methodp_glMapGrid2f{nullptr};
	static v8::Handle<v8::Value> method_glMapGrid2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapGrid2f && args.Length() >= 6){
			obj->methodp_glMapGrid2f(
				(GLint )(args[0]->NumberValue())/* GLint un */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat u1 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat u2 */,
				(GLint )(args[3]->NumberValue())/* GLint vn */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPGRID2XOESPROC) (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
	PFNGLMAPGRID2XOESPROC methodp_glMapGrid2xOES{nullptr};
	static v8::Handle<v8::Value> method_glMapGrid2xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapGrid2xOES && args.Length() >= 5){
			obj->methodp_glMapGrid2xOES(
				(GLint )(args[0]->NumberValue())/* GLint n */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed u1 */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed u2 */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed v1 */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
	PFNGLMAPNAMEDBUFFEREXTPROC methodp_glMapNamedBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glMapNamedBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapNamedBufferEXT && args.Length() >= 2){
			obj->methodp_glMapNamedBufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
	PFNGLMAPNAMEDBUFFERRANGEEXTPROC methodp_glMapNamedBufferRangeEXT{nullptr};
	static v8::Handle<v8::Value> method_glMapNamedBufferRangeEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapNamedBufferRangeEXT && args.Length() >= 4){
			obj->methodp_glMapNamedBufferRangeEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr length */,
				(GLbitfield )(args[3]->NumberValue())/* GLbitfield access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
	PFNGLMAPOBJECTBUFFERATIPROC methodp_glMapObjectBufferATI{nullptr};
	static v8::Handle<v8::Value> method_glMapObjectBufferATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapObjectBufferATI && args.Length() >= 1){
			obj->methodp_glMapObjectBufferATI(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLMAPPARAMETERFVNVPROC methodp_glMapParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glMapParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapParameterfvNV && args.Length() >= 3){
			obj->methodp_glMapParameterfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLMAPPARAMETERIVNVPROC methodp_glMapParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glMapParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapParameterivNV && args.Length() >= 3){
			obj->methodp_glMapParameterivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void *(APIENTRYP PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout);
	PFNGLMAPTEXTURE2DINTELPROC methodp_glMapTexture2DINTEL{nullptr};
	static v8::Handle<v8::Value> method_glMapTexture2DINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapTexture2DINTEL && args.Length() >= 5){
			obj->methodp_glMapTexture2DINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLbitfield )(args[2]->NumberValue())/* GLbitfield access */,
				(GLint *)((int64_t)args[3]->NumberValue())/* GLint *stride */,
				(GLenum *)((int64_t)args[4]->NumberValue())/* GLenum *layout */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
	PFNGLMAPVERTEXATTRIB1DAPPLEPROC methodp_glMapVertexAttrib1dAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glMapVertexAttrib1dAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapVertexAttrib1dAPPLE && args.Length() >= 7){
			obj->methodp_glMapVertexAttrib1dAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint size */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble u1 */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble u2 */,
				(GLint )(args[4]->NumberValue())/* GLint stride */,
				(GLint )(args[5]->NumberValue())/* GLint order */,
				(const GLdouble *)((int64_t)args[6]->NumberValue())/* const GLdouble *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
	PFNGLMAPVERTEXATTRIB1FAPPLEPROC methodp_glMapVertexAttrib1fAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glMapVertexAttrib1fAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapVertexAttrib1fAPPLE && args.Length() >= 7){
			obj->methodp_glMapVertexAttrib1fAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint size */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat u1 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat u2 */,
				(GLint )(args[4]->NumberValue())/* GLint stride */,
				(GLint )(args[5]->NumberValue())/* GLint order */,
				(const GLfloat *)((int64_t)args[6]->NumberValue())/* const GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
	PFNGLMAPVERTEXATTRIB2DAPPLEPROC methodp_glMapVertexAttrib2dAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glMapVertexAttrib2dAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapVertexAttrib2dAPPLE && args.Length() >= 11){
			obj->methodp_glMapVertexAttrib2dAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint size */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble u1 */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble u2 */,
				(GLint )(args[4]->NumberValue())/* GLint ustride */,
				(GLint )(args[5]->NumberValue())/* GLint uorder */,
				(GLdouble )(args[6]->NumberValue())/* GLdouble v1 */,
				(GLdouble )(args[7]->NumberValue())/* GLdouble v2 */,
				(GLint )(args[8]->NumberValue())/* GLint vstride */,
				(GLint )(args[9]->NumberValue())/* GLint vorder */,
				(const GLdouble *)((int64_t)args[10]->NumberValue())/* const GLdouble *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
	PFNGLMAPVERTEXATTRIB2FAPPLEPROC methodp_glMapVertexAttrib2fAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glMapVertexAttrib2fAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMapVertexAttrib2fAPPLE && args.Length() >= 11){
			obj->methodp_glMapVertexAttrib2fAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint size */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat u1 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat u2 */,
				(GLint )(args[4]->NumberValue())/* GLint ustride */,
				(GLint )(args[5]->NumberValue())/* GLint uorder */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat v2 */,
				(GLint )(args[8]->NumberValue())/* GLint vstride */,
				(GLint )(args[9]->NumberValue())/* GLint vorder */,
				(const GLfloat *)((int64_t)args[10]->NumberValue())/* const GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATERIALFPROC) (GLenum face, GLenum pname, GLfloat param);
	PFNGLMATERIALFPROC methodp_glMaterialf{nullptr};
	static v8::Handle<v8::Value> method_glMaterialf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMaterialf && args.Length() >= 3){
			obj->methodp_glMaterialf(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATERIALFVPROC) (GLenum face, GLenum pname, const GLfloat *params);
	PFNGLMATERIALFVPROC methodp_glMaterialfv{nullptr};
	static v8::Handle<v8::Value> method_glMaterialfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMaterialfv && args.Length() >= 3){
			obj->methodp_glMaterialfv(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATERIALIPROC) (GLenum face, GLenum pname, GLint param);
	PFNGLMATERIALIPROC methodp_glMateriali{nullptr};
	static v8::Handle<v8::Value> method_glMateriali(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMateriali && args.Length() >= 3){
			obj->methodp_glMateriali(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATERIALIVPROC) (GLenum face, GLenum pname, const GLint *params);
	PFNGLMATERIALIVPROC methodp_glMaterialiv{nullptr};
	static v8::Handle<v8::Value> method_glMaterialiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMaterialiv && args.Length() >= 3){
			obj->methodp_glMaterialiv(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATERIALXPROC) (GLenum face, GLenum pname, GLfixed param);
	PFNGLMATERIALXPROC methodp_glMaterialx{nullptr};
	static v8::Handle<v8::Value> method_glMaterialx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMaterialx && args.Length() >= 3){
			obj->methodp_glMaterialx(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);
	PFNGLMATERIALXOESPROC methodp_glMaterialxOES{nullptr};
	static v8::Handle<v8::Value> method_glMaterialxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMaterialxOES && args.Length() >= 3){
			obj->methodp_glMaterialxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATERIALXVPROC) (GLenum face, GLenum pname, const GLfixed *param);
	PFNGLMATERIALXVPROC methodp_glMaterialxv{nullptr};
	static v8::Handle<v8::Value> method_glMaterialxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMaterialxv && args.Length() >= 3){
			obj->methodp_glMaterialxv(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATERIALXVOESPROC) (GLenum face, GLenum pname, const GLfixed *param);
	PFNGLMATERIALXVOESPROC methodp_glMaterialxvOES{nullptr};
	static v8::Handle<v8::Value> method_glMaterialxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMaterialxvOES && args.Length() >= 3){
			obj->methodp_glMaterialxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	PFNGLMATRIXFRUSTUMEXTPROC methodp_glMatrixFrustumEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixFrustumEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixFrustumEXT && args.Length() >= 7){
			obj->methodp_glMatrixFrustumEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble left */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble right */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble bottom */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble top */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble zNear */,
				(GLdouble )(args[6]->NumberValue())/* GLdouble zFar */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLMATRIXINDEXPOINTERARBPROC methodp_glMatrixIndexPointerARB{nullptr};
	static v8::Handle<v8::Value> method_glMatrixIndexPointerARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixIndexPointerARB && args.Length() >= 4){
			obj->methodp_glMatrixIndexPointerARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTEROESPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLMATRIXINDEXPOINTEROESPROC methodp_glMatrixIndexPointerOES{nullptr};
	static v8::Handle<v8::Value> method_glMatrixIndexPointerOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixIndexPointerOES && args.Length() >= 4){
			obj->methodp_glMatrixIndexPointerOES(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);
	PFNGLMATRIXINDEXUBVARBPROC methodp_glMatrixIndexubvARB{nullptr};
	static v8::Handle<v8::Value> method_glMatrixIndexubvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixIndexubvARB && args.Length() >= 2){
			obj->methodp_glMatrixIndexubvARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *indices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);
	PFNGLMATRIXINDEXUIVARBPROC methodp_glMatrixIndexuivARB{nullptr};
	static v8::Handle<v8::Value> method_glMatrixIndexuivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixIndexuivARB && args.Length() >= 2){
			obj->methodp_glMatrixIndexuivARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *indices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);
	PFNGLMATRIXINDEXUSVARBPROC methodp_glMatrixIndexusvARB{nullptr};
	static v8::Handle<v8::Value> method_glMatrixIndexusvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixIndexusvARB && args.Length() >= 2){
			obj->methodp_glMatrixIndexusvARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *indices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);
	PFNGLMATRIXLOADIDENTITYEXTPROC methodp_glMatrixLoadIdentityEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixLoadIdentityEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixLoadIdentityEXT && args.Length() >= 1){
			obj->methodp_glMatrixLoadIdentityEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
	PFNGLMATRIXLOADTRANSPOSEDEXTPROC methodp_glMatrixLoadTransposedEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixLoadTransposedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixLoadTransposedEXT && args.Length() >= 2){
			obj->methodp_glMatrixLoadTransposedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
	PFNGLMATRIXLOADTRANSPOSEFEXTPROC methodp_glMatrixLoadTransposefEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixLoadTransposefEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixLoadTransposefEXT && args.Length() >= 2){
			obj->methodp_glMatrixLoadTransposefEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);
	PFNGLMATRIXLOADDEXTPROC methodp_glMatrixLoaddEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixLoaddEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixLoaddEXT && args.Length() >= 2){
			obj->methodp_glMatrixLoaddEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);
	PFNGLMATRIXLOADFEXTPROC methodp_glMatrixLoadfEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixLoadfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixLoadfEXT && args.Length() >= 2){
			obj->methodp_glMatrixLoadfEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXMODEPROC) (GLenum mode);
	PFNGLMATRIXMODEPROC methodp_glMatrixMode{nullptr};
	static v8::Handle<v8::Value> method_glMatrixMode(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixMode && args.Length() >= 1){
			obj->methodp_glMatrixMode(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
	PFNGLMATRIXMULTTRANSPOSEDEXTPROC methodp_glMatrixMultTransposedEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixMultTransposedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixMultTransposedEXT && args.Length() >= 2){
			obj->methodp_glMatrixMultTransposedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
	PFNGLMATRIXMULTTRANSPOSEFEXTPROC methodp_glMatrixMultTransposefEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixMultTransposefEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixMultTransposefEXT && args.Length() >= 2){
			obj->methodp_glMatrixMultTransposefEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);
	PFNGLMATRIXMULTDEXTPROC methodp_glMatrixMultdEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixMultdEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixMultdEXT && args.Length() >= 2){
			obj->methodp_glMatrixMultdEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);
	PFNGLMATRIXMULTFEXTPROC methodp_glMatrixMultfEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixMultfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixMultfEXT && args.Length() >= 2){
			obj->methodp_glMatrixMultfEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	PFNGLMATRIXORTHOEXTPROC methodp_glMatrixOrthoEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixOrthoEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixOrthoEXT && args.Length() >= 7){
			obj->methodp_glMatrixOrthoEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble left */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble right */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble bottom */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble top */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble zNear */,
				(GLdouble )(args[6]->NumberValue())/* GLdouble zFar */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode);
	PFNGLMATRIXPOPEXTPROC methodp_glMatrixPopEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixPopEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixPopEXT && args.Length() >= 1){
			obj->methodp_glMatrixPopEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode);
	PFNGLMATRIXPUSHEXTPROC methodp_glMatrixPushEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixPushEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixPushEXT && args.Length() >= 1){
			obj->methodp_glMatrixPushEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	PFNGLMATRIXROTATEDEXTPROC methodp_glMatrixRotatedEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixRotatedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixRotatedEXT && args.Length() >= 5){
			obj->methodp_glMatrixRotatedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble angle */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	PFNGLMATRIXROTATEFEXTPROC methodp_glMatrixRotatefEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixRotatefEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixRotatefEXT && args.Length() >= 5){
			obj->methodp_glMatrixRotatefEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat angle */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
	PFNGLMATRIXSCALEDEXTPROC methodp_glMatrixScaledEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixScaledEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixScaledEXT && args.Length() >= 4){
			obj->methodp_glMatrixScaledEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
	PFNGLMATRIXSCALEFEXTPROC methodp_glMatrixScalefEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixScalefEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixScalefEXT && args.Length() >= 4){
			obj->methodp_glMatrixScalefEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
	PFNGLMATRIXTRANSLATEDEXTPROC methodp_glMatrixTranslatedEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixTranslatedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixTranslatedEXT && args.Length() >= 4){
			obj->methodp_glMatrixTranslatedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
	PFNGLMATRIXTRANSLATEFEXTPROC methodp_glMatrixTranslatefEXT{nullptr};
	static v8::Handle<v8::Value> method_glMatrixTranslatefEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMatrixTranslatefEXT && args.Length() >= 4){
			obj->methodp_glMatrixTranslatefEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);
	PFNGLMEMORYBARRIERPROC methodp_glMemoryBarrier{nullptr};
	static v8::Handle<v8::Value> method_glMemoryBarrier(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMemoryBarrier && args.Length() >= 1){
			obj->methodp_glMemoryBarrier(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield barriers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers);
	PFNGLMEMORYBARRIERBYREGIONPROC methodp_glMemoryBarrierByRegion{nullptr};
	static v8::Handle<v8::Value> method_glMemoryBarrierByRegion(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMemoryBarrierByRegion && args.Length() >= 1){
			obj->methodp_glMemoryBarrierByRegion(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield barriers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);
	PFNGLMEMORYBARRIEREXTPROC methodp_glMemoryBarrierEXT{nullptr};
	static v8::Handle<v8::Value> method_glMemoryBarrierEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMemoryBarrierEXT && args.Length() >= 1){
			obj->methodp_glMemoryBarrierEXT(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield barriers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value);
	PFNGLMINSAMPLESHADINGPROC methodp_glMinSampleShading{nullptr};
	static v8::Handle<v8::Value> method_glMinSampleShading(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMinSampleShading && args.Length() >= 1){
			obj->methodp_glMinSampleShading(
				(GLfloat )(args[0]->NumberValue())/* GLfloat value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);
	PFNGLMINSAMPLESHADINGARBPROC methodp_glMinSampleShadingARB{nullptr};
	static v8::Handle<v8::Value> method_glMinSampleShadingARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMinSampleShadingARB && args.Length() >= 1){
			obj->methodp_glMinSampleShadingARB(
				(GLfloat )(args[0]->NumberValue())/* GLfloat value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMINSAMPLESHADINGOESPROC) (GLfloat value);
	PFNGLMINSAMPLESHADINGOESPROC methodp_glMinSampleShadingOES{nullptr};
	static v8::Handle<v8::Value> method_glMinSampleShadingOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMinSampleShadingOES && args.Length() >= 1){
			obj->methodp_glMinSampleShadingOES(
				(GLfloat )(args[0]->NumberValue())/* GLfloat value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
	PFNGLMINMAXPROC methodp_glMinmax{nullptr};
	static v8::Handle<v8::Value> method_glMinmax(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMinmax && args.Length() >= 3){
			obj->methodp_glMinmax(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean sink */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
	PFNGLMINMAXEXTPROC methodp_glMinmaxEXT{nullptr};
	static v8::Handle<v8::Value> method_glMinmaxEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMinmaxEXT && args.Length() >= 3){
			obj->methodp_glMinmaxEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean sink */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTMATRIXDPROC) (const GLdouble *m);
	PFNGLMULTMATRIXDPROC methodp_glMultMatrixd{nullptr};
	static v8::Handle<v8::Value> method_glMultMatrixd(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultMatrixd && args.Length() >= 1){
			obj->methodp_glMultMatrixd(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTMATRIXFPROC) (const GLfloat *m);
	PFNGLMULTMATRIXFPROC methodp_glMultMatrixf{nullptr};
	static v8::Handle<v8::Value> method_glMultMatrixf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultMatrixf && args.Length() >= 1){
			obj->methodp_glMultMatrixf(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTMATRIXXPROC) (const GLfixed *m);
	PFNGLMULTMATRIXXPROC methodp_glMultMatrixx{nullptr};
	static v8::Handle<v8::Value> method_glMultMatrixx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultMatrixx && args.Length() >= 1){
			obj->methodp_glMultMatrixx(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTMATRIXXOESPROC) (const GLfixed *m);
	PFNGLMULTMATRIXXOESPROC methodp_glMultMatrixxOES{nullptr};
	static v8::Handle<v8::Value> method_glMultMatrixxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultMatrixxOES && args.Length() >= 1){
			obj->methodp_glMultMatrixxOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble *m);
	PFNGLMULTTRANSPOSEMATRIXDPROC methodp_glMultTransposeMatrixd{nullptr};
	static v8::Handle<v8::Value> method_glMultTransposeMatrixd(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultTransposeMatrixd && args.Length() >= 1){
			obj->methodp_glMultTransposeMatrixd(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
	PFNGLMULTTRANSPOSEMATRIXDARBPROC methodp_glMultTransposeMatrixdARB{nullptr};
	static v8::Handle<v8::Value> method_glMultTransposeMatrixdARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultTransposeMatrixdARB && args.Length() >= 1){
			obj->methodp_glMultTransposeMatrixdARB(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat *m);
	PFNGLMULTTRANSPOSEMATRIXFPROC methodp_glMultTransposeMatrixf{nullptr};
	static v8::Handle<v8::Value> method_glMultTransposeMatrixf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultTransposeMatrixf && args.Length() >= 1){
			obj->methodp_glMultTransposeMatrixf(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
	PFNGLMULTTRANSPOSEMATRIXFARBPROC methodp_glMultTransposeMatrixfARB{nullptr};
	static v8::Handle<v8::Value> method_glMultTransposeMatrixfARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultTransposeMatrixfARB && args.Length() >= 1){
			obj->methodp_glMultTransposeMatrixfARB(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXXOESPROC) (const GLfixed *m);
	PFNGLMULTTRANSPOSEMATRIXXOESPROC methodp_glMultTransposeMatrixxOES{nullptr};
	static v8::Handle<v8::Value> method_glMultTransposeMatrixxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultTransposeMatrixxOES && args.Length() >= 1){
			obj->methodp_glMultTransposeMatrixxOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *m */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
	PFNGLMULTIDRAWARRAYSPROC methodp_glMultiDrawArrays{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawArrays(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawArrays && args.Length() >= 4){
			obj->methodp_glMultiDrawArrays(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *first */,
				(const GLsizei *)((int64_t)args[2]->NumberValue())/* const GLsizei *count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei drawcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
	PFNGLMULTIDRAWARRAYSEXTPROC methodp_glMultiDrawArraysEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawArraysEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawArraysEXT && args.Length() >= 4){
			obj->methodp_glMultiDrawArraysEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *first */,
				(const GLsizei *)((int64_t)args[2]->NumberValue())/* const GLsizei *count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
	PFNGLMULTIDRAWARRAYSINDIRECTPROC methodp_glMultiDrawArraysIndirect{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawArraysIndirect(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawArraysIndirect && args.Length() >= 4){
			obj->methodp_glMultiDrawArraysIndirect(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *indirect */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei drawcount */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);
	PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC methodp_glMultiDrawArraysIndirectAMD{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawArraysIndirectAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawArraysIndirectAMD && args.Length() >= 4){
			obj->methodp_glMultiDrawArraysIndirectAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *indirect */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei primcount */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
	PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC methodp_glMultiDrawArraysIndirectBindlessNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawArraysIndirectBindlessNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawArraysIndirectBindlessNV && args.Length() >= 5){
			obj->methodp_glMultiDrawArraysIndirectBindlessNV(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *indirect */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei drawCount */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(GLint )(args[4]->NumberValue())/* GLint vertexBufferCount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
	PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC methodp_glMultiDrawArraysIndirectCountARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawArraysIndirectCountARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawArraysIndirectCountARB && args.Length() >= 5){
			obj->methodp_glMultiDrawArraysIndirectCountARB(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr indirect */,
				(GLintptr )(args[2]->NumberValue())/* GLintptr drawcount */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei maxdrawcount */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
	PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC methodp_glMultiDrawElementArrayAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawElementArrayAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawElementArrayAPPLE && args.Length() >= 4){
			obj->methodp_glMultiDrawElementArrayAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *first */,
				(const GLsizei *)((int64_t)args[2]->NumberValue())/* const GLsizei *count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
	PFNGLMULTIDRAWELEMENTSPROC methodp_glMultiDrawElements{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawElements(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawElements && args.Length() >= 5){
			obj->methodp_glMultiDrawElements(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLsizei *)((int64_t)args[1]->NumberValue())/* const GLsizei *count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *const*)((int64_t)args[3]->NumberValue())/* const void *const*indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei drawcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
	PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC methodp_glMultiDrawElementsBaseVertex{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawElementsBaseVertex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawElementsBaseVertex && args.Length() >= 6){
			obj->methodp_glMultiDrawElementsBaseVertex(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLsizei *)((int64_t)args[1]->NumberValue())/* const GLsizei *count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *const*)((int64_t)args[3]->NumberValue())/* const void *const*indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei drawcount */,
				(const GLint *)((int64_t)args[5]->NumberValue())/* const GLint *basevertex */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount);
	PFNGLMULTIDRAWELEMENTSEXTPROC methodp_glMultiDrawElementsEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawElementsEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawElementsEXT && args.Length() >= 5){
			obj->methodp_glMultiDrawElementsEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(const GLsizei *)((int64_t)args[1]->NumberValue())/* const GLsizei *count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *const*)((int64_t)args[3]->NumberValue())/* const void *const*indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
	PFNGLMULTIDRAWELEMENTSINDIRECTPROC methodp_glMultiDrawElementsIndirect{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawElementsIndirect(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawElementsIndirect && args.Length() >= 5){
			obj->methodp_glMultiDrawElementsIndirect(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *indirect */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei drawcount */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);
	PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC methodp_glMultiDrawElementsIndirectAMD{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawElementsIndirectAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawElementsIndirectAMD && args.Length() >= 5){
			obj->methodp_glMultiDrawElementsIndirectAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *indirect */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei primcount */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);
	PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC methodp_glMultiDrawElementsIndirectBindlessNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawElementsIndirectBindlessNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawElementsIndirectBindlessNV && args.Length() >= 6){
			obj->methodp_glMultiDrawElementsIndirectBindlessNV(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *indirect */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei drawCount */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */,
				(GLint )(args[5]->NumberValue())/* GLint vertexBufferCount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
	PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC methodp_glMultiDrawElementsIndirectCountARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawElementsIndirectCountARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawElementsIndirectCountARB && args.Length() >= 6){
			obj->methodp_glMultiDrawElementsIndirectCountARB(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLintptr )(args[2]->NumberValue())/* GLintptr indirect */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr drawcount */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei maxdrawcount */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
	PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC methodp_glMultiDrawRangeElementArrayAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glMultiDrawRangeElementArrayAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiDrawRangeElementArrayAPPLE && args.Length() >= 6){
			obj->methodp_glMultiDrawRangeElementArrayAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */,
				(GLuint )(args[1]->NumberValue())/* GLuint start */,
				(GLuint )(args[2]->NumberValue())/* GLuint end */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *first */,
				(const GLsizei *)((int64_t)args[4]->NumberValue())/* const GLsizei *count */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei primcount */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
	PFNGLMULTIMODEDRAWARRAYSIBMPROC methodp_glMultiModeDrawArraysIBM{nullptr};
	static v8::Handle<v8::Value> method_glMultiModeDrawArraysIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiModeDrawArraysIBM && args.Length() >= 5){
			obj->methodp_glMultiModeDrawArraysIBM(
				(const GLenum *)((int64_t)args[0]->NumberValue())/* const GLenum *mode */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *first */,
				(const GLsizei *)((int64_t)args[2]->NumberValue())/* const GLsizei *count */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei primcount */,
				(GLint )(args[4]->NumberValue())/* GLint modestride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride);
	PFNGLMULTIMODEDRAWELEMENTSIBMPROC methodp_glMultiModeDrawElementsIBM{nullptr};
	static v8::Handle<v8::Value> method_glMultiModeDrawElementsIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiModeDrawElementsIBM && args.Length() >= 6){
			obj->methodp_glMultiModeDrawElementsIBM(
				(const GLenum *)((int64_t)args[0]->NumberValue())/* const GLenum *mode */,
				(const GLsizei *)((int64_t)args[1]->NumberValue())/* const GLsizei *count */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(const void *const*)((int64_t)args[3]->NumberValue())/* const void *const*indices */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei primcount */,
				(GLint )(args[5]->NumberValue())/* GLint modestride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
	PFNGLMULTITEXBUFFEREXTPROC methodp_glMultiTexBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexBufferEXT && args.Length() >= 4){
			obj->methodp_glMultiTexBufferEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[3]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1BOESPROC) (GLenum texture, GLbyte s);
	PFNGLMULTITEXCOORD1BOESPROC methodp_glMultiTexCoord1bOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1bOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1bOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1BVOESPROC) (GLenum texture, const GLbyte *coords);
	PFNGLMULTITEXCOORD1BVOESPROC methodp_glMultiTexCoord1bvOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1bvOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1bvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
	PFNGLMULTITEXCOORD1DPROC methodp_glMultiTexCoord1d{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1d && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1d(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
	PFNGLMULTITEXCOORD1DARBPROC methodp_glMultiTexCoord1dARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1dARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1dARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
	PFNGLMULTITEXCOORD1DVPROC methodp_glMultiTexCoord1dv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1dv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1dv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
	PFNGLMULTITEXCOORD1DVARBPROC methodp_glMultiTexCoord1dvARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1dvARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1dvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
	PFNGLMULTITEXCOORD1FPROC methodp_glMultiTexCoord1f{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1f && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1f(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
	PFNGLMULTITEXCOORD1FARBPROC methodp_glMultiTexCoord1fARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1fARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1fARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
	PFNGLMULTITEXCOORD1FVPROC methodp_glMultiTexCoord1fv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1fv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1fv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
	PFNGLMULTITEXCOORD1FVARBPROC methodp_glMultiTexCoord1fvARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1fvARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1fvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);
	PFNGLMULTITEXCOORD1HNVPROC methodp_glMultiTexCoord1hNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1hNV && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1hNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);
	PFNGLMULTITEXCOORD1HVNVPROC methodp_glMultiTexCoord1hvNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1hvNV && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1hvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLhalfNV *)((int64_t)args[1]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
	PFNGLMULTITEXCOORD1IPROC methodp_glMultiTexCoord1i{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1i && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1i(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
	PFNGLMULTITEXCOORD1IARBPROC methodp_glMultiTexCoord1iARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1iARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1iARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
	PFNGLMULTITEXCOORD1IVPROC methodp_glMultiTexCoord1iv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1iv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1iv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
	PFNGLMULTITEXCOORD1IVARBPROC methodp_glMultiTexCoord1ivARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1ivARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1ivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
	PFNGLMULTITEXCOORD1SPROC methodp_glMultiTexCoord1s{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1s && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1s(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLshort )(args[1]->NumberValue())/* GLshort s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
	PFNGLMULTITEXCOORD1SARBPROC methodp_glMultiTexCoord1sARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1sARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1sARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLshort )(args[1]->NumberValue())/* GLshort s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
	PFNGLMULTITEXCOORD1SVPROC methodp_glMultiTexCoord1sv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1sv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1sv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
	PFNGLMULTITEXCOORD1SVARBPROC methodp_glMultiTexCoord1svARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1svARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1svARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1XOESPROC) (GLenum texture, GLfixed s);
	PFNGLMULTITEXCOORD1XOESPROC methodp_glMultiTexCoord1xOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1xOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1xOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD1XVOESPROC) (GLenum texture, const GLfixed *coords);
	PFNGLMULTITEXCOORD1XVOESPROC methodp_glMultiTexCoord1xvOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord1xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord1xvOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord1xvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2BOESPROC) (GLenum texture, GLbyte s, GLbyte t);
	PFNGLMULTITEXCOORD2BOESPROC methodp_glMultiTexCoord2bOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2bOES && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2bOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte s */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2BVOESPROC) (GLenum texture, const GLbyte *coords);
	PFNGLMULTITEXCOORD2BVOESPROC methodp_glMultiTexCoord2bvOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2bvOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2bvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
	PFNGLMULTITEXCOORD2DPROC methodp_glMultiTexCoord2d{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2d && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2d(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
	PFNGLMULTITEXCOORD2DARBPROC methodp_glMultiTexCoord2dARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2dARB && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2dARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
	PFNGLMULTITEXCOORD2DVPROC methodp_glMultiTexCoord2dv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2dv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2dv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
	PFNGLMULTITEXCOORD2DVARBPROC methodp_glMultiTexCoord2dvARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2dvARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2dvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
	PFNGLMULTITEXCOORD2FPROC methodp_glMultiTexCoord2f{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2f && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2f(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
	PFNGLMULTITEXCOORD2FARBPROC methodp_glMultiTexCoord2fARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2fARB && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2fARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
	PFNGLMULTITEXCOORD2FVPROC methodp_glMultiTexCoord2fv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2fv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2fv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
	PFNGLMULTITEXCOORD2FVARBPROC methodp_glMultiTexCoord2fvARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2fvARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2fvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);
	PFNGLMULTITEXCOORD2HNVPROC methodp_glMultiTexCoord2hNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2hNV && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2hNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV s */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);
	PFNGLMULTITEXCOORD2HVNVPROC methodp_glMultiTexCoord2hvNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2hvNV && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2hvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLhalfNV *)((int64_t)args[1]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
	PFNGLMULTITEXCOORD2IPROC methodp_glMultiTexCoord2i{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2i && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2i(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint s */,
				(GLint )(args[2]->NumberValue())/* GLint t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
	PFNGLMULTITEXCOORD2IARBPROC methodp_glMultiTexCoord2iARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2iARB && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2iARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint s */,
				(GLint )(args[2]->NumberValue())/* GLint t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
	PFNGLMULTITEXCOORD2IVPROC methodp_glMultiTexCoord2iv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2iv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2iv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
	PFNGLMULTITEXCOORD2IVARBPROC methodp_glMultiTexCoord2ivARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2ivARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2ivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
	PFNGLMULTITEXCOORD2SPROC methodp_glMultiTexCoord2s{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2s && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2s(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLshort )(args[1]->NumberValue())/* GLshort s */,
				(GLshort )(args[2]->NumberValue())/* GLshort t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
	PFNGLMULTITEXCOORD2SARBPROC methodp_glMultiTexCoord2sARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2sARB && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2sARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLshort )(args[1]->NumberValue())/* GLshort s */,
				(GLshort )(args[2]->NumberValue())/* GLshort t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
	PFNGLMULTITEXCOORD2SVPROC methodp_glMultiTexCoord2sv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2sv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2sv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
	PFNGLMULTITEXCOORD2SVARBPROC methodp_glMultiTexCoord2svARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2svARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2svARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2XOESPROC) (GLenum texture, GLfixed s, GLfixed t);
	PFNGLMULTITEXCOORD2XOESPROC methodp_glMultiTexCoord2xOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2xOES && args.Length() >= 3){
			obj->methodp_glMultiTexCoord2xOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed s */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD2XVOESPROC) (GLenum texture, const GLfixed *coords);
	PFNGLMULTITEXCOORD2XVOESPROC methodp_glMultiTexCoord2xvOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord2xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord2xvOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord2xvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r);
	PFNGLMULTITEXCOORD3BOESPROC methodp_glMultiTexCoord3bOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3bOES && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3bOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte s */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte t */,
				(GLbyte )(args[3]->NumberValue())/* GLbyte r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3BVOESPROC) (GLenum texture, const GLbyte *coords);
	PFNGLMULTITEXCOORD3BVOESPROC methodp_glMultiTexCoord3bvOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3bvOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3bvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
	PFNGLMULTITEXCOORD3DPROC methodp_glMultiTexCoord3d{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3d && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3d(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble t */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
	PFNGLMULTITEXCOORD3DARBPROC methodp_glMultiTexCoord3dARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3dARB && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3dARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble t */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
	PFNGLMULTITEXCOORD3DVPROC methodp_glMultiTexCoord3dv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3dv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3dv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
	PFNGLMULTITEXCOORD3DVARBPROC methodp_glMultiTexCoord3dvARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3dvARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3dvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
	PFNGLMULTITEXCOORD3FPROC methodp_glMultiTexCoord3f{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3f && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3f(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
	PFNGLMULTITEXCOORD3FARBPROC methodp_glMultiTexCoord3fARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3fARB && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3fARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
	PFNGLMULTITEXCOORD3FVPROC methodp_glMultiTexCoord3fv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3fv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3fv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
	PFNGLMULTITEXCOORD3FVARBPROC methodp_glMultiTexCoord3fvARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3fvARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3fvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
	PFNGLMULTITEXCOORD3HNVPROC methodp_glMultiTexCoord3hNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3hNV && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3hNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV s */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV t */,
				(GLhalfNV )(args[3]->NumberValue())/* GLhalfNV r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);
	PFNGLMULTITEXCOORD3HVNVPROC methodp_glMultiTexCoord3hvNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3hvNV && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3hvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLhalfNV *)((int64_t)args[1]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
	PFNGLMULTITEXCOORD3IPROC methodp_glMultiTexCoord3i{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3i && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3i(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint s */,
				(GLint )(args[2]->NumberValue())/* GLint t */,
				(GLint )(args[3]->NumberValue())/* GLint r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
	PFNGLMULTITEXCOORD3IARBPROC methodp_glMultiTexCoord3iARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3iARB && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3iARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint s */,
				(GLint )(args[2]->NumberValue())/* GLint t */,
				(GLint )(args[3]->NumberValue())/* GLint r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
	PFNGLMULTITEXCOORD3IVPROC methodp_glMultiTexCoord3iv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3iv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3iv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
	PFNGLMULTITEXCOORD3IVARBPROC methodp_glMultiTexCoord3ivARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3ivARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3ivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
	PFNGLMULTITEXCOORD3SPROC methodp_glMultiTexCoord3s{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3s && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3s(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLshort )(args[1]->NumberValue())/* GLshort s */,
				(GLshort )(args[2]->NumberValue())/* GLshort t */,
				(GLshort )(args[3]->NumberValue())/* GLshort r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
	PFNGLMULTITEXCOORD3SARBPROC methodp_glMultiTexCoord3sARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3sARB && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3sARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLshort )(args[1]->NumberValue())/* GLshort s */,
				(GLshort )(args[2]->NumberValue())/* GLshort t */,
				(GLshort )(args[3]->NumberValue())/* GLshort r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
	PFNGLMULTITEXCOORD3SVPROC methodp_glMultiTexCoord3sv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3sv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3sv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
	PFNGLMULTITEXCOORD3SVARBPROC methodp_glMultiTexCoord3svARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3svARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3svARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r);
	PFNGLMULTITEXCOORD3XOESPROC methodp_glMultiTexCoord3xOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3xOES && args.Length() >= 4){
			obj->methodp_glMultiTexCoord3xOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed s */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD3XVOESPROC) (GLenum texture, const GLfixed *coords);
	PFNGLMULTITEXCOORD3XVOESPROC methodp_glMultiTexCoord3xvOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord3xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord3xvOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord3xvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
	PFNGLMULTITEXCOORD4BOESPROC methodp_glMultiTexCoord4bOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4bOES && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4bOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte s */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte t */,
				(GLbyte )(args[3]->NumberValue())/* GLbyte r */,
				(GLbyte )(args[4]->NumberValue())/* GLbyte q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4BVOESPROC) (GLenum texture, const GLbyte *coords);
	PFNGLMULTITEXCOORD4BVOESPROC methodp_glMultiTexCoord4bvOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4bvOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4bvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	PFNGLMULTITEXCOORD4DPROC methodp_glMultiTexCoord4d{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4d && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4d(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble t */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble r */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	PFNGLMULTITEXCOORD4DARBPROC methodp_glMultiTexCoord4dARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4dARB && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4dARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble t */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble r */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
	PFNGLMULTITEXCOORD4DVPROC methodp_glMultiTexCoord4dv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4dv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4dv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
	PFNGLMULTITEXCOORD4DVARBPROC methodp_glMultiTexCoord4dvARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4dvARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4dvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	PFNGLMULTITEXCOORD4FPROC methodp_glMultiTexCoord4f{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4f && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4f(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	PFNGLMULTITEXCOORD4FARBPROC methodp_glMultiTexCoord4fARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4fARB && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4fARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
	PFNGLMULTITEXCOORD4FVPROC methodp_glMultiTexCoord4fv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4fv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4fv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
	PFNGLMULTITEXCOORD4FVARBPROC methodp_glMultiTexCoord4fvARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4fvARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4fvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
	PFNGLMULTITEXCOORD4HNVPROC methodp_glMultiTexCoord4hNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4hNV && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4hNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV s */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV t */,
				(GLhalfNV )(args[3]->NumberValue())/* GLhalfNV r */,
				(GLhalfNV )(args[4]->NumberValue())/* GLhalfNV q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);
	PFNGLMULTITEXCOORD4HVNVPROC methodp_glMultiTexCoord4hvNV{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4hvNV && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4hvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLhalfNV *)((int64_t)args[1]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
	PFNGLMULTITEXCOORD4IPROC methodp_glMultiTexCoord4i{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4i && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4i(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint s */,
				(GLint )(args[2]->NumberValue())/* GLint t */,
				(GLint )(args[3]->NumberValue())/* GLint r */,
				(GLint )(args[4]->NumberValue())/* GLint q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
	PFNGLMULTITEXCOORD4IARBPROC methodp_glMultiTexCoord4iARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4iARB && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4iARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint s */,
				(GLint )(args[2]->NumberValue())/* GLint t */,
				(GLint )(args[3]->NumberValue())/* GLint r */,
				(GLint )(args[4]->NumberValue())/* GLint q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
	PFNGLMULTITEXCOORD4IVPROC methodp_glMultiTexCoord4iv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4iv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4iv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
	PFNGLMULTITEXCOORD4IVARBPROC methodp_glMultiTexCoord4ivARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4ivARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4ivARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	PFNGLMULTITEXCOORD4SPROC methodp_glMultiTexCoord4s{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4s && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4s(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLshort )(args[1]->NumberValue())/* GLshort s */,
				(GLshort )(args[2]->NumberValue())/* GLshort t */,
				(GLshort )(args[3]->NumberValue())/* GLshort r */,
				(GLshort )(args[4]->NumberValue())/* GLshort q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	PFNGLMULTITEXCOORD4SARBPROC methodp_glMultiTexCoord4sARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4sARB && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4sARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLshort )(args[1]->NumberValue())/* GLshort s */,
				(GLshort )(args[2]->NumberValue())/* GLshort t */,
				(GLshort )(args[3]->NumberValue())/* GLshort r */,
				(GLshort )(args[4]->NumberValue())/* GLshort q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
	PFNGLMULTITEXCOORD4SVPROC methodp_glMultiTexCoord4sv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4sv && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4sv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
	PFNGLMULTITEXCOORD4SVARBPROC methodp_glMultiTexCoord4svARB{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4svARB && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4svARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4XPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
	PFNGLMULTITEXCOORD4XPROC methodp_glMultiTexCoord4x{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4x(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4x && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4x(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed s */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed r */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
	PFNGLMULTITEXCOORD4XOESPROC methodp_glMultiTexCoord4xOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4xOES && args.Length() >= 5){
			obj->methodp_glMultiTexCoord4xOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed s */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed r */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORD4XVOESPROC) (GLenum texture, const GLfixed *coords);
	PFNGLMULTITEXCOORD4XVOESPROC methodp_glMultiTexCoord4xvOES{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoord4xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoord4xvOES && args.Length() >= 2){
			obj->methodp_glMultiTexCoord4xvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);
	PFNGLMULTITEXCOORDP1UIPROC methodp_glMultiTexCoordP1ui{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordP1ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordP1ui && args.Length() >= 3){
			obj->methodp_glMultiTexCoordP1ui(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLuint )(args[2]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
	PFNGLMULTITEXCOORDP1UIVPROC methodp_glMultiTexCoordP1uiv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordP1uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordP1uiv && args.Length() >= 3){
			obj->methodp_glMultiTexCoordP1uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);
	PFNGLMULTITEXCOORDP2UIPROC methodp_glMultiTexCoordP2ui{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordP2ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordP2ui && args.Length() >= 3){
			obj->methodp_glMultiTexCoordP2ui(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLuint )(args[2]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
	PFNGLMULTITEXCOORDP2UIVPROC methodp_glMultiTexCoordP2uiv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordP2uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordP2uiv && args.Length() >= 3){
			obj->methodp_glMultiTexCoordP2uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);
	PFNGLMULTITEXCOORDP3UIPROC methodp_glMultiTexCoordP3ui{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordP3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordP3ui && args.Length() >= 3){
			obj->methodp_glMultiTexCoordP3ui(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLuint )(args[2]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
	PFNGLMULTITEXCOORDP3UIVPROC methodp_glMultiTexCoordP3uiv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordP3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordP3uiv && args.Length() >= 3){
			obj->methodp_glMultiTexCoordP3uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);
	PFNGLMULTITEXCOORDP4UIPROC methodp_glMultiTexCoordP4ui{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordP4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordP4ui && args.Length() >= 3){
			obj->methodp_glMultiTexCoordP4ui(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLuint )(args[2]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
	PFNGLMULTITEXCOORDP4UIVPROC methodp_glMultiTexCoordP4uiv{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordP4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordP4uiv && args.Length() >= 3){
			obj->methodp_glMultiTexCoordP4uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLMULTITEXCOORDPOINTEREXTPROC methodp_glMultiTexCoordPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexCoordPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexCoordPointerEXT && args.Length() >= 5){
			obj->methodp_glMultiTexCoordPointerEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
	PFNGLMULTITEXENVFEXTPROC methodp_glMultiTexEnvfEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexEnvfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexEnvfEXT && args.Length() >= 4){
			obj->methodp_glMultiTexEnvfEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
	PFNGLMULTITEXENVFVEXTPROC methodp_glMultiTexEnvfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexEnvfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexEnvfvEXT && args.Length() >= 4){
			obj->methodp_glMultiTexEnvfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
	PFNGLMULTITEXENVIEXTPROC methodp_glMultiTexEnviEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexEnviEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexEnviEXT && args.Length() >= 4){
			obj->methodp_glMultiTexEnviEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint )(args[3]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
	PFNGLMULTITEXENVIVEXTPROC methodp_glMultiTexEnvivEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexEnvivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexEnvivEXT && args.Length() >= 4){
			obj->methodp_glMultiTexEnvivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
	PFNGLMULTITEXGENDEXTPROC methodp_glMultiTexGendEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexGendEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexGendEXT && args.Length() >= 4){
			obj->methodp_glMultiTexGendEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
	PFNGLMULTITEXGENDVEXTPROC methodp_glMultiTexGendvEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexGendvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexGendvEXT && args.Length() >= 4){
			obj->methodp_glMultiTexGendvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
	PFNGLMULTITEXGENFEXTPROC methodp_glMultiTexGenfEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexGenfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexGenfEXT && args.Length() >= 4){
			obj->methodp_glMultiTexGenfEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
	PFNGLMULTITEXGENFVEXTPROC methodp_glMultiTexGenfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexGenfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexGenfvEXT && args.Length() >= 4){
			obj->methodp_glMultiTexGenfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
	PFNGLMULTITEXGENIEXTPROC methodp_glMultiTexGeniEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexGeniEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexGeniEXT && args.Length() >= 4){
			obj->methodp_glMultiTexGeniEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint )(args[3]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
	PFNGLMULTITEXGENIVEXTPROC methodp_glMultiTexGenivEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexGenivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexGenivEXT && args.Length() >= 4){
			obj->methodp_glMultiTexGenivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLMULTITEXIMAGE1DEXTPROC methodp_glMultiTexImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexImage1DEXT && args.Length() >= 9){
			obj->methodp_glMultiTexImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLint )(args[5]->NumberValue())/* GLint border */,
				(GLenum )(args[6]->NumberValue())/* GLenum format */,
				(GLenum )(args[7]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLMULTITEXIMAGE2DEXTPROC methodp_glMultiTexImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexImage2DEXT && args.Length() >= 10){
			obj->methodp_glMultiTexImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLenum )(args[8]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLMULTITEXIMAGE3DEXTPROC methodp_glMultiTexImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexImage3DEXT && args.Length() >= 11){
			obj->methodp_glMultiTexImage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei depth */,
				(GLint )(args[7]->NumberValue())/* GLint border */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLenum )(args[9]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
	PFNGLMULTITEXPARAMETERIIVEXTPROC methodp_glMultiTexParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexParameterIivEXT && args.Length() >= 4){
			obj->methodp_glMultiTexParameterIivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
	PFNGLMULTITEXPARAMETERIUIVEXTPROC methodp_glMultiTexParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexParameterIuivEXT && args.Length() >= 4){
			obj->methodp_glMultiTexParameterIuivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
	PFNGLMULTITEXPARAMETERFEXTPROC methodp_glMultiTexParameterfEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexParameterfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexParameterfEXT && args.Length() >= 4){
			obj->methodp_glMultiTexParameterfEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
	PFNGLMULTITEXPARAMETERFVEXTPROC methodp_glMultiTexParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexParameterfvEXT && args.Length() >= 4){
			obj->methodp_glMultiTexParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
	PFNGLMULTITEXPARAMETERIEXTPROC methodp_glMultiTexParameteriEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexParameteriEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexParameteriEXT && args.Length() >= 4){
			obj->methodp_glMultiTexParameteriEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint )(args[3]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
	PFNGLMULTITEXPARAMETERIVEXTPROC methodp_glMultiTexParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexParameterivEXT && args.Length() >= 4){
			obj->methodp_glMultiTexParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
	PFNGLMULTITEXRENDERBUFFEREXTPROC methodp_glMultiTexRenderbufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexRenderbufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexRenderbufferEXT && args.Length() >= 3){
			obj->methodp_glMultiTexRenderbufferEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
	PFNGLMULTITEXSUBIMAGE1DEXTPROC methodp_glMultiTexSubImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexSubImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexSubImage1DEXT && args.Length() >= 8){
			obj->methodp_glMultiTexSubImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLenum )(args[5]->NumberValue())/* GLenum format */,
				(GLenum )(args[6]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	PFNGLMULTITEXSUBIMAGE2DEXTPROC methodp_glMultiTexSubImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexSubImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexSubImage2DEXT && args.Length() >= 10){
			obj->methodp_glMultiTexSubImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLenum )(args[8]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	PFNGLMULTITEXSUBIMAGE3DEXTPROC methodp_glMultiTexSubImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glMultiTexSubImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glMultiTexSubImage3DEXT && args.Length() >= 12){
			obj->methodp_glMultiTexSubImage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum texunit */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[9]->NumberValue())/* GLenum format */,
				(GLenum )(args[10]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[11]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
	PFNGLNAMEDBUFFERDATAEXTPROC methodp_glNamedBufferDataEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedBufferDataEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedBufferDataEXT && args.Length() >= 4){
			obj->methodp_glNamedBufferDataEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLsizeiptr )(args[1]->NumberValue())/* GLsizeiptr size */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *data */,
				(GLenum )(args[3]->NumberValue())/* GLenum usage */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
	PFNGLNAMEDBUFFERSTORAGEEXTPROC methodp_glNamedBufferStorageEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedBufferStorageEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedBufferStorageEXT && args.Length() >= 4){
			obj->methodp_glNamedBufferStorageEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLsizeiptr )(args[1]->NumberValue())/* GLsizeiptr size */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *data */,
				(GLbitfield )(args[3]->NumberValue())/* GLbitfield flags */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
	PFNGLNAMEDBUFFERSUBDATAEXTPROC methodp_glNamedBufferSubDataEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedBufferSubDataEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedBufferSubDataEXT && args.Length() >= 4){
			obj->methodp_glNamedBufferSubDataEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[1]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[2]->NumberValue())/* GLsizeiptr size */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
	PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC methodp_glNamedCopyBufferSubDataEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedCopyBufferSubDataEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedCopyBufferSubDataEXT && args.Length() >= 5){
			obj->methodp_glNamedCopyBufferSubDataEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint readBuffer */,
				(GLuint )(args[1]->NumberValue())/* GLuint writeBuffer */,
				(GLintptr )(args[2]->NumberValue())/* GLintptr readOffset */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr writeOffset */,
				(GLsizeiptr )(args[4]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param);
	PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC methodp_glNamedFramebufferParameteriEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedFramebufferParameteriEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedFramebufferParameteriEXT && args.Length() >= 3){
			obj->methodp_glNamedFramebufferParameteriEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
	PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC methodp_glNamedFramebufferRenderbufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedFramebufferRenderbufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedFramebufferRenderbufferEXT && args.Length() >= 4){
			obj->methodp_glNamedFramebufferRenderbufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum renderbuffertarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC methodp_glNamedFramebufferTexture1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedFramebufferTexture1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedFramebufferTexture1DEXT && args.Length() >= 5){
			obj->methodp_glNamedFramebufferTexture1DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
	PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC methodp_glNamedFramebufferTexture2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedFramebufferTexture2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedFramebufferTexture2DEXT && args.Length() >= 5){
			obj->methodp_glNamedFramebufferTexture2DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
	PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC methodp_glNamedFramebufferTexture3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedFramebufferTexture3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedFramebufferTexture3DEXT && args.Length() >= 6){
			obj->methodp_glNamedFramebufferTexture3DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLenum )(args[2]->NumberValue())/* GLenum textarget */,
				(GLuint )(args[3]->NumberValue())/* GLuint texture */,
				(GLint )(args[4]->NumberValue())/* GLint level */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
	PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC methodp_glNamedFramebufferTextureEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedFramebufferTextureEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedFramebufferTextureEXT && args.Length() >= 4){
			obj->methodp_glNamedFramebufferTextureEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
	PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC methodp_glNamedFramebufferTextureFaceEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedFramebufferTextureFaceEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedFramebufferTextureFaceEXT && args.Length() >= 5){
			obj->methodp_glNamedFramebufferTextureFaceEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */,
				(GLenum )(args[4]->NumberValue())/* GLenum face */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
	PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC methodp_glNamedFramebufferTextureLayerEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedFramebufferTextureLayerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedFramebufferTextureLayerEXT && args.Length() >= 5){
			obj->methodp_glNamedFramebufferTextureLayerEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint framebuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum attachment */,
				(GLuint )(args[2]->NumberValue())/* GLuint texture */,
				(GLint )(args[3]->NumberValue())/* GLint level */,
				(GLint )(args[4]->NumberValue())/* GLint layer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC methodp_glNamedProgramLocalParameter4dEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameter4dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameter4dEXT && args.Length() >= 7){
			obj->methodp_glNamedProgramLocalParameter4dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[6]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
	PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC methodp_glNamedProgramLocalParameter4dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameter4dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameter4dvEXT && args.Length() >= 4){
			obj->methodp_glNamedProgramLocalParameter4dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC methodp_glNamedProgramLocalParameter4fEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameter4fEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameter4fEXT && args.Length() >= 7){
			obj->methodp_glNamedProgramLocalParameter4fEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
	PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC methodp_glNamedProgramLocalParameter4fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameter4fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameter4fvEXT && args.Length() >= 4){
			obj->methodp_glNamedProgramLocalParameter4fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
	PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC methodp_glNamedProgramLocalParameterI4iEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameterI4iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameterI4iEXT && args.Length() >= 7){
			obj->methodp_glNamedProgramLocalParameterI4iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLint )(args[3]->NumberValue())/* GLint x */,
				(GLint )(args[4]->NumberValue())/* GLint y */,
				(GLint )(args[5]->NumberValue())/* GLint z */,
				(GLint )(args[6]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);
	PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC methodp_glNamedProgramLocalParameterI4ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameterI4ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameterI4ivEXT && args.Length() >= 4){
			obj->methodp_glNamedProgramLocalParameterI4ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC methodp_glNamedProgramLocalParameterI4uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameterI4uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameterI4uiEXT && args.Length() >= 7){
			obj->methodp_glNamedProgramLocalParameterI4uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLuint )(args[3]->NumberValue())/* GLuint x */,
				(GLuint )(args[4]->NumberValue())/* GLuint y */,
				(GLuint )(args[5]->NumberValue())/* GLuint z */,
				(GLuint )(args[6]->NumberValue())/* GLuint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);
	PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC methodp_glNamedProgramLocalParameterI4uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameterI4uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameterI4uivEXT && args.Length() >= 4){
			obj->methodp_glNamedProgramLocalParameterI4uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
	PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC methodp_glNamedProgramLocalParameters4fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParameters4fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParameters4fvEXT && args.Length() >= 5){
			obj->methodp_glNamedProgramLocalParameters4fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
	PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC methodp_glNamedProgramLocalParametersI4ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParametersI4ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParametersI4ivEXT && args.Length() >= 5){
			obj->methodp_glNamedProgramLocalParametersI4ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[4]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
	PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC methodp_glNamedProgramLocalParametersI4uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramLocalParametersI4uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramLocalParametersI4uivEXT && args.Length() >= 5){
			obj->methodp_glNamedProgramLocalParametersI4uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[4]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);
	PFNGLNAMEDPROGRAMSTRINGEXTPROC methodp_glNamedProgramStringEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedProgramStringEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedProgramStringEXT && args.Length() >= 5){
			obj->methodp_glNamedProgramStringEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum format */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei len */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *string */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC methodp_glNamedRenderbufferStorageEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedRenderbufferStorageEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedRenderbufferStorageEXT && args.Length() >= 4){
			obj->methodp_glNamedRenderbufferStorageEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint renderbuffer */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC methodp_glNamedRenderbufferStorageMultisampleCoverageEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedRenderbufferStorageMultisampleCoverageEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedRenderbufferStorageMultisampleCoverageEXT && args.Length() >= 6){
			obj->methodp_glNamedRenderbufferStorageMultisampleCoverageEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint renderbuffer */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei coverageSamples */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei colorSamples */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC methodp_glNamedRenderbufferStorageMultisampleEXT{nullptr};
	static v8::Handle<v8::Value> method_glNamedRenderbufferStorageMultisampleEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedRenderbufferStorageMultisampleEXT && args.Length() >= 5){
			obj->methodp_glNamedRenderbufferStorageMultisampleEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint renderbuffer */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
	PFNGLNAMEDSTRINGARBPROC methodp_glNamedStringARB{nullptr};
	static v8::Handle<v8::Value> method_glNamedStringARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNamedStringARB && args.Length() >= 5){
			obj->methodp_glNamedStringARB(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLint )(args[1]->NumberValue())/* GLint namelen */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *name */,
				(GLint )(args[3]->NumberValue())/* GLint stringlen */,
				(const GLchar *)((int64_t)args[4]->NumberValue())/* const GLchar *string */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNEWLISTPROC) (GLuint list, GLenum mode);
	PFNGLNEWLISTPROC methodp_glNewList{nullptr};
	static v8::Handle<v8::Value> method_glNewList(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNewList && args.Length() >= 2){
			obj->methodp_glNewList(
				(GLuint )(args[0]->NumberValue())/* GLuint list */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void *pointer, GLenum usage);
	PFNGLNEWOBJECTBUFFERATIPROC methodp_glNewObjectBufferATI{nullptr};
	static v8::Handle<v8::Value> method_glNewObjectBufferATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNewObjectBufferATI && args.Length() >= 3){
			obj->methodp_glNewObjectBufferATI(
				(GLsizei )(args[0]->NumberValue())/* GLsizei size */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *pointer */,
				(GLenum )(args[2]->NumberValue())/* GLenum usage */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3BPROC) (GLbyte nx, GLbyte ny, GLbyte nz);
	PFNGLNORMAL3BPROC methodp_glNormal3b{nullptr};
	static v8::Handle<v8::Value> method_glNormal3b(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3b && args.Length() >= 3){
			obj->methodp_glNormal3b(
				(GLbyte )(args[0]->NumberValue())/* GLbyte nx */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte ny */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3BVPROC) (const GLbyte *v);
	PFNGLNORMAL3BVPROC methodp_glNormal3bv{nullptr};
	static v8::Handle<v8::Value> method_glNormal3bv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3bv && args.Length() >= 1){
			obj->methodp_glNormal3bv(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3DPROC) (GLdouble nx, GLdouble ny, GLdouble nz);
	PFNGLNORMAL3DPROC methodp_glNormal3d{nullptr};
	static v8::Handle<v8::Value> method_glNormal3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3d && args.Length() >= 3){
			obj->methodp_glNormal3d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble nx */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble ny */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3DVPROC) (const GLdouble *v);
	PFNGLNORMAL3DVPROC methodp_glNormal3dv{nullptr};
	static v8::Handle<v8::Value> method_glNormal3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3dv && args.Length() >= 1){
			obj->methodp_glNormal3dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3FPROC) (GLfloat nx, GLfloat ny, GLfloat nz);
	PFNGLNORMAL3FPROC methodp_glNormal3f{nullptr};
	static v8::Handle<v8::Value> method_glNormal3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3f && args.Length() >= 3){
			obj->methodp_glNormal3f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	PFNGLNORMAL3FVERTEX3FSUNPROC methodp_glNormal3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glNormal3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3fVertex3fSUN && args.Length() >= 6){
			obj->methodp_glNormal3fVertex3fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);
	PFNGLNORMAL3FVERTEX3FVSUNPROC methodp_glNormal3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glNormal3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3fVertex3fvSUN && args.Length() >= 2){
			obj->methodp_glNormal3fVertex3fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3FVPROC) (const GLfloat *v);
	PFNGLNORMAL3FVPROC methodp_glNormal3fv{nullptr};
	static v8::Handle<v8::Value> method_glNormal3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3fv && args.Length() >= 1){
			obj->methodp_glNormal3fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
	PFNGLNORMAL3HNVPROC methodp_glNormal3hNV{nullptr};
	static v8::Handle<v8::Value> method_glNormal3hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3hNV && args.Length() >= 3){
			obj->methodp_glNormal3hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV nx */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV ny */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);
	PFNGLNORMAL3HVNVPROC methodp_glNormal3hvNV{nullptr};
	static v8::Handle<v8::Value> method_glNormal3hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3hvNV && args.Length() >= 1){
			obj->methodp_glNormal3hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3IPROC) (GLint nx, GLint ny, GLint nz);
	PFNGLNORMAL3IPROC methodp_glNormal3i{nullptr};
	static v8::Handle<v8::Value> method_glNormal3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3i && args.Length() >= 3){
			obj->methodp_glNormal3i(
				(GLint )(args[0]->NumberValue())/* GLint nx */,
				(GLint )(args[1]->NumberValue())/* GLint ny */,
				(GLint )(args[2]->NumberValue())/* GLint nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3IVPROC) (const GLint *v);
	PFNGLNORMAL3IVPROC methodp_glNormal3iv{nullptr};
	static v8::Handle<v8::Value> method_glNormal3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3iv && args.Length() >= 1){
			obj->methodp_glNormal3iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3SPROC) (GLshort nx, GLshort ny, GLshort nz);
	PFNGLNORMAL3SPROC methodp_glNormal3s{nullptr};
	static v8::Handle<v8::Value> method_glNormal3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3s && args.Length() >= 3){
			obj->methodp_glNormal3s(
				(GLshort )(args[0]->NumberValue())/* GLshort nx */,
				(GLshort )(args[1]->NumberValue())/* GLshort ny */,
				(GLshort )(args[2]->NumberValue())/* GLshort nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3SVPROC) (const GLshort *v);
	PFNGLNORMAL3SVPROC methodp_glNormal3sv{nullptr};
	static v8::Handle<v8::Value> method_glNormal3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3sv && args.Length() >= 1){
			obj->methodp_glNormal3sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3XPROC) (GLfixed nx, GLfixed ny, GLfixed nz);
	PFNGLNORMAL3XPROC methodp_glNormal3x{nullptr};
	static v8::Handle<v8::Value> method_glNormal3x(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3x && args.Length() >= 3){
			obj->methodp_glNormal3x(
				(GLfixed )(args[0]->NumberValue())/* GLfixed nx */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed ny */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3XOESPROC) (GLfixed nx, GLfixed ny, GLfixed nz);
	PFNGLNORMAL3XOESPROC methodp_glNormal3xOES{nullptr};
	static v8::Handle<v8::Value> method_glNormal3xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3xOES && args.Length() >= 3){
			obj->methodp_glNormal3xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed nx */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed ny */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMAL3XVOESPROC) (const GLfixed *coords);
	PFNGLNORMAL3XVOESPROC methodp_glNormal3xvOES{nullptr};
	static v8::Handle<v8::Value> method_glNormal3xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormal3xvOES && args.Length() >= 1){
			obj->methodp_glNormal3xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
	PFNGLNORMALFORMATNVPROC methodp_glNormalFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glNormalFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalFormatNV && args.Length() >= 2){
			obj->methodp_glNormalFormatNV(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);
	PFNGLNORMALP3UIPROC methodp_glNormalP3ui{nullptr};
	static v8::Handle<v8::Value> method_glNormalP3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalP3ui && args.Length() >= 2){
			obj->methodp_glNormalP3ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);
	PFNGLNORMALP3UIVPROC methodp_glNormalP3uiv{nullptr};
	static v8::Handle<v8::Value> method_glNormalP3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalP3uiv && args.Length() >= 2){
			obj->methodp_glNormalP3uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer);
	PFNGLNORMALPOINTERPROC methodp_glNormalPointer{nullptr};
	static v8::Handle<v8::Value> method_glNormalPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalPointer && args.Length() >= 3){
			obj->methodp_glNormalPointer(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);
	PFNGLNORMALPOINTEREXTPROC methodp_glNormalPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glNormalPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalPointerEXT && args.Length() >= 4){
			obj->methodp_glNormalPointerEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);
	PFNGLNORMALPOINTERLISTIBMPROC methodp_glNormalPointerListIBM{nullptr};
	static v8::Handle<v8::Value> method_glNormalPointerListIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalPointerListIBM && args.Length() >= 4){
			obj->methodp_glNormalPointerListIBM(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLint )(args[1]->NumberValue())/* GLint stride */,
				(const void **)((int64_t)args[2]->NumberValue())/* const void **pointer */,
				(GLint )(args[3]->NumberValue())/* GLint ptrstride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void **pointer);
	PFNGLNORMALPOINTERVINTELPROC methodp_glNormalPointervINTEL{nullptr};
	static v8::Handle<v8::Value> method_glNormalPointervINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalPointervINTEL && args.Length() >= 2){
			obj->methodp_glNormalPointervINTEL(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const void **)((int64_t)args[1]->NumberValue())/* const void **pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
	PFNGLNORMALSTREAM3BATIPROC methodp_glNormalStream3bATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3bATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3bATI && args.Length() >= 4){
			obj->methodp_glNormalStream3bATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte nx */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte ny */,
				(GLbyte )(args[3]->NumberValue())/* GLbyte nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
	PFNGLNORMALSTREAM3BVATIPROC methodp_glNormalStream3bvATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3bvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3bvATI && args.Length() >= 2){
			obj->methodp_glNormalStream3bvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
	PFNGLNORMALSTREAM3DATIPROC methodp_glNormalStream3dATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3dATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3dATI && args.Length() >= 4){
			obj->methodp_glNormalStream3dATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble nx */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble ny */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
	PFNGLNORMALSTREAM3DVATIPROC methodp_glNormalStream3dvATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3dvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3dvATI && args.Length() >= 2){
			obj->methodp_glNormalStream3dvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
	PFNGLNORMALSTREAM3FATIPROC methodp_glNormalStream3fATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3fATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3fATI && args.Length() >= 4){
			obj->methodp_glNormalStream3fATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
	PFNGLNORMALSTREAM3FVATIPROC methodp_glNormalStream3fvATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3fvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3fvATI && args.Length() >= 2){
			obj->methodp_glNormalStream3fvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
	PFNGLNORMALSTREAM3IATIPROC methodp_glNormalStream3iATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3iATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3iATI && args.Length() >= 4){
			obj->methodp_glNormalStream3iATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLint )(args[1]->NumberValue())/* GLint nx */,
				(GLint )(args[2]->NumberValue())/* GLint ny */,
				(GLint )(args[3]->NumberValue())/* GLint nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
	PFNGLNORMALSTREAM3IVATIPROC methodp_glNormalStream3ivATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3ivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3ivATI && args.Length() >= 2){
			obj->methodp_glNormalStream3ivATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
	PFNGLNORMALSTREAM3SATIPROC methodp_glNormalStream3sATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3sATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3sATI && args.Length() >= 4){
			obj->methodp_glNormalStream3sATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLshort )(args[1]->NumberValue())/* GLshort nx */,
				(GLshort )(args[2]->NumberValue())/* GLshort ny */,
				(GLshort )(args[3]->NumberValue())/* GLshort nz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
	PFNGLNORMALSTREAM3SVATIPROC methodp_glNormalStream3svATI{nullptr};
	static v8::Handle<v8::Value> method_glNormalStream3svATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glNormalStream3svATI && args.Length() >= 2){
			obj->methodp_glNormalStream3svATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
	PFNGLOBJECTLABELPROC methodp_glObjectLabel{nullptr};
	static v8::Handle<v8::Value> method_glObjectLabel(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glObjectLabel && args.Length() >= 4){
			obj->methodp_glObjectLabel(
				(GLenum )(args[0]->NumberValue())/* GLenum identifier */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[3]->NumberValue())/* const GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLOBJECTLABELKHRPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
	PFNGLOBJECTLABELKHRPROC methodp_glObjectLabelKHR{nullptr};
	static v8::Handle<v8::Value> method_glObjectLabelKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glObjectLabelKHR && args.Length() >= 4){
			obj->methodp_glObjectLabelKHR(
				(GLenum )(args[0]->NumberValue())/* GLenum identifier */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[3]->NumberValue())/* const GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);
	PFNGLOBJECTPTRLABELPROC methodp_glObjectPtrLabel{nullptr};
	static v8::Handle<v8::Value> method_glObjectPtrLabel(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glObjectPtrLabel && args.Length() >= 3){
			obj->methodp_glObjectPtrLabel(
				(const void *)((int64_t)args[0]->NumberValue())/* const void *ptr */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLOBJECTPTRLABELKHRPROC) (const void *ptr, GLsizei length, const GLchar *label);
	PFNGLOBJECTPTRLABELKHRPROC methodp_glObjectPtrLabelKHR{nullptr};
	static v8::Handle<v8::Value> method_glObjectPtrLabelKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glObjectPtrLabelKHR && args.Length() >= 3){
			obj->methodp_glObjectPtrLabelKHR(
				(const void *)((int64_t)args[0]->NumberValue())/* const void *ptr */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[2]->NumberValue())/* const GLchar *label */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
	PFNGLOBJECTPURGEABLEAPPLEPROC methodp_glObjectPurgeableAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glObjectPurgeableAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glObjectPurgeableAPPLE && args.Length() >= 3){
			obj->methodp_glObjectPurgeableAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum objectType */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */,
				(GLenum )(args[2]->NumberValue())/* GLenum option */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
	PFNGLOBJECTUNPURGEABLEAPPLEPROC methodp_glObjectUnpurgeableAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glObjectUnpurgeableAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glObjectUnpurgeableAPPLE && args.Length() >= 3){
			obj->methodp_glObjectUnpurgeableAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum objectType */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */,
				(GLenum )(args[2]->NumberValue())/* GLenum option */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLORTHOPROC) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	PFNGLORTHOPROC methodp_glOrtho{nullptr};
	static v8::Handle<v8::Value> method_glOrtho(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glOrtho && args.Length() >= 6){
			obj->methodp_glOrtho(
				(GLdouble )(args[0]->NumberValue())/* GLdouble left */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble right */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble bottom */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble top */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble zNear */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble zFar */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLORTHOFPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
	PFNGLORTHOFPROC methodp_glOrthof{nullptr};
	static v8::Handle<v8::Value> method_glOrthof(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glOrthof && args.Length() >= 6){
			obj->methodp_glOrthof(
				(GLfloat )(args[0]->NumberValue())/* GLfloat l */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat n */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);
	PFNGLORTHOFOESPROC methodp_glOrthofOES{nullptr};
	static v8::Handle<v8::Value> method_glOrthofOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glOrthofOES && args.Length() >= 6){
			obj->methodp_glOrthofOES(
				(GLfloat )(args[0]->NumberValue())/* GLfloat l */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat n */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLORTHOXPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
	PFNGLORTHOXPROC methodp_glOrthox{nullptr};
	static v8::Handle<v8::Value> method_glOrthox(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glOrthox && args.Length() >= 6){
			obj->methodp_glOrthox(
				(GLfixed )(args[0]->NumberValue())/* GLfixed l */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed r */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed b */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed n */,
				(GLfixed )(args[5]->NumberValue())/* GLfixed f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLORTHOXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
	PFNGLORTHOXOESPROC methodp_glOrthoxOES{nullptr};
	static v8::Handle<v8::Value> method_glOrthoxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glOrthoxOES && args.Length() >= 6){
			obj->methodp_glOrthoxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed l */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed r */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed b */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[4]->NumberValue())/* GLfixed n */,
				(GLfixed )(args[5]->NumberValue())/* GLfixed f */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
	PFNGLPNTRIANGLESFATIPROC methodp_glPNTrianglesfATI{nullptr};
	static v8::Handle<v8::Value> method_glPNTrianglesfATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPNTrianglesfATI && args.Length() >= 2){
			obj->methodp_glPNTrianglesfATI(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
	PFNGLPNTRIANGLESIATIPROC methodp_glPNTrianglesiATI{nullptr};
	static v8::Handle<v8::Value> method_glPNTrianglesiATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPNTrianglesiATI && args.Length() >= 2){
			obj->methodp_glPNTrianglesiATI(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
	PFNGLPASSTEXCOORDATIPROC methodp_glPassTexCoordATI{nullptr};
	static v8::Handle<v8::Value> method_glPassTexCoordATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPassTexCoordATI && args.Length() >= 3){
			obj->methodp_glPassTexCoordATI(
				(GLuint )(args[0]->NumberValue())/* GLuint dst */,
				(GLuint )(args[1]->NumberValue())/* GLuint coord */,
				(GLenum )(args[2]->NumberValue())/* GLenum swizzle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPASSTHROUGHPROC) (GLfloat token);
	PFNGLPASSTHROUGHPROC methodp_glPassThrough{nullptr};
	static v8::Handle<v8::Value> method_glPassThrough(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPassThrough && args.Length() >= 1){
			obj->methodp_glPassThrough(
				(GLfloat )(args[0]->NumberValue())/* GLfloat token */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPASSTHROUGHXOESPROC) (GLfixed token);
	PFNGLPASSTHROUGHXOESPROC methodp_glPassThroughxOES{nullptr};
	static v8::Handle<v8::Value> method_glPassThroughxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPassThroughxOES && args.Length() >= 1){
			obj->methodp_glPassThroughxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed token */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);
	PFNGLPATCHPARAMETERFVPROC methodp_glPatchParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glPatchParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPatchParameterfv && args.Length() >= 2){
			obj->methodp_glPatchParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);
	PFNGLPATCHPARAMETERIPROC methodp_glPatchParameteri{nullptr};
	static v8::Handle<v8::Value> method_glPatchParameteri(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPatchParameteri && args.Length() >= 2){
			obj->methodp_glPatchParameteri(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATCHPARAMETERIEXTPROC) (GLenum pname, GLint value);
	PFNGLPATCHPARAMETERIEXTPROC methodp_glPatchParameteriEXT{nullptr};
	static v8::Handle<v8::Value> method_glPatchParameteriEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPatchParameteriEXT && args.Length() >= 2){
			obj->methodp_glPatchParameteriEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);
	PFNGLPATHCOLORGENNVPROC methodp_glPathColorGenNV{nullptr};
	static v8::Handle<v8::Value> method_glPathColorGenNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathColorGenNV && args.Length() >= 4){
			obj->methodp_glPathColorGenNV(
				(GLenum )(args[0]->NumberValue())/* GLenum color */,
				(GLenum )(args[1]->NumberValue())/* GLenum genMode */,
				(GLenum )(args[2]->NumberValue())/* GLenum colorFormat */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *coeffs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
	PFNGLPATHCOMMANDSNVPROC methodp_glPathCommandsNV{nullptr};
	static v8::Handle<v8::Value> method_glPathCommandsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathCommandsNV && args.Length() >= 6){
			obj->methodp_glPathCommandsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei numCommands */,
				(const GLubyte *)((int64_t)args[2]->NumberValue())/* const GLubyte *commands */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei numCoords */,
				(GLenum )(args[4]->NumberValue())/* GLenum coordType */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);
	PFNGLPATHCOORDSNVPROC methodp_glPathCoordsNV{nullptr};
	static v8::Handle<v8::Value> method_glPathCoordsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathCoordsNV && args.Length() >= 4){
			obj->methodp_glPathCoordsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei numCoords */,
				(GLenum )(args[2]->NumberValue())/* GLenum coordType */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum func);
	PFNGLPATHCOVERDEPTHFUNCNVPROC methodp_glPathCoverDepthFuncNV{nullptr};
	static v8::Handle<v8::Value> method_glPathCoverDepthFuncNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathCoverDepthFuncNV && args.Length() >= 1){
			obj->methodp_glPathCoverDepthFuncNV(
				(GLenum )(args[0]->NumberValue())/* GLenum func */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);
	PFNGLPATHDASHARRAYNVPROC methodp_glPathDashArrayNV{nullptr};
	static v8::Handle<v8::Value> method_glPathDashArrayNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathDashArrayNV && args.Length() >= 3){
			obj->methodp_glPathDashArrayNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei dashCount */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *dashArray */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHFOGGENNVPROC) (GLenum genMode);
	PFNGLPATHFOGGENNVPROC methodp_glPathFogGenNV{nullptr};
	static v8::Handle<v8::Value> method_glPathFogGenNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathFogGenNV && args.Length() >= 1){
			obj->methodp_glPathFogGenNV(
				(GLenum )(args[0]->NumberValue())/* GLenum genMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
	PFNGLPATHGLYPHRANGENVPROC methodp_glPathGlyphRangeNV{nullptr};
	static v8::Handle<v8::Value> method_glPathGlyphRangeNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathGlyphRangeNV && args.Length() >= 9){
			obj->methodp_glPathGlyphRangeNV(
				(GLuint )(args[0]->NumberValue())/* GLuint firstPathName */,
				(GLenum )(args[1]->NumberValue())/* GLenum fontTarget */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *fontName */,
				(GLbitfield )(args[3]->NumberValue())/* GLbitfield fontStyle */,
				(GLuint )(args[4]->NumberValue())/* GLuint firstGlyph */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei numGlyphs */,
				(GLenum )(args[6]->NumberValue())/* GLenum handleMissingGlyphs */,
				(GLuint )(args[7]->NumberValue())/* GLuint pathParameterTemplate */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat emScale */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
	PFNGLPATHGLYPHSNVPROC methodp_glPathGlyphsNV{nullptr};
	static v8::Handle<v8::Value> method_glPathGlyphsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathGlyphsNV && args.Length() >= 10){
			obj->methodp_glPathGlyphsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint firstPathName */,
				(GLenum )(args[1]->NumberValue())/* GLenum fontTarget */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *fontName */,
				(GLbitfield )(args[3]->NumberValue())/* GLbitfield fontStyle */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei numGlyphs */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *charcodes */,
				(GLenum )(args[7]->NumberValue())/* GLenum handleMissingGlyphs */,
				(GLuint )(args[8]->NumberValue())/* GLuint pathParameterTemplate */,
				(GLfloat )(args[9]->NumberValue())/* GLfloat emScale */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);
	PFNGLPATHPARAMETERFNVPROC methodp_glPathParameterfNV{nullptr};
	static v8::Handle<v8::Value> method_glPathParameterfNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathParameterfNV && args.Length() >= 3){
			obj->methodp_glPathParameterfNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);
	PFNGLPATHPARAMETERFVNVPROC methodp_glPathParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glPathParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathParameterfvNV && args.Length() >= 3){
			obj->methodp_glPathParameterfvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);
	PFNGLPATHPARAMETERINVPROC methodp_glPathParameteriNV{nullptr};
	static v8::Handle<v8::Value> method_glPathParameteriNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathParameteriNV && args.Length() >= 3){
			obj->methodp_glPathParameteriNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);
	PFNGLPATHPARAMETERIVNVPROC methodp_glPathParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glPathParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathParameterivNV && args.Length() >= 3){
			obj->methodp_glPathParameterivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);
	PFNGLPATHSTENCILDEPTHOFFSETNVPROC methodp_glPathStencilDepthOffsetNV{nullptr};
	static v8::Handle<v8::Value> method_glPathStencilDepthOffsetNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathStencilDepthOffsetNV && args.Length() >= 2){
			obj->methodp_glPathStencilDepthOffsetNV(
				(GLfloat )(args[0]->NumberValue())/* GLfloat factor */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat units */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);
	PFNGLPATHSTENCILFUNCNVPROC methodp_glPathStencilFuncNV{nullptr};
	static v8::Handle<v8::Value> method_glPathStencilFuncNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathStencilFuncNV && args.Length() >= 3){
			obj->methodp_glPathStencilFuncNV(
				(GLenum )(args[0]->NumberValue())/* GLenum func */,
				(GLint )(args[1]->NumberValue())/* GLint ref */,
				(GLuint )(args[2]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString);
	PFNGLPATHSTRINGNVPROC methodp_glPathStringNV{nullptr};
	static v8::Handle<v8::Value> method_glPathStringNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathStringNV && args.Length() >= 4){
			obj->methodp_glPathStringNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei length */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pathString */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);
	PFNGLPATHSUBCOMMANDSNVPROC methodp_glPathSubCommandsNV{nullptr};
	static v8::Handle<v8::Value> method_glPathSubCommandsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathSubCommandsNV && args.Length() >= 8){
			obj->methodp_glPathSubCommandsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei commandStart */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei commandsToDelete */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei numCommands */,
				(const GLubyte *)((int64_t)args[4]->NumberValue())/* const GLubyte *commands */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei numCoords */,
				(GLenum )(args[6]->NumberValue())/* GLenum coordType */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);
	PFNGLPATHSUBCOORDSNVPROC methodp_glPathSubCoordsNV{nullptr};
	static v8::Handle<v8::Value> method_glPathSubCoordsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathSubCoordsNV && args.Length() >= 5){
			obj->methodp_glPathSubCoordsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei coordStart */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei numCoords */,
				(GLenum )(args[3]->NumberValue())/* GLenum coordType */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);
	PFNGLPATHTEXGENNVPROC methodp_glPathTexGenNV{nullptr};
	static v8::Handle<v8::Value> method_glPathTexGenNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPathTexGenNV && args.Length() >= 4){
			obj->methodp_glPathTexGenNV(
				(GLenum )(args[0]->NumberValue())/* GLenum texCoordSet */,
				(GLenum )(args[1]->NumberValue())/* GLenum genMode */,
				(GLint )(args[2]->NumberValue())/* GLint components */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *coeffs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) ();
	PFNGLPAUSETRANSFORMFEEDBACKPROC methodp_glPauseTransformFeedback{nullptr};
	static v8::Handle<v8::Value> method_glPauseTransformFeedback(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPauseTransformFeedback && args.Length() >= 0){
			obj->methodp_glPauseTransformFeedback(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC) ();
	PFNGLPAUSETRANSFORMFEEDBACKNVPROC methodp_glPauseTransformFeedbackNV{nullptr};
	static v8::Handle<v8::Value> method_glPauseTransformFeedbackNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPauseTransformFeedbackNV && args.Length() >= 0){
			obj->methodp_glPauseTransformFeedbackNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, const void *pointer);
	PFNGLPIXELDATARANGENVPROC methodp_glPixelDataRangeNV{nullptr};
	static v8::Handle<v8::Value> method_glPixelDataRangeNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelDataRangeNV && args.Length() >= 3){
			obj->methodp_glPixelDataRangeNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei length */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELMAPFVPROC) (GLenum map, GLsizei mapsize, const GLfloat *values);
	PFNGLPIXELMAPFVPROC methodp_glPixelMapfv{nullptr};
	static v8::Handle<v8::Value> method_glPixelMapfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelMapfv && args.Length() >= 3){
			obj->methodp_glPixelMapfv(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei mapsize */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELMAPUIVPROC) (GLenum map, GLsizei mapsize, const GLuint *values);
	PFNGLPIXELMAPUIVPROC methodp_glPixelMapuiv{nullptr};
	static v8::Handle<v8::Value> method_glPixelMapuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelMapuiv && args.Length() >= 3){
			obj->methodp_glPixelMapuiv(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei mapsize */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELMAPUSVPROC) (GLenum map, GLsizei mapsize, const GLushort *values);
	PFNGLPIXELMAPUSVPROC methodp_glPixelMapusv{nullptr};
	static v8::Handle<v8::Value> method_glPixelMapusv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelMapusv && args.Length() >= 3){
			obj->methodp_glPixelMapusv(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei mapsize */,
				(const GLushort *)((int64_t)args[2]->NumberValue())/* const GLushort *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELMAPXPROC) (GLenum map, GLint size, const GLfixed *values);
	PFNGLPIXELMAPXPROC methodp_glPixelMapx{nullptr};
	static v8::Handle<v8::Value> method_glPixelMapx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelMapx && args.Length() >= 3){
			obj->methodp_glPixelMapx(
				(GLenum )(args[0]->NumberValue())/* GLenum map */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELSTOREFPROC) (GLenum pname, GLfloat param);
	PFNGLPIXELSTOREFPROC methodp_glPixelStoref{nullptr};
	static v8::Handle<v8::Value> method_glPixelStoref(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelStoref && args.Length() >= 2){
			obj->methodp_glPixelStoref(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);
	PFNGLPIXELSTOREIPROC methodp_glPixelStorei{nullptr};
	static v8::Handle<v8::Value> method_glPixelStorei(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelStorei && args.Length() >= 2){
			obj->methodp_glPixelStorei(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELSTOREXPROC) (GLenum pname, GLfixed param);
	PFNGLPIXELSTOREXPROC methodp_glPixelStorex{nullptr};
	static v8::Handle<v8::Value> method_glPixelStorex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelStorex && args.Length() >= 2){
			obj->methodp_glPixelStorex(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
	PFNGLPIXELTEXGENPARAMETERFSGISPROC methodp_glPixelTexGenParameterfSGIS{nullptr};
	static v8::Handle<v8::Value> method_glPixelTexGenParameterfSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTexGenParameterfSGIS && args.Length() >= 2){
			obj->methodp_glPixelTexGenParameterfSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
	PFNGLPIXELTEXGENPARAMETERFVSGISPROC methodp_glPixelTexGenParameterfvSGIS{nullptr};
	static v8::Handle<v8::Value> method_glPixelTexGenParameterfvSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTexGenParameterfvSGIS && args.Length() >= 2){
			obj->methodp_glPixelTexGenParameterfvSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);
	PFNGLPIXELTEXGENPARAMETERISGISPROC methodp_glPixelTexGenParameteriSGIS{nullptr};
	static v8::Handle<v8::Value> method_glPixelTexGenParameteriSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTexGenParameteriSGIS && args.Length() >= 2){
			obj->methodp_glPixelTexGenParameteriSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);
	PFNGLPIXELTEXGENPARAMETERIVSGISPROC methodp_glPixelTexGenParameterivSGIS{nullptr};
	static v8::Handle<v8::Value> method_glPixelTexGenParameterivSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTexGenParameterivSGIS && args.Length() >= 2){
			obj->methodp_glPixelTexGenParameterivSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
	PFNGLPIXELTEXGENSGIXPROC methodp_glPixelTexGenSGIX{nullptr};
	static v8::Handle<v8::Value> method_glPixelTexGenSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTexGenSGIX && args.Length() >= 1){
			obj->methodp_glPixelTexGenSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTRANSFERFPROC) (GLenum pname, GLfloat param);
	PFNGLPIXELTRANSFERFPROC methodp_glPixelTransferf{nullptr};
	static v8::Handle<v8::Value> method_glPixelTransferf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTransferf && args.Length() >= 2){
			obj->methodp_glPixelTransferf(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTRANSFERIPROC) (GLenum pname, GLint param);
	PFNGLPIXELTRANSFERIPROC methodp_glPixelTransferi{nullptr};
	static v8::Handle<v8::Value> method_glPixelTransferi(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTransferi && args.Length() >= 2){
			obj->methodp_glPixelTransferi(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTRANSFERXOESPROC) (GLenum pname, GLfixed param);
	PFNGLPIXELTRANSFERXOESPROC methodp_glPixelTransferxOES{nullptr};
	static v8::Handle<v8::Value> method_glPixelTransferxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTransferxOES && args.Length() >= 2){
			obj->methodp_glPixelTransferxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
	PFNGLPIXELTRANSFORMPARAMETERFEXTPROC methodp_glPixelTransformParameterfEXT{nullptr};
	static v8::Handle<v8::Value> method_glPixelTransformParameterfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTransformParameterfEXT && args.Length() >= 3){
			obj->methodp_glPixelTransformParameterfEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC methodp_glPixelTransformParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glPixelTransformParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTransformParameterfvEXT && args.Length() >= 3){
			obj->methodp_glPixelTransformParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
	PFNGLPIXELTRANSFORMPARAMETERIEXTPROC methodp_glPixelTransformParameteriEXT{nullptr};
	static v8::Handle<v8::Value> method_glPixelTransformParameteriEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTransformParameteriEXT && args.Length() >= 3){
			obj->methodp_glPixelTransformParameteriEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC methodp_glPixelTransformParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glPixelTransformParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelTransformParameterivEXT && args.Length() >= 3){
			obj->methodp_glPixelTransformParameterivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELZOOMPROC) (GLfloat xfactor, GLfloat yfactor);
	PFNGLPIXELZOOMPROC methodp_glPixelZoom{nullptr};
	static v8::Handle<v8::Value> method_glPixelZoom(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelZoom && args.Length() >= 2){
			obj->methodp_glPixelZoom(
				(GLfloat )(args[0]->NumberValue())/* GLfloat xfactor */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat yfactor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPIXELZOOMXOESPROC) (GLfixed xfactor, GLfixed yfactor);
	PFNGLPIXELZOOMXOESPROC methodp_glPixelZoomxOES{nullptr};
	static v8::Handle<v8::Value> method_glPixelZoomxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPixelZoomxOES && args.Length() >= 2){
			obj->methodp_glPixelZoomxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed xfactor */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed yfactor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);
	PFNGLPOINTALONGPATHNVPROC methodp_glPointAlongPathNV{nullptr};
	static v8::Handle<v8::Value> method_glPointAlongPathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointAlongPathNV && args.Length() >= 8){
			obj->methodp_glPointAlongPathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei startSegment */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei numSegments */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat distance */,
				(GLfloat *)((int64_t)args[4]->NumberValue())/* GLfloat *x */,
				(GLfloat *)((int64_t)args[5]->NumberValue())/* GLfloat *y */,
				(GLfloat *)((int64_t)args[6]->NumberValue())/* GLfloat *tangentX */,
				(GLfloat *)((int64_t)args[7]->NumberValue())/* GLfloat *tangentY */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
	PFNGLPOINTPARAMETERFPROC methodp_glPointParameterf{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterf && args.Length() >= 2){
			obj->methodp_glPointParameterf(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
	PFNGLPOINTPARAMETERFARBPROC methodp_glPointParameterfARB{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterfARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterfARB && args.Length() >= 2){
			obj->methodp_glPointParameterfARB(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
	PFNGLPOINTPARAMETERFEXTPROC methodp_glPointParameterfEXT{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterfEXT && args.Length() >= 2){
			obj->methodp_glPointParameterfEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
	PFNGLPOINTPARAMETERFSGISPROC methodp_glPointParameterfSGIS{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterfSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterfSGIS && args.Length() >= 2){
			obj->methodp_glPointParameterfSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
	PFNGLPOINTPARAMETERFVPROC methodp_glPointParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterfv && args.Length() >= 2){
			obj->methodp_glPointParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
	PFNGLPOINTPARAMETERFVARBPROC methodp_glPointParameterfvARB{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterfvARB && args.Length() >= 2){
			obj->methodp_glPointParameterfvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);
	PFNGLPOINTPARAMETERFVEXTPROC methodp_glPointParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterfvEXT && args.Length() >= 2){
			obj->methodp_glPointParameterfvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
	PFNGLPOINTPARAMETERFVSGISPROC methodp_glPointParameterfvSGIS{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterfvSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterfvSGIS && args.Length() >= 2){
			obj->methodp_glPointParameterfvSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
	PFNGLPOINTPARAMETERIPROC methodp_glPointParameteri{nullptr};
	static v8::Handle<v8::Value> method_glPointParameteri(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameteri && args.Length() >= 2){
			obj->methodp_glPointParameteri(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
	PFNGLPOINTPARAMETERINVPROC methodp_glPointParameteriNV{nullptr};
	static v8::Handle<v8::Value> method_glPointParameteriNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameteriNV && args.Length() >= 2){
			obj->methodp_glPointParameteriNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
	PFNGLPOINTPARAMETERIVPROC methodp_glPointParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glPointParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameteriv && args.Length() >= 2){
			obj->methodp_glPointParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
	PFNGLPOINTPARAMETERIVNVPROC methodp_glPointParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterivNV && args.Length() >= 2){
			obj->methodp_glPointParameterivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERXPROC) (GLenum pname, GLfixed param);
	PFNGLPOINTPARAMETERXPROC methodp_glPointParameterx{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterx && args.Length() >= 2){
			obj->methodp_glPointParameterx(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERXOESPROC) (GLenum pname, GLfixed param);
	PFNGLPOINTPARAMETERXOESPROC methodp_glPointParameterxOES{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterxOES && args.Length() >= 2){
			obj->methodp_glPointParameterxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERXVPROC) (GLenum pname, const GLfixed *params);
	PFNGLPOINTPARAMETERXVPROC methodp_glPointParameterxv{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterxv && args.Length() >= 2){
			obj->methodp_glPointParameterxv(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTPARAMETERXVOESPROC) (GLenum pname, const GLfixed *params);
	PFNGLPOINTPARAMETERXVOESPROC methodp_glPointParameterxvOES{nullptr};
	static v8::Handle<v8::Value> method_glPointParameterxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointParameterxvOES && args.Length() >= 2){
			obj->methodp_glPointParameterxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTSIZEPROC) (GLfloat size);
	PFNGLPOINTSIZEPROC methodp_glPointSize{nullptr};
	static v8::Handle<v8::Value> method_glPointSize(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointSize && args.Length() >= 1){
			obj->methodp_glPointSize(
				(GLfloat )(args[0]->NumberValue())/* GLfloat size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTSIZEPOINTEROESPROC) (GLenum type, GLsizei stride, const void *pointer);
	PFNGLPOINTSIZEPOINTEROESPROC methodp_glPointSizePointerOES{nullptr};
	static v8::Handle<v8::Value> method_glPointSizePointerOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointSizePointerOES && args.Length() >= 3){
			obj->methodp_glPointSizePointerOES(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTSIZEXPROC) (GLfixed size);
	PFNGLPOINTSIZEXPROC methodp_glPointSizex{nullptr};
	static v8::Handle<v8::Value> method_glPointSizex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointSizex && args.Length() >= 1){
			obj->methodp_glPointSizex(
				(GLfixed )(args[0]->NumberValue())/* GLfixed size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOINTSIZEXOESPROC) (GLfixed size);
	PFNGLPOINTSIZEXOESPROC methodp_glPointSizexOES{nullptr};
	static v8::Handle<v8::Value> method_glPointSizexOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPointSizexOES && args.Length() >= 1){
			obj->methodp_glPointSizexOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);
	PFNGLPOLLASYNCSGIXPROC methodp_glPollAsyncSGIX{nullptr};
	static v8::Handle<v8::Value> method_glPollAsyncSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPollAsyncSGIX && args.Length() >= 1){
			obj->methodp_glPollAsyncSGIX(
				(GLuint *)((int64_t)args[0]->NumberValue())/* GLuint *markerp */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);
	PFNGLPOLLINSTRUMENTSSGIXPROC methodp_glPollInstrumentsSGIX{nullptr};
	static v8::Handle<v8::Value> method_glPollInstrumentsSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPollInstrumentsSGIX && args.Length() >= 1){
			obj->methodp_glPollInstrumentsSGIX(
				(GLint *)((int64_t)args[0]->NumberValue())/* GLint *marker_p */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);
	PFNGLPOLYGONMODEPROC methodp_glPolygonMode{nullptr};
	static v8::Handle<v8::Value> method_glPolygonMode(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPolygonMode && args.Length() >= 2){
			obj->methodp_glPolygonMode(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC) (GLfloat factor, GLfloat units);
	PFNGLPOLYGONOFFSETPROC methodp_glPolygonOffset{nullptr};
	static v8::Handle<v8::Value> method_glPolygonOffset(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPolygonOffset && args.Length() >= 2){
			obj->methodp_glPolygonOffset(
				(GLfloat )(args[0]->NumberValue())/* GLfloat factor */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat units */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
	PFNGLPOLYGONOFFSETEXTPROC methodp_glPolygonOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glPolygonOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPolygonOffsetEXT && args.Length() >= 2){
			obj->methodp_glPolygonOffsetEXT(
				(GLfloat )(args[0]->NumberValue())/* GLfloat factor */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat bias */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOLYGONOFFSETXPROC) (GLfixed factor, GLfixed units);
	PFNGLPOLYGONOFFSETXPROC methodp_glPolygonOffsetx{nullptr};
	static v8::Handle<v8::Value> method_glPolygonOffsetx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPolygonOffsetx && args.Length() >= 2){
			obj->methodp_glPolygonOffsetx(
				(GLfixed )(args[0]->NumberValue())/* GLfixed factor */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed units */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOLYGONOFFSETXOESPROC) (GLfixed factor, GLfixed units);
	PFNGLPOLYGONOFFSETXOESPROC methodp_glPolygonOffsetxOES{nullptr};
	static v8::Handle<v8::Value> method_glPolygonOffsetxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPolygonOffsetxOES && args.Length() >= 2){
			obj->methodp_glPolygonOffsetxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed factor */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed units */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOLYGONSTIPPLEPROC) (const GLubyte *mask);
	PFNGLPOLYGONSTIPPLEPROC methodp_glPolygonStipple{nullptr};
	static v8::Handle<v8::Value> method_glPolygonStipple(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPolygonStipple && args.Length() >= 1){
			obj->methodp_glPolygonStipple(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOPATTRIBPROC) ();
	PFNGLPOPATTRIBPROC methodp_glPopAttrib{nullptr};
	static v8::Handle<v8::Value> method_glPopAttrib(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPopAttrib && args.Length() >= 0){
			obj->methodp_glPopAttrib(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOPCLIENTATTRIBPROC) ();
	PFNGLPOPCLIENTATTRIBPROC methodp_glPopClientAttrib{nullptr};
	static v8::Handle<v8::Value> method_glPopClientAttrib(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPopClientAttrib && args.Length() >= 0){
			obj->methodp_glPopClientAttrib(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC) ();
	PFNGLPOPDEBUGGROUPPROC methodp_glPopDebugGroup{nullptr};
	static v8::Handle<v8::Value> method_glPopDebugGroup(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPopDebugGroup && args.Length() >= 0){
			obj->methodp_glPopDebugGroup(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOPDEBUGGROUPKHRPROC) ();
	PFNGLPOPDEBUGGROUPKHRPROC methodp_glPopDebugGroupKHR{nullptr};
	static v8::Handle<v8::Value> method_glPopDebugGroupKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPopDebugGroupKHR && args.Length() >= 0){
			obj->methodp_glPopDebugGroupKHR(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOPGROUPMARKEREXTPROC) ();
	PFNGLPOPGROUPMARKEREXTPROC methodp_glPopGroupMarkerEXT{nullptr};
	static v8::Handle<v8::Value> method_glPopGroupMarkerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPopGroupMarkerEXT && args.Length() >= 0){
			obj->methodp_glPopGroupMarkerEXT(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOPMATRIXPROC) ();
	PFNGLPOPMATRIXPROC methodp_glPopMatrix{nullptr};
	static v8::Handle<v8::Value> method_glPopMatrix(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPopMatrix && args.Length() >= 0){
			obj->methodp_glPopMatrix(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPOPNAMEPROC) ();
	PFNGLPOPNAMEPROC methodp_glPopName{nullptr};
	static v8::Handle<v8::Value> method_glPopName(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPopName && args.Length() >= 0){
			obj->methodp_glPopName(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
	PFNGLPRESENTFRAMEDUALFILLNVPROC methodp_glPresentFrameDualFillNV{nullptr};
	static v8::Handle<v8::Value> method_glPresentFrameDualFillNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPresentFrameDualFillNV && args.Length() >= 13){
			obj->methodp_glPresentFrameDualFillNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_slot */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT minPresentTime */,
				(GLuint )(args[2]->NumberValue())/* GLuint beginPresentTimeId */,
				(GLuint )(args[3]->NumberValue())/* GLuint presentDurationId */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(GLenum )(args[5]->NumberValue())/* GLenum target0 */,
				(GLuint )(args[6]->NumberValue())/* GLuint fill0 */,
				(GLenum )(args[7]->NumberValue())/* GLenum target1 */,
				(GLuint )(args[8]->NumberValue())/* GLuint fill1 */,
				(GLenum )(args[9]->NumberValue())/* GLenum target2 */,
				(GLuint )(args[10]->NumberValue())/* GLuint fill2 */,
				(GLenum )(args[11]->NumberValue())/* GLenum target3 */,
				(GLuint )(args[12]->NumberValue())/* GLuint fill3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
	PFNGLPRESENTFRAMEKEYEDNVPROC methodp_glPresentFrameKeyedNV{nullptr};
	static v8::Handle<v8::Value> method_glPresentFrameKeyedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPresentFrameKeyedNV && args.Length() >= 11){
			obj->methodp_glPresentFrameKeyedNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_slot */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT minPresentTime */,
				(GLuint )(args[2]->NumberValue())/* GLuint beginPresentTimeId */,
				(GLuint )(args[3]->NumberValue())/* GLuint presentDurationId */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(GLenum )(args[5]->NumberValue())/* GLenum target0 */,
				(GLuint )(args[6]->NumberValue())/* GLuint fill0 */,
				(GLuint )(args[7]->NumberValue())/* GLuint key0 */,
				(GLenum )(args[8]->NumberValue())/* GLenum target1 */,
				(GLuint )(args[9]->NumberValue())/* GLuint fill1 */,
				(GLuint )(args[10]->NumberValue())/* GLuint key1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);
	PFNGLPRIMITIVERESTARTINDEXPROC methodp_glPrimitiveRestartIndex{nullptr};
	static v8::Handle<v8::Value> method_glPrimitiveRestartIndex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPrimitiveRestartIndex && args.Length() >= 1){
			obj->methodp_glPrimitiveRestartIndex(
				(GLuint )(args[0]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
	PFNGLPRIMITIVERESTARTINDEXNVPROC methodp_glPrimitiveRestartIndexNV{nullptr};
	static v8::Handle<v8::Value> method_glPrimitiveRestartIndexNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPrimitiveRestartIndexNV && args.Length() >= 1){
			obj->methodp_glPrimitiveRestartIndexNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC) ();
	PFNGLPRIMITIVERESTARTNVPROC methodp_glPrimitiveRestartNV{nullptr};
	static v8::Handle<v8::Value> method_glPrimitiveRestartNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPrimitiveRestartNV && args.Length() >= 0){
			obj->methodp_glPrimitiveRestartNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESPROC) (GLsizei n, const GLuint *textures, const GLfloat *priorities);
	PFNGLPRIORITIZETEXTURESPROC methodp_glPrioritizeTextures{nullptr};
	static v8::Handle<v8::Value> method_glPrioritizeTextures(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPrioritizeTextures && args.Length() >= 3){
			obj->methodp_glPrioritizeTextures(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *textures */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *priorities */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRIMITIVEBOUNDINGBOXEXTPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
	PFNGLPRIMITIVEBOUNDINGBOXEXTPROC methodp_glPrimitiveBoundingBoxEXT{nullptr};
	static v8::Handle<v8::Value> method_glPrimitiveBoundingBoxEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPrimitiveBoundingBoxEXT && args.Length() >= 8){
			obj->methodp_glPrimitiveBoundingBoxEXT(
				(GLfloat )(args[0]->NumberValue())/* GLfloat minX */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat minY */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat minZ */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat minW */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat maxX */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat maxY */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat maxZ */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat maxW */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
	PFNGLPRIORITIZETEXTURESEXTPROC methodp_glPrioritizeTexturesEXT{nullptr};
	static v8::Handle<v8::Value> method_glPrioritizeTexturesEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPrioritizeTexturesEXT && args.Length() >= 3){
			obj->methodp_glPrioritizeTexturesEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *textures */,
				(const GLclampf *)((int64_t)args[2]->NumberValue())/* const GLclampf *priorities */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESXOESPROC) (GLsizei n, const GLuint *textures, const GLfixed *priorities);
	PFNGLPRIORITIZETEXTURESXOESPROC methodp_glPrioritizeTexturesxOES{nullptr};
	static v8::Handle<v8::Value> method_glPrioritizeTexturesxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPrioritizeTexturesxOES && args.Length() >= 3){
			obj->methodp_glPrioritizeTexturesxOES(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *textures */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *priorities */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
	PFNGLPROGRAMBINARYPROC methodp_glProgramBinary{nullptr};
	static v8::Handle<v8::Value> method_glProgramBinary(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramBinary && args.Length() >= 4){
			obj->methodp_glProgramBinary(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum binaryFormat */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *binary */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMBINARYOESPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLint length);
	PFNGLPROGRAMBINARYOESPROC methodp_glProgramBinaryOES{nullptr};
	static v8::Handle<v8::Value> method_glProgramBinaryOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramBinaryOES && args.Length() >= 4){
			obj->methodp_glProgramBinaryOES(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum binaryFormat */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *binary */,
				(GLint )(args[3]->NumberValue())/* GLint length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);
	PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC methodp_glProgramBufferParametersIivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramBufferParametersIivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramBufferParametersIivNV && args.Length() >= 5){
			obj->methodp_glProgramBufferParametersIivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint bindingIndex */,
				(GLuint )(args[2]->NumberValue())/* GLuint wordIndex */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[4]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);
	PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC methodp_glProgramBufferParametersIuivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramBufferParametersIuivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramBufferParametersIuivNV && args.Length() >= 5){
			obj->methodp_glProgramBufferParametersIuivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint bindingIndex */,
				(GLuint )(args[2]->NumberValue())/* GLuint wordIndex */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[4]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);
	PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC methodp_glProgramBufferParametersfvNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramBufferParametersfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramBufferParametersfvNV && args.Length() >= 5){
			obj->methodp_glProgramBufferParametersfvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint bindingIndex */,
				(GLuint )(args[2]->NumberValue())/* GLuint wordIndex */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLPROGRAMENVPARAMETER4DARBPROC methodp_glProgramEnvParameter4dARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameter4dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameter4dARB && args.Length() >= 6){
			obj->methodp_glProgramEnvParameter4dARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
	PFNGLPROGRAMENVPARAMETER4DVARBPROC methodp_glProgramEnvParameter4dvARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameter4dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameter4dvARB && args.Length() >= 3){
			obj->methodp_glProgramEnvParameter4dvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLPROGRAMENVPARAMETER4FARBPROC methodp_glProgramEnvParameter4fARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameter4fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameter4fARB && args.Length() >= 6){
			obj->methodp_glProgramEnvParameter4fARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
	PFNGLPROGRAMENVPARAMETER4FVARBPROC methodp_glProgramEnvParameter4fvARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameter4fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameter4fvARB && args.Length() >= 3){
			obj->methodp_glProgramEnvParameter4fvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
	PFNGLPROGRAMENVPARAMETERI4INVPROC methodp_glProgramEnvParameterI4iNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameterI4iNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameterI4iNV && args.Length() >= 6){
			obj->methodp_glProgramEnvParameterI4iNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLint )(args[4]->NumberValue())/* GLint z */,
				(GLint )(args[5]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
	PFNGLPROGRAMENVPARAMETERI4IVNVPROC methodp_glProgramEnvParameterI4ivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameterI4ivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameterI4ivNV && args.Length() >= 3){
			obj->methodp_glProgramEnvParameterI4ivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	PFNGLPROGRAMENVPARAMETERI4UINVPROC methodp_glProgramEnvParameterI4uiNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameterI4uiNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameterI4uiNV && args.Length() >= 6){
			obj->methodp_glProgramEnvParameterI4uiNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint x */,
				(GLuint )(args[3]->NumberValue())/* GLuint y */,
				(GLuint )(args[4]->NumberValue())/* GLuint z */,
				(GLuint )(args[5]->NumberValue())/* GLuint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
	PFNGLPROGRAMENVPARAMETERI4UIVNVPROC methodp_glProgramEnvParameterI4uivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameterI4uivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameterI4uivNV && args.Length() >= 3){
			obj->methodp_glProgramEnvParameterI4uivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
	PFNGLPROGRAMENVPARAMETERS4FVEXTPROC methodp_glProgramEnvParameters4fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParameters4fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParameters4fvEXT && args.Length() >= 4){
			obj->methodp_glProgramEnvParameters4fvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
	PFNGLPROGRAMENVPARAMETERSI4IVNVPROC methodp_glProgramEnvParametersI4ivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParametersI4ivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParametersI4ivNV && args.Length() >= 4){
			obj->methodp_glProgramEnvParametersI4ivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
	PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC methodp_glProgramEnvParametersI4uivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramEnvParametersI4uivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramEnvParametersI4uivNV && args.Length() >= 4){
			obj->methodp_glProgramEnvParametersI4uivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLPROGRAMLOCALPARAMETER4DARBPROC methodp_glProgramLocalParameter4dARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameter4dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameter4dARB && args.Length() >= 6){
			obj->methodp_glProgramLocalParameter4dARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
	PFNGLPROGRAMLOCALPARAMETER4DVARBPROC methodp_glProgramLocalParameter4dvARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameter4dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameter4dvARB && args.Length() >= 3){
			obj->methodp_glProgramLocalParameter4dvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLPROGRAMLOCALPARAMETER4FARBPROC methodp_glProgramLocalParameter4fARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameter4fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameter4fARB && args.Length() >= 6){
			obj->methodp_glProgramLocalParameter4fARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
	PFNGLPROGRAMLOCALPARAMETER4FVARBPROC methodp_glProgramLocalParameter4fvARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameter4fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameter4fvARB && args.Length() >= 3){
			obj->methodp_glProgramLocalParameter4fvARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
	PFNGLPROGRAMLOCALPARAMETERI4INVPROC methodp_glProgramLocalParameterI4iNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameterI4iNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameterI4iNV && args.Length() >= 6){
			obj->methodp_glProgramLocalParameterI4iNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLint )(args[2]->NumberValue())/* GLint x */,
				(GLint )(args[3]->NumberValue())/* GLint y */,
				(GLint )(args[4]->NumberValue())/* GLint z */,
				(GLint )(args[5]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
	PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC methodp_glProgramLocalParameterI4ivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameterI4ivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameterI4ivNV && args.Length() >= 3){
			obj->methodp_glProgramLocalParameterI4ivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	PFNGLPROGRAMLOCALPARAMETERI4UINVPROC methodp_glProgramLocalParameterI4uiNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameterI4uiNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameterI4uiNV && args.Length() >= 6){
			obj->methodp_glProgramLocalParameterI4uiNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint x */,
				(GLuint )(args[3]->NumberValue())/* GLuint y */,
				(GLuint )(args[4]->NumberValue())/* GLuint z */,
				(GLuint )(args[5]->NumberValue())/* GLuint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
	PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC methodp_glProgramLocalParameterI4uivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameterI4uivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameterI4uivNV && args.Length() >= 3){
			obj->methodp_glProgramLocalParameterI4uivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
	PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC methodp_glProgramLocalParameters4fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParameters4fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParameters4fvEXT && args.Length() >= 4){
			obj->methodp_glProgramLocalParameters4fvEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
	PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC methodp_glProgramLocalParametersI4ivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParametersI4ivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParametersI4ivNV && args.Length() >= 4){
			obj->methodp_glProgramLocalParametersI4ivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
	PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC methodp_glProgramLocalParametersI4uivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramLocalParametersI4uivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramLocalParametersI4uivNV && args.Length() >= 4){
			obj->methodp_glProgramLocalParametersI4uivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLPROGRAMNAMEDPARAMETER4DNVPROC methodp_glProgramNamedParameter4dNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramNamedParameter4dNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramNamedParameter4dNV && args.Length() >= 7){
			obj->methodp_glProgramNamedParameter4dNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei len */,
				(const GLubyte *)((int64_t)args[2]->NumberValue())/* const GLubyte *name */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[6]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
	PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC methodp_glProgramNamedParameter4dvNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramNamedParameter4dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramNamedParameter4dvNV && args.Length() >= 4){
			obj->methodp_glProgramNamedParameter4dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei len */,
				(const GLubyte *)((int64_t)args[2]->NumberValue())/* const GLubyte *name */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLPROGRAMNAMEDPARAMETER4FNVPROC methodp_glProgramNamedParameter4fNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramNamedParameter4fNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramNamedParameter4fNV && args.Length() >= 7){
			obj->methodp_glProgramNamedParameter4fNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei len */,
				(const GLubyte *)((int64_t)args[2]->NumberValue())/* const GLubyte *name */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
	PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC methodp_glProgramNamedParameter4fvNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramNamedParameter4fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramNamedParameter4fvNV && args.Length() >= 4){
			obj->methodp_glProgramNamedParameter4fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei len */,
				(const GLubyte *)((int64_t)args[2]->NumberValue())/* const GLubyte *name */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLPROGRAMPARAMETER4DNVPROC methodp_glProgramParameter4dNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameter4dNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameter4dNV && args.Length() >= 6){
			obj->methodp_glProgramParameter4dNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);
	PFNGLPROGRAMPARAMETER4DVNVPROC methodp_glProgramParameter4dvNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameter4dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameter4dvNV && args.Length() >= 3){
			obj->methodp_glProgramParameter4dvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLPROGRAMPARAMETER4FNVPROC methodp_glProgramParameter4fNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameter4fNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameter4fNV && args.Length() >= 6){
			obj->methodp_glProgramParameter4fNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);
	PFNGLPROGRAMPARAMETER4FVNVPROC methodp_glProgramParameter4fvNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameter4fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameter4fvNV && args.Length() >= 3){
			obj->methodp_glProgramParameter4fvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);
	PFNGLPROGRAMPARAMETERIPROC methodp_glProgramParameteri{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameteri(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameteri && args.Length() >= 3){
			obj->methodp_glProgramParameteri(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
	PFNGLPROGRAMPARAMETERIARBPROC methodp_glProgramParameteriARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameteriARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameteriARB && args.Length() >= 3){
			obj->methodp_glProgramParameteriARB(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);
	PFNGLPROGRAMPARAMETERIEXTPROC methodp_glProgramParameteriEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameteriEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameteriEXT && args.Length() >= 3){
			obj->methodp_glProgramParameteriEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLdouble *v);
	PFNGLPROGRAMPARAMETERS4DVNVPROC methodp_glProgramParameters4dvNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameters4dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameters4dvNV && args.Length() >= 4){
			obj->methodp_glProgramParameters4dvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *v);
	PFNGLPROGRAMPARAMETERS4FVNVPROC methodp_glProgramParameters4fvNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramParameters4fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramParameters4fvNV && args.Length() >= 4){
			obj->methodp_glProgramParameters4fvNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void *string);
	PFNGLPROGRAMSTRINGARBPROC methodp_glProgramStringARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramStringARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramStringARB && args.Length() >= 4){
			obj->methodp_glProgramStringARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum format */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei len */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *string */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params);
	PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC methodp_glProgramSubroutineParametersuivNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramSubroutineParametersuivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramSubroutineParametersuivNV && args.Length() >= 3){
			obj->methodp_glProgramSubroutineParametersuivNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);
	PFNGLPROGRAMUNIFORM1DPROC methodp_glProgramUniform1d{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1d && args.Length() >= 3){
			obj->methodp_glProgramUniform1d(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x);
	PFNGLPROGRAMUNIFORM1DEXTPROC methodp_glProgramUniform1dEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1dEXT && args.Length() >= 3){
			obj->methodp_glProgramUniform1dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
	PFNGLPROGRAMUNIFORM1DVPROC methodp_glProgramUniform1dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1dv && args.Length() >= 4){
			obj->methodp_glProgramUniform1dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
	PFNGLPROGRAMUNIFORM1DVEXTPROC methodp_glProgramUniform1dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1dvEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform1dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);
	PFNGLPROGRAMUNIFORM1FPROC methodp_glProgramUniform1f{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1f && args.Length() >= 3){
			obj->methodp_glProgramUniform1f(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
	PFNGLPROGRAMUNIFORM1FEXTPROC methodp_glProgramUniform1fEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1fEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1fEXT && args.Length() >= 3){
			obj->methodp_glProgramUniform1fEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
	PFNGLPROGRAMUNIFORM1FVPROC methodp_glProgramUniform1fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1fv && args.Length() >= 4){
			obj->methodp_glProgramUniform1fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
	PFNGLPROGRAMUNIFORM1FVEXTPROC methodp_glProgramUniform1fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1fvEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform1fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);
	PFNGLPROGRAMUNIFORM1IPROC methodp_glProgramUniform1i{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1i && args.Length() >= 3){
			obj->methodp_glProgramUniform1i(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint )(args[2]->NumberValue())/* GLint v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);
	PFNGLPROGRAMUNIFORM1I64NVPROC methodp_glProgramUniform1i64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1i64NV && args.Length() >= 3){
			obj->methodp_glProgramUniform1i64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
	PFNGLPROGRAMUNIFORM1I64VNVPROC methodp_glProgramUniform1i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1i64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniform1i64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint64EXT *)((int64_t)args[3]->NumberValue())/* const GLint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
	PFNGLPROGRAMUNIFORM1IEXTPROC methodp_glProgramUniform1iEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1iEXT && args.Length() >= 3){
			obj->methodp_glProgramUniform1iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint )(args[2]->NumberValue())/* GLint v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
	PFNGLPROGRAMUNIFORM1IVPROC methodp_glProgramUniform1iv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1iv && args.Length() >= 4){
			obj->methodp_glProgramUniform1iv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
	PFNGLPROGRAMUNIFORM1IVEXTPROC methodp_glProgramUniform1ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1ivEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform1ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);
	PFNGLPROGRAMUNIFORM1UIPROC methodp_glProgramUniform1ui{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1ui && args.Length() >= 3){
			obj->methodp_glProgramUniform1ui(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);
	PFNGLPROGRAMUNIFORM1UI64NVPROC methodp_glProgramUniform1ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1ui64NV && args.Length() >= 3){
			obj->methodp_glProgramUniform1ui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLPROGRAMUNIFORM1UI64VNVPROC methodp_glProgramUniform1ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1ui64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniform1ui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[3]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
	PFNGLPROGRAMUNIFORM1UIEXTPROC methodp_glProgramUniform1uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1uiEXT && args.Length() >= 3){
			obj->methodp_glProgramUniform1uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
	PFNGLPROGRAMUNIFORM1UIVPROC methodp_glProgramUniform1uiv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1uiv && args.Length() >= 4){
			obj->methodp_glProgramUniform1uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
	PFNGLPROGRAMUNIFORM1UIVEXTPROC methodp_glProgramUniform1uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform1uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform1uivEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform1uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);
	PFNGLPROGRAMUNIFORM2DPROC methodp_glProgramUniform2d{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2d && args.Length() >= 4){
			obj->methodp_glProgramUniform2d(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble v0 */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
	PFNGLPROGRAMUNIFORM2DEXTPROC methodp_glProgramUniform2dEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2dEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform2dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
	PFNGLPROGRAMUNIFORM2DVPROC methodp_glProgramUniform2dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2dv && args.Length() >= 4){
			obj->methodp_glProgramUniform2dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
	PFNGLPROGRAMUNIFORM2DVEXTPROC methodp_glProgramUniform2dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2dvEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform2dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
	PFNGLPROGRAMUNIFORM2FPROC methodp_glProgramUniform2f{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2f && args.Length() >= 4){
			obj->methodp_glProgramUniform2f(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
	PFNGLPROGRAMUNIFORM2FEXTPROC methodp_glProgramUniform2fEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2fEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2fEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform2fEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
	PFNGLPROGRAMUNIFORM2FVPROC methodp_glProgramUniform2fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2fv && args.Length() >= 4){
			obj->methodp_glProgramUniform2fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
	PFNGLPROGRAMUNIFORM2FVEXTPROC methodp_glProgramUniform2fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2fvEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform2fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);
	PFNGLPROGRAMUNIFORM2IPROC methodp_glProgramUniform2i{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2i && args.Length() >= 4){
			obj->methodp_glProgramUniform2i(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint )(args[2]->NumberValue())/* GLint v0 */,
				(GLint )(args[3]->NumberValue())/* GLint v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
	PFNGLPROGRAMUNIFORM2I64NVPROC methodp_glProgramUniform2i64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2i64NV && args.Length() >= 4){
			obj->methodp_glProgramUniform2i64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[3]->NumberValue())/* GLint64EXT y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
	PFNGLPROGRAMUNIFORM2I64VNVPROC methodp_glProgramUniform2i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2i64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniform2i64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint64EXT *)((int64_t)args[3]->NumberValue())/* const GLint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
	PFNGLPROGRAMUNIFORM2IEXTPROC methodp_glProgramUniform2iEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2iEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform2iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint )(args[2]->NumberValue())/* GLint v0 */,
				(GLint )(args[3]->NumberValue())/* GLint v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
	PFNGLPROGRAMUNIFORM2IVPROC methodp_glProgramUniform2iv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2iv && args.Length() >= 4){
			obj->methodp_glProgramUniform2iv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
	PFNGLPROGRAMUNIFORM2IVEXTPROC methodp_glProgramUniform2ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2ivEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform2ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
	PFNGLPROGRAMUNIFORM2UIPROC methodp_glProgramUniform2ui{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2ui && args.Length() >= 4){
			obj->methodp_glProgramUniform2ui(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
	PFNGLPROGRAMUNIFORM2UI64NVPROC methodp_glProgramUniform2ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2ui64NV && args.Length() >= 4){
			obj->methodp_glProgramUniform2ui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[3]->NumberValue())/* GLuint64EXT y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLPROGRAMUNIFORM2UI64VNVPROC methodp_glProgramUniform2ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2ui64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniform2ui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[3]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
	PFNGLPROGRAMUNIFORM2UIEXTPROC methodp_glProgramUniform2uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2uiEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform2uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
	PFNGLPROGRAMUNIFORM2UIVPROC methodp_glProgramUniform2uiv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2uiv && args.Length() >= 4){
			obj->methodp_glProgramUniform2uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
	PFNGLPROGRAMUNIFORM2UIVEXTPROC methodp_glProgramUniform2uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform2uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform2uivEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform2uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
	PFNGLPROGRAMUNIFORM3DPROC methodp_glProgramUniform3d{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3d && args.Length() >= 5){
			obj->methodp_glProgramUniform3d(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble v0 */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble v1 */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
	PFNGLPROGRAMUNIFORM3DEXTPROC methodp_glProgramUniform3dEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3dEXT && args.Length() >= 5){
			obj->methodp_glProgramUniform3dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
	PFNGLPROGRAMUNIFORM3DVPROC methodp_glProgramUniform3dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3dv && args.Length() >= 4){
			obj->methodp_glProgramUniform3dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
	PFNGLPROGRAMUNIFORM3DVEXTPROC methodp_glProgramUniform3dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3dvEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform3dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	PFNGLPROGRAMUNIFORM3FPROC methodp_glProgramUniform3f{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3f && args.Length() >= 5){
			obj->methodp_glProgramUniform3f(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	PFNGLPROGRAMUNIFORM3FEXTPROC methodp_glProgramUniform3fEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3fEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3fEXT && args.Length() >= 5){
			obj->methodp_glProgramUniform3fEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
	PFNGLPROGRAMUNIFORM3FVPROC methodp_glProgramUniform3fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3fv && args.Length() >= 4){
			obj->methodp_glProgramUniform3fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
	PFNGLPROGRAMUNIFORM3FVEXTPROC methodp_glProgramUniform3fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3fvEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform3fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	PFNGLPROGRAMUNIFORM3IPROC methodp_glProgramUniform3i{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3i && args.Length() >= 5){
			obj->methodp_glProgramUniform3i(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint )(args[2]->NumberValue())/* GLint v0 */,
				(GLint )(args[3]->NumberValue())/* GLint v1 */,
				(GLint )(args[4]->NumberValue())/* GLint v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
	PFNGLPROGRAMUNIFORM3I64NVPROC methodp_glProgramUniform3i64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3i64NV && args.Length() >= 5){
			obj->methodp_glProgramUniform3i64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[3]->NumberValue())/* GLint64EXT y */,
				(GLint64EXT )(args[4]->NumberValue())/* GLint64EXT z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
	PFNGLPROGRAMUNIFORM3I64VNVPROC methodp_glProgramUniform3i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3i64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniform3i64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint64EXT *)((int64_t)args[3]->NumberValue())/* const GLint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
	PFNGLPROGRAMUNIFORM3IEXTPROC methodp_glProgramUniform3iEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3iEXT && args.Length() >= 5){
			obj->methodp_glProgramUniform3iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint )(args[2]->NumberValue())/* GLint v0 */,
				(GLint )(args[3]->NumberValue())/* GLint v1 */,
				(GLint )(args[4]->NumberValue())/* GLint v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
	PFNGLPROGRAMUNIFORM3IVPROC methodp_glProgramUniform3iv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3iv && args.Length() >= 4){
			obj->methodp_glProgramUniform3iv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
	PFNGLPROGRAMUNIFORM3IVEXTPROC methodp_glProgramUniform3ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3ivEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform3ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	PFNGLPROGRAMUNIFORM3UIPROC methodp_glProgramUniform3ui{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3ui && args.Length() >= 5){
			obj->methodp_glProgramUniform3ui(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v1 */,
				(GLuint )(args[4]->NumberValue())/* GLuint v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
	PFNGLPROGRAMUNIFORM3UI64NVPROC methodp_glProgramUniform3ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3ui64NV && args.Length() >= 5){
			obj->methodp_glProgramUniform3ui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[3]->NumberValue())/* GLuint64EXT y */,
				(GLuint64EXT )(args[4]->NumberValue())/* GLuint64EXT z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLPROGRAMUNIFORM3UI64VNVPROC methodp_glProgramUniform3ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3ui64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniform3ui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[3]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
	PFNGLPROGRAMUNIFORM3UIEXTPROC methodp_glProgramUniform3uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3uiEXT && args.Length() >= 5){
			obj->methodp_glProgramUniform3uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v1 */,
				(GLuint )(args[4]->NumberValue())/* GLuint v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
	PFNGLPROGRAMUNIFORM3UIVPROC methodp_glProgramUniform3uiv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3uiv && args.Length() >= 4){
			obj->methodp_glProgramUniform3uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
	PFNGLPROGRAMUNIFORM3UIVEXTPROC methodp_glProgramUniform3uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform3uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform3uivEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform3uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
	PFNGLPROGRAMUNIFORM4DPROC methodp_glProgramUniform4d{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4d && args.Length() >= 6){
			obj->methodp_glProgramUniform4d(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble v0 */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble v1 */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble v2 */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLPROGRAMUNIFORM4DEXTPROC methodp_glProgramUniform4dEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4dEXT && args.Length() >= 6){
			obj->methodp_glProgramUniform4dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[5]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
	PFNGLPROGRAMUNIFORM4DVPROC methodp_glProgramUniform4dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4dv && args.Length() >= 4){
			obj->methodp_glProgramUniform4dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
	PFNGLPROGRAMUNIFORM4DVEXTPROC methodp_glProgramUniform4dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4dvEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform4dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	PFNGLPROGRAMUNIFORM4FPROC methodp_glProgramUniform4f{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4f && args.Length() >= 6){
			obj->methodp_glProgramUniform4f(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat v2 */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	PFNGLPROGRAMUNIFORM4FEXTPROC methodp_glProgramUniform4fEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4fEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4fEXT && args.Length() >= 6){
			obj->methodp_glProgramUniform4fEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat v2 */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
	PFNGLPROGRAMUNIFORM4FVPROC methodp_glProgramUniform4fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4fv && args.Length() >= 4){
			obj->methodp_glProgramUniform4fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
	PFNGLPROGRAMUNIFORM4FVEXTPROC methodp_glProgramUniform4fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4fvEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform4fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	PFNGLPROGRAMUNIFORM4IPROC methodp_glProgramUniform4i{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4i && args.Length() >= 6){
			obj->methodp_glProgramUniform4i(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint )(args[2]->NumberValue())/* GLint v0 */,
				(GLint )(args[3]->NumberValue())/* GLint v1 */,
				(GLint )(args[4]->NumberValue())/* GLint v2 */,
				(GLint )(args[5]->NumberValue())/* GLint v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
	PFNGLPROGRAMUNIFORM4I64NVPROC methodp_glProgramUniform4i64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4i64NV && args.Length() >= 6){
			obj->methodp_glProgramUniform4i64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[3]->NumberValue())/* GLint64EXT y */,
				(GLint64EXT )(args[4]->NumberValue())/* GLint64EXT z */,
				(GLint64EXT )(args[5]->NumberValue())/* GLint64EXT w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
	PFNGLPROGRAMUNIFORM4I64VNVPROC methodp_glProgramUniform4i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4i64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniform4i64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint64EXT *)((int64_t)args[3]->NumberValue())/* const GLint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	PFNGLPROGRAMUNIFORM4IEXTPROC methodp_glProgramUniform4iEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4iEXT && args.Length() >= 6){
			obj->methodp_glProgramUniform4iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLint )(args[2]->NumberValue())/* GLint v0 */,
				(GLint )(args[3]->NumberValue())/* GLint v1 */,
				(GLint )(args[4]->NumberValue())/* GLint v2 */,
				(GLint )(args[5]->NumberValue())/* GLint v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
	PFNGLPROGRAMUNIFORM4IVPROC methodp_glProgramUniform4iv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4iv && args.Length() >= 4){
			obj->methodp_glProgramUniform4iv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
	PFNGLPROGRAMUNIFORM4IVEXTPROC methodp_glProgramUniform4ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4ivEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform4ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	PFNGLPROGRAMUNIFORM4UIPROC methodp_glProgramUniform4ui{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4ui && args.Length() >= 6){
			obj->methodp_glProgramUniform4ui(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v1 */,
				(GLuint )(args[4]->NumberValue())/* GLuint v2 */,
				(GLuint )(args[5]->NumberValue())/* GLuint v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
	PFNGLPROGRAMUNIFORM4UI64NVPROC methodp_glProgramUniform4ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4ui64NV && args.Length() >= 6){
			obj->methodp_glProgramUniform4ui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[3]->NumberValue())/* GLuint64EXT y */,
				(GLuint64EXT )(args[4]->NumberValue())/* GLuint64EXT z */,
				(GLuint64EXT )(args[5]->NumberValue())/* GLuint64EXT w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLPROGRAMUNIFORM4UI64VNVPROC methodp_glProgramUniform4ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4ui64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniform4ui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[3]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	PFNGLPROGRAMUNIFORM4UIEXTPROC methodp_glProgramUniform4uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4uiEXT && args.Length() >= 6){
			obj->methodp_glProgramUniform4uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v1 */,
				(GLuint )(args[4]->NumberValue())/* GLuint v2 */,
				(GLuint )(args[5]->NumberValue())/* GLuint v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
	PFNGLPROGRAMUNIFORM4UIVPROC methodp_glProgramUniform4uiv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4uiv && args.Length() >= 4){
			obj->methodp_glProgramUniform4uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
	PFNGLPROGRAMUNIFORM4UIVEXTPROC methodp_glProgramUniform4uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniform4uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniform4uivEXT && args.Length() >= 4){
			obj->methodp_glProgramUniform4uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value);
	PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC methodp_glProgramUniformHandleui64ARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformHandleui64ARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformHandleui64ARB && args.Length() >= 3){
			obj->methodp_glProgramUniformHandleui64ARB(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint64 )(args[2]->NumberValue())/* GLuint64 value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value);
	PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC methodp_glProgramUniformHandleui64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformHandleui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformHandleui64NV && args.Length() >= 3){
			obj->methodp_glProgramUniformHandleui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint64 )(args[2]->NumberValue())/* GLuint64 value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
	PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC methodp_glProgramUniformHandleui64vARB{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformHandleui64vARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformHandleui64vARB && args.Length() >= 4){
			obj->methodp_glProgramUniformHandleui64vARB(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint64 *)((int64_t)args[3]->NumberValue())/* const GLuint64 *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);
	PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC methodp_glProgramUniformHandleui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformHandleui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformHandleui64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniformHandleui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint64 *)((int64_t)args[3]->NumberValue())/* const GLuint64 *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX2DVPROC methodp_glProgramUniformMatrix2dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC methodp_glProgramUniformMatrix2dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX2FVPROC methodp_glProgramUniformMatrix2fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC methodp_glProgramUniformMatrix2fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC methodp_glProgramUniformMatrix2x3dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2x3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2x3dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2x3dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC methodp_glProgramUniformMatrix2x3dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2x3dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2x3dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2x3dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC methodp_glProgramUniformMatrix2x3fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2x3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2x3fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2x3fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC methodp_glProgramUniformMatrix2x3fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2x3fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2x3fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2x3fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC methodp_glProgramUniformMatrix2x4dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2x4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2x4dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2x4dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC methodp_glProgramUniformMatrix2x4dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2x4dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2x4dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2x4dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC methodp_glProgramUniformMatrix2x4fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2x4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2x4fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2x4fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC methodp_glProgramUniformMatrix2x4fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix2x4fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix2x4fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix2x4fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX3DVPROC methodp_glProgramUniformMatrix3dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC methodp_glProgramUniformMatrix3dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX3FVPROC methodp_glProgramUniformMatrix3fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC methodp_glProgramUniformMatrix3fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC methodp_glProgramUniformMatrix3x2dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3x2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3x2dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3x2dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC methodp_glProgramUniformMatrix3x2dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3x2dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3x2dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3x2dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC methodp_glProgramUniformMatrix3x2fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3x2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3x2fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3x2fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC methodp_glProgramUniformMatrix3x2fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3x2fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3x2fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3x2fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC methodp_glProgramUniformMatrix3x4dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3x4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3x4dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3x4dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC methodp_glProgramUniformMatrix3x4dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3x4dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3x4dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3x4dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC methodp_glProgramUniformMatrix3x4fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3x4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3x4fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3x4fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC methodp_glProgramUniformMatrix3x4fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix3x4fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix3x4fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix3x4fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX4DVPROC methodp_glProgramUniformMatrix4dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC methodp_glProgramUniformMatrix4dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX4FVPROC methodp_glProgramUniformMatrix4fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC methodp_glProgramUniformMatrix4fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC methodp_glProgramUniformMatrix4x2dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4x2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4x2dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4x2dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC methodp_glProgramUniformMatrix4x2dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4x2dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4x2dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4x2dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC methodp_glProgramUniformMatrix4x2fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4x2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4x2fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4x2fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC methodp_glProgramUniformMatrix4x2fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4x2fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4x2fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4x2fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC methodp_glProgramUniformMatrix4x3dv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4x3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4x3dv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4x3dv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC methodp_glProgramUniformMatrix4x3dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4x3dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4x3dvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4x3dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[4]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC methodp_glProgramUniformMatrix4x3fv{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4x3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4x3fv && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4x3fv(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC methodp_glProgramUniformMatrix4x3fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformMatrix4x3fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformMatrix4x3fvEXT && args.Length() >= 5){
			obj->methodp_glProgramUniformMatrix4x3fvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
	PFNGLPROGRAMUNIFORMUI64NVPROC methodp_glProgramUniformui64NV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformui64NV && args.Length() >= 3){
			obj->methodp_glProgramUniformui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLPROGRAMUNIFORMUI64VNVPROC methodp_glProgramUniformui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramUniformui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramUniformui64vNV && args.Length() >= 4){
			obj->methodp_glProgramUniformui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[3]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
	PFNGLPROGRAMVERTEXLIMITNVPROC methodp_glProgramVertexLimitNV{nullptr};
	static v8::Handle<v8::Value> method_glProgramVertexLimitNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProgramVertexLimitNV && args.Length() >= 2){
			obj->methodp_glProgramVertexLimitNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint limit */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);
	PFNGLPROVOKINGVERTEXPROC methodp_glProvokingVertex{nullptr};
	static v8::Handle<v8::Value> method_glProvokingVertex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProvokingVertex && args.Length() >= 1){
			obj->methodp_glProvokingVertex(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);
	PFNGLPROVOKINGVERTEXEXTPROC methodp_glProvokingVertexEXT{nullptr};
	static v8::Handle<v8::Value> method_glProvokingVertexEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glProvokingVertexEXT && args.Length() >= 1){
			obj->methodp_glProvokingVertexEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPUSHATTRIBPROC) (GLbitfield mask);
	PFNGLPUSHATTRIBPROC methodp_glPushAttrib{nullptr};
	static v8::Handle<v8::Value> method_glPushAttrib(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPushAttrib && args.Length() >= 1){
			obj->methodp_glPushAttrib(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBPROC) (GLbitfield mask);
	PFNGLPUSHCLIENTATTRIBPROC methodp_glPushClientAttrib{nullptr};
	static v8::Handle<v8::Value> method_glPushClientAttrib(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPushClientAttrib && args.Length() >= 1){
			obj->methodp_glPushClientAttrib(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
	PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC methodp_glPushClientAttribDefaultEXT{nullptr};
	static v8::Handle<v8::Value> method_glPushClientAttribDefaultEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPushClientAttribDefaultEXT && args.Length() >= 1){
			obj->methodp_glPushClientAttribDefaultEXT(
				(GLbitfield )(args[0]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
	PFNGLPUSHDEBUGGROUPPROC methodp_glPushDebugGroup{nullptr};
	static v8::Handle<v8::Value> method_glPushDebugGroup(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPushDebugGroup && args.Length() >= 4){
			obj->methodp_glPushDebugGroup(
				(GLenum )(args[0]->NumberValue())/* GLenum source */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[3]->NumberValue())/* const GLchar *message */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPKHRPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);
	PFNGLPUSHDEBUGGROUPKHRPROC methodp_glPushDebugGroupKHR{nullptr};
	static v8::Handle<v8::Value> method_glPushDebugGroupKHR(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPushDebugGroupKHR && args.Length() >= 4){
			obj->methodp_glPushDebugGroupKHR(
				(GLenum )(args[0]->NumberValue())/* GLenum source */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[3]->NumberValue())/* const GLchar *message */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar *marker);
	PFNGLPUSHGROUPMARKEREXTPROC methodp_glPushGroupMarkerEXT{nullptr};
	static v8::Handle<v8::Value> method_glPushGroupMarkerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPushGroupMarkerEXT && args.Length() >= 2){
			obj->methodp_glPushGroupMarkerEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei length */,
				(const GLchar *)((int64_t)args[1]->NumberValue())/* const GLchar *marker */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPUSHMATRIXPROC) ();
	PFNGLPUSHMATRIXPROC methodp_glPushMatrix{nullptr};
	static v8::Handle<v8::Value> method_glPushMatrix(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPushMatrix && args.Length() >= 0){
			obj->methodp_glPushMatrix(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLPUSHNAMEPROC) (GLuint name);
	PFNGLPUSHNAMEPROC methodp_glPushName{nullptr};
	static v8::Handle<v8::Value> method_glPushName(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glPushName && args.Length() >= 1){
			obj->methodp_glPushName(
				(GLuint )(args[0]->NumberValue())/* GLuint name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);
	PFNGLQUERYCOUNTERPROC methodp_glQueryCounter{nullptr};
	static v8::Handle<v8::Value> method_glQueryCounter(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glQueryCounter && args.Length() >= 2){
			obj->methodp_glQueryCounter(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLQUERYCOUNTEREXTPROC) (GLuint id, GLenum target);
	PFNGLQUERYCOUNTEREXTPROC methodp_glQueryCounterEXT{nullptr};
	static v8::Handle<v8::Value> method_glQueryCounterEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glQueryCounterEXT && args.Length() >= 2){
			obj->methodp_glQueryCounterEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLbitfield (APIENTRYP PFNGLQUERYMATRIXXOESPROC) (GLfixed *mantissa, GLint *exponent);
	PFNGLQUERYMATRIXXOESPROC methodp_glQueryMatrixxOES{nullptr};
	static v8::Handle<v8::Value> method_glQueryMatrixxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glQueryMatrixxOES && args.Length() >= 2){
			obj->methodp_glQueryMatrixxOES(
				(GLfixed *)((int64_t)args[0]->NumberValue())/* GLfixed *mantissa */,
				(GLint *)((int64_t)args[1]->NumberValue())/* GLint *exponent */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (GLenum target, GLuint id, GLenum pname, GLuint param);
	PFNGLQUERYOBJECTPARAMETERUIAMDPROC methodp_glQueryObjectParameteruiAMD{nullptr};
	static v8::Handle<v8::Value> method_glQueryObjectParameteruiAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glQueryObjectParameteruiAMD && args.Length() >= 4){
			obj->methodp_glQueryObjectParameteruiAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint id */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLuint )(args[3]->NumberValue())/* GLuint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2DPROC) (GLdouble x, GLdouble y);
	PFNGLRASTERPOS2DPROC methodp_glRasterPos2d{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2d && args.Length() >= 2){
			obj->methodp_glRasterPos2d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2DVPROC) (const GLdouble *v);
	PFNGLRASTERPOS2DVPROC methodp_glRasterPos2dv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2dv && args.Length() >= 1){
			obj->methodp_glRasterPos2dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2FPROC) (GLfloat x, GLfloat y);
	PFNGLRASTERPOS2FPROC methodp_glRasterPos2f{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2f && args.Length() >= 2){
			obj->methodp_glRasterPos2f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2FVPROC) (const GLfloat *v);
	PFNGLRASTERPOS2FVPROC methodp_glRasterPos2fv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2fv && args.Length() >= 1){
			obj->methodp_glRasterPos2fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2IPROC) (GLint x, GLint y);
	PFNGLRASTERPOS2IPROC methodp_glRasterPos2i{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2i && args.Length() >= 2){
			obj->methodp_glRasterPos2i(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2IVPROC) (const GLint *v);
	PFNGLRASTERPOS2IVPROC methodp_glRasterPos2iv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2iv && args.Length() >= 1){
			obj->methodp_glRasterPos2iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2SPROC) (GLshort x, GLshort y);
	PFNGLRASTERPOS2SPROC methodp_glRasterPos2s{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2s && args.Length() >= 2){
			obj->methodp_glRasterPos2s(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2SVPROC) (const GLshort *v);
	PFNGLRASTERPOS2SVPROC methodp_glRasterPos2sv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2sv && args.Length() >= 1){
			obj->methodp_glRasterPos2sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2XOESPROC) (GLfixed x, GLfixed y);
	PFNGLRASTERPOS2XOESPROC methodp_glRasterPos2xOES{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2xOES && args.Length() >= 2){
			obj->methodp_glRasterPos2xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS2XVOESPROC) (const GLfixed *coords);
	PFNGLRASTERPOS2XVOESPROC methodp_glRasterPos2xvOES{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos2xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos2xvOES && args.Length() >= 1){
			obj->methodp_glRasterPos2xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
	PFNGLRASTERPOS3DPROC methodp_glRasterPos3d{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3d && args.Length() >= 3){
			obj->methodp_glRasterPos3d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3DVPROC) (const GLdouble *v);
	PFNGLRASTERPOS3DVPROC methodp_glRasterPos3dv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3dv && args.Length() >= 1){
			obj->methodp_glRasterPos3dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
	PFNGLRASTERPOS3FPROC methodp_glRasterPos3f{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3f && args.Length() >= 3){
			obj->methodp_glRasterPos3f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3FVPROC) (const GLfloat *v);
	PFNGLRASTERPOS3FVPROC methodp_glRasterPos3fv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3fv && args.Length() >= 1){
			obj->methodp_glRasterPos3fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3IPROC) (GLint x, GLint y, GLint z);
	PFNGLRASTERPOS3IPROC methodp_glRasterPos3i{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3i && args.Length() >= 3){
			obj->methodp_glRasterPos3i(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3IVPROC) (const GLint *v);
	PFNGLRASTERPOS3IVPROC methodp_glRasterPos3iv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3iv && args.Length() >= 1){
			obj->methodp_glRasterPos3iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3SPROC) (GLshort x, GLshort y, GLshort z);
	PFNGLRASTERPOS3SPROC methodp_glRasterPos3s{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3s && args.Length() >= 3){
			obj->methodp_glRasterPos3s(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3SVPROC) (const GLshort *v);
	PFNGLRASTERPOS3SVPROC methodp_glRasterPos3sv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3sv && args.Length() >= 1){
			obj->methodp_glRasterPos3sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3XOESPROC) (GLfixed x, GLfixed y, GLfixed z);
	PFNGLRASTERPOS3XOESPROC methodp_glRasterPos3xOES{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3xOES && args.Length() >= 3){
			obj->methodp_glRasterPos3xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS3XVOESPROC) (const GLfixed *coords);
	PFNGLRASTERPOS3XVOESPROC methodp_glRasterPos3xvOES{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos3xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos3xvOES && args.Length() >= 1){
			obj->methodp_glRasterPos3xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4DPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLRASTERPOS4DPROC methodp_glRasterPos4d{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4d && args.Length() >= 4){
			obj->methodp_glRasterPos4d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4DVPROC) (const GLdouble *v);
	PFNGLRASTERPOS4DVPROC methodp_glRasterPos4dv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4dv && args.Length() >= 1){
			obj->methodp_glRasterPos4dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4FPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLRASTERPOS4FPROC methodp_glRasterPos4f{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4f && args.Length() >= 4){
			obj->methodp_glRasterPos4f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4FVPROC) (const GLfloat *v);
	PFNGLRASTERPOS4FVPROC methodp_glRasterPos4fv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4fv && args.Length() >= 1){
			obj->methodp_glRasterPos4fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4IPROC) (GLint x, GLint y, GLint z, GLint w);
	PFNGLRASTERPOS4IPROC methodp_glRasterPos4i{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4i && args.Length() >= 4){
			obj->methodp_glRasterPos4i(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */,
				(GLint )(args[3]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4IVPROC) (const GLint *v);
	PFNGLRASTERPOS4IVPROC methodp_glRasterPos4iv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4iv && args.Length() >= 1){
			obj->methodp_glRasterPos4iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4SPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
	PFNGLRASTERPOS4SPROC methodp_glRasterPos4s{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4s && args.Length() >= 4){
			obj->methodp_glRasterPos4s(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */,
				(GLshort )(args[3]->NumberValue())/* GLshort w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4SVPROC) (const GLshort *v);
	PFNGLRASTERPOS4SVPROC methodp_glRasterPos4sv{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4sv && args.Length() >= 1){
			obj->methodp_glRasterPos4sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4XOESPROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed w);
	PFNGLRASTERPOS4XOESPROC methodp_glRasterPos4xOES{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4xOES && args.Length() >= 4){
			obj->methodp_glRasterPos4xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed z */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRASTERPOS4XVOESPROC) (const GLfixed *coords);
	PFNGLRASTERPOS4XVOESPROC methodp_glRasterPos4xvOES{nullptr};
	static v8::Handle<v8::Value> method_glRasterPos4xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRasterPos4xvOES && args.Length() >= 1){
			obj->methodp_glRasterPos4xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREADBUFFERPROC) (GLenum mode);
	PFNGLREADBUFFERPROC methodp_glReadBuffer{nullptr};
	static v8::Handle<v8::Value> method_glReadBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReadBuffer && args.Length() >= 1){
			obj->methodp_glReadBuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREADBUFFERINDEXEDEXTPROC) (GLenum src, GLint index);
	PFNGLREADBUFFERINDEXEDEXTPROC methodp_glReadBufferIndexedEXT{nullptr};
	static v8::Handle<v8::Value> method_glReadBufferIndexedEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReadBufferIndexedEXT && args.Length() >= 2){
			obj->methodp_glReadBufferIndexedEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum src */,
				(GLint )(args[1]->NumberValue())/* GLint index */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREADBUFFERNVPROC) (GLenum mode);
	PFNGLREADBUFFERNVPROC methodp_glReadBufferNV{nullptr};
	static v8::Handle<v8::Value> method_glReadBufferNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReadBufferNV && args.Length() >= 1){
			obj->methodp_glReadBufferNV(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);
	PFNGLREADINSTRUMENTSSGIXPROC methodp_glReadInstrumentsSGIX{nullptr};
	static v8::Handle<v8::Value> method_glReadInstrumentsSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReadInstrumentsSGIX && args.Length() >= 1){
			obj->methodp_glReadInstrumentsSGIX(
				(GLint )(args[0]->NumberValue())/* GLint marker */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
	PFNGLREADPIXELSPROC methodp_glReadPixels{nullptr};
	static v8::Handle<v8::Value> method_glReadPixels(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReadPixels && args.Length() >= 7){
			obj->methodp_glReadPixels(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(void *)((int64_t)args[6]->NumberValue())/* void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
	PFNGLREADNPIXELSARBPROC methodp_glReadnPixelsARB{nullptr};
	static v8::Handle<v8::Value> method_glReadnPixelsARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReadnPixelsARB && args.Length() >= 8){
			obj->methodp_glReadnPixelsARB(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei bufSize */,
				(void *)((int64_t)args[7]->NumberValue())/* void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREADNPIXELSEXTPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
	PFNGLREADNPIXELSEXTPROC methodp_glReadnPixelsEXT{nullptr};
	static v8::Handle<v8::Value> method_glReadnPixelsEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReadnPixelsEXT && args.Length() >= 8){
			obj->methodp_glReadnPixelsEXT(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei bufSize */,
				(void *)((int64_t)args[7]->NumberValue())/* void *data */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTDPROC) (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
	PFNGLRECTDPROC methodp_glRectd{nullptr};
	static v8::Handle<v8::Value> method_glRectd(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRectd && args.Length() >= 4){
			obj->methodp_glRectd(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x1 */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y1 */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble x2 */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble y2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTDVPROC) (const GLdouble *v1, const GLdouble *v2);
	PFNGLRECTDVPROC methodp_glRectdv{nullptr};
	static v8::Handle<v8::Value> method_glRectdv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRectdv && args.Length() >= 2){
			obj->methodp_glRectdv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v1 */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTFPROC) (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
	PFNGLRECTFPROC methodp_glRectf{nullptr};
	static v8::Handle<v8::Value> method_glRectf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRectf && args.Length() >= 4){
			obj->methodp_glRectf(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x1 */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y1 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat x2 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat y2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTFVPROC) (const GLfloat *v1, const GLfloat *v2);
	PFNGLRECTFVPROC methodp_glRectfv{nullptr};
	static v8::Handle<v8::Value> method_glRectfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRectfv && args.Length() >= 2){
			obj->methodp_glRectfv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v1 */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTIPROC) (GLint x1, GLint y1, GLint x2, GLint y2);
	PFNGLRECTIPROC methodp_glRecti{nullptr};
	static v8::Handle<v8::Value> method_glRecti(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRecti && args.Length() >= 4){
			obj->methodp_glRecti(
				(GLint )(args[0]->NumberValue())/* GLint x1 */,
				(GLint )(args[1]->NumberValue())/* GLint y1 */,
				(GLint )(args[2]->NumberValue())/* GLint x2 */,
				(GLint )(args[3]->NumberValue())/* GLint y2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTIVPROC) (const GLint *v1, const GLint *v2);
	PFNGLRECTIVPROC methodp_glRectiv{nullptr};
	static v8::Handle<v8::Value> method_glRectiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRectiv && args.Length() >= 2){
			obj->methodp_glRectiv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v1 */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTSPROC) (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
	PFNGLRECTSPROC methodp_glRects{nullptr};
	static v8::Handle<v8::Value> method_glRects(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRects && args.Length() >= 4){
			obj->methodp_glRects(
				(GLshort )(args[0]->NumberValue())/* GLshort x1 */,
				(GLshort )(args[1]->NumberValue())/* GLshort y1 */,
				(GLshort )(args[2]->NumberValue())/* GLshort x2 */,
				(GLshort )(args[3]->NumberValue())/* GLshort y2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTSVPROC) (const GLshort *v1, const GLshort *v2);
	PFNGLRECTSVPROC methodp_glRectsv{nullptr};
	static v8::Handle<v8::Value> method_glRectsv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRectsv && args.Length() >= 2){
			obj->methodp_glRectsv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v1 */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTXOESPROC) (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);
	PFNGLRECTXOESPROC methodp_glRectxOES{nullptr};
	static v8::Handle<v8::Value> method_glRectxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRectxOES && args.Length() >= 4){
			obj->methodp_glRectxOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x1 */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y1 */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed x2 */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed y2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRECTXVOESPROC) (const GLfixed *v1, const GLfixed *v2);
	PFNGLRECTXVOESPROC methodp_glRectxvOES{nullptr};
	static v8::Handle<v8::Value> method_glRectxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRectxvOES && args.Length() >= 2){
			obj->methodp_glRectxvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *v1 */,
				(const GLfixed *)((int64_t)args[1]->NumberValue())/* const GLfixed *v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);
	PFNGLREFERENCEPLANESGIXPROC methodp_glReferencePlaneSGIX{nullptr};
	static v8::Handle<v8::Value> method_glReferencePlaneSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReferencePlaneSGIX && args.Length() >= 1){
			obj->methodp_glReferencePlaneSGIX(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *equation */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) ();
	PFNGLRELEASESHADERCOMPILERPROC methodp_glReleaseShaderCompiler{nullptr};
	static v8::Handle<v8::Value> method_glReleaseShaderCompiler(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReleaseShaderCompiler && args.Length() >= 0){
			obj->methodp_glReleaseShaderCompiler(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLint (APIENTRYP PFNGLRENDERMODEPROC) (GLenum mode);
	PFNGLRENDERMODEPROC methodp_glRenderMode{nullptr};
	static v8::Handle<v8::Value> method_glRenderMode(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderMode && args.Length() >= 1){
			obj->methodp_glRenderMode(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEPROC methodp_glRenderbufferStorage{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorage && args.Length() >= 4){
			obj->methodp_glRenderbufferStorage(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEEXTPROC methodp_glRenderbufferStorageEXT{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageEXT && args.Length() >= 4){
			obj->methodp_glRenderbufferStorageEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC methodp_glRenderbufferStorageMultisample{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageMultisample(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageMultisample && args.Length() >= 5){
			obj->methodp_glRenderbufferStorageMultisample(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC methodp_glRenderbufferStorageMultisampleANGLE{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageMultisampleANGLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageMultisampleANGLE && args.Length() >= 5){
			obj->methodp_glRenderbufferStorageMultisampleANGLE(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC methodp_glRenderbufferStorageMultisampleAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageMultisampleAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageMultisampleAPPLE && args.Length() >= 5){
			obj->methodp_glRenderbufferStorageMultisampleAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC methodp_glRenderbufferStorageMultisampleCoverageNV{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageMultisampleCoverageNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageMultisampleCoverageNV && args.Length() >= 6){
			obj->methodp_glRenderbufferStorageMultisampleCoverageNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei coverageSamples */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei colorSamples */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC methodp_glRenderbufferStorageMultisampleEXT{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageMultisampleEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageMultisampleEXT && args.Length() >= 5){
			obj->methodp_glRenderbufferStorageMultisampleEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC methodp_glRenderbufferStorageMultisampleIMG{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageMultisampleIMG(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageMultisampleIMG && args.Length() >= 5){
			obj->methodp_glRenderbufferStorageMultisampleIMG(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC methodp_glRenderbufferStorageMultisampleNV{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageMultisampleNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageMultisampleNV && args.Length() >= 5){
			obj->methodp_glRenderbufferStorageMultisampleNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLRENDERBUFFERSTORAGEOESPROC methodp_glRenderbufferStorageOES{nullptr};
	static v8::Handle<v8::Value> method_glRenderbufferStorageOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRenderbufferStorageOES && args.Length() >= 4){
			obj->methodp_glRenderbufferStorageOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void **pointer);
	PFNGLREPLACEMENTCODEPOINTERSUNPROC methodp_glReplacementCodePointerSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodePointerSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodePointerSUN && args.Length() >= 3){
			obj->methodp_glReplacementCodePointerSUN(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void **)((int64_t)args[2]->NumberValue())/* const void **pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
	PFNGLREPLACEMENTCODEUBSUNPROC methodp_glReplacementCodeubSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeubSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeubSUN && args.Length() >= 1){
			obj->methodp_glReplacementCodeubSUN(
				(GLubyte )(args[0]->NumberValue())/* GLubyte code */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);
	PFNGLREPLACEMENTCODEUBVSUNPROC methodp_glReplacementCodeubvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeubvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeubvSUN && args.Length() >= 1){
			obj->methodp_glReplacementCodeubvSUN(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *code */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
	PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC methodp_glReplacementCodeuiColor3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiColor3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiColor3fVertex3fSUN && args.Length() >= 7){
			obj->methodp_glReplacementCodeuiColor3fVertex3fSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint rc */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat g */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
	PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC methodp_glReplacementCodeuiColor3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiColor3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiColor3fVertex3fvSUN && args.Length() >= 3){
			obj->methodp_glReplacementCodeuiColor3fVertex3fvSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *rc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *c */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC methodp_glReplacementCodeuiColor4fNormal3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiColor4fNormal3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fSUN && args.Length() >= 11){
			obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint rc */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat g */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat a */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[9]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[10]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
	PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC methodp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN && args.Length() >= 4){
			obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *rc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *c */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
	PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC methodp_glReplacementCodeuiColor4ubVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiColor4ubVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiColor4ubVertex3fSUN && args.Length() >= 8){
			obj->methodp_glReplacementCodeuiColor4ubVertex3fSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint rc */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte r */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte g */,
				(GLubyte )(args[3]->NumberValue())/* GLubyte b */,
				(GLubyte )(args[4]->NumberValue())/* GLubyte a */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
	PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC methodp_glReplacementCodeuiColor4ubVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiColor4ubVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiColor4ubVertex3fvSUN && args.Length() >= 3){
			obj->methodp_glReplacementCodeuiColor4ubVertex3fvSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *rc */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *c */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC methodp_glReplacementCodeuiNormal3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiNormal3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiNormal3fVertex3fSUN && args.Length() >= 7){
			obj->methodp_glReplacementCodeuiNormal3fVertex3fSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint rc */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
	PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC methodp_glReplacementCodeuiNormal3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiNormal3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiNormal3fVertex3fvSUN && args.Length() >= 3){
			obj->methodp_glReplacementCodeuiNormal3fVertex3fvSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *rc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
	PFNGLREPLACEMENTCODEUISUNPROC methodp_glReplacementCodeuiSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiSUN && args.Length() >= 1){
			obj->methodp_glReplacementCodeuiSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint code */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN && args.Length() >= 13){
			obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint rc */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat g */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat a */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[9]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[10]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[11]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[12]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
	PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN && args.Length() >= 5){
			obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *rc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *c */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[4]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN && args.Length() >= 9){
			obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint rc */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
	PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN && args.Length() >= 4){
			obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *rc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
	PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC methodp_glReplacementCodeuiTexCoord2fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiTexCoord2fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiTexCoord2fVertex3fSUN && args.Length() >= 6){
			obj->methodp_glReplacementCodeuiTexCoord2fVertex3fSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint rc */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
	PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC methodp_glReplacementCodeuiTexCoord2fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiTexCoord2fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiTexCoord2fVertex3fvSUN && args.Length() >= 3){
			obj->methodp_glReplacementCodeuiTexCoord2fVertex3fvSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *rc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
	PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC methodp_glReplacementCodeuiVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiVertex3fSUN && args.Length() >= 4){
			obj->methodp_glReplacementCodeuiVertex3fSUN(
				(GLuint )(args[0]->NumberValue())/* GLuint rc */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);
	PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC methodp_glReplacementCodeuiVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuiVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuiVertex3fvSUN && args.Length() >= 2){
			obj->methodp_glReplacementCodeuiVertex3fvSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *rc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);
	PFNGLREPLACEMENTCODEUIVSUNPROC methodp_glReplacementCodeuivSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeuivSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeuivSUN && args.Length() >= 1){
			obj->methodp_glReplacementCodeuivSUN(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *code */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
	PFNGLREPLACEMENTCODEUSSUNPROC methodp_glReplacementCodeusSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeusSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeusSUN && args.Length() >= 1){
			obj->methodp_glReplacementCodeusSUN(
				(GLushort )(args[0]->NumberValue())/* GLushort code */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);
	PFNGLREPLACEMENTCODEUSVSUNPROC methodp_glReplacementCodeusvSUN{nullptr};
	static v8::Handle<v8::Value> method_glReplacementCodeusvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glReplacementCodeusvSUN && args.Length() >= 1){
			obj->methodp_glReplacementCodeusvSUN(
				(const GLushort *)((int64_t)args[0]->NumberValue())/* const GLushort *code */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
	PFNGLREQUESTRESIDENTPROGRAMSNVPROC methodp_glRequestResidentProgramsNV{nullptr};
	static v8::Handle<v8::Value> method_glRequestResidentProgramsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRequestResidentProgramsNV && args.Length() >= 2){
			obj->methodp_glRequestResidentProgramsNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei n */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *programs */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC) (GLenum target);
	PFNGLRESETHISTOGRAMPROC methodp_glResetHistogram{nullptr};
	static v8::Handle<v8::Value> method_glResetHistogram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glResetHistogram && args.Length() >= 1){
			obj->methodp_glResetHistogram(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
	PFNGLRESETHISTOGRAMEXTPROC methodp_glResetHistogramEXT{nullptr};
	static v8::Handle<v8::Value> method_glResetHistogramEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glResetHistogramEXT && args.Length() >= 1){
			obj->methodp_glResetHistogramEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRESETMINMAXPROC) (GLenum target);
	PFNGLRESETMINMAXPROC methodp_glResetMinmax{nullptr};
	static v8::Handle<v8::Value> method_glResetMinmax(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glResetMinmax && args.Length() >= 1){
			obj->methodp_glResetMinmax(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC) (GLenum target);
	PFNGLRESETMINMAXEXTPROC methodp_glResetMinmaxEXT{nullptr};
	static v8::Handle<v8::Value> method_glResetMinmaxEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glResetMinmaxEXT && args.Length() >= 1){
			obj->methodp_glResetMinmaxEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC) ();
	PFNGLRESIZEBUFFERSMESAPROC methodp_glResizeBuffersMESA{nullptr};
	static v8::Handle<v8::Value> method_glResizeBuffersMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glResizeBuffersMESA && args.Length() >= 0){
			obj->methodp_glResizeBuffersMESA(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC) ();
	PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC methodp_glResolveMultisampleFramebufferAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glResolveMultisampleFramebufferAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glResolveMultisampleFramebufferAPPLE && args.Length() >= 0){
			obj->methodp_glResolveMultisampleFramebufferAPPLE(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) ();
	PFNGLRESUMETRANSFORMFEEDBACKPROC methodp_glResumeTransformFeedback{nullptr};
	static v8::Handle<v8::Value> method_glResumeTransformFeedback(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glResumeTransformFeedback && args.Length() >= 0){
			obj->methodp_glResumeTransformFeedback(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC) ();
	PFNGLRESUMETRANSFORMFEEDBACKNVPROC methodp_glResumeTransformFeedbackNV{nullptr};
	static v8::Handle<v8::Value> method_glResumeTransformFeedbackNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glResumeTransformFeedbackNV && args.Length() >= 0){
			obj->methodp_glResumeTransformFeedbackNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLROTATEDPROC) (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	PFNGLROTATEDPROC methodp_glRotated{nullptr};
	static v8::Handle<v8::Value> method_glRotated(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRotated && args.Length() >= 4){
			obj->methodp_glRotated(
				(GLdouble )(args[0]->NumberValue())/* GLdouble angle */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLROTATEFPROC) (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	PFNGLROTATEFPROC methodp_glRotatef{nullptr};
	static v8::Handle<v8::Value> method_glRotatef(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRotatef && args.Length() >= 4){
			obj->methodp_glRotatef(
				(GLfloat )(args[0]->NumberValue())/* GLfloat angle */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLROTATEXPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
	PFNGLROTATEXPROC methodp_glRotatex{nullptr};
	static v8::Handle<v8::Value> method_glRotatex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRotatex && args.Length() >= 4){
			obj->methodp_glRotatex(
				(GLfixed )(args[0]->NumberValue())/* GLfixed angle */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLROTATEXOESPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
	PFNGLROTATEXOESPROC methodp_glRotatexOES{nullptr};
	static v8::Handle<v8::Value> method_glRotatexOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glRotatexOES && args.Length() >= 4){
			obj->methodp_glRotatexOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed angle */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert);
	PFNGLSAMPLECOVERAGEPROC methodp_glSampleCoverage{nullptr};
	static v8::Handle<v8::Value> method_glSampleCoverage(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleCoverage && args.Length() >= 2){
			obj->methodp_glSampleCoverage(
				(GLfloat )(args[0]->NumberValue())/* GLfloat value */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean invert */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC) (GLfloat value, GLboolean invert);
	PFNGLSAMPLECOVERAGEARBPROC methodp_glSampleCoverageARB{nullptr};
	static v8::Handle<v8::Value> method_glSampleCoverageARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleCoverageARB && args.Length() >= 2){
			obj->methodp_glSampleCoverageARB(
				(GLfloat )(args[0]->NumberValue())/* GLfloat value */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean invert */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLECOVERAGEOESPROC) (GLfixed value, GLboolean invert);
	PFNGLSAMPLECOVERAGEOESPROC methodp_glSampleCoverageOES{nullptr};
	static v8::Handle<v8::Value> method_glSampleCoverageOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleCoverageOES && args.Length() >= 2){
			obj->methodp_glSampleCoverageOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed value */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean invert */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLECOVERAGEXPROC) (GLclampx value, GLboolean invert);
	PFNGLSAMPLECOVERAGEXPROC methodp_glSampleCoveragex{nullptr};
	static v8::Handle<v8::Value> method_glSampleCoveragex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleCoveragex && args.Length() >= 2){
			obj->methodp_glSampleCoveragex(
				(GLclampx )(args[0]->NumberValue())/* GLclampx value */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean invert */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLECOVERAGEXOESPROC) (GLclampx value, GLboolean invert);
	PFNGLSAMPLECOVERAGEXOESPROC methodp_glSampleCoveragexOES{nullptr};
	static v8::Handle<v8::Value> method_glSampleCoveragexOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleCoveragexOES && args.Length() >= 2){
			obj->methodp_glSampleCoveragexOES(
				(GLclampx )(args[0]->NumberValue())/* GLclampx value */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean invert */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
	PFNGLSAMPLEMAPATIPROC methodp_glSampleMapATI{nullptr};
	static v8::Handle<v8::Value> method_glSampleMapATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleMapATI && args.Length() >= 3){
			obj->methodp_glSampleMapATI(
				(GLuint )(args[0]->NumberValue())/* GLuint dst */,
				(GLuint )(args[1]->NumberValue())/* GLuint interp */,
				(GLenum )(args[2]->NumberValue())/* GLenum swizzle */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
	PFNGLSAMPLEMASKEXTPROC methodp_glSampleMaskEXT{nullptr};
	static v8::Handle<v8::Value> method_glSampleMaskEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleMaskEXT && args.Length() >= 2){
			obj->methodp_glSampleMaskEXT(
				(GLclampf )(args[0]->NumberValue())/* GLclampf value */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean invert */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);
	PFNGLSAMPLEMASKINDEXEDNVPROC methodp_glSampleMaskIndexedNV{nullptr};
	static v8::Handle<v8::Value> method_glSampleMaskIndexedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleMaskIndexedNV && args.Length() >= 2){
			obj->methodp_glSampleMaskIndexedNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
	PFNGLSAMPLEMASKSGISPROC methodp_glSampleMaskSGIS{nullptr};
	static v8::Handle<v8::Value> method_glSampleMaskSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleMaskSGIS && args.Length() >= 2){
			obj->methodp_glSampleMaskSGIS(
				(GLclampf )(args[0]->NumberValue())/* GLclampf value */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean invert */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask);
	PFNGLSAMPLEMASKIPROC methodp_glSampleMaski{nullptr};
	static v8::Handle<v8::Value> method_glSampleMaski(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSampleMaski && args.Length() >= 2){
			obj->methodp_glSampleMaski(
				(GLuint )(args[0]->NumberValue())/* GLuint maskNumber */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
	PFNGLSAMPLEPATTERNEXTPROC methodp_glSamplePatternEXT{nullptr};
	static v8::Handle<v8::Value> method_glSamplePatternEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplePatternEXT && args.Length() >= 1){
			obj->methodp_glSamplePatternEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pattern */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
	PFNGLSAMPLEPATTERNSGISPROC methodp_glSamplePatternSGIS{nullptr};
	static v8::Handle<v8::Value> method_glSamplePatternSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplePatternSGIS && args.Length() >= 1){
			obj->methodp_glSamplePatternSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum pattern */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
	PFNGLSAMPLERPARAMETERIIVPROC methodp_glSamplerParameterIiv{nullptr};
	static v8::Handle<v8::Value> method_glSamplerParameterIiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplerParameterIiv && args.Length() >= 3){
			obj->methodp_glSamplerParameterIiv(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVEXTPROC) (GLuint sampler, GLenum pname, const GLint *param);
	PFNGLSAMPLERPARAMETERIIVEXTPROC methodp_glSamplerParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glSamplerParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplerParameterIivEXT && args.Length() >= 3){
			obj->methodp_glSamplerParameterIivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);
	PFNGLSAMPLERPARAMETERIUIVPROC methodp_glSamplerParameterIuiv{nullptr};
	static v8::Handle<v8::Value> method_glSamplerParameterIuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplerParameterIuiv && args.Length() >= 3){
			obj->methodp_glSamplerParameterIuiv(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVEXTPROC) (GLuint sampler, GLenum pname, const GLuint *param);
	PFNGLSAMPLERPARAMETERIUIVEXTPROC methodp_glSamplerParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glSamplerParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplerParameterIuivEXT && args.Length() >= 3){
			obj->methodp_glSamplerParameterIuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);
	PFNGLSAMPLERPARAMETERFPROC methodp_glSamplerParameterf{nullptr};
	static v8::Handle<v8::Value> method_glSamplerParameterf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplerParameterf && args.Length() >= 3){
			obj->methodp_glSamplerParameterf(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);
	PFNGLSAMPLERPARAMETERFVPROC methodp_glSamplerParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glSamplerParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplerParameterfv && args.Length() >= 3){
			obj->methodp_glSamplerParameterfv(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);
	PFNGLSAMPLERPARAMETERIPROC methodp_glSamplerParameteri{nullptr};
	static v8::Handle<v8::Value> method_glSamplerParameteri(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplerParameteri && args.Length() >= 3){
			obj->methodp_glSamplerParameteri(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
	PFNGLSAMPLERPARAMETERIVPROC methodp_glSamplerParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glSamplerParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSamplerParameteriv && args.Length() >= 3){
			obj->methodp_glSamplerParameteriv(
				(GLuint )(args[0]->NumberValue())/* GLuint sampler */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSCALEDPROC) (GLdouble x, GLdouble y, GLdouble z);
	PFNGLSCALEDPROC methodp_glScaled{nullptr};
	static v8::Handle<v8::Value> method_glScaled(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glScaled && args.Length() >= 3){
			obj->methodp_glScaled(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSCALEFPROC) (GLfloat x, GLfloat y, GLfloat z);
	PFNGLSCALEFPROC methodp_glScalef{nullptr};
	static v8::Handle<v8::Value> method_glScalef(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glScalef && args.Length() >= 3){
			obj->methodp_glScalef(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSCALEXPROC) (GLfixed x, GLfixed y, GLfixed z);
	PFNGLSCALEXPROC methodp_glScalex{nullptr};
	static v8::Handle<v8::Value> method_glScalex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glScalex && args.Length() >= 3){
			obj->methodp_glScalex(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSCALEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);
	PFNGLSCALEXOESPROC methodp_glScalexOES{nullptr};
	static v8::Handle<v8::Value> method_glScalexOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glScalexOES && args.Length() >= 3){
			obj->methodp_glScalexOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLSCISSORPROC methodp_glScissor{nullptr};
	static v8::Handle<v8::Value> method_glScissor(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glScissor && args.Length() >= 4){
			obj->methodp_glScissor(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);
	PFNGLSCISSORARRAYVPROC methodp_glScissorArrayv{nullptr};
	static v8::Handle<v8::Value> method_glScissorArrayv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glScissorArrayv && args.Length() >= 3){
			obj->methodp_glScissorArrayv(
				(GLuint )(args[0]->NumberValue())/* GLuint first */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
	PFNGLSCISSORINDEXEDPROC methodp_glScissorIndexed{nullptr};
	static v8::Handle<v8::Value> method_glScissorIndexed(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glScissorIndexed && args.Length() >= 5){
			obj->methodp_glScissorIndexed(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint left */,
				(GLint )(args[2]->NumberValue())/* GLint bottom */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);
	PFNGLSCISSORINDEXEDVPROC methodp_glScissorIndexedv{nullptr};
	static v8::Handle<v8::Value> method_glScissorIndexedv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glScissorIndexedv && args.Length() >= 2){
			obj->methodp_glScissorIndexedv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
	PFNGLSECONDARYCOLOR3BPROC methodp_glSecondaryColor3b{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3b(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3b && args.Length() >= 3){
			obj->methodp_glSecondaryColor3b(
				(GLbyte )(args[0]->NumberValue())/* GLbyte red */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte green */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
	PFNGLSECONDARYCOLOR3BEXTPROC methodp_glSecondaryColor3bEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3bEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3bEXT && args.Length() >= 3){
			obj->methodp_glSecondaryColor3bEXT(
				(GLbyte )(args[0]->NumberValue())/* GLbyte red */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte green */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
	PFNGLSECONDARYCOLOR3BVPROC methodp_glSecondaryColor3bv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3bv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3bv && args.Length() >= 1){
			obj->methodp_glSecondaryColor3bv(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
	PFNGLSECONDARYCOLOR3BVEXTPROC methodp_glSecondaryColor3bvEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3bvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3bvEXT && args.Length() >= 1){
			obj->methodp_glSecondaryColor3bvEXT(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
	PFNGLSECONDARYCOLOR3DPROC methodp_glSecondaryColor3d{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3d && args.Length() >= 3){
			obj->methodp_glSecondaryColor3d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble red */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble green */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
	PFNGLSECONDARYCOLOR3DEXTPROC methodp_glSecondaryColor3dEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3dEXT && args.Length() >= 3){
			obj->methodp_glSecondaryColor3dEXT(
				(GLdouble )(args[0]->NumberValue())/* GLdouble red */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble green */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
	PFNGLSECONDARYCOLOR3DVPROC methodp_glSecondaryColor3dv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3dv && args.Length() >= 1){
			obj->methodp_glSecondaryColor3dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
	PFNGLSECONDARYCOLOR3DVEXTPROC methodp_glSecondaryColor3dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3dvEXT && args.Length() >= 1){
			obj->methodp_glSecondaryColor3dvEXT(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
	PFNGLSECONDARYCOLOR3FPROC methodp_glSecondaryColor3f{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3f && args.Length() >= 3){
			obj->methodp_glSecondaryColor3f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat red */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat green */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
	PFNGLSECONDARYCOLOR3FEXTPROC methodp_glSecondaryColor3fEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3fEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3fEXT && args.Length() >= 3){
			obj->methodp_glSecondaryColor3fEXT(
				(GLfloat )(args[0]->NumberValue())/* GLfloat red */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat green */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
	PFNGLSECONDARYCOLOR3FVPROC methodp_glSecondaryColor3fv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3fv && args.Length() >= 1){
			obj->methodp_glSecondaryColor3fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
	PFNGLSECONDARYCOLOR3FVEXTPROC methodp_glSecondaryColor3fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3fvEXT && args.Length() >= 1){
			obj->methodp_glSecondaryColor3fvEXT(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
	PFNGLSECONDARYCOLOR3HNVPROC methodp_glSecondaryColor3hNV{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3hNV && args.Length() >= 3){
			obj->methodp_glSecondaryColor3hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV red */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV green */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);
	PFNGLSECONDARYCOLOR3HVNVPROC methodp_glSecondaryColor3hvNV{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3hvNV && args.Length() >= 1){
			obj->methodp_glSecondaryColor3hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
	PFNGLSECONDARYCOLOR3IPROC methodp_glSecondaryColor3i{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3i && args.Length() >= 3){
			obj->methodp_glSecondaryColor3i(
				(GLint )(args[0]->NumberValue())/* GLint red */,
				(GLint )(args[1]->NumberValue())/* GLint green */,
				(GLint )(args[2]->NumberValue())/* GLint blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
	PFNGLSECONDARYCOLOR3IEXTPROC methodp_glSecondaryColor3iEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3iEXT && args.Length() >= 3){
			obj->methodp_glSecondaryColor3iEXT(
				(GLint )(args[0]->NumberValue())/* GLint red */,
				(GLint )(args[1]->NumberValue())/* GLint green */,
				(GLint )(args[2]->NumberValue())/* GLint blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
	PFNGLSECONDARYCOLOR3IVPROC methodp_glSecondaryColor3iv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3iv && args.Length() >= 1){
			obj->methodp_glSecondaryColor3iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
	PFNGLSECONDARYCOLOR3IVEXTPROC methodp_glSecondaryColor3ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3ivEXT && args.Length() >= 1){
			obj->methodp_glSecondaryColor3ivEXT(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
	PFNGLSECONDARYCOLOR3SPROC methodp_glSecondaryColor3s{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3s && args.Length() >= 3){
			obj->methodp_glSecondaryColor3s(
				(GLshort )(args[0]->NumberValue())/* GLshort red */,
				(GLshort )(args[1]->NumberValue())/* GLshort green */,
				(GLshort )(args[2]->NumberValue())/* GLshort blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
	PFNGLSECONDARYCOLOR3SEXTPROC methodp_glSecondaryColor3sEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3sEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3sEXT && args.Length() >= 3){
			obj->methodp_glSecondaryColor3sEXT(
				(GLshort )(args[0]->NumberValue())/* GLshort red */,
				(GLshort )(args[1]->NumberValue())/* GLshort green */,
				(GLshort )(args[2]->NumberValue())/* GLshort blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
	PFNGLSECONDARYCOLOR3SVPROC methodp_glSecondaryColor3sv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3sv && args.Length() >= 1){
			obj->methodp_glSecondaryColor3sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
	PFNGLSECONDARYCOLOR3SVEXTPROC methodp_glSecondaryColor3svEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3svEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3svEXT && args.Length() >= 1){
			obj->methodp_glSecondaryColor3svEXT(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
	PFNGLSECONDARYCOLOR3UBPROC methodp_glSecondaryColor3ub{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3ub(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3ub && args.Length() >= 3){
			obj->methodp_glSecondaryColor3ub(
				(GLubyte )(args[0]->NumberValue())/* GLubyte red */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte green */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
	PFNGLSECONDARYCOLOR3UBEXTPROC methodp_glSecondaryColor3ubEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3ubEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3ubEXT && args.Length() >= 3){
			obj->methodp_glSecondaryColor3ubEXT(
				(GLubyte )(args[0]->NumberValue())/* GLubyte red */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte green */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
	PFNGLSECONDARYCOLOR3UBVPROC methodp_glSecondaryColor3ubv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3ubv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3ubv && args.Length() >= 1){
			obj->methodp_glSecondaryColor3ubv(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
	PFNGLSECONDARYCOLOR3UBVEXTPROC methodp_glSecondaryColor3ubvEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3ubvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3ubvEXT && args.Length() >= 1){
			obj->methodp_glSecondaryColor3ubvEXT(
				(const GLubyte *)((int64_t)args[0]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
	PFNGLSECONDARYCOLOR3UIPROC methodp_glSecondaryColor3ui{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3ui && args.Length() >= 3){
			obj->methodp_glSecondaryColor3ui(
				(GLuint )(args[0]->NumberValue())/* GLuint red */,
				(GLuint )(args[1]->NumberValue())/* GLuint green */,
				(GLuint )(args[2]->NumberValue())/* GLuint blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
	PFNGLSECONDARYCOLOR3UIEXTPROC methodp_glSecondaryColor3uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3uiEXT && args.Length() >= 3){
			obj->methodp_glSecondaryColor3uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint red */,
				(GLuint )(args[1]->NumberValue())/* GLuint green */,
				(GLuint )(args[2]->NumberValue())/* GLuint blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
	PFNGLSECONDARYCOLOR3UIVPROC methodp_glSecondaryColor3uiv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3uiv && args.Length() >= 1){
			obj->methodp_glSecondaryColor3uiv(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
	PFNGLSECONDARYCOLOR3UIVEXTPROC methodp_glSecondaryColor3uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3uivEXT && args.Length() >= 1){
			obj->methodp_glSecondaryColor3uivEXT(
				(const GLuint *)((int64_t)args[0]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
	PFNGLSECONDARYCOLOR3USPROC methodp_glSecondaryColor3us{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3us(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3us && args.Length() >= 3){
			obj->methodp_glSecondaryColor3us(
				(GLushort )(args[0]->NumberValue())/* GLushort red */,
				(GLushort )(args[1]->NumberValue())/* GLushort green */,
				(GLushort )(args[2]->NumberValue())/* GLushort blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
	PFNGLSECONDARYCOLOR3USEXTPROC methodp_glSecondaryColor3usEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3usEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3usEXT && args.Length() >= 3){
			obj->methodp_glSecondaryColor3usEXT(
				(GLushort )(args[0]->NumberValue())/* GLushort red */,
				(GLushort )(args[1]->NumberValue())/* GLushort green */,
				(GLushort )(args[2]->NumberValue())/* GLushort blue */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
	PFNGLSECONDARYCOLOR3USVPROC methodp_glSecondaryColor3usv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3usv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3usv && args.Length() >= 1){
			obj->methodp_glSecondaryColor3usv(
				(const GLushort *)((int64_t)args[0]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
	PFNGLSECONDARYCOLOR3USVEXTPROC methodp_glSecondaryColor3usvEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColor3usvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColor3usvEXT && args.Length() >= 1){
			obj->methodp_glSecondaryColor3usvEXT(
				(const GLushort *)((int64_t)args[0]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
	PFNGLSECONDARYCOLORFORMATNVPROC methodp_glSecondaryColorFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColorFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColorFormatNV && args.Length() >= 3){
			obj->methodp_glSecondaryColorFormatNV(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);
	PFNGLSECONDARYCOLORP3UIPROC methodp_glSecondaryColorP3ui{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColorP3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColorP3ui && args.Length() >= 2){
			obj->methodp_glSecondaryColorP3ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint color */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);
	PFNGLSECONDARYCOLORP3UIVPROC methodp_glSecondaryColorP3uiv{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColorP3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColorP3uiv && args.Length() >= 2){
			obj->methodp_glSecondaryColorP3uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *color */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLSECONDARYCOLORPOINTERPROC methodp_glSecondaryColorPointer{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColorPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColorPointer && args.Length() >= 4){
			obj->methodp_glSecondaryColorPointer(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLSECONDARYCOLORPOINTEREXTPROC methodp_glSecondaryColorPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColorPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColorPointerEXT && args.Length() >= 4){
			obj->methodp_glSecondaryColorPointerEXT(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
	PFNGLSECONDARYCOLORPOINTERLISTIBMPROC methodp_glSecondaryColorPointerListIBM{nullptr};
	static v8::Handle<v8::Value> method_glSecondaryColorPointerListIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSecondaryColorPointerListIBM && args.Length() >= 5){
			obj->methodp_glSecondaryColorPointerListIBM(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLint )(args[2]->NumberValue())/* GLint stride */,
				(const void **)((int64_t)args[3]->NumberValue())/* const void **pointer */,
				(GLint )(args[4]->NumberValue())/* GLint ptrstride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSELECTBUFFERPROC) (GLsizei size, GLuint *buffer);
	PFNGLSELECTBUFFERPROC methodp_glSelectBuffer{nullptr};
	static v8::Handle<v8::Value> method_glSelectBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSelectBuffer && args.Length() >= 2){
			obj->methodp_glSelectBuffer(
				(GLsizei )(args[0]->NumberValue())/* GLsizei size */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
	PFNGLSELECTPERFMONITORCOUNTERSAMDPROC methodp_glSelectPerfMonitorCountersAMD{nullptr};
	static v8::Handle<v8::Value> method_glSelectPerfMonitorCountersAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSelectPerfMonitorCountersAMD && args.Length() >= 5){
			obj->methodp_glSelectPerfMonitorCountersAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint monitor */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean enable */,
				(GLuint )(args[2]->NumberValue())/* GLuint group */,
				(GLint )(args[3]->NumberValue())/* GLint numCounters */,
				(GLuint *)((int64_t)args[4]->NumberValue())/* GLuint *counterList */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
	PFNGLSEPARABLEFILTER2DPROC methodp_glSeparableFilter2D{nullptr};
	static v8::Handle<v8::Value> method_glSeparableFilter2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSeparableFilter2D && args.Length() >= 8){
			obj->methodp_glSeparableFilter2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *row */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *column */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
	PFNGLSEPARABLEFILTER2DEXTPROC methodp_glSeparableFilter2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glSeparableFilter2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSeparableFilter2DEXT && args.Length() >= 8){
			obj->methodp_glSeparableFilter2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *row */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *column */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSETFENCEAPPLEPROC) (GLuint fence);
	PFNGLSETFENCEAPPLEPROC methodp_glSetFenceAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glSetFenceAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSetFenceAPPLE && args.Length() >= 1){
			obj->methodp_glSetFenceAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
	PFNGLSETFENCENVPROC methodp_glSetFenceNV{nullptr};
	static v8::Handle<v8::Value> method_glSetFenceNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSetFenceNV && args.Length() >= 2){
			obj->methodp_glSetFenceNV(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */,
				(GLenum )(args[1]->NumberValue())/* GLenum condition */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);
	PFNGLSETFRAGMENTSHADERCONSTANTATIPROC methodp_glSetFragmentShaderConstantATI{nullptr};
	static v8::Handle<v8::Value> method_glSetFragmentShaderConstantATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSetFragmentShaderConstantATI && args.Length() >= 2){
			obj->methodp_glSetFragmentShaderConstantATI(
				(GLuint )(args[0]->NumberValue())/* GLuint dst */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const void *addr);
	PFNGLSETINVARIANTEXTPROC methodp_glSetInvariantEXT{nullptr};
	static v8::Handle<v8::Value> method_glSetInvariantEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSetInvariantEXT && args.Length() >= 3){
			obj->methodp_glSetInvariantEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const void *addr);
	PFNGLSETLOCALCONSTANTEXTPROC methodp_glSetLocalConstantEXT{nullptr};
	static v8::Handle<v8::Value> method_glSetLocalConstantEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSetLocalConstantEXT && args.Length() >= 3){
			obj->methodp_glSetLocalConstantEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat *val);
	PFNGLSETMULTISAMPLEFVAMDPROC methodp_glSetMultisamplefvAMD{nullptr};
	static v8::Handle<v8::Value> method_glSetMultisamplefvAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSetMultisamplefvAMD && args.Length() >= 3){
			obj->methodp_glSetMultisamplefvAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *val */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHADEMODELPROC) (GLenum mode);
	PFNGLSHADEMODELPROC methodp_glShadeModel{nullptr};
	static v8::Handle<v8::Value> method_glShadeModel(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glShadeModel && args.Length() >= 1){
			obj->methodp_glShadeModel(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
	PFNGLSHADERBINARYPROC methodp_glShaderBinary{nullptr};
	static v8::Handle<v8::Value> method_glShaderBinary(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glShaderBinary && args.Length() >= 5){
			obj->methodp_glShaderBinary(
				(GLsizei )(args[0]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *shaders */,
				(GLenum )(args[2]->NumberValue())/* GLenum binaryformat */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *binary */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
	PFNGLSHADEROP1EXTPROC methodp_glShaderOp1EXT{nullptr};
	static v8::Handle<v8::Value> method_glShaderOp1EXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glShaderOp1EXT && args.Length() >= 3){
			obj->methodp_glShaderOp1EXT(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint res */,
				(GLuint )(args[2]->NumberValue())/* GLuint arg1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
	PFNGLSHADEROP2EXTPROC methodp_glShaderOp2EXT{nullptr};
	static v8::Handle<v8::Value> method_glShaderOp2EXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glShaderOp2EXT && args.Length() >= 4){
			obj->methodp_glShaderOp2EXT(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint res */,
				(GLuint )(args[2]->NumberValue())/* GLuint arg1 */,
				(GLuint )(args[3]->NumberValue())/* GLuint arg2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
	PFNGLSHADEROP3EXTPROC methodp_glShaderOp3EXT{nullptr};
	static v8::Handle<v8::Value> method_glShaderOp3EXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glShaderOp3EXT && args.Length() >= 5){
			obj->methodp_glShaderOp3EXT(
				(GLenum )(args[0]->NumberValue())/* GLenum op */,
				(GLuint )(args[1]->NumberValue())/* GLuint res */,
				(GLuint )(args[2]->NumberValue())/* GLuint arg1 */,
				(GLuint )(args[3]->NumberValue())/* GLuint arg2 */,
				(GLuint )(args[4]->NumberValue())/* GLuint arg3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
	PFNGLSHADERSOURCEPROC methodp_glShaderSource{nullptr};
	static v8::Handle<v8::Value> method_glShaderSource(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glShaderSource && args.Length() >= 4){
			obj->methodp_glShaderSource(
				(GLuint )(args[0]->NumberValue())/* GLuint shader */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLchar *const*)((int64_t)args[2]->NumberValue())/* const GLchar *const*string */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length);
	PFNGLSHADERSOURCEARBPROC methodp_glShaderSourceARB{nullptr};
	static v8::Handle<v8::Value> method_glShaderSourceARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glShaderSourceARB && args.Length() >= 4){
			obj->methodp_glShaderSourceARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB shaderObj */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLcharARB **)((int64_t)args[2]->NumberValue())/* const GLcharARB **string */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *length */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
	PFNGLSHADERSTORAGEBLOCKBINDINGPROC methodp_glShaderStorageBlockBinding{nullptr};
	static v8::Handle<v8::Value> method_glShaderStorageBlockBinding(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glShaderStorageBlockBinding && args.Length() >= 3){
			obj->methodp_glShaderStorageBlockBinding(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint storageBlockIndex */,
				(GLuint )(args[2]->NumberValue())/* GLuint storageBlockBinding */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
	PFNGLSHARPENTEXFUNCSGISPROC methodp_glSharpenTexFuncSGIS{nullptr};
	static v8::Handle<v8::Value> method_glSharpenTexFuncSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSharpenTexFuncSGIS && args.Length() >= 3){
			obj->methodp_glSharpenTexFuncSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei n */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *points */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
	PFNGLSPRITEPARAMETERFSGIXPROC methodp_glSpriteParameterfSGIX{nullptr};
	static v8::Handle<v8::Value> method_glSpriteParameterfSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSpriteParameterfSGIX && args.Length() >= 2){
			obj->methodp_glSpriteParameterfSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);
	PFNGLSPRITEPARAMETERFVSGIXPROC methodp_glSpriteParameterfvSGIX{nullptr};
	static v8::Handle<v8::Value> method_glSpriteParameterfvSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSpriteParameterfvSGIX && args.Length() >= 2){
			obj->methodp_glSpriteParameterfvSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
	PFNGLSPRITEPARAMETERISGIXPROC methodp_glSpriteParameteriSGIX{nullptr};
	static v8::Handle<v8::Value> method_glSpriteParameteriSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSpriteParameteriSGIX && args.Length() >= 2){
			obj->methodp_glSpriteParameteriSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);
	PFNGLSPRITEPARAMETERIVSGIXPROC methodp_glSpriteParameterivSGIX{nullptr};
	static v8::Handle<v8::Value> method_glSpriteParameterivSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSpriteParameterivSGIX && args.Length() >= 2){
			obj->methodp_glSpriteParameterivSGIX(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC) ();
	PFNGLSTARTINSTRUMENTSSGIXPROC methodp_glStartInstrumentsSGIX{nullptr};
	static v8::Handle<v8::Value> method_glStartInstrumentsSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStartInstrumentsSGIX && args.Length() >= 0){
			obj->methodp_glStartInstrumentsSGIX(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTARTTILINGQCOMPROC) (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask);
	PFNGLSTARTTILINGQCOMPROC methodp_glStartTilingQCOM{nullptr};
	static v8::Handle<v8::Value> method_glStartTilingQCOM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStartTilingQCOM && args.Length() >= 5){
			obj->methodp_glStartTilingQCOM(
				(GLuint )(args[0]->NumberValue())/* GLuint x */,
				(GLuint )(args[1]->NumberValue())/* GLuint y */,
				(GLuint )(args[2]->NumberValue())/* GLuint width */,
				(GLuint )(args[3]->NumberValue())/* GLuint height */,
				(GLbitfield )(args[4]->NumberValue())/* GLbitfield preserveMask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag);
	PFNGLSTENCILCLEARTAGEXTPROC methodp_glStencilClearTagEXT{nullptr};
	static v8::Handle<v8::Value> method_glStencilClearTagEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilClearTagEXT && args.Length() >= 2){
			obj->methodp_glStencilClearTagEXT(
				(GLsizei )(args[0]->NumberValue())/* GLsizei stencilTagBits */,
				(GLuint )(args[1]->NumberValue())/* GLuint stencilClearTag */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);
	PFNGLSTENCILFILLPATHINSTANCEDNVPROC methodp_glStencilFillPathInstancedNV{nullptr};
	static v8::Handle<v8::Value> method_glStencilFillPathInstancedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilFillPathInstancedNV && args.Length() >= 8){
			obj->methodp_glStencilFillPathInstancedNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei numPaths */,
				(GLenum )(args[1]->NumberValue())/* GLenum pathNameType */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *paths */,
				(GLuint )(args[3]->NumberValue())/* GLuint pathBase */,
				(GLenum )(args[4]->NumberValue())/* GLenum fillMode */,
				(GLuint )(args[5]->NumberValue())/* GLuint mask */,
				(GLenum )(args[6]->NumberValue())/* GLenum transformType */,
				(const GLfloat *)((int64_t)args[7]->NumberValue())/* const GLfloat *transformValues */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);
	PFNGLSTENCILFILLPATHNVPROC methodp_glStencilFillPathNV{nullptr};
	static v8::Handle<v8::Value> method_glStencilFillPathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilFillPathNV && args.Length() >= 3){
			obj->methodp_glStencilFillPathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLenum )(args[1]->NumberValue())/* GLenum fillMode */,
				(GLuint )(args[2]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILFUNCPROC) (GLenum func, GLint ref, GLuint mask);
	PFNGLSTENCILFUNCPROC methodp_glStencilFunc{nullptr};
	static v8::Handle<v8::Value> method_glStencilFunc(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilFunc && args.Length() >= 3){
			obj->methodp_glStencilFunc(
				(GLenum )(args[0]->NumberValue())/* GLenum func */,
				(GLint )(args[1]->NumberValue())/* GLint ref */,
				(GLuint )(args[2]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);
	PFNGLSTENCILFUNCSEPARATEPROC methodp_glStencilFuncSeparate{nullptr};
	static v8::Handle<v8::Value> method_glStencilFuncSeparate(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilFuncSeparate && args.Length() >= 4){
			obj->methodp_glStencilFuncSeparate(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum func */,
				(GLint )(args[2]->NumberValue())/* GLint ref */,
				(GLuint )(args[3]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
	PFNGLSTENCILFUNCSEPARATEATIPROC methodp_glStencilFuncSeparateATI{nullptr};
	static v8::Handle<v8::Value> method_glStencilFuncSeparateATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilFuncSeparateATI && args.Length() >= 4){
			obj->methodp_glStencilFuncSeparateATI(
				(GLenum )(args[0]->NumberValue())/* GLenum frontfunc */,
				(GLenum )(args[1]->NumberValue())/* GLenum backfunc */,
				(GLint )(args[2]->NumberValue())/* GLint ref */,
				(GLuint )(args[3]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILMASKPROC) (GLuint mask);
	PFNGLSTENCILMASKPROC methodp_glStencilMask{nullptr};
	static v8::Handle<v8::Value> method_glStencilMask(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilMask && args.Length() >= 1){
			obj->methodp_glStencilMask(
				(GLuint )(args[0]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
	PFNGLSTENCILMASKSEPARATEPROC methodp_glStencilMaskSeparate{nullptr};
	static v8::Handle<v8::Value> method_glStencilMaskSeparate(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilMaskSeparate && args.Length() >= 2){
			obj->methodp_glStencilMaskSeparate(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLuint )(args[1]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILOPPROC) (GLenum fail, GLenum zfail, GLenum zpass);
	PFNGLSTENCILOPPROC methodp_glStencilOp{nullptr};
	static v8::Handle<v8::Value> method_glStencilOp(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilOp && args.Length() >= 3){
			obj->methodp_glStencilOp(
				(GLenum )(args[0]->NumberValue())/* GLenum fail */,
				(GLenum )(args[1]->NumberValue())/* GLenum zfail */,
				(GLenum )(args[2]->NumberValue())/* GLenum zpass */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	PFNGLSTENCILOPSEPARATEPROC methodp_glStencilOpSeparate{nullptr};
	static v8::Handle<v8::Value> method_glStencilOpSeparate(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilOpSeparate && args.Length() >= 4){
			obj->methodp_glStencilOpSeparate(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum sfail */,
				(GLenum )(args[2]->NumberValue())/* GLenum dpfail */,
				(GLenum )(args[3]->NumberValue())/* GLenum dppass */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
	PFNGLSTENCILOPSEPARATEATIPROC methodp_glStencilOpSeparateATI{nullptr};
	static v8::Handle<v8::Value> method_glStencilOpSeparateATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilOpSeparateATI && args.Length() >= 4){
			obj->methodp_glStencilOpSeparateATI(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum sfail */,
				(GLenum )(args[2]->NumberValue())/* GLenum dpfail */,
				(GLenum )(args[3]->NumberValue())/* GLenum dppass */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value);
	PFNGLSTENCILOPVALUEAMDPROC methodp_glStencilOpValueAMD{nullptr};
	static v8::Handle<v8::Value> method_glStencilOpValueAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilOpValueAMD && args.Length() >= 2){
			obj->methodp_glStencilOpValueAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLuint )(args[1]->NumberValue())/* GLuint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);
	PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC methodp_glStencilStrokePathInstancedNV{nullptr};
	static v8::Handle<v8::Value> method_glStencilStrokePathInstancedNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilStrokePathInstancedNV && args.Length() >= 8){
			obj->methodp_glStencilStrokePathInstancedNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei numPaths */,
				(GLenum )(args[1]->NumberValue())/* GLenum pathNameType */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *paths */,
				(GLuint )(args[3]->NumberValue())/* GLuint pathBase */,
				(GLint )(args[4]->NumberValue())/* GLint reference */,
				(GLuint )(args[5]->NumberValue())/* GLuint mask */,
				(GLenum )(args[6]->NumberValue())/* GLenum transformType */,
				(const GLfloat *)((int64_t)args[7]->NumberValue())/* const GLfloat *transformValues */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);
	PFNGLSTENCILSTROKEPATHNVPROC methodp_glStencilStrokePathNV{nullptr};
	static v8::Handle<v8::Value> method_glStencilStrokePathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStencilStrokePathNV && args.Length() >= 3){
			obj->methodp_glStencilStrokePathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint path */,
				(GLint )(args[1]->NumberValue())/* GLint reference */,
				(GLuint )(args[2]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);
	PFNGLSTOPINSTRUMENTSSGIXPROC methodp_glStopInstrumentsSGIX{nullptr};
	static v8::Handle<v8::Value> method_glStopInstrumentsSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStopInstrumentsSGIX && args.Length() >= 1){
			obj->methodp_glStopInstrumentsSGIX(
				(GLint )(args[0]->NumberValue())/* GLint marker */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void *string);
	PFNGLSTRINGMARKERGREMEDYPROC methodp_glStringMarkerGREMEDY{nullptr};
	static v8::Handle<v8::Value> method_glStringMarkerGREMEDY(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glStringMarkerGREMEDY && args.Length() >= 2){
			obj->methodp_glStringMarkerGREMEDY(
				(GLsizei )(args[0]->NumberValue())/* GLsizei len */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *string */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
	PFNGLSWIZZLEEXTPROC methodp_glSwizzleEXT{nullptr};
	static v8::Handle<v8::Value> method_glSwizzleEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSwizzleEXT && args.Length() >= 6){
			obj->methodp_glSwizzleEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint res */,
				(GLuint )(args[1]->NumberValue())/* GLuint in */,
				(GLenum )(args[2]->NumberValue())/* GLenum outX */,
				(GLenum )(args[3]->NumberValue())/* GLenum outY */,
				(GLenum )(args[4]->NumberValue())/* GLenum outZ */,
				(GLenum )(args[5]->NumberValue())/* GLenum outW */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLSYNCTEXTUREINTELPROC) (GLuint texture);
	PFNGLSYNCTEXTUREINTELPROC methodp_glSyncTextureINTEL{nullptr};
	static v8::Handle<v8::Value> method_glSyncTextureINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glSyncTextureINTEL && args.Length() >= 1){
			obj->methodp_glSyncTextureINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC) ();
	PFNGLTAGSAMPLEBUFFERSGIXPROC methodp_glTagSampleBufferSGIX{nullptr};
	static v8::Handle<v8::Value> method_glTagSampleBufferSGIX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTagSampleBufferSGIX && args.Length() >= 0){
			obj->methodp_glTagSampleBufferSGIX(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);
	PFNGLTANGENT3BEXTPROC methodp_glTangent3bEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3bEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3bEXT && args.Length() >= 3){
			obj->methodp_glTangent3bEXT(
				(GLbyte )(args[0]->NumberValue())/* GLbyte tx */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte ty */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte tz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);
	PFNGLTANGENT3BVEXTPROC methodp_glTangent3bvEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3bvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3bvEXT && args.Length() >= 1){
			obj->methodp_glTangent3bvEXT(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);
	PFNGLTANGENT3DEXTPROC methodp_glTangent3dEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3dEXT && args.Length() >= 3){
			obj->methodp_glTangent3dEXT(
				(GLdouble )(args[0]->NumberValue())/* GLdouble tx */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble ty */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble tz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);
	PFNGLTANGENT3DVEXTPROC methodp_glTangent3dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3dvEXT && args.Length() >= 1){
			obj->methodp_glTangent3dvEXT(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);
	PFNGLTANGENT3FEXTPROC methodp_glTangent3fEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3fEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3fEXT && args.Length() >= 3){
			obj->methodp_glTangent3fEXT(
				(GLfloat )(args[0]->NumberValue())/* GLfloat tx */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat ty */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat tz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);
	PFNGLTANGENT3FVEXTPROC methodp_glTangent3fvEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3fvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3fvEXT && args.Length() >= 1){
			obj->methodp_glTangent3fvEXT(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);
	PFNGLTANGENT3IEXTPROC methodp_glTangent3iEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3iEXT && args.Length() >= 3){
			obj->methodp_glTangent3iEXT(
				(GLint )(args[0]->NumberValue())/* GLint tx */,
				(GLint )(args[1]->NumberValue())/* GLint ty */,
				(GLint )(args[2]->NumberValue())/* GLint tz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3IVEXTPROC) (const GLint *v);
	PFNGLTANGENT3IVEXTPROC methodp_glTangent3ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3ivEXT && args.Length() >= 1){
			obj->methodp_glTangent3ivEXT(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);
	PFNGLTANGENT3SEXTPROC methodp_glTangent3sEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3sEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3sEXT && args.Length() >= 3){
			obj->methodp_glTangent3sEXT(
				(GLshort )(args[0]->NumberValue())/* GLshort tx */,
				(GLshort )(args[1]->NumberValue())/* GLshort ty */,
				(GLshort )(args[2]->NumberValue())/* GLshort tz */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENT3SVEXTPROC) (const GLshort *v);
	PFNGLTANGENT3SVEXTPROC methodp_glTangent3svEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangent3svEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangent3svEXT && args.Length() >= 1){
			obj->methodp_glTangent3svEXT(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);
	PFNGLTANGENTPOINTEREXTPROC methodp_glTangentPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glTangentPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTangentPointerEXT && args.Length() >= 3){
			obj->methodp_glTangentPointerEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
	PFNGLTBUFFERMASK3DFXPROC methodp_glTbufferMask3DFX{nullptr};
	static v8::Handle<v8::Value> method_glTbufferMask3DFX(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTbufferMask3DFX && args.Length() >= 1){
			obj->methodp_glTbufferMask3DFX(
				(GLuint )(args[0]->NumberValue())/* GLuint mask */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);
	PFNGLTESSELLATIONFACTORAMDPROC methodp_glTessellationFactorAMD{nullptr};
	static v8::Handle<v8::Value> method_glTessellationFactorAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTessellationFactorAMD && args.Length() >= 1){
			obj->methodp_glTessellationFactorAMD(
				(GLfloat )(args[0]->NumberValue())/* GLfloat factor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);
	PFNGLTESSELLATIONMODEAMDPROC methodp_glTessellationModeAMD{nullptr};
	static v8::Handle<v8::Value> method_glTessellationModeAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTessellationModeAMD && args.Length() >= 1){
			obj->methodp_glTessellationModeAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
	PFNGLTESTFENCEAPPLEPROC methodp_glTestFenceAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glTestFenceAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTestFenceAPPLE && args.Length() >= 1){
			obj->methodp_glTestFenceAPPLE(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);
	PFNGLTESTFENCENVPROC methodp_glTestFenceNV{nullptr};
	static v8::Handle<v8::Value> method_glTestFenceNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTestFenceNV && args.Length() >= 1){
			obj->methodp_glTestFenceNV(
				(GLuint )(args[0]->NumberValue())/* GLuint fence */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
	PFNGLTESTOBJECTAPPLEPROC methodp_glTestObjectAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glTestObjectAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTestObjectAPPLE && args.Length() >= 2){
			obj->methodp_glTestObjectAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum object */,
				(GLuint )(args[1]->NumberValue())/* GLuint name */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);
	PFNGLTEXBUFFERPROC methodp_glTexBuffer{nullptr};
	static v8::Handle<v8::Value> method_glTexBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexBuffer && args.Length() >= 3){
			obj->methodp_glTexBuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);
	PFNGLTEXBUFFERARBPROC methodp_glTexBufferARB{nullptr};
	static v8::Handle<v8::Value> method_glTexBufferARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexBufferARB && args.Length() >= 3){
			obj->methodp_glTexBufferARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
	PFNGLTEXBUFFEREXTPROC methodp_glTexBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexBufferEXT && args.Length() >= 3){
			obj->methodp_glTexBufferEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	PFNGLTEXBUFFERRANGEPROC methodp_glTexBufferRange{nullptr};
	static v8::Handle<v8::Value> method_glTexBufferRange(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexBufferRange && args.Length() >= 5){
			obj->methodp_glTexBufferRange(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[4]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXBUFFERRANGEEXTPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	PFNGLTEXBUFFERRANGEEXTPROC methodp_glTexBufferRangeEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexBufferRangeEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexBufferRangeEXT && args.Length() >= 5){
			obj->methodp_glTexBufferRangeEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[4]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);
	PFNGLTEXBUMPPARAMETERFVATIPROC methodp_glTexBumpParameterfvATI{nullptr};
	static v8::Handle<v8::Value> method_glTexBumpParameterfvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexBumpParameterfvATI && args.Length() >= 2){
			obj->methodp_glTexBumpParameterfvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);
	PFNGLTEXBUMPPARAMETERIVATIPROC methodp_glTexBumpParameterivATI{nullptr};
	static v8::Handle<v8::Value> method_glTexBumpParameterivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexBumpParameterivATI && args.Length() >= 2){
			obj->methodp_glTexBumpParameterivATI(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1BOESPROC) (GLbyte s);
	PFNGLTEXCOORD1BOESPROC methodp_glTexCoord1bOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1bOES && args.Length() >= 1){
			obj->methodp_glTexCoord1bOES(
				(GLbyte )(args[0]->NumberValue())/* GLbyte s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1BVOESPROC) (const GLbyte *coords);
	PFNGLTEXCOORD1BVOESPROC methodp_glTexCoord1bvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1bvOES && args.Length() >= 1){
			obj->methodp_glTexCoord1bvOES(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1DPROC) (GLdouble s);
	PFNGLTEXCOORD1DPROC methodp_glTexCoord1d{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1d && args.Length() >= 1){
			obj->methodp_glTexCoord1d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1DVPROC) (const GLdouble *v);
	PFNGLTEXCOORD1DVPROC methodp_glTexCoord1dv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1dv && args.Length() >= 1){
			obj->methodp_glTexCoord1dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1FPROC) (GLfloat s);
	PFNGLTEXCOORD1FPROC methodp_glTexCoord1f{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1f && args.Length() >= 1){
			obj->methodp_glTexCoord1f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1FVPROC) (const GLfloat *v);
	PFNGLTEXCOORD1FVPROC methodp_glTexCoord1fv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1fv && args.Length() >= 1){
			obj->methodp_glTexCoord1fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);
	PFNGLTEXCOORD1HNVPROC methodp_glTexCoord1hNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1hNV && args.Length() >= 1){
			obj->methodp_glTexCoord1hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);
	PFNGLTEXCOORD1HVNVPROC methodp_glTexCoord1hvNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1hvNV && args.Length() >= 1){
			obj->methodp_glTexCoord1hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1IPROC) (GLint s);
	PFNGLTEXCOORD1IPROC methodp_glTexCoord1i{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1i && args.Length() >= 1){
			obj->methodp_glTexCoord1i(
				(GLint )(args[0]->NumberValue())/* GLint s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1IVPROC) (const GLint *v);
	PFNGLTEXCOORD1IVPROC methodp_glTexCoord1iv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1iv && args.Length() >= 1){
			obj->methodp_glTexCoord1iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1SPROC) (GLshort s);
	PFNGLTEXCOORD1SPROC methodp_glTexCoord1s{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1s && args.Length() >= 1){
			obj->methodp_glTexCoord1s(
				(GLshort )(args[0]->NumberValue())/* GLshort s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1SVPROC) (const GLshort *v);
	PFNGLTEXCOORD1SVPROC methodp_glTexCoord1sv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1sv && args.Length() >= 1){
			obj->methodp_glTexCoord1sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1XOESPROC) (GLfixed s);
	PFNGLTEXCOORD1XOESPROC methodp_glTexCoord1xOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1xOES && args.Length() >= 1){
			obj->methodp_glTexCoord1xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed s */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD1XVOESPROC) (const GLfixed *coords);
	PFNGLTEXCOORD1XVOESPROC methodp_glTexCoord1xvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord1xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord1xvOES && args.Length() >= 1){
			obj->methodp_glTexCoord1xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2BOESPROC) (GLbyte s, GLbyte t);
	PFNGLTEXCOORD2BOESPROC methodp_glTexCoord2bOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2bOES && args.Length() >= 2){
			obj->methodp_glTexCoord2bOES(
				(GLbyte )(args[0]->NumberValue())/* GLbyte s */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2BVOESPROC) (const GLbyte *coords);
	PFNGLTEXCOORD2BVOESPROC methodp_glTexCoord2bvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2bvOES && args.Length() >= 1){
			obj->methodp_glTexCoord2bvOES(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2DPROC) (GLdouble s, GLdouble t);
	PFNGLTEXCOORD2DPROC methodp_glTexCoord2d{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2d && args.Length() >= 2){
			obj->methodp_glTexCoord2d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2DVPROC) (const GLdouble *v);
	PFNGLTEXCOORD2DVPROC methodp_glTexCoord2dv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2dv && args.Length() >= 1){
			obj->methodp_glTexCoord2dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FPROC) (GLfloat s, GLfloat t);
	PFNGLTEXCOORD2FPROC methodp_glTexCoord2f{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2f && args.Length() >= 2){
			obj->methodp_glTexCoord2f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
	PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC methodp_glTexCoord2fColor3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fColor3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fColor3fVertex3fSUN && args.Length() >= 8){
			obj->methodp_glTexCoord2fColor3fVertex3fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat g */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
	PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC methodp_glTexCoord2fColor3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fColor3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fColor3fVertex3fvSUN && args.Length() >= 3){
			obj->methodp_glTexCoord2fColor3fVertex3fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *c */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC methodp_glTexCoord2fColor4fNormal3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fColor4fNormal3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fColor4fNormal3fVertex3fSUN && args.Length() >= 12){
			obj->methodp_glTexCoord2fColor4fNormal3fVertex3fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat g */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat a */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[9]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[10]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[11]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
	PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC methodp_glTexCoord2fColor4fNormal3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fColor4fNormal3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fColor4fNormal3fVertex3fvSUN && args.Length() >= 4){
			obj->methodp_glTexCoord2fColor4fNormal3fVertex3fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *c */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
	PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC methodp_glTexCoord2fColor4ubVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fColor4ubVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fColor4ubVertex3fSUN && args.Length() >= 9){
			obj->methodp_glTexCoord2fColor4ubVertex3fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte r */,
				(GLubyte )(args[3]->NumberValue())/* GLubyte g */,
				(GLubyte )(args[4]->NumberValue())/* GLubyte b */,
				(GLubyte )(args[5]->NumberValue())/* GLubyte a */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
	PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC methodp_glTexCoord2fColor4ubVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fColor4ubVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fColor4ubVertex3fvSUN && args.Length() >= 3){
			obj->methodp_glTexCoord2fColor4ubVertex3fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *tc */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *c */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
	PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC methodp_glTexCoord2fNormal3fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fNormal3fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fNormal3fVertex3fSUN && args.Length() >= 8){
			obj->methodp_glTexCoord2fNormal3fVertex3fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
	PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC methodp_glTexCoord2fNormal3fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fNormal3fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fNormal3fVertex3fvSUN && args.Length() >= 3){
			obj->methodp_glTexCoord2fNormal3fVertex3fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
	PFNGLTEXCOORD2FVERTEX3FSUNPROC methodp_glTexCoord2fVertex3fSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fVertex3fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fVertex3fSUN && args.Length() >= 5){
			obj->methodp_glTexCoord2fVertex3fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
	PFNGLTEXCOORD2FVERTEX3FVSUNPROC methodp_glTexCoord2fVertex3fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fVertex3fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fVertex3fvSUN && args.Length() >= 2){
			obj->methodp_glTexCoord2fVertex3fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2FVPROC) (const GLfloat *v);
	PFNGLTEXCOORD2FVPROC methodp_glTexCoord2fv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2fv && args.Length() >= 1){
			obj->methodp_glTexCoord2fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);
	PFNGLTEXCOORD2HNVPROC methodp_glTexCoord2hNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2hNV && args.Length() >= 2){
			obj->methodp_glTexCoord2hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV s */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);
	PFNGLTEXCOORD2HVNVPROC methodp_glTexCoord2hvNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2hvNV && args.Length() >= 1){
			obj->methodp_glTexCoord2hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2IPROC) (GLint s, GLint t);
	PFNGLTEXCOORD2IPROC methodp_glTexCoord2i{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2i && args.Length() >= 2){
			obj->methodp_glTexCoord2i(
				(GLint )(args[0]->NumberValue())/* GLint s */,
				(GLint )(args[1]->NumberValue())/* GLint t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2IVPROC) (const GLint *v);
	PFNGLTEXCOORD2IVPROC methodp_glTexCoord2iv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2iv && args.Length() >= 1){
			obj->methodp_glTexCoord2iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2SPROC) (GLshort s, GLshort t);
	PFNGLTEXCOORD2SPROC methodp_glTexCoord2s{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2s && args.Length() >= 2){
			obj->methodp_glTexCoord2s(
				(GLshort )(args[0]->NumberValue())/* GLshort s */,
				(GLshort )(args[1]->NumberValue())/* GLshort t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2SVPROC) (const GLshort *v);
	PFNGLTEXCOORD2SVPROC methodp_glTexCoord2sv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2sv && args.Length() >= 1){
			obj->methodp_glTexCoord2sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2XOESPROC) (GLfixed s, GLfixed t);
	PFNGLTEXCOORD2XOESPROC methodp_glTexCoord2xOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2xOES && args.Length() >= 2){
			obj->methodp_glTexCoord2xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed s */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed t */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD2XVOESPROC) (const GLfixed *coords);
	PFNGLTEXCOORD2XVOESPROC methodp_glTexCoord2xvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord2xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord2xvOES && args.Length() >= 1){
			obj->methodp_glTexCoord2xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3BOESPROC) (GLbyte s, GLbyte t, GLbyte r);
	PFNGLTEXCOORD3BOESPROC methodp_glTexCoord3bOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3bOES && args.Length() >= 3){
			obj->methodp_glTexCoord3bOES(
				(GLbyte )(args[0]->NumberValue())/* GLbyte s */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte t */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3BVOESPROC) (const GLbyte *coords);
	PFNGLTEXCOORD3BVOESPROC methodp_glTexCoord3bvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3bvOES && args.Length() >= 1){
			obj->methodp_glTexCoord3bvOES(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3DPROC) (GLdouble s, GLdouble t, GLdouble r);
	PFNGLTEXCOORD3DPROC methodp_glTexCoord3d{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3d && args.Length() >= 3){
			obj->methodp_glTexCoord3d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble t */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3DVPROC) (const GLdouble *v);
	PFNGLTEXCOORD3DVPROC methodp_glTexCoord3dv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3dv && args.Length() >= 1){
			obj->methodp_glTexCoord3dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3FPROC) (GLfloat s, GLfloat t, GLfloat r);
	PFNGLTEXCOORD3FPROC methodp_glTexCoord3f{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3f && args.Length() >= 3){
			obj->methodp_glTexCoord3f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3FVPROC) (const GLfloat *v);
	PFNGLTEXCOORD3FVPROC methodp_glTexCoord3fv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3fv && args.Length() >= 1){
			obj->methodp_glTexCoord3fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
	PFNGLTEXCOORD3HNVPROC methodp_glTexCoord3hNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3hNV && args.Length() >= 3){
			obj->methodp_glTexCoord3hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV s */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV t */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);
	PFNGLTEXCOORD3HVNVPROC methodp_glTexCoord3hvNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3hvNV && args.Length() >= 1){
			obj->methodp_glTexCoord3hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3IPROC) (GLint s, GLint t, GLint r);
	PFNGLTEXCOORD3IPROC methodp_glTexCoord3i{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3i && args.Length() >= 3){
			obj->methodp_glTexCoord3i(
				(GLint )(args[0]->NumberValue())/* GLint s */,
				(GLint )(args[1]->NumberValue())/* GLint t */,
				(GLint )(args[2]->NumberValue())/* GLint r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3IVPROC) (const GLint *v);
	PFNGLTEXCOORD3IVPROC methodp_glTexCoord3iv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3iv && args.Length() >= 1){
			obj->methodp_glTexCoord3iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3SPROC) (GLshort s, GLshort t, GLshort r);
	PFNGLTEXCOORD3SPROC methodp_glTexCoord3s{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3s && args.Length() >= 3){
			obj->methodp_glTexCoord3s(
				(GLshort )(args[0]->NumberValue())/* GLshort s */,
				(GLshort )(args[1]->NumberValue())/* GLshort t */,
				(GLshort )(args[2]->NumberValue())/* GLshort r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3SVPROC) (const GLshort *v);
	PFNGLTEXCOORD3SVPROC methodp_glTexCoord3sv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3sv && args.Length() >= 1){
			obj->methodp_glTexCoord3sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3XOESPROC) (GLfixed s, GLfixed t, GLfixed r);
	PFNGLTEXCOORD3XOESPROC methodp_glTexCoord3xOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3xOES && args.Length() >= 3){
			obj->methodp_glTexCoord3xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed s */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed r */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD3XVOESPROC) (const GLfixed *coords);
	PFNGLTEXCOORD3XVOESPROC methodp_glTexCoord3xvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord3xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord3xvOES && args.Length() >= 1){
			obj->methodp_glTexCoord3xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4BOESPROC) (GLbyte s, GLbyte t, GLbyte r, GLbyte q);
	PFNGLTEXCOORD4BOESPROC methodp_glTexCoord4bOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4bOES && args.Length() >= 4){
			obj->methodp_glTexCoord4bOES(
				(GLbyte )(args[0]->NumberValue())/* GLbyte s */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte t */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte r */,
				(GLbyte )(args[3]->NumberValue())/* GLbyte q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4BVOESPROC) (const GLbyte *coords);
	PFNGLTEXCOORD4BVOESPROC methodp_glTexCoord4bvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4bvOES && args.Length() >= 1){
			obj->methodp_glTexCoord4bvOES(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4DPROC) (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	PFNGLTEXCOORD4DPROC methodp_glTexCoord4d{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4d && args.Length() >= 4){
			obj->methodp_glTexCoord4d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble s */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble t */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble r */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4DVPROC) (const GLdouble *v);
	PFNGLTEXCOORD4DVPROC methodp_glTexCoord4dv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4dv && args.Length() >= 1){
			obj->methodp_glTexCoord4dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4FPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	PFNGLTEXCOORD4FPROC methodp_glTexCoord4f{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4f && args.Length() >= 4){
			obj->methodp_glTexCoord4f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC methodp_glTexCoord4fColor4fNormal3fVertex4fSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4fColor4fNormal3fVertex4fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4fColor4fNormal3fVertex4fSUN && args.Length() >= 15){
			obj->methodp_glTexCoord4fColor4fNormal3fVertex4fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat p */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat q */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat r */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat g */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat b */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat a */,
				(GLfloat )(args[8]->NumberValue())/* GLfloat nx */,
				(GLfloat )(args[9]->NumberValue())/* GLfloat ny */,
				(GLfloat )(args[10]->NumberValue())/* GLfloat nz */,
				(GLfloat )(args[11]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[12]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[13]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[14]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
	PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC methodp_glTexCoord4fColor4fNormal3fVertex4fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4fColor4fNormal3fVertex4fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4fColor4fNormal3fVertex4fvSUN && args.Length() >= 4){
			obj->methodp_glTexCoord4fColor4fNormal3fVertex4fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *c */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *n */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLTEXCOORD4FVERTEX4FSUNPROC methodp_glTexCoord4fVertex4fSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4fVertex4fSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4fVertex4fSUN && args.Length() >= 8){
			obj->methodp_glTexCoord4fVertex4fSUN(
				(GLfloat )(args[0]->NumberValue())/* GLfloat s */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat t */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat p */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat q */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[5]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[6]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[7]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
	PFNGLTEXCOORD4FVERTEX4FVSUNPROC methodp_glTexCoord4fVertex4fvSUN{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4fVertex4fvSUN(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4fVertex4fvSUN && args.Length() >= 2){
			obj->methodp_glTexCoord4fVertex4fvSUN(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *tc */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4FVPROC) (const GLfloat *v);
	PFNGLTEXCOORD4FVPROC methodp_glTexCoord4fv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4fv && args.Length() >= 1){
			obj->methodp_glTexCoord4fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
	PFNGLTEXCOORD4HNVPROC methodp_glTexCoord4hNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4hNV && args.Length() >= 4){
			obj->methodp_glTexCoord4hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV s */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV t */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV r */,
				(GLhalfNV )(args[3]->NumberValue())/* GLhalfNV q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);
	PFNGLTEXCOORD4HVNVPROC methodp_glTexCoord4hvNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4hvNV && args.Length() >= 1){
			obj->methodp_glTexCoord4hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4IPROC) (GLint s, GLint t, GLint r, GLint q);
	PFNGLTEXCOORD4IPROC methodp_glTexCoord4i{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4i && args.Length() >= 4){
			obj->methodp_glTexCoord4i(
				(GLint )(args[0]->NumberValue())/* GLint s */,
				(GLint )(args[1]->NumberValue())/* GLint t */,
				(GLint )(args[2]->NumberValue())/* GLint r */,
				(GLint )(args[3]->NumberValue())/* GLint q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4IVPROC) (const GLint *v);
	PFNGLTEXCOORD4IVPROC methodp_glTexCoord4iv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4iv && args.Length() >= 1){
			obj->methodp_glTexCoord4iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4SPROC) (GLshort s, GLshort t, GLshort r, GLshort q);
	PFNGLTEXCOORD4SPROC methodp_glTexCoord4s{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4s && args.Length() >= 4){
			obj->methodp_glTexCoord4s(
				(GLshort )(args[0]->NumberValue())/* GLshort s */,
				(GLshort )(args[1]->NumberValue())/* GLshort t */,
				(GLshort )(args[2]->NumberValue())/* GLshort r */,
				(GLshort )(args[3]->NumberValue())/* GLshort q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4SVPROC) (const GLshort *v);
	PFNGLTEXCOORD4SVPROC methodp_glTexCoord4sv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4sv && args.Length() >= 1){
			obj->methodp_glTexCoord4sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4XOESPROC) (GLfixed s, GLfixed t, GLfixed r, GLfixed q);
	PFNGLTEXCOORD4XOESPROC methodp_glTexCoord4xOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4xOES && args.Length() >= 4){
			obj->methodp_glTexCoord4xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed s */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed t */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed r */,
				(GLfixed )(args[3]->NumberValue())/* GLfixed q */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORD4XVOESPROC) (const GLfixed *coords);
	PFNGLTEXCOORD4XVOESPROC methodp_glTexCoord4xvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexCoord4xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoord4xvOES && args.Length() >= 1){
			obj->methodp_glTexCoord4xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
	PFNGLTEXCOORDFORMATNVPROC methodp_glTexCoordFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordFormatNV && args.Length() >= 3){
			obj->methodp_glTexCoordFormatNV(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);
	PFNGLTEXCOORDP1UIPROC methodp_glTexCoordP1ui{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordP1ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordP1ui && args.Length() >= 2){
			obj->methodp_glTexCoordP1ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);
	PFNGLTEXCOORDP1UIVPROC methodp_glTexCoordP1uiv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordP1uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordP1uiv && args.Length() >= 2){
			obj->methodp_glTexCoordP1uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);
	PFNGLTEXCOORDP2UIPROC methodp_glTexCoordP2ui{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordP2ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordP2ui && args.Length() >= 2){
			obj->methodp_glTexCoordP2ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);
	PFNGLTEXCOORDP2UIVPROC methodp_glTexCoordP2uiv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordP2uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordP2uiv && args.Length() >= 2){
			obj->methodp_glTexCoordP2uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);
	PFNGLTEXCOORDP3UIPROC methodp_glTexCoordP3ui{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordP3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordP3ui && args.Length() >= 2){
			obj->methodp_glTexCoordP3ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);
	PFNGLTEXCOORDP3UIVPROC methodp_glTexCoordP3uiv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordP3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordP3uiv && args.Length() >= 2){
			obj->methodp_glTexCoordP3uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);
	PFNGLTEXCOORDP4UIPROC methodp_glTexCoordP4ui{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordP4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordP4ui && args.Length() >= 2){
			obj->methodp_glTexCoordP4ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);
	PFNGLTEXCOORDP4UIVPROC methodp_glTexCoordP4uiv{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordP4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordP4uiv && args.Length() >= 2){
			obj->methodp_glTexCoordP4uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLTEXCOORDPOINTERPROC methodp_glTexCoordPointer{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordPointer && args.Length() >= 4){
			obj->methodp_glTexCoordPointer(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
	PFNGLTEXCOORDPOINTEREXTPROC methodp_glTexCoordPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordPointerEXT && args.Length() >= 5){
			obj->methodp_glTexCoordPointerEXT(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
	PFNGLTEXCOORDPOINTERLISTIBMPROC methodp_glTexCoordPointerListIBM{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordPointerListIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordPointerListIBM && args.Length() >= 5){
			obj->methodp_glTexCoordPointerListIBM(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLint )(args[2]->NumberValue())/* GLint stride */,
				(const void **)((int64_t)args[3]->NumberValue())/* const void **pointer */,
				(GLint )(args[4]->NumberValue())/* GLint ptrstride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);
	PFNGLTEXCOORDPOINTERVINTELPROC methodp_glTexCoordPointervINTEL{nullptr};
	static v8::Handle<v8::Value> method_glTexCoordPointervINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexCoordPointervINTEL && args.Length() >= 3){
			obj->methodp_glTexCoordPointervINTEL(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void **)((int64_t)args[2]->NumberValue())/* const void **pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXENVFPROC) (GLenum target, GLenum pname, GLfloat param);
	PFNGLTEXENVFPROC methodp_glTexEnvf{nullptr};
	static v8::Handle<v8::Value> method_glTexEnvf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexEnvf && args.Length() >= 3){
			obj->methodp_glTexEnvf(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXENVFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLTEXENVFVPROC methodp_glTexEnvfv{nullptr};
	static v8::Handle<v8::Value> method_glTexEnvfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexEnvfv && args.Length() >= 3){
			obj->methodp_glTexEnvfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXENVIPROC) (GLenum target, GLenum pname, GLint param);
	PFNGLTEXENVIPROC methodp_glTexEnvi{nullptr};
	static v8::Handle<v8::Value> method_glTexEnvi(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexEnvi && args.Length() >= 3){
			obj->methodp_glTexEnvi(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXENVIVPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLTEXENVIVPROC methodp_glTexEnviv{nullptr};
	static v8::Handle<v8::Value> method_glTexEnviv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexEnviv && args.Length() >= 3){
			obj->methodp_glTexEnviv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXENVXPROC) (GLenum target, GLenum pname, GLfixed param);
	PFNGLTEXENVXPROC methodp_glTexEnvx{nullptr};
	static v8::Handle<v8::Value> method_glTexEnvx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexEnvx && args.Length() >= 3){
			obj->methodp_glTexEnvx(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXENVXOESPROC) (GLenum target, GLenum pname, GLfixed param);
	PFNGLTEXENVXOESPROC methodp_glTexEnvxOES{nullptr};
	static v8::Handle<v8::Value> method_glTexEnvxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexEnvxOES && args.Length() >= 3){
			obj->methodp_glTexEnvxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXENVXVPROC) (GLenum target, GLenum pname, const GLfixed *params);
	PFNGLTEXENVXVPROC methodp_glTexEnvxv{nullptr};
	static v8::Handle<v8::Value> method_glTexEnvxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexEnvxv && args.Length() >= 3){
			obj->methodp_glTexEnvxv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXENVXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
	PFNGLTEXENVXVOESPROC methodp_glTexEnvxvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexEnvxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexEnvxvOES && args.Length() >= 3){
			obj->methodp_glTexEnvxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
	PFNGLTEXFILTERFUNCSGISPROC methodp_glTexFilterFuncSGIS{nullptr};
	static v8::Handle<v8::Value> method_glTexFilterFuncSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexFilterFuncSGIS && args.Length() >= 4){
			obj->methodp_glTexFilterFuncSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum filter */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei n */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENDPROC) (GLenum coord, GLenum pname, GLdouble param);
	PFNGLTEXGENDPROC methodp_glTexGend{nullptr};
	static v8::Handle<v8::Value> method_glTexGend(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGend && args.Length() >= 3){
			obj->methodp_glTexGend(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENDVPROC) (GLenum coord, GLenum pname, const GLdouble *params);
	PFNGLTEXGENDVPROC methodp_glTexGendv{nullptr};
	static v8::Handle<v8::Value> method_glTexGendv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGendv && args.Length() >= 3){
			obj->methodp_glTexGendv(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENFPROC) (GLenum coord, GLenum pname, GLfloat param);
	PFNGLTEXGENFPROC methodp_glTexGenf{nullptr};
	static v8::Handle<v8::Value> method_glTexGenf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGenf && args.Length() >= 3){
			obj->methodp_glTexGenf(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENFOESPROC) (GLenum coord, GLenum pname, GLfloat param);
	PFNGLTEXGENFOESPROC methodp_glTexGenfOES{nullptr};
	static v8::Handle<v8::Value> method_glTexGenfOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGenfOES && args.Length() >= 3){
			obj->methodp_glTexGenfOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENFVPROC) (GLenum coord, GLenum pname, const GLfloat *params);
	PFNGLTEXGENFVPROC methodp_glTexGenfv{nullptr};
	static v8::Handle<v8::Value> method_glTexGenfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGenfv && args.Length() >= 3){
			obj->methodp_glTexGenfv(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENFVOESPROC) (GLenum coord, GLenum pname, const GLfloat *params);
	PFNGLTEXGENFVOESPROC methodp_glTexGenfvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexGenfvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGenfvOES && args.Length() >= 3){
			obj->methodp_glTexGenfvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENIPROC) (GLenum coord, GLenum pname, GLint param);
	PFNGLTEXGENIPROC methodp_glTexGeni{nullptr};
	static v8::Handle<v8::Value> method_glTexGeni(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGeni && args.Length() >= 3){
			obj->methodp_glTexGeni(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENIOESPROC) (GLenum coord, GLenum pname, GLint param);
	PFNGLTEXGENIOESPROC methodp_glTexGeniOES{nullptr};
	static v8::Handle<v8::Value> method_glTexGeniOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGeniOES && args.Length() >= 3){
			obj->methodp_glTexGeniOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENIVPROC) (GLenum coord, GLenum pname, const GLint *params);
	PFNGLTEXGENIVPROC methodp_glTexGeniv{nullptr};
	static v8::Handle<v8::Value> method_glTexGeniv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGeniv && args.Length() >= 3){
			obj->methodp_glTexGeniv(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENIVOESPROC) (GLenum coord, GLenum pname, const GLint *params);
	PFNGLTEXGENIVOESPROC methodp_glTexGenivOES{nullptr};
	static v8::Handle<v8::Value> method_glTexGenivOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGenivOES && args.Length() >= 3){
			obj->methodp_glTexGenivOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENXOESPROC) (GLenum coord, GLenum pname, GLfixed param);
	PFNGLTEXGENXOESPROC methodp_glTexGenxOES{nullptr};
	static v8::Handle<v8::Value> method_glTexGenxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGenxOES && args.Length() >= 3){
			obj->methodp_glTexGenxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXGENXVOESPROC) (GLenum coord, GLenum pname, const GLfixed *params);
	PFNGLTEXGENXVOESPROC methodp_glTexGenxvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexGenxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexGenxvOES && args.Length() >= 3){
			obj->methodp_glTexGenxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum coord */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXIMAGE1DPROC methodp_glTexImage1D{nullptr};
	static v8::Handle<v8::Value> method_glTexImage1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage1D && args.Length() >= 8){
			obj->methodp_glTexImage1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLint )(args[4]->NumberValue())/* GLint border */,
				(GLenum )(args[5]->NumberValue())/* GLenum format */,
				(GLenum )(args[6]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXIMAGE2DPROC methodp_glTexImage2D{nullptr};
	static v8::Handle<v8::Value> method_glTexImage2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage2D && args.Length() >= 9){
			obj->methodp_glTexImage2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLint )(args[5]->NumberValue())/* GLint border */,
				(GLenum )(args[6]->NumberValue())/* GLenum format */,
				(GLenum )(args[7]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	PFNGLTEXIMAGE2DMULTISAMPLEPROC methodp_glTexImage2DMultisample{nullptr};
	static v8::Handle<v8::Value> method_glTexImage2DMultisample(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage2DMultisample && args.Length() >= 6){
			obj->methodp_glTexImage2DMultisample(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLboolean )(args[5]->NumberValue())/* GLboolean fixedsamplelocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
	PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC methodp_glTexImage2DMultisampleCoverageNV{nullptr};
	static v8::Handle<v8::Value> method_glTexImage2DMultisampleCoverageNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage2DMultisampleCoverageNV && args.Length() >= 7){
			obj->methodp_glTexImage2DMultisampleCoverageNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei coverageSamples */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei colorSamples */,
				(GLint )(args[3]->NumberValue())/* GLint internalFormat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLboolean )(args[6]->NumberValue())/* GLboolean fixedSampleLocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXIMAGE3DPROC methodp_glTexImage3D{nullptr};
	static v8::Handle<v8::Value> method_glTexImage3D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage3D && args.Length() >= 10){
			obj->methodp_glTexImage3D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLenum )(args[8]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXIMAGE3DEXTPROC methodp_glTexImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage3DEXT && args.Length() >= 10){
			obj->methodp_glTexImage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLenum )(args[8]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	PFNGLTEXIMAGE3DMULTISAMPLEPROC methodp_glTexImage3DMultisample{nullptr};
	static v8::Handle<v8::Value> method_glTexImage3DMultisample(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage3DMultisample && args.Length() >= 7){
			obj->methodp_glTexImage3DMultisample(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[6]->NumberValue())/* GLboolean fixedsamplelocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
	PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC methodp_glTexImage3DMultisampleCoverageNV{nullptr};
	static v8::Handle<v8::Value> method_glTexImage3DMultisampleCoverageNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage3DMultisampleCoverageNV && args.Length() >= 8){
			obj->methodp_glTexImage3DMultisampleCoverageNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei coverageSamples */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei colorSamples */,
				(GLint )(args[3]->NumberValue())/* GLint internalFormat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[7]->NumberValue())/* GLboolean fixedSampleLocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE3DOESPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXIMAGE3DOESPROC methodp_glTexImage3DOES{nullptr};
	static v8::Handle<v8::Value> method_glTexImage3DOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage3DOES && args.Length() >= 10){
			obj->methodp_glTexImage3DOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLenum )(args[8]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXIMAGE4DSGISPROC methodp_glTexImage4DSGIS{nullptr};
	static v8::Handle<v8::Value> method_glTexImage4DSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexImage4DSGIS && args.Length() >= 11){
			obj->methodp_glTexImage4DSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei size4d */,
				(GLint )(args[7]->NumberValue())/* GLint border */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLenum )(args[9]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);
	PFNGLTEXPAGECOMMITMENTARBPROC methodp_glTexPageCommitmentARB{nullptr};
	static v8::Handle<v8::Value> method_glTexPageCommitmentARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexPageCommitmentARB && args.Length() >= 9){
			obj->methodp_glTexPageCommitmentARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[8]->NumberValue())/* GLboolean resident */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLTEXPARAMETERIIVPROC methodp_glTexParameterIiv{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterIiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterIiv && args.Length() >= 3){
			obj->methodp_glTexParameterIiv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLTEXPARAMETERIIVEXTPROC methodp_glTexParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterIivEXT && args.Length() >= 3){
			obj->methodp_glTexParameterIivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);
	PFNGLTEXPARAMETERIUIVPROC methodp_glTexParameterIuiv{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterIuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterIuiv && args.Length() >= 3){
			obj->methodp_glTexParameterIuiv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
	PFNGLTEXPARAMETERIUIVEXTPROC methodp_glTexParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterIuivEXT && args.Length() >= 3){
			obj->methodp_glTexParameterIuivEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat param);
	PFNGLTEXPARAMETERFPROC methodp_glTexParameterf{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterf && args.Length() >= 3){
			obj->methodp_glTexParameterf(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
	PFNGLTEXPARAMETERFVPROC methodp_glTexParameterfv{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterfv && args.Length() >= 3){
			obj->methodp_glTexParameterfv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
	PFNGLTEXPARAMETERIPROC methodp_glTexParameteri{nullptr};
	static v8::Handle<v8::Value> method_glTexParameteri(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameteri && args.Length() >= 3){
			obj->methodp_glTexParameteri(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
	PFNGLTEXPARAMETERIVPROC methodp_glTexParameteriv{nullptr};
	static v8::Handle<v8::Value> method_glTexParameteriv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameteriv && args.Length() >= 3){
			obj->methodp_glTexParameteriv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERXPROC) (GLenum target, GLenum pname, GLfixed param);
	PFNGLTEXPARAMETERXPROC methodp_glTexParameterx{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterx(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterx && args.Length() >= 3){
			obj->methodp_glTexParameterx(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);
	PFNGLTEXPARAMETERXOESPROC methodp_glTexParameterxOES{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterxOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterxOES && args.Length() >= 3){
			obj->methodp_glTexParameterxOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERXVPROC) (GLenum target, GLenum pname, const GLfixed *params);
	PFNGLTEXPARAMETERXVPROC methodp_glTexParameterxv{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterxv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterxv && args.Length() >= 3){
			obj->methodp_glTexParameterxv(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);
	PFNGLTEXPARAMETERXVOESPROC methodp_glTexParameterxvOES{nullptr};
	static v8::Handle<v8::Value> method_glTexParameterxvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexParameterxvOES && args.Length() >= 3){
			obj->methodp_glTexParameterxvOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(const GLfixed *)((int64_t)args[2]->NumberValue())/* const GLfixed *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);
	PFNGLTEXRENDERBUFFERNVPROC methodp_glTexRenderbufferNV{nullptr};
	static v8::Handle<v8::Value> method_glTexRenderbufferNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexRenderbufferNV && args.Length() >= 2){
			obj->methodp_glTexRenderbufferNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	PFNGLTEXSTORAGE1DPROC methodp_glTexStorage1D{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage1D && args.Length() >= 4){
			obj->methodp_glTexStorage1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE1DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	PFNGLTEXSTORAGE1DEXTPROC methodp_glTexStorage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage1DEXT && args.Length() >= 4){
			obj->methodp_glTexStorage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLTEXSTORAGE2DPROC methodp_glTexStorage2D{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage2D && args.Length() >= 5){
			obj->methodp_glTexStorage2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE2DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLTEXSTORAGE2DEXTPROC methodp_glTexStorage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage2DEXT && args.Length() >= 5){
			obj->methodp_glTexStorage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	PFNGLTEXSTORAGE2DMULTISAMPLEPROC methodp_glTexStorage2DMultisample{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage2DMultisample(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage2DMultisample && args.Length() >= 6){
			obj->methodp_glTexStorage2DMultisample(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLboolean )(args[5]->NumberValue())/* GLboolean fixedsamplelocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	PFNGLTEXSTORAGE3DPROC methodp_glTexStorage3D{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage3D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage3D && args.Length() >= 6){
			obj->methodp_glTexStorage3D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE3DEXTPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	PFNGLTEXSTORAGE3DEXTPROC methodp_glTexStorage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage3DEXT && args.Length() >= 6){
			obj->methodp_glTexStorage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	PFNGLTEXSTORAGE3DMULTISAMPLEPROC methodp_glTexStorage3DMultisample{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage3DMultisample(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage3DMultisample && args.Length() >= 7){
			obj->methodp_glTexStorage3DMultisample(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[6]->NumberValue())/* GLboolean fixedsamplelocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC methodp_glTexStorage3DMultisampleOES{nullptr};
	static v8::Handle<v8::Value> method_glTexStorage3DMultisampleOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorage3DMultisampleOES && args.Length() >= 7){
			obj->methodp_glTexStorage3DMultisampleOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[6]->NumberValue())/* GLboolean fixedsamplelocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
	PFNGLTEXSTORAGESPARSEAMDPROC methodp_glTexStorageSparseAMD{nullptr};
	static v8::Handle<v8::Value> method_glTexStorageSparseAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexStorageSparseAMD && args.Length() >= 7){
			obj->methodp_glTexStorageSparseAMD(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLenum )(args[1]->NumberValue())/* GLenum internalFormat */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei depth */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei layers */,
				(GLbitfield )(args[6]->NumberValue())/* GLbitfield flags */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXSUBIMAGE1DPROC methodp_glTexSubImage1D{nullptr};
	static v8::Handle<v8::Value> method_glTexSubImage1D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexSubImage1D && args.Length() >= 7){
			obj->methodp_glTexSubImage1D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXSUBIMAGE1DEXTPROC methodp_glTexSubImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexSubImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexSubImage1DEXT && args.Length() >= 7){
			obj->methodp_glTexSubImage1DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLenum )(args[4]->NumberValue())/* GLenum format */,
				(GLenum )(args[5]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[6]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXSUBIMAGE2DPROC methodp_glTexSubImage2D{nullptr};
	static v8::Handle<v8::Value> method_glTexSubImage2D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexSubImage2D && args.Length() >= 9){
			obj->methodp_glTexSubImage2D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLenum )(args[6]->NumberValue())/* GLenum format */,
				(GLenum )(args[7]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXSUBIMAGE2DEXTPROC methodp_glTexSubImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexSubImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexSubImage2DEXT && args.Length() >= 9){
			obj->methodp_glTexSubImage2DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLenum )(args[6]->NumberValue())/* GLenum format */,
				(GLenum )(args[7]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXSUBIMAGE3DPROC methodp_glTexSubImage3D{nullptr};
	static v8::Handle<v8::Value> method_glTexSubImage3D(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexSubImage3D && args.Length() >= 11){
			obj->methodp_glTexSubImage3D(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLenum )(args[9]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXSUBIMAGE3DEXTPROC methodp_glTexSubImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexSubImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexSubImage3DEXT && args.Length() >= 11){
			obj->methodp_glTexSubImage3DEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLenum )(args[9]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DOESPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXSUBIMAGE3DOESPROC methodp_glTexSubImage3DOES{nullptr};
	static v8::Handle<v8::Value> method_glTexSubImage3DOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexSubImage3DOES && args.Length() >= 11){
			obj->methodp_glTexSubImage3DOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLenum )(args[9]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXSUBIMAGE4DSGISPROC methodp_glTexSubImage4DSGIS{nullptr};
	static v8::Handle<v8::Value> method_glTexSubImage4DSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexSubImage4DSGIS && args.Length() >= 13){
			obj->methodp_glTexSubImage4DSGIS(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLint )(args[5]->NumberValue())/* GLint woffset */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei depth */,
				(GLsizei )(args[9]->NumberValue())/* GLsizei size4d */,
				(GLenum )(args[10]->NumberValue())/* GLenum format */,
				(GLenum )(args[11]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[12]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) ();
	PFNGLTEXTUREBARRIERNVPROC methodp_glTextureBarrierNV{nullptr};
	static v8::Handle<v8::Value> method_glTextureBarrierNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureBarrierNV && args.Length() >= 0){
			obj->methodp_glTextureBarrierNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
	PFNGLTEXTUREBUFFEREXTPROC methodp_glTextureBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureBufferEXT && args.Length() >= 4){
			obj->methodp_glTextureBufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[3]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
	PFNGLTEXTUREBUFFERRANGEEXTPROC methodp_glTextureBufferRangeEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureBufferRangeEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureBufferRangeEXT && args.Length() >= 6){
			obj->methodp_glTextureBufferRangeEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[3]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[4]->NumberValue())/* GLintptr offset */,
				(GLsizeiptr )(args[5]->NumberValue())/* GLsizeiptr size */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	PFNGLTEXTURECOLORMASKSGISPROC methodp_glTextureColorMaskSGIS{nullptr};
	static v8::Handle<v8::Value> method_glTextureColorMaskSGIS(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureColorMaskSGIS && args.Length() >= 4){
			obj->methodp_glTextureColorMaskSGIS(
				(GLboolean )(args[0]->NumberValue())/* GLboolean red */,
				(GLboolean )(args[1]->NumberValue())/* GLboolean green */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean blue */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean alpha */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXTUREIMAGE1DEXTPROC methodp_glTextureImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureImage1DEXT && args.Length() >= 9){
			obj->methodp_glTextureImage1DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLint )(args[5]->NumberValue())/* GLint border */,
				(GLenum )(args[6]->NumberValue())/* GLenum format */,
				(GLenum )(args[7]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[8]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXTUREIMAGE2DEXTPROC methodp_glTextureImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureImage2DEXT && args.Length() >= 10){
			obj->methodp_glTextureImage2DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLint )(args[6]->NumberValue())/* GLint border */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLenum )(args[8]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
	PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC methodp_glTextureImage2DMultisampleCoverageNV{nullptr};
	static v8::Handle<v8::Value> method_glTextureImage2DMultisampleCoverageNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureImage2DMultisampleCoverageNV && args.Length() >= 8){
			obj->methodp_glTextureImage2DMultisampleCoverageNV(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei coverageSamples */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei colorSamples */,
				(GLint )(args[4]->NumberValue())/* GLint internalFormat */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLboolean )(args[7]->NumberValue())/* GLboolean fixedSampleLocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
	PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC methodp_glTextureImage2DMultisampleNV{nullptr};
	static v8::Handle<v8::Value> method_glTextureImage2DMultisampleNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureImage2DMultisampleNV && args.Length() >= 7){
			obj->methodp_glTextureImage2DMultisampleNV(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei samples */,
				(GLint )(args[3]->NumberValue())/* GLint internalFormat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLboolean )(args[6]->NumberValue())/* GLboolean fixedSampleLocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXTUREIMAGE3DEXTPROC methodp_glTextureImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureImage3DEXT && args.Length() >= 11){
			obj->methodp_glTextureImage3DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei depth */,
				(GLint )(args[7]->NumberValue())/* GLint border */,
				(GLenum )(args[8]->NumberValue())/* GLenum format */,
				(GLenum )(args[9]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[10]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
	PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC methodp_glTextureImage3DMultisampleCoverageNV{nullptr};
	static v8::Handle<v8::Value> method_glTextureImage3DMultisampleCoverageNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureImage3DMultisampleCoverageNV && args.Length() >= 9){
			obj->methodp_glTextureImage3DMultisampleCoverageNV(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei coverageSamples */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei colorSamples */,
				(GLint )(args[4]->NumberValue())/* GLint internalFormat */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[8]->NumberValue())/* GLboolean fixedSampleLocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
	PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC methodp_glTextureImage3DMultisampleNV{nullptr};
	static v8::Handle<v8::Value> method_glTextureImage3DMultisampleNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureImage3DMultisampleNV && args.Length() >= 8){
			obj->methodp_glTextureImage3DMultisampleNV(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei samples */,
				(GLint )(args[3]->NumberValue())/* GLint internalFormat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[7]->NumberValue())/* GLboolean fixedSampleLocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
	PFNGLTEXTURELIGHTEXTPROC methodp_glTextureLightEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureLightEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureLightEXT && args.Length() >= 1){
			obj->methodp_glTextureLightEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
	PFNGLTEXTUREMATERIALEXTPROC methodp_glTextureMaterialEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureMaterialEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureMaterialEXT && args.Length() >= 2){
			obj->methodp_glTextureMaterialEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum face */,
				(GLenum )(args[1]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
	PFNGLTEXTURENORMALEXTPROC methodp_glTextureNormalEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureNormalEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureNormalEXT && args.Length() >= 1){
			obj->methodp_glTextureNormalEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum mode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);
	PFNGLTEXTUREPAGECOMMITMENTEXTPROC methodp_glTexturePageCommitmentEXT{nullptr};
	static v8::Handle<v8::Value> method_glTexturePageCommitmentEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTexturePageCommitmentEXT && args.Length() >= 9){
			obj->methodp_glTexturePageCommitmentEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */,
				(GLint )(args[2]->NumberValue())/* GLint xoffset */,
				(GLint )(args[3]->NumberValue())/* GLint yoffset */,
				(GLint )(args[4]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[8]->NumberValue())/* GLboolean resident */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
	PFNGLTEXTUREPARAMETERIIVEXTPROC methodp_glTextureParameterIivEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureParameterIivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureParameterIivEXT && args.Length() >= 4){
			obj->methodp_glTextureParameterIivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
	PFNGLTEXTUREPARAMETERIUIVEXTPROC methodp_glTextureParameterIuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureParameterIuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureParameterIuivEXT && args.Length() >= 4){
			obj->methodp_glTextureParameterIuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
	PFNGLTEXTUREPARAMETERFEXTPROC methodp_glTextureParameterfEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureParameterfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureParameterfEXT && args.Length() >= 4){
			obj->methodp_glTextureParameterfEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
	PFNGLTEXTUREPARAMETERFVEXTPROC methodp_glTextureParameterfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureParameterfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureParameterfvEXT && args.Length() >= 4){
			obj->methodp_glTextureParameterfvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
	PFNGLTEXTUREPARAMETERIEXTPROC methodp_glTextureParameteriEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureParameteriEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureParameteriEXT && args.Length() >= 4){
			obj->methodp_glTextureParameteriEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(GLint )(args[3]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
	PFNGLTEXTUREPARAMETERIVEXTPROC methodp_glTextureParameterivEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureParameterivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureParameterivEXT && args.Length() >= 4){
			obj->methodp_glTextureParameterivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const void *pointer);
	PFNGLTEXTURERANGEAPPLEPROC methodp_glTextureRangeAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glTextureRangeAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureRangeAPPLE && args.Length() >= 3){
			obj->methodp_glTextureRangeAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei length */,
				(const void *)((int64_t)args[2]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
	PFNGLTEXTURERENDERBUFFEREXTPROC methodp_glTextureRenderbufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureRenderbufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureRenderbufferEXT && args.Length() >= 3){
			obj->methodp_glTextureRenderbufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint renderbuffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
	PFNGLTEXTURESTORAGE1DEXTPROC methodp_glTextureStorage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureStorage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureStorage1DEXT && args.Length() >= 5){
			obj->methodp_glTextureStorage1DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
	PFNGLTEXTURESTORAGE2DEXTPROC methodp_glTextureStorage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureStorage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureStorage2DEXT && args.Length() >= 6){
			obj->methodp_glTextureStorage2DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
	PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC methodp_glTextureStorage2DMultisampleEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureStorage2DMultisampleEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureStorage2DMultisampleEXT && args.Length() >= 7){
			obj->methodp_glTextureStorage2DMultisampleEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLboolean )(args[6]->NumberValue())/* GLboolean fixedsamplelocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
	PFNGLTEXTURESTORAGE3DEXTPROC methodp_glTextureStorage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureStorage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureStorage3DEXT && args.Length() >= 7){
			obj->methodp_glTextureStorage3DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei levels */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei depth */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
	PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC methodp_glTextureStorage3DMultisampleEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureStorage3DMultisampleEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureStorage3DMultisampleEXT && args.Length() >= 8){
			obj->methodp_glTextureStorage3DMultisampleEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei samples */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei depth */,
				(GLboolean )(args[7]->NumberValue())/* GLboolean fixedsamplelocations */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
	PFNGLTEXTURESTORAGESPARSEAMDPROC methodp_glTextureStorageSparseAMD{nullptr};
	static v8::Handle<v8::Value> method_glTextureStorageSparseAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureStorageSparseAMD && args.Length() >= 8){
			obj->methodp_glTextureStorageSparseAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLenum )(args[2]->NumberValue())/* GLenum internalFormat */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei depth */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei layers */,
				(GLbitfield )(args[7]->NumberValue())/* GLbitfield flags */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXTURESUBIMAGE1DEXTPROC methodp_glTextureSubImage1DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureSubImage1DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureSubImage1DEXT && args.Length() >= 8){
			obj->methodp_glTextureSubImage1DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei width */,
				(GLenum )(args[5]->NumberValue())/* GLenum format */,
				(GLenum )(args[6]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[7]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXTURESUBIMAGE2DEXTPROC methodp_glTextureSubImage2DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureSubImage2DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureSubImage2DEXT && args.Length() >= 10){
			obj->methodp_glTextureSubImage2DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei height */,
				(GLenum )(args[7]->NumberValue())/* GLenum format */,
				(GLenum )(args[8]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[9]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
	PFNGLTEXTURESUBIMAGE3DEXTPROC methodp_glTextureSubImage3DEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureSubImage3DEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureSubImage3DEXT && args.Length() >= 12){
			obj->methodp_glTextureSubImage3DEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLint )(args[2]->NumberValue())/* GLint level */,
				(GLint )(args[3]->NumberValue())/* GLint xoffset */,
				(GLint )(args[4]->NumberValue())/* GLint yoffset */,
				(GLint )(args[5]->NumberValue())/* GLint zoffset */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[7]->NumberValue())/* GLsizei height */,
				(GLsizei )(args[8]->NumberValue())/* GLsizei depth */,
				(GLenum )(args[9]->NumberValue())/* GLenum format */,
				(GLenum )(args[10]->NumberValue())/* GLenum type */,
				(const void *)((int64_t)args[11]->NumberValue())/* const void *pixels */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
	PFNGLTEXTUREVIEWPROC methodp_glTextureView{nullptr};
	static v8::Handle<v8::Value> method_glTextureView(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureView && args.Length() >= 8){
			obj->methodp_glTextureView(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint origtexture */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[4]->NumberValue())/* GLuint minlevel */,
				(GLuint )(args[5]->NumberValue())/* GLuint numlevels */,
				(GLuint )(args[6]->NumberValue())/* GLuint minlayer */,
				(GLuint )(args[7]->NumberValue())/* GLuint numlayers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTEXTUREVIEWEXTPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
	PFNGLTEXTUREVIEWEXTPROC methodp_glTextureViewEXT{nullptr};
	static v8::Handle<v8::Value> method_glTextureViewEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTextureViewEXT && args.Length() >= 8){
			obj->methodp_glTextureViewEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLuint )(args[2]->NumberValue())/* GLuint origtexture */,
				(GLenum )(args[3]->NumberValue())/* GLenum internalformat */,
				(GLuint )(args[4]->NumberValue())/* GLuint minlevel */,
				(GLuint )(args[5]->NumberValue())/* GLuint numlevels */,
				(GLuint )(args[6]->NumberValue())/* GLuint minlayer */,
				(GLuint )(args[7]->NumberValue())/* GLuint numlayers */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
	PFNGLTRACKMATRIXNVPROC methodp_glTrackMatrixNV{nullptr};
	static v8::Handle<v8::Value> method_glTrackMatrixNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTrackMatrixNV && args.Length() >= 4){
			obj->methodp_glTrackMatrixNV(
				(GLenum )(args[0]->NumberValue())/* GLenum target */,
				(GLuint )(args[1]->NumberValue())/* GLuint address */,
				(GLenum )(args[2]->NumberValue())/* GLenum matrix */,
				(GLenum )(args[3]->NumberValue())/* GLenum transform */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLenum bufferMode);
	PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC methodp_glTransformFeedbackAttribsNV{nullptr};
	static v8::Handle<v8::Value> method_glTransformFeedbackAttribsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTransformFeedbackAttribsNV && args.Length() >= 3){
			obj->methodp_glTransformFeedbackAttribsNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *attribs */,
				(GLenum )(args[2]->NumberValue())/* GLenum bufferMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
	PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC methodp_glTransformFeedbackStreamAttribsNV{nullptr};
	static v8::Handle<v8::Value> method_glTransformFeedbackStreamAttribsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTransformFeedbackStreamAttribsNV && args.Length() >= 5){
			obj->methodp_glTransformFeedbackStreamAttribsNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *attribs */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei nbuffers */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *bufstreams */,
				(GLenum )(args[4]->NumberValue())/* GLenum bufferMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
	PFNGLTRANSFORMFEEDBACKVARYINGSPROC methodp_glTransformFeedbackVaryings{nullptr};
	static v8::Handle<v8::Value> method_glTransformFeedbackVaryings(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTransformFeedbackVaryings && args.Length() >= 4){
			obj->methodp_glTransformFeedbackVaryings(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLchar *const*)((int64_t)args[2]->NumberValue())/* const GLchar *const*varyings */,
				(GLenum )(args[3]->NumberValue())/* GLenum bufferMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
	PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC methodp_glTransformFeedbackVaryingsEXT{nullptr};
	static v8::Handle<v8::Value> method_glTransformFeedbackVaryingsEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTransformFeedbackVaryingsEXT && args.Length() >= 4){
			obj->methodp_glTransformFeedbackVaryingsEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLchar *const*)((int64_t)args[2]->NumberValue())/* const GLchar *const*varyings */,
				(GLenum )(args[3]->NumberValue())/* GLenum bufferMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
	PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC methodp_glTransformFeedbackVaryingsNV{nullptr};
	static v8::Handle<v8::Value> method_glTransformFeedbackVaryingsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTransformFeedbackVaryingsNV && args.Length() >= 4){
			obj->methodp_glTransformFeedbackVaryingsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *locations */,
				(GLenum )(args[3]->NumberValue())/* GLenum bufferMode */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);
	PFNGLTRANSFORMPATHNVPROC methodp_glTransformPathNV{nullptr};
	static v8::Handle<v8::Value> method_glTransformPathNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTransformPathNV && args.Length() >= 4){
			obj->methodp_glTransformPathNV(
				(GLuint )(args[0]->NumberValue())/* GLuint resultPath */,
				(GLuint )(args[1]->NumberValue())/* GLuint srcPath */,
				(GLenum )(args[2]->NumberValue())/* GLenum transformType */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *transformValues */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSLATEDPROC) (GLdouble x, GLdouble y, GLdouble z);
	PFNGLTRANSLATEDPROC methodp_glTranslated{nullptr};
	static v8::Handle<v8::Value> method_glTranslated(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTranslated && args.Length() >= 3){
			obj->methodp_glTranslated(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSLATEFPROC) (GLfloat x, GLfloat y, GLfloat z);
	PFNGLTRANSLATEFPROC methodp_glTranslatef{nullptr};
	static v8::Handle<v8::Value> method_glTranslatef(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTranslatef && args.Length() >= 3){
			obj->methodp_glTranslatef(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSLATEXPROC) (GLfixed x, GLfixed y, GLfixed z);
	PFNGLTRANSLATEXPROC methodp_glTranslatex{nullptr};
	static v8::Handle<v8::Value> method_glTranslatex(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTranslatex && args.Length() >= 3){
			obj->methodp_glTranslatex(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLTRANSLATEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);
	PFNGLTRANSLATEXOESPROC methodp_glTranslatexOES{nullptr};
	static v8::Handle<v8::Value> method_glTranslatexOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glTranslatexOES && args.Length() >= 3){
			obj->methodp_glTranslatexOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);
	PFNGLUNIFORM1DPROC methodp_glUniform1d{nullptr};
	static v8::Handle<v8::Value> method_glUniform1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1d && args.Length() >= 2){
			obj->methodp_glUniform1d(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);
	PFNGLUNIFORM1DVPROC methodp_glUniform1dv{nullptr};
	static v8::Handle<v8::Value> method_glUniform1dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1dv && args.Length() >= 3){
			obj->methodp_glUniform1dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
	PFNGLUNIFORM1FPROC methodp_glUniform1f{nullptr};
	static v8::Handle<v8::Value> method_glUniform1f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1f && args.Length() >= 2){
			obj->methodp_glUniform1f(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
	PFNGLUNIFORM1FARBPROC methodp_glUniform1fARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform1fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1fARB && args.Length() >= 2){
			obj->methodp_glUniform1fARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);
	PFNGLUNIFORM1FVPROC methodp_glUniform1fv{nullptr};
	static v8::Handle<v8::Value> method_glUniform1fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1fv && args.Length() >= 3){
			obj->methodp_glUniform1fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
	PFNGLUNIFORM1FVARBPROC methodp_glUniform1fvARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform1fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1fvARB && args.Length() >= 3){
			obj->methodp_glUniform1fvARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
	PFNGLUNIFORM1IPROC methodp_glUniform1i{nullptr};
	static v8::Handle<v8::Value> method_glUniform1i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1i && args.Length() >= 2){
			obj->methodp_glUniform1i(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint )(args[1]->NumberValue())/* GLint v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);
	PFNGLUNIFORM1I64NVPROC methodp_glUniform1i64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniform1i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1i64NV && args.Length() >= 2){
			obj->methodp_glUniform1i64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint64EXT )(args[1]->NumberValue())/* GLint64EXT x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
	PFNGLUNIFORM1I64VNVPROC methodp_glUniform1i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniform1i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1i64vNV && args.Length() >= 3){
			obj->methodp_glUniform1i64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint64EXT *)((int64_t)args[2]->NumberValue())/* const GLint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
	PFNGLUNIFORM1IARBPROC methodp_glUniform1iARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform1iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1iARB && args.Length() >= 2){
			obj->methodp_glUniform1iARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint )(args[1]->NumberValue())/* GLint v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);
	PFNGLUNIFORM1IVPROC methodp_glUniform1iv{nullptr};
	static v8::Handle<v8::Value> method_glUniform1iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1iv && args.Length() >= 3){
			obj->methodp_glUniform1iv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);
	PFNGLUNIFORM1IVARBPROC methodp_glUniform1ivARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform1ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1ivARB && args.Length() >= 3){
			obj->methodp_glUniform1ivARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
	PFNGLUNIFORM1UIPROC methodp_glUniform1ui{nullptr};
	static v8::Handle<v8::Value> method_glUniform1ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1ui && args.Length() >= 2){
			obj->methodp_glUniform1ui(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint )(args[1]->NumberValue())/* GLuint v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);
	PFNGLUNIFORM1UI64NVPROC methodp_glUniform1ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniform1ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1ui64NV && args.Length() >= 2){
			obj->methodp_glUniform1ui64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLUNIFORM1UI64VNVPROC methodp_glUniform1ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniform1ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1ui64vNV && args.Length() >= 3){
			obj->methodp_glUniform1ui64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[2]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
	PFNGLUNIFORM1UIEXTPROC methodp_glUniform1uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniform1uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1uiEXT && args.Length() >= 2){
			obj->methodp_glUniform1uiEXT(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint )(args[1]->NumberValue())/* GLuint v0 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);
	PFNGLUNIFORM1UIVPROC methodp_glUniform1uiv{nullptr};
	static v8::Handle<v8::Value> method_glUniform1uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1uiv && args.Length() >= 3){
			obj->methodp_glUniform1uiv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
	PFNGLUNIFORM1UIVEXTPROC methodp_glUniform1uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniform1uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform1uivEXT && args.Length() >= 3){
			obj->methodp_glUniform1uivEXT(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
	PFNGLUNIFORM2DPROC methodp_glUniform2d{nullptr};
	static v8::Handle<v8::Value> method_glUniform2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2d && args.Length() >= 3){
			obj->methodp_glUniform2d(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);
	PFNGLUNIFORM2DVPROC methodp_glUniform2dv{nullptr};
	static v8::Handle<v8::Value> method_glUniform2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2dv && args.Length() >= 3){
			obj->methodp_glUniform2dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
	PFNGLUNIFORM2FPROC methodp_glUniform2f{nullptr};
	static v8::Handle<v8::Value> method_glUniform2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2f && args.Length() >= 3){
			obj->methodp_glUniform2f(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
	PFNGLUNIFORM2FARBPROC methodp_glUniform2fARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform2fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2fARB && args.Length() >= 3){
			obj->methodp_glUniform2fARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);
	PFNGLUNIFORM2FVPROC methodp_glUniform2fv{nullptr};
	static v8::Handle<v8::Value> method_glUniform2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2fv && args.Length() >= 3){
			obj->methodp_glUniform2fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
	PFNGLUNIFORM2FVARBPROC methodp_glUniform2fvARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform2fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2fvARB && args.Length() >= 3){
			obj->methodp_glUniform2fvARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
	PFNGLUNIFORM2IPROC methodp_glUniform2i{nullptr};
	static v8::Handle<v8::Value> method_glUniform2i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2i && args.Length() >= 3){
			obj->methodp_glUniform2i(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint )(args[1]->NumberValue())/* GLint v0 */,
				(GLint )(args[2]->NumberValue())/* GLint v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);
	PFNGLUNIFORM2I64NVPROC methodp_glUniform2i64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniform2i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2i64NV && args.Length() >= 3){
			obj->methodp_glUniform2i64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint64EXT )(args[1]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
	PFNGLUNIFORM2I64VNVPROC methodp_glUniform2i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniform2i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2i64vNV && args.Length() >= 3){
			obj->methodp_glUniform2i64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint64EXT *)((int64_t)args[2]->NumberValue())/* const GLint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
	PFNGLUNIFORM2IARBPROC methodp_glUniform2iARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform2iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2iARB && args.Length() >= 3){
			obj->methodp_glUniform2iARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint )(args[1]->NumberValue())/* GLint v0 */,
				(GLint )(args[2]->NumberValue())/* GLint v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);
	PFNGLUNIFORM2IVPROC methodp_glUniform2iv{nullptr};
	static v8::Handle<v8::Value> method_glUniform2iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2iv && args.Length() >= 3){
			obj->methodp_glUniform2iv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);
	PFNGLUNIFORM2IVARBPROC methodp_glUniform2ivARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform2ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2ivARB && args.Length() >= 3){
			obj->methodp_glUniform2ivARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
	PFNGLUNIFORM2UIPROC methodp_glUniform2ui{nullptr};
	static v8::Handle<v8::Value> method_glUniform2ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2ui && args.Length() >= 3){
			obj->methodp_glUniform2ui(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint )(args[1]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[2]->NumberValue())/* GLuint v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
	PFNGLUNIFORM2UI64NVPROC methodp_glUniform2ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniform2ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2ui64NV && args.Length() >= 3){
			obj->methodp_glUniform2ui64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLUNIFORM2UI64VNVPROC methodp_glUniform2ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniform2ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2ui64vNV && args.Length() >= 3){
			obj->methodp_glUniform2ui64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[2]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
	PFNGLUNIFORM2UIEXTPROC methodp_glUniform2uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniform2uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2uiEXT && args.Length() >= 3){
			obj->methodp_glUniform2uiEXT(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint )(args[1]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[2]->NumberValue())/* GLuint v1 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);
	PFNGLUNIFORM2UIVPROC methodp_glUniform2uiv{nullptr};
	static v8::Handle<v8::Value> method_glUniform2uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2uiv && args.Length() >= 3){
			obj->methodp_glUniform2uiv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
	PFNGLUNIFORM2UIVEXTPROC methodp_glUniform2uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniform2uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform2uivEXT && args.Length() >= 3){
			obj->methodp_glUniform2uivEXT(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
	PFNGLUNIFORM3DPROC methodp_glUniform3d{nullptr};
	static v8::Handle<v8::Value> method_glUniform3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3d && args.Length() >= 4){
			obj->methodp_glUniform3d(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);
	PFNGLUNIFORM3DVPROC methodp_glUniform3dv{nullptr};
	static v8::Handle<v8::Value> method_glUniform3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3dv && args.Length() >= 3){
			obj->methodp_glUniform3dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	PFNGLUNIFORM3FPROC methodp_glUniform3f{nullptr};
	static v8::Handle<v8::Value> method_glUniform3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3f && args.Length() >= 4){
			obj->methodp_glUniform3f(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
	PFNGLUNIFORM3FARBPROC methodp_glUniform3fARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform3fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3fARB && args.Length() >= 4){
			obj->methodp_glUniform3fARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);
	PFNGLUNIFORM3FVPROC methodp_glUniform3fv{nullptr};
	static v8::Handle<v8::Value> method_glUniform3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3fv && args.Length() >= 3){
			obj->methodp_glUniform3fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
	PFNGLUNIFORM3FVARBPROC methodp_glUniform3fvARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform3fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3fvARB && args.Length() >= 3){
			obj->methodp_glUniform3fvARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
	PFNGLUNIFORM3IPROC methodp_glUniform3i{nullptr};
	static v8::Handle<v8::Value> method_glUniform3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3i && args.Length() >= 4){
			obj->methodp_glUniform3i(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint )(args[1]->NumberValue())/* GLint v0 */,
				(GLint )(args[2]->NumberValue())/* GLint v1 */,
				(GLint )(args[3]->NumberValue())/* GLint v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
	PFNGLUNIFORM3I64NVPROC methodp_glUniform3i64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniform3i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3i64NV && args.Length() >= 4){
			obj->methodp_glUniform3i64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint64EXT )(args[1]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT y */,
				(GLint64EXT )(args[3]->NumberValue())/* GLint64EXT z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
	PFNGLUNIFORM3I64VNVPROC methodp_glUniform3i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniform3i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3i64vNV && args.Length() >= 3){
			obj->methodp_glUniform3i64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint64EXT *)((int64_t)args[2]->NumberValue())/* const GLint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
	PFNGLUNIFORM3IARBPROC methodp_glUniform3iARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform3iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3iARB && args.Length() >= 4){
			obj->methodp_glUniform3iARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint )(args[1]->NumberValue())/* GLint v0 */,
				(GLint )(args[2]->NumberValue())/* GLint v1 */,
				(GLint )(args[3]->NumberValue())/* GLint v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
	PFNGLUNIFORM3IVPROC methodp_glUniform3iv{nullptr};
	static v8::Handle<v8::Value> method_glUniform3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3iv && args.Length() >= 3){
			obj->methodp_glUniform3iv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);
	PFNGLUNIFORM3IVARBPROC methodp_glUniform3ivARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform3ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3ivARB && args.Length() >= 3){
			obj->methodp_glUniform3ivARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
	PFNGLUNIFORM3UIPROC methodp_glUniform3ui{nullptr};
	static v8::Handle<v8::Value> method_glUniform3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3ui && args.Length() >= 4){
			obj->methodp_glUniform3ui(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint )(args[1]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[2]->NumberValue())/* GLuint v1 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
	PFNGLUNIFORM3UI64NVPROC methodp_glUniform3ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniform3ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3ui64NV && args.Length() >= 4){
			obj->methodp_glUniform3ui64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT y */,
				(GLuint64EXT )(args[3]->NumberValue())/* GLuint64EXT z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLUNIFORM3UI64VNVPROC methodp_glUniform3ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniform3ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3ui64vNV && args.Length() >= 3){
			obj->methodp_glUniform3ui64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[2]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
	PFNGLUNIFORM3UIEXTPROC methodp_glUniform3uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniform3uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3uiEXT && args.Length() >= 4){
			obj->methodp_glUniform3uiEXT(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint )(args[1]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[2]->NumberValue())/* GLuint v1 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v2 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);
	PFNGLUNIFORM3UIVPROC methodp_glUniform3uiv{nullptr};
	static v8::Handle<v8::Value> method_glUniform3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3uiv && args.Length() >= 3){
			obj->methodp_glUniform3uiv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
	PFNGLUNIFORM3UIVEXTPROC methodp_glUniform3uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniform3uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform3uivEXT && args.Length() >= 3){
			obj->methodp_glUniform3uivEXT(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLUNIFORM4DPROC methodp_glUniform4d{nullptr};
	static v8::Handle<v8::Value> method_glUniform4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4d && args.Length() >= 5){
			obj->methodp_glUniform4d(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);
	PFNGLUNIFORM4DVPROC methodp_glUniform4dv{nullptr};
	static v8::Handle<v8::Value> method_glUniform4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4dv && args.Length() >= 3){
			obj->methodp_glUniform4dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	PFNGLUNIFORM4FPROC methodp_glUniform4f{nullptr};
	static v8::Handle<v8::Value> method_glUniform4f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4f && args.Length() >= 5){
			obj->methodp_glUniform4f(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v2 */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
	PFNGLUNIFORM4FARBPROC methodp_glUniform4fARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform4fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4fARB && args.Length() >= 5){
			obj->methodp_glUniform4fARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat v0 */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat v1 */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat v2 */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);
	PFNGLUNIFORM4FVPROC methodp_glUniform4fv{nullptr};
	static v8::Handle<v8::Value> method_glUniform4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4fv && args.Length() >= 3){
			obj->methodp_glUniform4fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
	PFNGLUNIFORM4FVARBPROC methodp_glUniform4fvARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform4fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4fvARB && args.Length() >= 3){
			obj->methodp_glUniform4fvARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	PFNGLUNIFORM4IPROC methodp_glUniform4i{nullptr};
	static v8::Handle<v8::Value> method_glUniform4i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4i && args.Length() >= 5){
			obj->methodp_glUniform4i(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint )(args[1]->NumberValue())/* GLint v0 */,
				(GLint )(args[2]->NumberValue())/* GLint v1 */,
				(GLint )(args[3]->NumberValue())/* GLint v2 */,
				(GLint )(args[4]->NumberValue())/* GLint v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
	PFNGLUNIFORM4I64NVPROC methodp_glUniform4i64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniform4i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4i64NV && args.Length() >= 5){
			obj->methodp_glUniform4i64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint64EXT )(args[1]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT y */,
				(GLint64EXT )(args[3]->NumberValue())/* GLint64EXT z */,
				(GLint64EXT )(args[4]->NumberValue())/* GLint64EXT w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
	PFNGLUNIFORM4I64VNVPROC methodp_glUniform4i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniform4i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4i64vNV && args.Length() >= 3){
			obj->methodp_glUniform4i64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint64EXT *)((int64_t)args[2]->NumberValue())/* const GLint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
	PFNGLUNIFORM4IARBPROC methodp_glUniform4iARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform4iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4iARB && args.Length() >= 5){
			obj->methodp_glUniform4iARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLint )(args[1]->NumberValue())/* GLint v0 */,
				(GLint )(args[2]->NumberValue())/* GLint v1 */,
				(GLint )(args[3]->NumberValue())/* GLint v2 */,
				(GLint )(args[4]->NumberValue())/* GLint v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);
	PFNGLUNIFORM4IVPROC methodp_glUniform4iv{nullptr};
	static v8::Handle<v8::Value> method_glUniform4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4iv && args.Length() >= 3){
			obj->methodp_glUniform4iv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);
	PFNGLUNIFORM4IVARBPROC methodp_glUniform4ivARB{nullptr};
	static v8::Handle<v8::Value> method_glUniform4ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4ivARB && args.Length() >= 3){
			obj->methodp_glUniform4ivARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLint *)((int64_t)args[2]->NumberValue())/* const GLint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	PFNGLUNIFORM4UIPROC methodp_glUniform4ui{nullptr};
	static v8::Handle<v8::Value> method_glUniform4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4ui && args.Length() >= 5){
			obj->methodp_glUniform4ui(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint )(args[1]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[2]->NumberValue())/* GLuint v1 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v2 */,
				(GLuint )(args[4]->NumberValue())/* GLuint v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
	PFNGLUNIFORM4UI64NVPROC methodp_glUniform4ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniform4ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4ui64NV && args.Length() >= 5){
			obj->methodp_glUniform4ui64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT y */,
				(GLuint64EXT )(args[3]->NumberValue())/* GLuint64EXT z */,
				(GLuint64EXT )(args[4]->NumberValue())/* GLuint64EXT w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLUNIFORM4UI64VNVPROC methodp_glUniform4ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniform4ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4ui64vNV && args.Length() >= 3){
			obj->methodp_glUniform4ui64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[2]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
	PFNGLUNIFORM4UIEXTPROC methodp_glUniform4uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniform4uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4uiEXT && args.Length() >= 5){
			obj->methodp_glUniform4uiEXT(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint )(args[1]->NumberValue())/* GLuint v0 */,
				(GLuint )(args[2]->NumberValue())/* GLuint v1 */,
				(GLuint )(args[3]->NumberValue())/* GLuint v2 */,
				(GLuint )(args[4]->NumberValue())/* GLuint v3 */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);
	PFNGLUNIFORM4UIVPROC methodp_glUniform4uiv{nullptr};
	static v8::Handle<v8::Value> method_glUniform4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4uiv && args.Length() >= 3){
			obj->methodp_glUniform4uiv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
	PFNGLUNIFORM4UIVEXTPROC methodp_glUniform4uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniform4uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniform4uivEXT && args.Length() >= 3){
			obj->methodp_glUniform4uivEXT(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
	PFNGLUNIFORMBLOCKBINDINGPROC methodp_glUniformBlockBinding{nullptr};
	static v8::Handle<v8::Value> method_glUniformBlockBinding(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformBlockBinding && args.Length() >= 3){
			obj->methodp_glUniformBlockBinding(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLuint )(args[1]->NumberValue())/* GLuint uniformBlockIndex */,
				(GLuint )(args[2]->NumberValue())/* GLuint uniformBlockBinding */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
	PFNGLUNIFORMBUFFEREXTPROC methodp_glUniformBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glUniformBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformBufferEXT && args.Length() >= 3){
			obj->methodp_glUniformBufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint program */,
				(GLint )(args[1]->NumberValue())/* GLint location */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value);
	PFNGLUNIFORMHANDLEUI64ARBPROC methodp_glUniformHandleui64ARB{nullptr};
	static v8::Handle<v8::Value> method_glUniformHandleui64ARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformHandleui64ARB && args.Length() >= 2){
			obj->methodp_glUniformHandleui64ARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint64 )(args[1]->NumberValue())/* GLuint64 value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value);
	PFNGLUNIFORMHANDLEUI64NVPROC methodp_glUniformHandleui64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniformHandleui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformHandleui64NV && args.Length() >= 2){
			obj->methodp_glUniformHandleui64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint64 )(args[1]->NumberValue())/* GLuint64 value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);
	PFNGLUNIFORMHANDLEUI64VARBPROC methodp_glUniformHandleui64vARB{nullptr};
	static v8::Handle<v8::Value> method_glUniformHandleui64vARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformHandleui64vARB && args.Length() >= 3){
			obj->methodp_glUniformHandleui64vARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint64 *)((int64_t)args[2]->NumberValue())/* const GLuint64 *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64 *value);
	PFNGLUNIFORMHANDLEUI64VNVPROC methodp_glUniformHandleui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniformHandleui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformHandleui64vNV && args.Length() >= 3){
			obj->methodp_glUniformHandleui64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint64 *)((int64_t)args[2]->NumberValue())/* const GLuint64 *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX2DVPROC methodp_glUniformMatrix2dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix2dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX2FVPROC methodp_glUniformMatrix2fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix2fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX2FVARBPROC methodp_glUniformMatrix2fvARB{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2fvARB && args.Length() >= 4){
			obj->methodp_glUniformMatrix2fvARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX2X3DVPROC methodp_glUniformMatrix2x3dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2x3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2x3dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix2x3dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX2X3FVPROC methodp_glUniformMatrix2x3fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2x3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2x3fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix2x3fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX2X3FVNVPROC methodp_glUniformMatrix2x3fvNV{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2x3fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2x3fvNV && args.Length() >= 4){
			obj->methodp_glUniformMatrix2x3fvNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX2X4DVPROC methodp_glUniformMatrix2x4dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2x4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2x4dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix2x4dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX2X4FVPROC methodp_glUniformMatrix2x4fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2x4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2x4fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix2x4fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX2X4FVNVPROC methodp_glUniformMatrix2x4fvNV{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix2x4fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix2x4fvNV && args.Length() >= 4){
			obj->methodp_glUniformMatrix2x4fvNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX3DVPROC methodp_glUniformMatrix3dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix3dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX3FVPROC methodp_glUniformMatrix3fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix3fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX3FVARBPROC methodp_glUniformMatrix3fvARB{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3fvARB && args.Length() >= 4){
			obj->methodp_glUniformMatrix3fvARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX3X2DVPROC methodp_glUniformMatrix3x2dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3x2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3x2dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix3x2dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX3X2FVPROC methodp_glUniformMatrix3x2fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3x2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3x2fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix3x2fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX3X2FVNVPROC methodp_glUniformMatrix3x2fvNV{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3x2fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3x2fvNV && args.Length() >= 4){
			obj->methodp_glUniformMatrix3x2fvNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX3X4DVPROC methodp_glUniformMatrix3x4dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3x4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3x4dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix3x4dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX3X4FVPROC methodp_glUniformMatrix3x4fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3x4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3x4fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix3x4fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX3X4FVNVPROC methodp_glUniformMatrix3x4fvNV{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix3x4fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix3x4fvNV && args.Length() >= 4){
			obj->methodp_glUniformMatrix3x4fvNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX4DVPROC methodp_glUniformMatrix4dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix4dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX4FVPROC methodp_glUniformMatrix4fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix4fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX4FVARBPROC methodp_glUniformMatrix4fvARB{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4fvARB && args.Length() >= 4){
			obj->methodp_glUniformMatrix4fvARB(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX4X2DVPROC methodp_glUniformMatrix4x2dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4x2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4x2dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix4x2dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX4X2FVPROC methodp_glUniformMatrix4x2fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4x2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4x2fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix4x2fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX4X2FVNVPROC methodp_glUniformMatrix4x2fvNV{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4x2fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4x2fvNV && args.Length() >= 4){
			obj->methodp_glUniformMatrix4x2fvNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
	PFNGLUNIFORMMATRIX4X3DVPROC methodp_glUniformMatrix4x3dv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4x3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4x3dv && args.Length() >= 4){
			obj->methodp_glUniformMatrix4x3dv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX4X3FVPROC methodp_glUniformMatrix4x3fv{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4x3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4x3fv && args.Length() >= 4){
			obj->methodp_glUniformMatrix4x3fv(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVNVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
	PFNGLUNIFORMMATRIX4X3FVNVPROC methodp_glUniformMatrix4x3fvNV{nullptr};
	static v8::Handle<v8::Value> method_glUniformMatrix4x3fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformMatrix4x3fvNV && args.Length() >= 4){
			obj->methodp_glUniformMatrix4x3fvNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean transpose */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);
	PFNGLUNIFORMSUBROUTINESUIVPROC methodp_glUniformSubroutinesuiv{nullptr};
	static v8::Handle<v8::Value> method_glUniformSubroutinesuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformSubroutinesuiv && args.Length() >= 3){
			obj->methodp_glUniformSubroutinesuiv(
				(GLenum )(args[0]->NumberValue())/* GLenum shadertype */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *indices */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
	PFNGLUNIFORMUI64NVPROC methodp_glUniformui64NV{nullptr};
	static v8::Handle<v8::Value> method_glUniformui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformui64NV && args.Length() >= 2){
			obj->methodp_glUniformui64NV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
	PFNGLUNIFORMUI64VNVPROC methodp_glUniformui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glUniformui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUniformui64vNV && args.Length() >= 3){
			obj->methodp_glUniformui64vNV(
				(GLint )(args[0]->NumberValue())/* GLint location */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLuint64EXT *)((int64_t)args[2]->NumberValue())/* const GLuint64EXT *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNLOCKARRAYSEXTPROC) ();
	PFNGLUNLOCKARRAYSEXTPROC methodp_glUnlockArraysEXT{nullptr};
	static v8::Handle<v8::Value> method_glUnlockArraysEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUnlockArraysEXT && args.Length() >= 0){
			obj->methodp_glUnlockArraysEXT(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);
	PFNGLUNMAPBUFFERPROC methodp_glUnmapBuffer{nullptr};
	static v8::Handle<v8::Value> method_glUnmapBuffer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUnmapBuffer && args.Length() >= 1){
			obj->methodp_glUnmapBuffer(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERARBPROC) (GLenum target);
	PFNGLUNMAPBUFFERARBPROC methodp_glUnmapBufferARB{nullptr};
	static v8::Handle<v8::Value> method_glUnmapBufferARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUnmapBufferARB && args.Length() >= 1){
			obj->methodp_glUnmapBufferARB(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFEROESPROC) (GLenum target);
	PFNGLUNMAPBUFFEROESPROC methodp_glUnmapBufferOES{nullptr};
	static v8::Handle<v8::Value> method_glUnmapBufferOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUnmapBufferOES && args.Length() >= 1){
			obj->methodp_glUnmapBufferOES(
				(GLenum )(args[0]->NumberValue())/* GLenum target */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
	PFNGLUNMAPNAMEDBUFFEREXTPROC methodp_glUnmapNamedBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glUnmapNamedBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUnmapNamedBufferEXT && args.Length() >= 1){
			obj->methodp_glUnmapNamedBufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
	PFNGLUNMAPOBJECTBUFFERATIPROC methodp_glUnmapObjectBufferATI{nullptr};
	static v8::Handle<v8::Value> method_glUnmapObjectBufferATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUnmapObjectBufferATI && args.Length() >= 1){
			obj->methodp_glUnmapObjectBufferATI(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level);
	PFNGLUNMAPTEXTURE2DINTELPROC methodp_glUnmapTexture2DINTEL{nullptr};
	static v8::Handle<v8::Value> method_glUnmapTexture2DINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUnmapTexture2DINTEL && args.Length() >= 2){
			obj->methodp_glUnmapTexture2DINTEL(
				(GLuint )(args[0]->NumberValue())/* GLuint texture */,
				(GLint )(args[1]->NumberValue())/* GLint level */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);
	PFNGLUPDATEOBJECTBUFFERATIPROC methodp_glUpdateObjectBufferATI{nullptr};
	static v8::Handle<v8::Value> method_glUpdateObjectBufferATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUpdateObjectBufferATI && args.Length() >= 5){
			obj->methodp_glUpdateObjectBufferATI(
				(GLuint )(args[0]->NumberValue())/* GLuint buffer */,
				(GLuint )(args[1]->NumberValue())/* GLuint offset */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei size */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */,
				(GLenum )(args[4]->NumberValue())/* GLenum preserve */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);
	PFNGLUSEPROGRAMPROC methodp_glUseProgram{nullptr};
	static v8::Handle<v8::Value> method_glUseProgram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUseProgram && args.Length() >= 1){
			obj->methodp_glUseProgram(
				(GLuint )(args[0]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
	PFNGLUSEPROGRAMOBJECTARBPROC methodp_glUseProgramObjectARB{nullptr};
	static v8::Handle<v8::Value> method_glUseProgramObjectARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUseProgramObjectARB && args.Length() >= 1){
			obj->methodp_glUseProgramObjectARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
	PFNGLUSEPROGRAMSTAGESPROC methodp_glUseProgramStages{nullptr};
	static v8::Handle<v8::Value> method_glUseProgramStages(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUseProgramStages && args.Length() >= 3){
			obj->methodp_glUseProgramStages(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield stages */,
				(GLuint )(args[2]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESEXTPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
	PFNGLUSEPROGRAMSTAGESEXTPROC methodp_glUseProgramStagesEXT{nullptr};
	static v8::Handle<v8::Value> method_glUseProgramStagesEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUseProgramStagesEXT && args.Length() >= 3){
			obj->methodp_glUseProgramStagesEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield stages */,
				(GLuint )(args[2]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
	PFNGLUSESHADERPROGRAMEXTPROC methodp_glUseShaderProgramEXT{nullptr};
	static v8::Handle<v8::Value> method_glUseShaderProgramEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glUseShaderProgramEXT && args.Length() >= 2){
			obj->methodp_glUseShaderProgramEXT(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVDPAUFININVPROC) ();
	PFNGLVDPAUFININVPROC methodp_glVDPAUFiniNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAUFiniNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAUFiniNV && args.Length() >= 0){
			obj->methodp_glVDPAUFiniNV(
);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
	PFNGLVDPAUGETSURFACEIVNVPROC methodp_glVDPAUGetSurfaceivNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAUGetSurfaceivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAUGetSurfaceivNV && args.Length() >= 5){
			obj->methodp_glVDPAUGetSurfaceivNV(
				(GLvdpauSurfaceNV )(args[0]->NumberValue())/* GLvdpauSurfaceNV surface */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei bufSize */,
				(GLsizei *)((int64_t)args[3]->NumberValue())/* GLsizei *length */,
				(GLint *)((int64_t)args[4]->NumberValue())/* GLint *values */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVDPAUINITNVPROC) (const void *vdpDevice, const void *getProcAddress);
	PFNGLVDPAUINITNVPROC methodp_glVDPAUInitNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAUInitNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAUInitNV && args.Length() >= 2){
			obj->methodp_glVDPAUInitNV(
				(const void *)((int64_t)args[0]->NumberValue())/* const void *vdpDevice */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *getProcAddress */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLboolean (APIENTRYP PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);
	PFNGLVDPAUISSURFACENVPROC methodp_glVDPAUIsSurfaceNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAUIsSurfaceNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAUIsSurfaceNV && args.Length() >= 1){
			obj->methodp_glVDPAUIsSurfaceNV(
				(GLvdpauSurfaceNV )(args[0]->NumberValue())/* GLvdpauSurfaceNV surface */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
	PFNGLVDPAUMAPSURFACESNVPROC methodp_glVDPAUMapSurfacesNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAUMapSurfacesNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAUMapSurfacesNV && args.Length() >= 2){
			obj->methodp_glVDPAUMapSurfacesNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei numSurfaces */,
				(const GLvdpauSurfaceNV *)((int64_t)args[1]->NumberValue())/* const GLvdpauSurfaceNV *surfaces */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
	PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC methodp_glVDPAURegisterOutputSurfaceNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAURegisterOutputSurfaceNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAURegisterOutputSurfaceNV && args.Length() >= 4){
			obj->methodp_glVDPAURegisterOutputSurfaceNV(
				(const void *)((int64_t)args[0]->NumberValue())/* const void *vdpSurface */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei numTextureNames */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *textureNames */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
	PFNGLVDPAUREGISTERVIDEOSURFACENVPROC methodp_glVDPAURegisterVideoSurfaceNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAURegisterVideoSurfaceNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAURegisterVideoSurfaceNV && args.Length() >= 4){
			obj->methodp_glVDPAURegisterVideoSurfaceNV(
				(const void *)((int64_t)args[0]->NumberValue())/* const void *vdpSurface */,
				(GLenum )(args[1]->NumberValue())/* GLenum target */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei numTextureNames */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *textureNames */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);
	PFNGLVDPAUSURFACEACCESSNVPROC methodp_glVDPAUSurfaceAccessNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAUSurfaceAccessNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAUSurfaceAccessNV && args.Length() >= 2){
			obj->methodp_glVDPAUSurfaceAccessNV(
				(GLvdpauSurfaceNV )(args[0]->NumberValue())/* GLvdpauSurfaceNV surface */,
				(GLenum )(args[1]->NumberValue())/* GLenum access */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
	PFNGLVDPAUUNMAPSURFACESNVPROC methodp_glVDPAUUnmapSurfacesNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAUUnmapSurfacesNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAUUnmapSurfacesNV && args.Length() >= 2){
			obj->methodp_glVDPAUUnmapSurfacesNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei numSurface */,
				(const GLvdpauSurfaceNV *)((int64_t)args[1]->NumberValue())/* const GLvdpauSurfaceNV *surfaces */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);
	PFNGLVDPAUUNREGISTERSURFACENVPROC methodp_glVDPAUUnregisterSurfaceNV{nullptr};
	static v8::Handle<v8::Value> method_glVDPAUUnregisterSurfaceNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVDPAUUnregisterSurfaceNV && args.Length() >= 1){
			obj->methodp_glVDPAUUnregisterSurfaceNV(
				(GLvdpauSurfaceNV )(args[0]->NumberValue())/* GLvdpauSurfaceNV surface */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);
	PFNGLVALIDATEPROGRAMPROC methodp_glValidateProgram{nullptr};
	static v8::Handle<v8::Value> method_glValidateProgram(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glValidateProgram && args.Length() >= 1){
			obj->methodp_glValidateProgram(
				(GLuint )(args[0]->NumberValue())/* GLuint program */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
	PFNGLVALIDATEPROGRAMARBPROC methodp_glValidateProgramARB{nullptr};
	static v8::Handle<v8::Value> method_glValidateProgramARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glValidateProgramARB && args.Length() >= 1){
			obj->methodp_glValidateProgramARB(
				(GLhandleARB )(args[0]->NumberValue())/* GLhandleARB programObj */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);
	PFNGLVALIDATEPROGRAMPIPELINEPROC methodp_glValidateProgramPipeline{nullptr};
	static v8::Handle<v8::Value> method_glValidateProgramPipeline(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glValidateProgramPipeline && args.Length() >= 1){
			obj->methodp_glValidateProgramPipeline(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEEXTPROC) (GLuint pipeline);
	PFNGLVALIDATEPROGRAMPIPELINEEXTPROC methodp_glValidateProgramPipelineEXT{nullptr};
	static v8::Handle<v8::Value> method_glValidateProgramPipelineEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glValidateProgramPipelineEXT && args.Length() >= 1){
			obj->methodp_glValidateProgramPipelineEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint pipeline */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
	PFNGLVARIANTARRAYOBJECTATIPROC methodp_glVariantArrayObjectATI{nullptr};
	static v8::Handle<v8::Value> method_glVariantArrayObjectATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantArrayObjectATI && args.Length() >= 5){
			obj->methodp_glVariantArrayObjectATI(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(GLuint )(args[3]->NumberValue())/* GLuint buffer */,
				(GLuint )(args[4]->NumberValue())/* GLuint offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const void *addr);
	PFNGLVARIANTPOINTEREXTPROC methodp_glVariantPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantPointerEXT && args.Length() >= 4){
			obj->methodp_glVariantPointerEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLuint )(args[2]->NumberValue())/* GLuint stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);
	PFNGLVARIANTBVEXTPROC methodp_glVariantbvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantbvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantbvEXT && args.Length() >= 2){
			obj->methodp_glVariantbvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);
	PFNGLVARIANTDVEXTPROC methodp_glVariantdvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantdvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantdvEXT && args.Length() >= 2){
			obj->methodp_glVariantdvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);
	PFNGLVARIANTFVEXTPROC methodp_glVariantfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantfvEXT && args.Length() >= 2){
			obj->methodp_glVariantfvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);
	PFNGLVARIANTIVEXTPROC methodp_glVariantivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantivEXT && args.Length() >= 2){
			obj->methodp_glVariantivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);
	PFNGLVARIANTSVEXTPROC methodp_glVariantsvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantsvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantsvEXT && args.Length() >= 2){
			obj->methodp_glVariantsvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);
	PFNGLVARIANTUBVEXTPROC methodp_glVariantubvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantubvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantubvEXT && args.Length() >= 2){
			obj->methodp_glVariantubvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);
	PFNGLVARIANTUIVEXTPROC methodp_glVariantuivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantuivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantuivEXT && args.Length() >= 2){
			obj->methodp_glVariantuivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);
	PFNGLVARIANTUSVEXTPROC methodp_glVariantusvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVariantusvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVariantusvEXT && args.Length() >= 2){
			obj->methodp_glVariantusvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint id */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *addr */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2BOESPROC) (GLbyte x);
	PFNGLVERTEX2BOESPROC methodp_glVertex2bOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex2bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2bOES && args.Length() >= 1){
			obj->methodp_glVertex2bOES(
				(GLbyte )(args[0]->NumberValue())/* GLbyte x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2BVOESPROC) (const GLbyte *coords);
	PFNGLVERTEX2BVOESPROC methodp_glVertex2bvOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex2bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2bvOES && args.Length() >= 1){
			obj->methodp_glVertex2bvOES(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2DPROC) (GLdouble x, GLdouble y);
	PFNGLVERTEX2DPROC methodp_glVertex2d{nullptr};
	static v8::Handle<v8::Value> method_glVertex2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2d && args.Length() >= 2){
			obj->methodp_glVertex2d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2DVPROC) (const GLdouble *v);
	PFNGLVERTEX2DVPROC methodp_glVertex2dv{nullptr};
	static v8::Handle<v8::Value> method_glVertex2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2dv && args.Length() >= 1){
			obj->methodp_glVertex2dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2FPROC) (GLfloat x, GLfloat y);
	PFNGLVERTEX2FPROC methodp_glVertex2f{nullptr};
	static v8::Handle<v8::Value> method_glVertex2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2f && args.Length() >= 2){
			obj->methodp_glVertex2f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2FVPROC) (const GLfloat *v);
	PFNGLVERTEX2FVPROC methodp_glVertex2fv{nullptr};
	static v8::Handle<v8::Value> method_glVertex2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2fv && args.Length() >= 1){
			obj->methodp_glVertex2fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);
	PFNGLVERTEX2HNVPROC methodp_glVertex2hNV{nullptr};
	static v8::Handle<v8::Value> method_glVertex2hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2hNV && args.Length() >= 2){
			obj->methodp_glVertex2hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV x */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);
	PFNGLVERTEX2HVNVPROC methodp_glVertex2hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertex2hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2hvNV && args.Length() >= 1){
			obj->methodp_glVertex2hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2IPROC) (GLint x, GLint y);
	PFNGLVERTEX2IPROC methodp_glVertex2i{nullptr};
	static v8::Handle<v8::Value> method_glVertex2i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2i && args.Length() >= 2){
			obj->methodp_glVertex2i(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2IVPROC) (const GLint *v);
	PFNGLVERTEX2IVPROC methodp_glVertex2iv{nullptr};
	static v8::Handle<v8::Value> method_glVertex2iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2iv && args.Length() >= 1){
			obj->methodp_glVertex2iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2SPROC) (GLshort x, GLshort y);
	PFNGLVERTEX2SPROC methodp_glVertex2s{nullptr};
	static v8::Handle<v8::Value> method_glVertex2s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2s && args.Length() >= 2){
			obj->methodp_glVertex2s(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2SVPROC) (const GLshort *v);
	PFNGLVERTEX2SVPROC methodp_glVertex2sv{nullptr};
	static v8::Handle<v8::Value> method_glVertex2sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2sv && args.Length() >= 1){
			obj->methodp_glVertex2sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2XOESPROC) (GLfixed x);
	PFNGLVERTEX2XOESPROC methodp_glVertex2xOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex2xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2xOES && args.Length() >= 1){
			obj->methodp_glVertex2xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX2XVOESPROC) (const GLfixed *coords);
	PFNGLVERTEX2XVOESPROC methodp_glVertex2xvOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex2xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex2xvOES && args.Length() >= 1){
			obj->methodp_glVertex2xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3BOESPROC) (GLbyte x, GLbyte y);
	PFNGLVERTEX3BOESPROC methodp_glVertex3bOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex3bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3bOES && args.Length() >= 2){
			obj->methodp_glVertex3bOES(
				(GLbyte )(args[0]->NumberValue())/* GLbyte x */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3BVOESPROC) (const GLbyte *coords);
	PFNGLVERTEX3BVOESPROC methodp_glVertex3bvOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex3bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3bvOES && args.Length() >= 1){
			obj->methodp_glVertex3bvOES(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3DPROC) (GLdouble x, GLdouble y, GLdouble z);
	PFNGLVERTEX3DPROC methodp_glVertex3d{nullptr};
	static v8::Handle<v8::Value> method_glVertex3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3d && args.Length() >= 3){
			obj->methodp_glVertex3d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3DVPROC) (const GLdouble *v);
	PFNGLVERTEX3DVPROC methodp_glVertex3dv{nullptr};
	static v8::Handle<v8::Value> method_glVertex3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3dv && args.Length() >= 1){
			obj->methodp_glVertex3dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3FPROC) (GLfloat x, GLfloat y, GLfloat z);
	PFNGLVERTEX3FPROC methodp_glVertex3f{nullptr};
	static v8::Handle<v8::Value> method_glVertex3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3f && args.Length() >= 3){
			obj->methodp_glVertex3f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3FVPROC) (const GLfloat *v);
	PFNGLVERTEX3FVPROC methodp_glVertex3fv{nullptr};
	static v8::Handle<v8::Value> method_glVertex3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3fv && args.Length() >= 1){
			obj->methodp_glVertex3fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
	PFNGLVERTEX3HNVPROC methodp_glVertex3hNV{nullptr};
	static v8::Handle<v8::Value> method_glVertex3hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3hNV && args.Length() >= 3){
			obj->methodp_glVertex3hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV x */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV y */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);
	PFNGLVERTEX3HVNVPROC methodp_glVertex3hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertex3hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3hvNV && args.Length() >= 1){
			obj->methodp_glVertex3hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3IPROC) (GLint x, GLint y, GLint z);
	PFNGLVERTEX3IPROC methodp_glVertex3i{nullptr};
	static v8::Handle<v8::Value> method_glVertex3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3i && args.Length() >= 3){
			obj->methodp_glVertex3i(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3IVPROC) (const GLint *v);
	PFNGLVERTEX3IVPROC methodp_glVertex3iv{nullptr};
	static v8::Handle<v8::Value> method_glVertex3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3iv && args.Length() >= 1){
			obj->methodp_glVertex3iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3SPROC) (GLshort x, GLshort y, GLshort z);
	PFNGLVERTEX3SPROC methodp_glVertex3s{nullptr};
	static v8::Handle<v8::Value> method_glVertex3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3s && args.Length() >= 3){
			obj->methodp_glVertex3s(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3SVPROC) (const GLshort *v);
	PFNGLVERTEX3SVPROC methodp_glVertex3sv{nullptr};
	static v8::Handle<v8::Value> method_glVertex3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3sv && args.Length() >= 1){
			obj->methodp_glVertex3sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3XOESPROC) (GLfixed x, GLfixed y);
	PFNGLVERTEX3XOESPROC methodp_glVertex3xOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex3xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3xOES && args.Length() >= 2){
			obj->methodp_glVertex3xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX3XVOESPROC) (const GLfixed *coords);
	PFNGLVERTEX3XVOESPROC methodp_glVertex3xvOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex3xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex3xvOES && args.Length() >= 1){
			obj->methodp_glVertex3xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4BOESPROC) (GLbyte x, GLbyte y, GLbyte z);
	PFNGLVERTEX4BOESPROC methodp_glVertex4bOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex4bOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4bOES && args.Length() >= 3){
			obj->methodp_glVertex4bOES(
				(GLbyte )(args[0]->NumberValue())/* GLbyte x */,
				(GLbyte )(args[1]->NumberValue())/* GLbyte y */,
				(GLbyte )(args[2]->NumberValue())/* GLbyte z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4BVOESPROC) (const GLbyte *coords);
	PFNGLVERTEX4BVOESPROC methodp_glVertex4bvOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex4bvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4bvOES && args.Length() >= 1){
			obj->methodp_glVertex4bvOES(
				(const GLbyte *)((int64_t)args[0]->NumberValue())/* const GLbyte *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4DPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLVERTEX4DPROC methodp_glVertex4d{nullptr};
	static v8::Handle<v8::Value> method_glVertex4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4d && args.Length() >= 4){
			obj->methodp_glVertex4d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4DVPROC) (const GLdouble *v);
	PFNGLVERTEX4DVPROC methodp_glVertex4dv{nullptr};
	static v8::Handle<v8::Value> method_glVertex4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4dv && args.Length() >= 1){
			obj->methodp_glVertex4dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4FPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLVERTEX4FPROC methodp_glVertex4f{nullptr};
	static v8::Handle<v8::Value> method_glVertex4f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4f && args.Length() >= 4){
			obj->methodp_glVertex4f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4FVPROC) (const GLfloat *v);
	PFNGLVERTEX4FVPROC methodp_glVertex4fv{nullptr};
	static v8::Handle<v8::Value> method_glVertex4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4fv && args.Length() >= 1){
			obj->methodp_glVertex4fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
	PFNGLVERTEX4HNVPROC methodp_glVertex4hNV{nullptr};
	static v8::Handle<v8::Value> method_glVertex4hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4hNV && args.Length() >= 4){
			obj->methodp_glVertex4hNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV x */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV y */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV z */,
				(GLhalfNV )(args[3]->NumberValue())/* GLhalfNV w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);
	PFNGLVERTEX4HVNVPROC methodp_glVertex4hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertex4hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4hvNV && args.Length() >= 1){
			obj->methodp_glVertex4hvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4IPROC) (GLint x, GLint y, GLint z, GLint w);
	PFNGLVERTEX4IPROC methodp_glVertex4i{nullptr};
	static v8::Handle<v8::Value> method_glVertex4i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4i && args.Length() >= 4){
			obj->methodp_glVertex4i(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */,
				(GLint )(args[3]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4IVPROC) (const GLint *v);
	PFNGLVERTEX4IVPROC methodp_glVertex4iv{nullptr};
	static v8::Handle<v8::Value> method_glVertex4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4iv && args.Length() >= 1){
			obj->methodp_glVertex4iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4SPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
	PFNGLVERTEX4SPROC methodp_glVertex4s{nullptr};
	static v8::Handle<v8::Value> method_glVertex4s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4s && args.Length() >= 4){
			obj->methodp_glVertex4s(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */,
				(GLshort )(args[3]->NumberValue())/* GLshort w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4SVPROC) (const GLshort *v);
	PFNGLVERTEX4SVPROC methodp_glVertex4sv{nullptr};
	static v8::Handle<v8::Value> method_glVertex4sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4sv && args.Length() >= 1){
			obj->methodp_glVertex4sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4XOESPROC) (GLfixed x, GLfixed y, GLfixed z);
	PFNGLVERTEX4XOESPROC methodp_glVertex4xOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex4xOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4xOES && args.Length() >= 3){
			obj->methodp_glVertex4xOES(
				(GLfixed )(args[0]->NumberValue())/* GLfixed x */,
				(GLfixed )(args[1]->NumberValue())/* GLfixed y */,
				(GLfixed )(args[2]->NumberValue())/* GLfixed z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEX4XVOESPROC) (const GLfixed *coords);
	PFNGLVERTEX4XVOESPROC methodp_glVertex4xvOES{nullptr};
	static v8::Handle<v8::Value> method_glVertex4xvOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertex4xvOES && args.Length() >= 1){
			obj->methodp_glVertex4xvOES(
				(const GLfixed *)((int64_t)args[0]->NumberValue())/* const GLfixed *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
	PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC methodp_glVertexArrayBindVertexBufferEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayBindVertexBufferEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayBindVertexBufferEXT && args.Length() >= 5){
			obj->methodp_glVertexArrayBindVertexBufferEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint bindingindex */,
				(GLuint )(args[2]->NumberValue())/* GLuint buffer */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYCOLOROFFSETEXTPROC methodp_glVertexArrayColorOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayColorOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayColorOffsetEXT && args.Length() >= 6){
			obj->methodp_glVertexArrayColorOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLint )(args[2]->NumberValue())/* GLint size */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[5]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC methodp_glVertexArrayEdgeFlagOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayEdgeFlagOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayEdgeFlagOffsetEXT && args.Length() >= 4){
			obj->methodp_glVertexArrayEdgeFlagOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[3]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC methodp_glVertexArrayFogCoordOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayFogCoordOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayFogCoordOffsetEXT && args.Length() >= 5){
			obj->methodp_glVertexArrayFogCoordOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[4]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYINDEXOFFSETEXTPROC methodp_glVertexArrayIndexOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayIndexOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayIndexOffsetEXT && args.Length() >= 5){
			obj->methodp_glVertexArrayIndexOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[4]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC methodp_glVertexArrayMultiTexCoordOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayMultiTexCoordOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayMultiTexCoordOffsetEXT && args.Length() >= 7){
			obj->methodp_glVertexArrayMultiTexCoordOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[2]->NumberValue())/* GLenum texunit */,
				(GLint )(args[3]->NumberValue())/* GLint size */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[6]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYNORMALOFFSETEXTPROC methodp_glVertexArrayNormalOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayNormalOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayNormalOffsetEXT && args.Length() >= 5){
			obj->methodp_glVertexArrayNormalOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[4]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
	PFNGLVERTEXARRAYPARAMETERIAPPLEPROC methodp_glVertexArrayParameteriAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayParameteriAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayParameteriAPPLE && args.Length() >= 2){
			obj->methodp_glVertexArrayParameteriAPPLE(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);
	PFNGLVERTEXARRAYRANGEAPPLEPROC methodp_glVertexArrayRangeAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayRangeAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayRangeAPPLE && args.Length() >= 2){
			obj->methodp_glVertexArrayRangeAPPLE(
				(GLsizei )(args[0]->NumberValue())/* GLsizei length */,
				(void *)((int64_t)args[1]->NumberValue())/* void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const void *pointer);
	PFNGLVERTEXARRAYRANGENVPROC methodp_glVertexArrayRangeNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayRangeNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayRangeNV && args.Length() >= 2){
			obj->methodp_glVertexArrayRangeNV(
				(GLsizei )(args[0]->NumberValue())/* GLsizei length */,
				(const void *)((int64_t)args[1]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC methodp_glVertexArraySecondaryColorOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArraySecondaryColorOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArraySecondaryColorOffsetEXT && args.Length() >= 6){
			obj->methodp_glVertexArraySecondaryColorOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLint )(args[2]->NumberValue())/* GLint size */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[5]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC methodp_glVertexArrayTexCoordOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayTexCoordOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayTexCoordOffsetEXT && args.Length() >= 6){
			obj->methodp_glVertexArrayTexCoordOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLint )(args[2]->NumberValue())/* GLint size */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[5]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);
	PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC methodp_glVertexArrayVertexAttribBindingEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexAttribBindingEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexAttribBindingEXT && args.Length() >= 3){
			obj->methodp_glVertexArrayVertexAttribBindingEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint attribindex */,
				(GLuint )(args[2]->NumberValue())/* GLuint bindingindex */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (GLuint vaobj, GLuint index, GLuint divisor);
	PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC methodp_glVertexArrayVertexAttribDivisorEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexAttribDivisorEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexAttribDivisorEXT && args.Length() >= 3){
			obj->methodp_glVertexArrayVertexAttribDivisorEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint index */,
				(GLuint )(args[2]->NumberValue())/* GLuint divisor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC methodp_glVertexArrayVertexAttribFormatEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexAttribFormatEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexAttribFormatEXT && args.Length() >= 6){
			obj->methodp_glVertexArrayVertexAttribFormatEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint attribindex */,
				(GLint )(args[2]->NumberValue())/* GLint size */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLboolean )(args[4]->NumberValue())/* GLboolean normalized */,
				(GLuint )(args[5]->NumberValue())/* GLuint relativeoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC methodp_glVertexArrayVertexAttribIFormatEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexAttribIFormatEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexAttribIFormatEXT && args.Length() >= 5){
			obj->methodp_glVertexArrayVertexAttribIFormatEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint attribindex */,
				(GLint )(args[2]->NumberValue())/* GLint size */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLuint )(args[4]->NumberValue())/* GLuint relativeoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC methodp_glVertexArrayVertexAttribIOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexAttribIOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexAttribIOffsetEXT && args.Length() >= 7){
			obj->methodp_glVertexArrayVertexAttribIOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLint )(args[3]->NumberValue())/* GLint size */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[6]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC methodp_glVertexArrayVertexAttribLFormatEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexAttribLFormatEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexAttribLFormatEXT && args.Length() >= 5){
			obj->methodp_glVertexArrayVertexAttribLFormatEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint attribindex */,
				(GLint )(args[2]->NumberValue())/* GLint size */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLuint )(args[4]->NumberValue())/* GLuint relativeoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC methodp_glVertexArrayVertexAttribLOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexAttribLOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexAttribLOffsetEXT && args.Length() >= 7){
			obj->methodp_glVertexArrayVertexAttribLOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLint )(args[3]->NumberValue())/* GLint size */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(GLsizei )(args[5]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[6]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC methodp_glVertexArrayVertexAttribOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexAttribOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexAttribOffsetEXT && args.Length() >= 8){
			obj->methodp_glVertexArrayVertexAttribOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLuint )(args[2]->NumberValue())/* GLuint index */,
				(GLint )(args[3]->NumberValue())/* GLint size */,
				(GLenum )(args[4]->NumberValue())/* GLenum type */,
				(GLboolean )(args[5]->NumberValue())/* GLboolean normalized */,
				(GLsizei )(args[6]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[7]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);
	PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC methodp_glVertexArrayVertexBindingDivisorEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexBindingDivisorEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexBindingDivisorEXT && args.Length() >= 3){
			obj->methodp_glVertexArrayVertexBindingDivisorEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint bindingindex */,
				(GLuint )(args[2]->NumberValue())/* GLuint divisor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
	PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC methodp_glVertexArrayVertexOffsetEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexArrayVertexOffsetEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexArrayVertexOffsetEXT && args.Length() >= 6){
			obj->methodp_glVertexArrayVertexOffsetEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint vaobj */,
				(GLuint )(args[1]->NumberValue())/* GLuint buffer */,
				(GLint )(args[2]->NumberValue())/* GLint size */,
				(GLenum )(args[3]->NumberValue())/* GLenum type */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */,
				(GLintptr )(args[5]->NumberValue())/* GLintptr offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
	PFNGLVERTEXATTRIB1DPROC methodp_glVertexAttrib1d{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1d && args.Length() >= 2){
			obj->methodp_glVertexAttrib1d(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
	PFNGLVERTEXATTRIB1DARBPROC methodp_glVertexAttrib1dARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1dARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib1dARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
	PFNGLVERTEXATTRIB1DNVPROC methodp_glVertexAttrib1dNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1dNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1dNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib1dNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB1DVPROC methodp_glVertexAttrib1dv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1dv && args.Length() >= 2){
			obj->methodp_glVertexAttrib1dv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB1DVARBPROC methodp_glVertexAttrib1dvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1dvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib1dvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB1DVNVPROC methodp_glVertexAttrib1dvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1dvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib1dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
	PFNGLVERTEXATTRIB1FPROC methodp_glVertexAttrib1f{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1f && args.Length() >= 2){
			obj->methodp_glVertexAttrib1f(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
	PFNGLVERTEXATTRIB1FARBPROC methodp_glVertexAttrib1fARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1fARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib1fARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
	PFNGLVERTEXATTRIB1FNVPROC methodp_glVertexAttrib1fNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1fNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1fNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib1fNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB1FVPROC methodp_glVertexAttrib1fv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1fv && args.Length() >= 2){
			obj->methodp_glVertexAttrib1fv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB1FVARBPROC methodp_glVertexAttrib1fvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1fvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib1fvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB1FVNVPROC methodp_glVertexAttrib1fvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1fvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib1fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);
	PFNGLVERTEXATTRIB1HNVPROC methodp_glVertexAttrib1hNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1hNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib1hNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);
	PFNGLVERTEXATTRIB1HVNVPROC methodp_glVertexAttrib1hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1hvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib1hvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLhalfNV *)((int64_t)args[1]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
	PFNGLVERTEXATTRIB1SPROC methodp_glVertexAttrib1s{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1s && args.Length() >= 2){
			obj->methodp_glVertexAttrib1s(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
	PFNGLVERTEXATTRIB1SARBPROC methodp_glVertexAttrib1sARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1sARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib1sARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
	PFNGLVERTEXATTRIB1SNVPROC methodp_glVertexAttrib1sNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1sNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1sNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib1sNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB1SVPROC methodp_glVertexAttrib1sv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1sv && args.Length() >= 2){
			obj->methodp_glVertexAttrib1sv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB1SVARBPROC methodp_glVertexAttrib1svARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1svARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib1svARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB1SVNVPROC methodp_glVertexAttrib1svNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib1svNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib1svNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib1svNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
	PFNGLVERTEXATTRIB2DPROC methodp_glVertexAttrib2d{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2d && args.Length() >= 3){
			obj->methodp_glVertexAttrib2d(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
	PFNGLVERTEXATTRIB2DARBPROC methodp_glVertexAttrib2dARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2dARB && args.Length() >= 3){
			obj->methodp_glVertexAttrib2dARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
	PFNGLVERTEXATTRIB2DNVPROC methodp_glVertexAttrib2dNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2dNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2dNV && args.Length() >= 3){
			obj->methodp_glVertexAttrib2dNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB2DVPROC methodp_glVertexAttrib2dv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2dv && args.Length() >= 2){
			obj->methodp_glVertexAttrib2dv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB2DVARBPROC methodp_glVertexAttrib2dvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2dvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib2dvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB2DVNVPROC methodp_glVertexAttrib2dvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2dvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib2dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
	PFNGLVERTEXATTRIB2FPROC methodp_glVertexAttrib2f{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2f && args.Length() >= 3){
			obj->methodp_glVertexAttrib2f(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
	PFNGLVERTEXATTRIB2FARBPROC methodp_glVertexAttrib2fARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2fARB && args.Length() >= 3){
			obj->methodp_glVertexAttrib2fARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
	PFNGLVERTEXATTRIB2FNVPROC methodp_glVertexAttrib2fNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2fNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2fNV && args.Length() >= 3){
			obj->methodp_glVertexAttrib2fNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB2FVPROC methodp_glVertexAttrib2fv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2fv && args.Length() >= 2){
			obj->methodp_glVertexAttrib2fv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB2FVARBPROC methodp_glVertexAttrib2fvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2fvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib2fvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB2FVNVPROC methodp_glVertexAttrib2fvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2fvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib2fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);
	PFNGLVERTEXATTRIB2HNVPROC methodp_glVertexAttrib2hNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2hNV && args.Length() >= 3){
			obj->methodp_glVertexAttrib2hNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV x */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);
	PFNGLVERTEXATTRIB2HVNVPROC methodp_glVertexAttrib2hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2hvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib2hvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLhalfNV *)((int64_t)args[1]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
	PFNGLVERTEXATTRIB2SPROC methodp_glVertexAttrib2s{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2s && args.Length() >= 3){
			obj->methodp_glVertexAttrib2s(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
	PFNGLVERTEXATTRIB2SARBPROC methodp_glVertexAttrib2sARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2sARB && args.Length() >= 3){
			obj->methodp_glVertexAttrib2sARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
	PFNGLVERTEXATTRIB2SNVPROC methodp_glVertexAttrib2sNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2sNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2sNV && args.Length() >= 3){
			obj->methodp_glVertexAttrib2sNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB2SVPROC methodp_glVertexAttrib2sv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2sv && args.Length() >= 2){
			obj->methodp_glVertexAttrib2sv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB2SVARBPROC methodp_glVertexAttrib2svARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2svARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib2svARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB2SVNVPROC methodp_glVertexAttrib2svNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib2svNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib2svNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib2svNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
	PFNGLVERTEXATTRIB3DPROC methodp_glVertexAttrib3d{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3d && args.Length() >= 4){
			obj->methodp_glVertexAttrib3d(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
	PFNGLVERTEXATTRIB3DARBPROC methodp_glVertexAttrib3dARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3dARB && args.Length() >= 4){
			obj->methodp_glVertexAttrib3dARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
	PFNGLVERTEXATTRIB3DNVPROC methodp_glVertexAttrib3dNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3dNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3dNV && args.Length() >= 4){
			obj->methodp_glVertexAttrib3dNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB3DVPROC methodp_glVertexAttrib3dv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3dv && args.Length() >= 2){
			obj->methodp_glVertexAttrib3dv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB3DVARBPROC methodp_glVertexAttrib3dvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3dvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib3dvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB3DVNVPROC methodp_glVertexAttrib3dvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3dvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib3dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
	PFNGLVERTEXATTRIB3FPROC methodp_glVertexAttrib3f{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3f && args.Length() >= 4){
			obj->methodp_glVertexAttrib3f(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
	PFNGLVERTEXATTRIB3FARBPROC methodp_glVertexAttrib3fARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3fARB && args.Length() >= 4){
			obj->methodp_glVertexAttrib3fARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
	PFNGLVERTEXATTRIB3FNVPROC methodp_glVertexAttrib3fNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3fNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3fNV && args.Length() >= 4){
			obj->methodp_glVertexAttrib3fNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB3FVPROC methodp_glVertexAttrib3fv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3fv && args.Length() >= 2){
			obj->methodp_glVertexAttrib3fv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB3FVARBPROC methodp_glVertexAttrib3fvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3fvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib3fvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB3FVNVPROC methodp_glVertexAttrib3fvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3fvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib3fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
	PFNGLVERTEXATTRIB3HNVPROC methodp_glVertexAttrib3hNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3hNV && args.Length() >= 4){
			obj->methodp_glVertexAttrib3hNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV x */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV y */,
				(GLhalfNV )(args[3]->NumberValue())/* GLhalfNV z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);
	PFNGLVERTEXATTRIB3HVNVPROC methodp_glVertexAttrib3hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3hvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib3hvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLhalfNV *)((int64_t)args[1]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
	PFNGLVERTEXATTRIB3SPROC methodp_glVertexAttrib3s{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3s && args.Length() >= 4){
			obj->methodp_glVertexAttrib3s(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */,
				(GLshort )(args[3]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
	PFNGLVERTEXATTRIB3SARBPROC methodp_glVertexAttrib3sARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3sARB && args.Length() >= 4){
			obj->methodp_glVertexAttrib3sARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */,
				(GLshort )(args[3]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
	PFNGLVERTEXATTRIB3SNVPROC methodp_glVertexAttrib3sNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3sNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3sNV && args.Length() >= 4){
			obj->methodp_glVertexAttrib3sNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */,
				(GLshort )(args[3]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB3SVPROC methodp_glVertexAttrib3sv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3sv && args.Length() >= 2){
			obj->methodp_glVertexAttrib3sv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB3SVARBPROC methodp_glVertexAttrib3svARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3svARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib3svARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB3SVNVPROC methodp_glVertexAttrib3svNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib3svNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib3svNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib3svNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);
	PFNGLVERTEXATTRIB4NBVPROC methodp_glVertexAttrib4Nbv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4Nbv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4Nbv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4Nbv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);
	PFNGLVERTEXATTRIB4NBVARBPROC methodp_glVertexAttrib4NbvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4NbvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4NbvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4NbvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIB4NIVPROC methodp_glVertexAttrib4Niv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4Niv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4Niv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4Niv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIB4NIVARBPROC methodp_glVertexAttrib4NivARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4NivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4NivARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4NivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB4NSVPROC methodp_glVertexAttrib4Nsv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4Nsv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4Nsv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4Nsv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB4NSVARBPROC methodp_glVertexAttrib4NsvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4NsvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4NsvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4NsvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	PFNGLVERTEXATTRIB4NUBPROC methodp_glVertexAttrib4Nub{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4Nub(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4Nub && args.Length() >= 5){
			obj->methodp_glVertexAttrib4Nub(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte x */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte y */,
				(GLubyte )(args[3]->NumberValue())/* GLubyte z */,
				(GLubyte )(args[4]->NumberValue())/* GLubyte w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	PFNGLVERTEXATTRIB4NUBARBPROC methodp_glVertexAttrib4NubARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4NubARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4NubARB && args.Length() >= 5){
			obj->methodp_glVertexAttrib4NubARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte x */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte y */,
				(GLubyte )(args[3]->NumberValue())/* GLubyte z */,
				(GLubyte )(args[4]->NumberValue())/* GLubyte w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);
	PFNGLVERTEXATTRIB4NUBVPROC methodp_glVertexAttrib4Nubv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4Nubv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4Nubv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4Nubv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);
	PFNGLVERTEXATTRIB4NUBVARBPROC methodp_glVertexAttrib4NubvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4NubvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4NubvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4NubvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIB4NUIVPROC methodp_glVertexAttrib4Nuiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4Nuiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4Nuiv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4Nuiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIB4NUIVARBPROC methodp_glVertexAttrib4NuivARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4NuivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4NuivARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4NuivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);
	PFNGLVERTEXATTRIB4NUSVPROC methodp_glVertexAttrib4Nusv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4Nusv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4Nusv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4Nusv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);
	PFNGLVERTEXATTRIB4NUSVARBPROC methodp_glVertexAttrib4NusvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4NusvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4NusvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4NusvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);
	PFNGLVERTEXATTRIB4BVPROC methodp_glVertexAttrib4bv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4bv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4bv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4bv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);
	PFNGLVERTEXATTRIB4BVARBPROC methodp_glVertexAttrib4bvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4bvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4bvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4bvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLVERTEXATTRIB4DPROC methodp_glVertexAttrib4d{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4d && args.Length() >= 5){
			obj->methodp_glVertexAttrib4d(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLVERTEXATTRIB4DARBPROC methodp_glVertexAttrib4dARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4dARB && args.Length() >= 5){
			obj->methodp_glVertexAttrib4dARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLVERTEXATTRIB4DNVPROC methodp_glVertexAttrib4dNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4dNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4dNV && args.Length() >= 5){
			obj->methodp_glVertexAttrib4dNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB4DVPROC methodp_glVertexAttrib4dv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4dv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4dv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB4DVARBPROC methodp_glVertexAttrib4dvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4dvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4dvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIB4DVNVPROC methodp_glVertexAttrib4dvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4dvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib4dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLVERTEXATTRIB4FPROC methodp_glVertexAttrib4f{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4f && args.Length() >= 5){
			obj->methodp_glVertexAttrib4f(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLVERTEXATTRIB4FARBPROC methodp_glVertexAttrib4fARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4fARB && args.Length() >= 5){
			obj->methodp_glVertexAttrib4fARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLVERTEXATTRIB4FNVPROC methodp_glVertexAttrib4fNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4fNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4fNV && args.Length() >= 5){
			obj->methodp_glVertexAttrib4fNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB4FVPROC methodp_glVertexAttrib4fv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4fv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4fv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB4FVARBPROC methodp_glVertexAttrib4fvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4fvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4fvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);
	PFNGLVERTEXATTRIB4FVNVPROC methodp_glVertexAttrib4fvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4fvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib4fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
	PFNGLVERTEXATTRIB4HNVPROC methodp_glVertexAttrib4hNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4hNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4hNV && args.Length() >= 5){
			obj->methodp_glVertexAttrib4hNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLhalfNV )(args[1]->NumberValue())/* GLhalfNV x */,
				(GLhalfNV )(args[2]->NumberValue())/* GLhalfNV y */,
				(GLhalfNV )(args[3]->NumberValue())/* GLhalfNV z */,
				(GLhalfNV )(args[4]->NumberValue())/* GLhalfNV w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);
	PFNGLVERTEXATTRIB4HVNVPROC methodp_glVertexAttrib4hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4hvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib4hvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLhalfNV *)((int64_t)args[1]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIB4IVPROC methodp_glVertexAttrib4iv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4iv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4iv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIB4IVARBPROC methodp_glVertexAttrib4ivARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4ivARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4ivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	PFNGLVERTEXATTRIB4SPROC methodp_glVertexAttrib4s{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4s && args.Length() >= 5){
			obj->methodp_glVertexAttrib4s(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */,
				(GLshort )(args[3]->NumberValue())/* GLshort z */,
				(GLshort )(args[4]->NumberValue())/* GLshort w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	PFNGLVERTEXATTRIB4SARBPROC methodp_glVertexAttrib4sARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4sARB && args.Length() >= 5){
			obj->methodp_glVertexAttrib4sARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */,
				(GLshort )(args[3]->NumberValue())/* GLshort z */,
				(GLshort )(args[4]->NumberValue())/* GLshort w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	PFNGLVERTEXATTRIB4SNVPROC methodp_glVertexAttrib4sNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4sNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4sNV && args.Length() >= 5){
			obj->methodp_glVertexAttrib4sNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */,
				(GLshort )(args[3]->NumberValue())/* GLshort z */,
				(GLshort )(args[4]->NumberValue())/* GLshort w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB4SVPROC methodp_glVertexAttrib4sv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4sv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4sv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB4SVARBPROC methodp_glVertexAttrib4svARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4svARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4svARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIB4SVNVPROC methodp_glVertexAttrib4svNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4svNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4svNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib4svNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	PFNGLVERTEXATTRIB4UBNVPROC methodp_glVertexAttrib4ubNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4ubNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4ubNV && args.Length() >= 5){
			obj->methodp_glVertexAttrib4ubNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLubyte )(args[1]->NumberValue())/* GLubyte x */,
				(GLubyte )(args[2]->NumberValue())/* GLubyte y */,
				(GLubyte )(args[3]->NumberValue())/* GLubyte z */,
				(GLubyte )(args[4]->NumberValue())/* GLubyte w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);
	PFNGLVERTEXATTRIB4UBVPROC methodp_glVertexAttrib4ubv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4ubv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4ubv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4ubv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);
	PFNGLVERTEXATTRIB4UBVARBPROC methodp_glVertexAttrib4ubvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4ubvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4ubvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4ubvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);
	PFNGLVERTEXATTRIB4UBVNVPROC methodp_glVertexAttrib4ubvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4ubvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4ubvNV && args.Length() >= 2){
			obj->methodp_glVertexAttrib4ubvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIB4UIVPROC methodp_glVertexAttrib4uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4uiv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIB4UIVARBPROC methodp_glVertexAttrib4uivARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4uivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4uivARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4uivARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);
	PFNGLVERTEXATTRIB4USVPROC methodp_glVertexAttrib4usv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4usv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4usv && args.Length() >= 2){
			obj->methodp_glVertexAttrib4usv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);
	PFNGLVERTEXATTRIB4USVARBPROC methodp_glVertexAttrib4usvARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttrib4usvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttrib4usvARB && args.Length() >= 2){
			obj->methodp_glVertexAttrib4usvARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
	PFNGLVERTEXATTRIBARRAYOBJECTATIPROC methodp_glVertexAttribArrayObjectATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribArrayObjectATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribArrayObjectATI && args.Length() >= 7){
			obj->methodp_glVertexAttribArrayObjectATI(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean normalized */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */,
				(GLuint )(args[5]->NumberValue())/* GLuint buffer */,
				(GLuint )(args[6]->NumberValue())/* GLuint offset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);
	PFNGLVERTEXATTRIBBINDINGPROC methodp_glVertexAttribBinding{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribBinding(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribBinding && args.Length() >= 2){
			obj->methodp_glVertexAttribBinding(
				(GLuint )(args[0]->NumberValue())/* GLuint attribindex */,
				(GLuint )(args[1]->NumberValue())/* GLuint bindingindex */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);
	PFNGLVERTEXATTRIBDIVISORPROC methodp_glVertexAttribDivisor{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribDivisor(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribDivisor && args.Length() >= 2){
			obj->methodp_glVertexAttribDivisor(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint divisor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORANGLEPROC) (GLuint index, GLuint divisor);
	PFNGLVERTEXATTRIBDIVISORANGLEPROC methodp_glVertexAttribDivisorANGLE{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribDivisorANGLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribDivisorANGLE && args.Length() >= 2){
			obj->methodp_glVertexAttribDivisorANGLE(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint divisor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);
	PFNGLVERTEXATTRIBDIVISORARBPROC methodp_glVertexAttribDivisorARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribDivisorARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribDivisorARB && args.Length() >= 2){
			obj->methodp_glVertexAttribDivisorARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint divisor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISOREXTPROC) (GLuint index, GLuint divisor);
	PFNGLVERTEXATTRIBDIVISOREXTPROC methodp_glVertexAttribDivisorEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribDivisorEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribDivisorEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribDivisorEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint divisor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORNVPROC) (GLuint index, GLuint divisor);
	PFNGLVERTEXATTRIBDIVISORNVPROC methodp_glVertexAttribDivisorNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribDivisorNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribDivisorNV && args.Length() >= 2){
			obj->methodp_glVertexAttribDivisorNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint divisor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
	PFNGLVERTEXATTRIBFORMATPROC methodp_glVertexAttribFormat{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribFormat(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribFormat && args.Length() >= 5){
			obj->methodp_glVertexAttribFormat(
				(GLuint )(args[0]->NumberValue())/* GLuint attribindex */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean normalized */,
				(GLuint )(args[4]->NumberValue())/* GLuint relativeoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
	PFNGLVERTEXATTRIBFORMATNVPROC methodp_glVertexAttribFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribFormatNV && args.Length() >= 5){
			obj->methodp_glVertexAttribFormatNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean normalized */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);
	PFNGLVERTEXATTRIBI1IPROC methodp_glVertexAttribI1i{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI1i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI1i && args.Length() >= 2){
			obj->methodp_glVertexAttribI1i(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
	PFNGLVERTEXATTRIBI1IEXTPROC methodp_glVertexAttribI1iEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI1iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI1iEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI1iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIBI1IVPROC methodp_glVertexAttribI1iv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI1iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI1iv && args.Length() >= 2){
			obj->methodp_glVertexAttribI1iv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIBI1IVEXTPROC methodp_glVertexAttribI1ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI1ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI1ivEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI1ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);
	PFNGLVERTEXATTRIBI1UIPROC methodp_glVertexAttribI1ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI1ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI1ui && args.Length() >= 2){
			obj->methodp_glVertexAttribI1ui(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
	PFNGLVERTEXATTRIBI1UIEXTPROC methodp_glVertexAttribI1uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI1uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI1uiEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI1uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIBI1UIVPROC methodp_glVertexAttribI1uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI1uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI1uiv && args.Length() >= 2){
			obj->methodp_glVertexAttribI1uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIBI1UIVEXTPROC methodp_glVertexAttribI1uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI1uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI1uivEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI1uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
	PFNGLVERTEXATTRIBI2IPROC methodp_glVertexAttribI2i{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI2i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI2i && args.Length() >= 3){
			obj->methodp_glVertexAttribI2i(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
	PFNGLVERTEXATTRIBI2IEXTPROC methodp_glVertexAttribI2iEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI2iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI2iEXT && args.Length() >= 3){
			obj->methodp_glVertexAttribI2iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIBI2IVPROC methodp_glVertexAttribI2iv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI2iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI2iv && args.Length() >= 2){
			obj->methodp_glVertexAttribI2iv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIBI2IVEXTPROC methodp_glVertexAttribI2ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI2ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI2ivEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI2ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);
	PFNGLVERTEXATTRIBI2UIPROC methodp_glVertexAttribI2ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI2ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI2ui && args.Length() >= 3){
			obj->methodp_glVertexAttribI2ui(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint x */,
				(GLuint )(args[2]->NumberValue())/* GLuint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
	PFNGLVERTEXATTRIBI2UIEXTPROC methodp_glVertexAttribI2uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI2uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI2uiEXT && args.Length() >= 3){
			obj->methodp_glVertexAttribI2uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint x */,
				(GLuint )(args[2]->NumberValue())/* GLuint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIBI2UIVPROC methodp_glVertexAttribI2uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI2uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI2uiv && args.Length() >= 2){
			obj->methodp_glVertexAttribI2uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIBI2UIVEXTPROC methodp_glVertexAttribI2uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI2uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI2uivEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI2uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);
	PFNGLVERTEXATTRIBI3IPROC methodp_glVertexAttribI3i{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI3i && args.Length() >= 4){
			obj->methodp_glVertexAttribI3i(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */,
				(GLint )(args[3]->NumberValue())/* GLint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
	PFNGLVERTEXATTRIBI3IEXTPROC methodp_glVertexAttribI3iEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI3iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI3iEXT && args.Length() >= 4){
			obj->methodp_glVertexAttribI3iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */,
				(GLint )(args[3]->NumberValue())/* GLint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIBI3IVPROC methodp_glVertexAttribI3iv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI3iv && args.Length() >= 2){
			obj->methodp_glVertexAttribI3iv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIBI3IVEXTPROC methodp_glVertexAttribI3ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI3ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI3ivEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI3ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
	PFNGLVERTEXATTRIBI3UIPROC methodp_glVertexAttribI3ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI3ui && args.Length() >= 4){
			obj->methodp_glVertexAttribI3ui(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint x */,
				(GLuint )(args[2]->NumberValue())/* GLuint y */,
				(GLuint )(args[3]->NumberValue())/* GLuint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
	PFNGLVERTEXATTRIBI3UIEXTPROC methodp_glVertexAttribI3uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI3uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI3uiEXT && args.Length() >= 4){
			obj->methodp_glVertexAttribI3uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint x */,
				(GLuint )(args[2]->NumberValue())/* GLuint y */,
				(GLuint )(args[3]->NumberValue())/* GLuint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIBI3UIVPROC methodp_glVertexAttribI3uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI3uiv && args.Length() >= 2){
			obj->methodp_glVertexAttribI3uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIBI3UIVEXTPROC methodp_glVertexAttribI3uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI3uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI3uivEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI3uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);
	PFNGLVERTEXATTRIBI4BVPROC methodp_glVertexAttribI4bv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4bv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4bv && args.Length() >= 2){
			obj->methodp_glVertexAttribI4bv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
	PFNGLVERTEXATTRIBI4BVEXTPROC methodp_glVertexAttribI4bvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4bvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4bvEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI4bvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
	PFNGLVERTEXATTRIBI4IPROC methodp_glVertexAttribI4i{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4i && args.Length() >= 5){
			obj->methodp_glVertexAttribI4i(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */,
				(GLint )(args[3]->NumberValue())/* GLint z */,
				(GLint )(args[4]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
	PFNGLVERTEXATTRIBI4IEXTPROC methodp_glVertexAttribI4iEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4iEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4iEXT && args.Length() >= 5){
			obj->methodp_glVertexAttribI4iEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */,
				(GLint )(args[3]->NumberValue())/* GLint z */,
				(GLint )(args[4]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIBI4IVPROC methodp_glVertexAttribI4iv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4iv && args.Length() >= 2){
			obj->methodp_glVertexAttribI4iv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
	PFNGLVERTEXATTRIBI4IVEXTPROC methodp_glVertexAttribI4ivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4ivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4ivEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI4ivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIBI4SVPROC methodp_glVertexAttribI4sv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4sv && args.Length() >= 2){
			obj->methodp_glVertexAttribI4sv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
	PFNGLVERTEXATTRIBI4SVEXTPROC methodp_glVertexAttribI4svEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4svEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4svEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI4svEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);
	PFNGLVERTEXATTRIBI4UBVPROC methodp_glVertexAttribI4ubv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4ubv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4ubv && args.Length() >= 2){
			obj->methodp_glVertexAttribI4ubv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
	PFNGLVERTEXATTRIBI4UBVEXTPROC methodp_glVertexAttribI4ubvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4ubvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4ubvEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI4ubvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	PFNGLVERTEXATTRIBI4UIPROC methodp_glVertexAttribI4ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4ui && args.Length() >= 5){
			obj->methodp_glVertexAttribI4ui(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint x */,
				(GLuint )(args[2]->NumberValue())/* GLuint y */,
				(GLuint )(args[3]->NumberValue())/* GLuint z */,
				(GLuint )(args[4]->NumberValue())/* GLuint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
	PFNGLVERTEXATTRIBI4UIEXTPROC methodp_glVertexAttribI4uiEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4uiEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4uiEXT && args.Length() >= 5){
			obj->methodp_glVertexAttribI4uiEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint )(args[1]->NumberValue())/* GLuint x */,
				(GLuint )(args[2]->NumberValue())/* GLuint y */,
				(GLuint )(args[3]->NumberValue())/* GLuint z */,
				(GLuint )(args[4]->NumberValue())/* GLuint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIBI4UIVPROC methodp_glVertexAttribI4uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4uiv && args.Length() >= 2){
			obj->methodp_glVertexAttribI4uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
	PFNGLVERTEXATTRIBI4UIVEXTPROC methodp_glVertexAttribI4uivEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4uivEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4uivEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI4uivEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);
	PFNGLVERTEXATTRIBI4USVPROC methodp_glVertexAttribI4usv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4usv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4usv && args.Length() >= 2){
			obj->methodp_glVertexAttribI4usv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
	PFNGLVERTEXATTRIBI4USVEXTPROC methodp_glVertexAttribI4usvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribI4usvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribI4usvEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribI4usvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	PFNGLVERTEXATTRIBIFORMATPROC methodp_glVertexAttribIFormat{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribIFormat(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribIFormat && args.Length() >= 4){
			obj->methodp_glVertexAttribIFormat(
				(GLuint )(args[0]->NumberValue())/* GLuint attribindex */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLuint )(args[3]->NumberValue())/* GLuint relativeoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
	PFNGLVERTEXATTRIBIFORMATNVPROC methodp_glVertexAttribIFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribIFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribIFormatNV && args.Length() >= 4){
			obj->methodp_glVertexAttribIFormatNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLVERTEXATTRIBIPOINTERPROC methodp_glVertexAttribIPointer{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribIPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribIPointer && args.Length() >= 5){
			obj->methodp_glVertexAttribIPointer(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLVERTEXATTRIBIPOINTEREXTPROC methodp_glVertexAttribIPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribIPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribIPointerEXT && args.Length() >= 5){
			obj->methodp_glVertexAttribIPointerEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);
	PFNGLVERTEXATTRIBL1DPROC methodp_glVertexAttribL1d{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1d && args.Length() >= 2){
			obj->methodp_glVertexAttribL1d(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);
	PFNGLVERTEXATTRIBL1DEXTPROC methodp_glVertexAttribL1dEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1dEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribL1dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIBL1DVPROC methodp_glVertexAttribL1dv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1dv && args.Length() >= 2){
			obj->methodp_glVertexAttribL1dv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIBL1DVEXTPROC methodp_glVertexAttribL1dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1dvEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribL1dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);
	PFNGLVERTEXATTRIBL1I64NVPROC methodp_glVertexAttribL1i64NV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1i64NV && args.Length() >= 2){
			obj->methodp_glVertexAttribL1i64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint64EXT )(args[1]->NumberValue())/* GLint64EXT x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v);
	PFNGLVERTEXATTRIBL1I64VNVPROC methodp_glVertexAttribL1i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1i64vNV && args.Length() >= 2){
			obj->methodp_glVertexAttribL1i64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint64EXT *)((int64_t)args[1]->NumberValue())/* const GLint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x);
	PFNGLVERTEXATTRIBL1UI64ARBPROC methodp_glVertexAttribL1ui64ARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1ui64ARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1ui64ARB && args.Length() >= 2){
			obj->methodp_glVertexAttribL1ui64ARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);
	PFNGLVERTEXATTRIBL1UI64NVPROC methodp_glVertexAttribL1ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1ui64NV && args.Length() >= 2){
			obj->methodp_glVertexAttribL1ui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v);
	PFNGLVERTEXATTRIBL1UI64VARBPROC methodp_glVertexAttribL1ui64vARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1ui64vARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1ui64vARB && args.Length() >= 2){
			obj->methodp_glVertexAttribL1ui64vARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint64EXT *)((int64_t)args[1]->NumberValue())/* const GLuint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
	PFNGLVERTEXATTRIBL1UI64VNVPROC methodp_glVertexAttribL1ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL1ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL1ui64vNV && args.Length() >= 2){
			obj->methodp_glVertexAttribL1ui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint64EXT *)((int64_t)args[1]->NumberValue())/* const GLuint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);
	PFNGLVERTEXATTRIBL2DPROC methodp_glVertexAttribL2d{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL2d && args.Length() >= 3){
			obj->methodp_glVertexAttribL2d(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y);
	PFNGLVERTEXATTRIBL2DEXTPROC methodp_glVertexAttribL2dEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL2dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL2dEXT && args.Length() >= 3){
			obj->methodp_glVertexAttribL2dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIBL2DVPROC methodp_glVertexAttribL2dv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL2dv && args.Length() >= 2){
			obj->methodp_glVertexAttribL2dv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIBL2DVEXTPROC methodp_glVertexAttribL2dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL2dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL2dvEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribL2dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);
	PFNGLVERTEXATTRIBL2I64NVPROC methodp_glVertexAttribL2i64NV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL2i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL2i64NV && args.Length() >= 3){
			obj->methodp_glVertexAttribL2i64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint64EXT )(args[1]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v);
	PFNGLVERTEXATTRIBL2I64VNVPROC methodp_glVertexAttribL2i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL2i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL2i64vNV && args.Length() >= 2){
			obj->methodp_glVertexAttribL2i64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint64EXT *)((int64_t)args[1]->NumberValue())/* const GLint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
	PFNGLVERTEXATTRIBL2UI64NVPROC methodp_glVertexAttribL2ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL2ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL2ui64NV && args.Length() >= 3){
			obj->methodp_glVertexAttribL2ui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
	PFNGLVERTEXATTRIBL2UI64VNVPROC methodp_glVertexAttribL2ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL2ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL2ui64vNV && args.Length() >= 2){
			obj->methodp_glVertexAttribL2ui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint64EXT *)((int64_t)args[1]->NumberValue())/* const GLuint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
	PFNGLVERTEXATTRIBL3DPROC methodp_glVertexAttribL3d{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL3d && args.Length() >= 4){
			obj->methodp_glVertexAttribL3d(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
	PFNGLVERTEXATTRIBL3DEXTPROC methodp_glVertexAttribL3dEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL3dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL3dEXT && args.Length() >= 4){
			obj->methodp_glVertexAttribL3dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIBL3DVPROC methodp_glVertexAttribL3dv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL3dv && args.Length() >= 2){
			obj->methodp_glVertexAttribL3dv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIBL3DVEXTPROC methodp_glVertexAttribL3dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL3dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL3dvEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribL3dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
	PFNGLVERTEXATTRIBL3I64NVPROC methodp_glVertexAttribL3i64NV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL3i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL3i64NV && args.Length() >= 4){
			obj->methodp_glVertexAttribL3i64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint64EXT )(args[1]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT y */,
				(GLint64EXT )(args[3]->NumberValue())/* GLint64EXT z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v);
	PFNGLVERTEXATTRIBL3I64VNVPROC methodp_glVertexAttribL3i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL3i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL3i64vNV && args.Length() >= 2){
			obj->methodp_glVertexAttribL3i64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint64EXT *)((int64_t)args[1]->NumberValue())/* const GLint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
	PFNGLVERTEXATTRIBL3UI64NVPROC methodp_glVertexAttribL3ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL3ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL3ui64NV && args.Length() >= 4){
			obj->methodp_glVertexAttribL3ui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT y */,
				(GLuint64EXT )(args[3]->NumberValue())/* GLuint64EXT z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
	PFNGLVERTEXATTRIBL3UI64VNVPROC methodp_glVertexAttribL3ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL3ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL3ui64vNV && args.Length() >= 2){
			obj->methodp_glVertexAttribL3ui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint64EXT *)((int64_t)args[1]->NumberValue())/* const GLuint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLVERTEXATTRIBL4DPROC methodp_glVertexAttribL4d{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL4d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL4d && args.Length() >= 5){
			obj->methodp_glVertexAttribL4d(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLVERTEXATTRIBL4DEXTPROC methodp_glVertexAttribL4dEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL4dEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL4dEXT && args.Length() >= 5){
			obj->methodp_glVertexAttribL4dEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIBL4DVPROC methodp_glVertexAttribL4dv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL4dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL4dv && args.Length() >= 2){
			obj->methodp_glVertexAttribL4dv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v);
	PFNGLVERTEXATTRIBL4DVEXTPROC methodp_glVertexAttribL4dvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL4dvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL4dvEXT && args.Length() >= 2){
			obj->methodp_glVertexAttribL4dvEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
	PFNGLVERTEXATTRIBL4I64NVPROC methodp_glVertexAttribL4i64NV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL4i64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL4i64NV && args.Length() >= 5){
			obj->methodp_glVertexAttribL4i64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint64EXT )(args[1]->NumberValue())/* GLint64EXT x */,
				(GLint64EXT )(args[2]->NumberValue())/* GLint64EXT y */,
				(GLint64EXT )(args[3]->NumberValue())/* GLint64EXT z */,
				(GLint64EXT )(args[4]->NumberValue())/* GLint64EXT w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v);
	PFNGLVERTEXATTRIBL4I64VNVPROC methodp_glVertexAttribL4i64vNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL4i64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL4i64vNV && args.Length() >= 2){
			obj->methodp_glVertexAttribL4i64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLint64EXT *)((int64_t)args[1]->NumberValue())/* const GLint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
	PFNGLVERTEXATTRIBL4UI64NVPROC methodp_glVertexAttribL4ui64NV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL4ui64NV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL4ui64NV && args.Length() >= 5){
			obj->methodp_glVertexAttribL4ui64NV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLuint64EXT )(args[1]->NumberValue())/* GLuint64EXT x */,
				(GLuint64EXT )(args[2]->NumberValue())/* GLuint64EXT y */,
				(GLuint64EXT )(args[3]->NumberValue())/* GLuint64EXT z */,
				(GLuint64EXT )(args[4]->NumberValue())/* GLuint64EXT w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
	PFNGLVERTEXATTRIBL4UI64VNVPROC methodp_glVertexAttribL4ui64vNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribL4ui64vNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribL4ui64vNV && args.Length() >= 2){
			obj->methodp_glVertexAttribL4ui64vNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLuint64EXT *)((int64_t)args[1]->NumberValue())/* const GLuint64EXT *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
	PFNGLVERTEXATTRIBLFORMATPROC methodp_glVertexAttribLFormat{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribLFormat(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribLFormat && args.Length() >= 4){
			obj->methodp_glVertexAttribLFormat(
				(GLuint )(args[0]->NumberValue())/* GLuint attribindex */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLuint )(args[3]->NumberValue())/* GLuint relativeoffset */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
	PFNGLVERTEXATTRIBLFORMATNVPROC methodp_glVertexAttribLFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribLFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribLFormatNV && args.Length() >= 4){
			obj->methodp_glVertexAttribLFormatNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLVERTEXATTRIBLPOINTERPROC methodp_glVertexAttribLPointer{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribLPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribLPointer && args.Length() >= 5){
			obj->methodp_glVertexAttribLPointer(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLVERTEXATTRIBLPOINTEREXTPROC methodp_glVertexAttribLPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribLPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribLPointerEXT && args.Length() >= 5){
			obj->methodp_glVertexAttribLPointerEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
	PFNGLVERTEXATTRIBP1UIPROC methodp_glVertexAttribP1ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribP1ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribP1ui && args.Length() >= 4){
			obj->methodp_glVertexAttribP1ui(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean normalized */,
				(GLuint )(args[3]->NumberValue())/* GLuint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	PFNGLVERTEXATTRIBP1UIVPROC methodp_glVertexAttribP1uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribP1uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribP1uiv && args.Length() >= 4){
			obj->methodp_glVertexAttribP1uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean normalized */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
	PFNGLVERTEXATTRIBP2UIPROC methodp_glVertexAttribP2ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribP2ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribP2ui && args.Length() >= 4){
			obj->methodp_glVertexAttribP2ui(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean normalized */,
				(GLuint )(args[3]->NumberValue())/* GLuint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	PFNGLVERTEXATTRIBP2UIVPROC methodp_glVertexAttribP2uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribP2uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribP2uiv && args.Length() >= 4){
			obj->methodp_glVertexAttribP2uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean normalized */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
	PFNGLVERTEXATTRIBP3UIPROC methodp_glVertexAttribP3ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribP3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribP3ui && args.Length() >= 4){
			obj->methodp_glVertexAttribP3ui(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean normalized */,
				(GLuint )(args[3]->NumberValue())/* GLuint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	PFNGLVERTEXATTRIBP3UIVPROC methodp_glVertexAttribP3uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribP3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribP3uiv && args.Length() >= 4){
			obj->methodp_glVertexAttribP3uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean normalized */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
	PFNGLVERTEXATTRIBP4UIPROC methodp_glVertexAttribP4ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribP4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribP4ui && args.Length() >= 4){
			obj->methodp_glVertexAttribP4ui(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean normalized */,
				(GLuint )(args[3]->NumberValue())/* GLuint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
	PFNGLVERTEXATTRIBP4UIVPROC methodp_glVertexAttribP4uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribP4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribP4uiv && args.Length() >= 4){
			obj->methodp_glVertexAttribP4uiv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLboolean )(args[2]->NumberValue())/* GLboolean normalized */,
				(const GLuint *)((int64_t)args[3]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (GLuint index, GLenum pname, GLint param);
	PFNGLVERTEXATTRIBPARAMETERIAMDPROC methodp_glVertexAttribParameteriAMD{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribParameteriAMD(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribParameteriAMD && args.Length() >= 3){
			obj->methodp_glVertexAttribParameteriAMD(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLenum )(args[1]->NumberValue())/* GLenum pname */,
				(GLint )(args[2]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
	PFNGLVERTEXATTRIBPOINTERPROC methodp_glVertexAttribPointer{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribPointer && args.Length() >= 6){
			obj->methodp_glVertexAttribPointer(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean normalized */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
	PFNGLVERTEXATTRIBPOINTERARBPROC methodp_glVertexAttribPointerARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribPointerARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribPointerARB && args.Length() >= 6){
			obj->methodp_glVertexAttribPointerARB(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint size */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLboolean )(args[3]->NumberValue())/* GLboolean normalized */,
				(GLsizei )(args[4]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[5]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer);
	PFNGLVERTEXATTRIBPOINTERNVPROC methodp_glVertexAttribPointerNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribPointerNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribPointerNV && args.Length() >= 5){
			obj->methodp_glVertexAttribPointerNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLint )(args[1]->NumberValue())/* GLint fsize */,
				(GLenum )(args[2]->NumberValue())/* GLenum type */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
	PFNGLVERTEXATTRIBS1DVNVPROC methodp_glVertexAttribs1dvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs1dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs1dvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs1dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
	PFNGLVERTEXATTRIBS1FVNVPROC methodp_glVertexAttribs1fvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs1fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs1fvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs1fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
	PFNGLVERTEXATTRIBS1HVNVPROC methodp_glVertexAttribs1hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs1hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs1hvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs1hvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei n */,
				(const GLhalfNV *)((int64_t)args[2]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
	PFNGLVERTEXATTRIBS1SVNVPROC methodp_glVertexAttribs1svNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs1svNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs1svNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs1svNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLshort *)((int64_t)args[2]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
	PFNGLVERTEXATTRIBS2DVNVPROC methodp_glVertexAttribs2dvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs2dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs2dvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs2dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
	PFNGLVERTEXATTRIBS2FVNVPROC methodp_glVertexAttribs2fvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs2fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs2fvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs2fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
	PFNGLVERTEXATTRIBS2HVNVPROC methodp_glVertexAttribs2hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs2hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs2hvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs2hvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei n */,
				(const GLhalfNV *)((int64_t)args[2]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
	PFNGLVERTEXATTRIBS2SVNVPROC methodp_glVertexAttribs2svNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs2svNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs2svNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs2svNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLshort *)((int64_t)args[2]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
	PFNGLVERTEXATTRIBS3DVNVPROC methodp_glVertexAttribs3dvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs3dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs3dvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs3dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
	PFNGLVERTEXATTRIBS3FVNVPROC methodp_glVertexAttribs3fvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs3fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs3fvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs3fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
	PFNGLVERTEXATTRIBS3HVNVPROC methodp_glVertexAttribs3hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs3hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs3hvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs3hvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei n */,
				(const GLhalfNV *)((int64_t)args[2]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
	PFNGLVERTEXATTRIBS3SVNVPROC methodp_glVertexAttribs3svNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs3svNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs3svNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs3svNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLshort *)((int64_t)args[2]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
	PFNGLVERTEXATTRIBS4DVNVPROC methodp_glVertexAttribs4dvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs4dvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs4dvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs4dvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLdouble *)((int64_t)args[2]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
	PFNGLVERTEXATTRIBS4FVNVPROC methodp_glVertexAttribs4fvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs4fvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs4fvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs4fvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
	PFNGLVERTEXATTRIBS4HVNVPROC methodp_glVertexAttribs4hvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs4hvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs4hvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs4hvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei n */,
				(const GLhalfNV *)((int64_t)args[2]->NumberValue())/* const GLhalfNV *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
	PFNGLVERTEXATTRIBS4SVNVPROC methodp_glVertexAttribs4svNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs4svNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs4svNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs4svNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLshort *)((int64_t)args[2]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);
	PFNGLVERTEXATTRIBS4UBVNVPROC methodp_glVertexAttribs4ubvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexAttribs4ubvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexAttribs4ubvNV && args.Length() >= 3){
			obj->methodp_glVertexAttribs4ubvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLubyte *)((int64_t)args[2]->NumberValue())/* const GLubyte *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);
	PFNGLVERTEXBINDINGDIVISORPROC methodp_glVertexBindingDivisor{nullptr};
	static v8::Handle<v8::Value> method_glVertexBindingDivisor(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexBindingDivisor && args.Length() >= 2){
			obj->methodp_glVertexBindingDivisor(
				(GLuint )(args[0]->NumberValue())/* GLuint bindingindex */,
				(GLuint )(args[1]->NumberValue())/* GLuint divisor */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC) (GLint count);
	PFNGLVERTEXBLENDARBPROC methodp_glVertexBlendARB{nullptr};
	static v8::Handle<v8::Value> method_glVertexBlendARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexBlendARB && args.Length() >= 1){
			obj->methodp_glVertexBlendARB(
				(GLint )(args[0]->NumberValue())/* GLint count */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
	PFNGLVERTEXBLENDENVFATIPROC methodp_glVertexBlendEnvfATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexBlendEnvfATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexBlendEnvfATI && args.Length() >= 2){
			obj->methodp_glVertexBlendEnvfATI(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
	PFNGLVERTEXBLENDENVIATIPROC methodp_glVertexBlendEnviATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexBlendEnviATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexBlendEnviATI && args.Length() >= 2){
			obj->methodp_glVertexBlendEnviATI(
				(GLenum )(args[0]->NumberValue())/* GLenum pname */,
				(GLint )(args[1]->NumberValue())/* GLint param */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
	PFNGLVERTEXFORMATNVPROC methodp_glVertexFormatNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexFormatNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexFormatNV && args.Length() >= 3){
			obj->methodp_glVertexFormatNV(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);
	PFNGLVERTEXP2UIPROC methodp_glVertexP2ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexP2ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexP2ui && args.Length() >= 2){
			obj->methodp_glVertexP2ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);
	PFNGLVERTEXP2UIVPROC methodp_glVertexP2uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexP2uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexP2uiv && args.Length() >= 2){
			obj->methodp_glVertexP2uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);
	PFNGLVERTEXP3UIPROC methodp_glVertexP3ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexP3ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexP3ui && args.Length() >= 2){
			obj->methodp_glVertexP3ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);
	PFNGLVERTEXP3UIVPROC methodp_glVertexP3uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexP3uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexP3uiv && args.Length() >= 2){
			obj->methodp_glVertexP3uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);
	PFNGLVERTEXP4UIPROC methodp_glVertexP4ui{nullptr};
	static v8::Handle<v8::Value> method_glVertexP4ui(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexP4ui && args.Length() >= 2){
			obj->methodp_glVertexP4ui(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(GLuint )(args[1]->NumberValue())/* GLuint value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);
	PFNGLVERTEXP4UIVPROC methodp_glVertexP4uiv{nullptr};
	static v8::Handle<v8::Value> method_glVertexP4uiv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexP4uiv && args.Length() >= 2){
			obj->methodp_glVertexP4uiv(
				(GLenum )(args[0]->NumberValue())/* GLenum type */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *value */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLVERTEXPOINTERPROC methodp_glVertexPointer{nullptr};
	static v8::Handle<v8::Value> method_glVertexPointer(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexPointer && args.Length() >= 4){
			obj->methodp_glVertexPointer(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);
	PFNGLVERTEXPOINTEREXTPROC methodp_glVertexPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexPointerEXT && args.Length() >= 5){
			obj->methodp_glVertexPointerEXT(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei count */,
				(const void *)((int64_t)args[4]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);
	PFNGLVERTEXPOINTERLISTIBMPROC methodp_glVertexPointerListIBM{nullptr};
	static v8::Handle<v8::Value> method_glVertexPointerListIBM(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexPointerListIBM && args.Length() >= 5){
			obj->methodp_glVertexPointerListIBM(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLint )(args[2]->NumberValue())/* GLint stride */,
				(const void **)((int64_t)args[3]->NumberValue())/* const void **pointer */,
				(GLint )(args[4]->NumberValue())/* GLint ptrstride */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);
	PFNGLVERTEXPOINTERVINTELPROC methodp_glVertexPointervINTEL{nullptr};
	static v8::Handle<v8::Value> method_glVertexPointervINTEL(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexPointervINTEL && args.Length() >= 3){
			obj->methodp_glVertexPointervINTEL(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(const void **)((int64_t)args[2]->NumberValue())/* const void **pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
	PFNGLVERTEXSTREAM1DATIPROC methodp_glVertexStream1dATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream1dATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream1dATI && args.Length() >= 2){
			obj->methodp_glVertexStream1dATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
	PFNGLVERTEXSTREAM1DVATIPROC methodp_glVertexStream1dvATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream1dvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream1dvATI && args.Length() >= 2){
			obj->methodp_glVertexStream1dvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
	PFNGLVERTEXSTREAM1FATIPROC methodp_glVertexStream1fATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream1fATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream1fATI && args.Length() >= 2){
			obj->methodp_glVertexStream1fATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
	PFNGLVERTEXSTREAM1FVATIPROC methodp_glVertexStream1fvATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream1fvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream1fvATI && args.Length() >= 2){
			obj->methodp_glVertexStream1fvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
	PFNGLVERTEXSTREAM1IATIPROC methodp_glVertexStream1iATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream1iATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream1iATI && args.Length() >= 2){
			obj->methodp_glVertexStream1iATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLint )(args[1]->NumberValue())/* GLint x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
	PFNGLVERTEXSTREAM1IVATIPROC methodp_glVertexStream1ivATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream1ivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream1ivATI && args.Length() >= 2){
			obj->methodp_glVertexStream1ivATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
	PFNGLVERTEXSTREAM1SATIPROC methodp_glVertexStream1sATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream1sATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream1sATI && args.Length() >= 2){
			obj->methodp_glVertexStream1sATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
	PFNGLVERTEXSTREAM1SVATIPROC methodp_glVertexStream1svATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream1svATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream1svATI && args.Length() >= 2){
			obj->methodp_glVertexStream1svATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
	PFNGLVERTEXSTREAM2DATIPROC methodp_glVertexStream2dATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream2dATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream2dATI && args.Length() >= 3){
			obj->methodp_glVertexStream2dATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
	PFNGLVERTEXSTREAM2DVATIPROC methodp_glVertexStream2dvATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream2dvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream2dvATI && args.Length() >= 2){
			obj->methodp_glVertexStream2dvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
	PFNGLVERTEXSTREAM2FATIPROC methodp_glVertexStream2fATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream2fATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream2fATI && args.Length() >= 3){
			obj->methodp_glVertexStream2fATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
	PFNGLVERTEXSTREAM2FVATIPROC methodp_glVertexStream2fvATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream2fvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream2fvATI && args.Length() >= 2){
			obj->methodp_glVertexStream2fvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
	PFNGLVERTEXSTREAM2IATIPROC methodp_glVertexStream2iATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream2iATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream2iATI && args.Length() >= 3){
			obj->methodp_glVertexStream2iATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
	PFNGLVERTEXSTREAM2IVATIPROC methodp_glVertexStream2ivATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream2ivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream2ivATI && args.Length() >= 2){
			obj->methodp_glVertexStream2ivATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
	PFNGLVERTEXSTREAM2SATIPROC methodp_glVertexStream2sATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream2sATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream2sATI && args.Length() >= 3){
			obj->methodp_glVertexStream2sATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
	PFNGLVERTEXSTREAM2SVATIPROC methodp_glVertexStream2svATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream2svATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream2svATI && args.Length() >= 2){
			obj->methodp_glVertexStream2svATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
	PFNGLVERTEXSTREAM3DATIPROC methodp_glVertexStream3dATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream3dATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream3dATI && args.Length() >= 4){
			obj->methodp_glVertexStream3dATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
	PFNGLVERTEXSTREAM3DVATIPROC methodp_glVertexStream3dvATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream3dvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream3dvATI && args.Length() >= 2){
			obj->methodp_glVertexStream3dvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
	PFNGLVERTEXSTREAM3FATIPROC methodp_glVertexStream3fATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream3fATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream3fATI && args.Length() >= 4){
			obj->methodp_glVertexStream3fATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
	PFNGLVERTEXSTREAM3FVATIPROC methodp_glVertexStream3fvATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream3fvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream3fvATI && args.Length() >= 2){
			obj->methodp_glVertexStream3fvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
	PFNGLVERTEXSTREAM3IATIPROC methodp_glVertexStream3iATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream3iATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream3iATI && args.Length() >= 4){
			obj->methodp_glVertexStream3iATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */,
				(GLint )(args[3]->NumberValue())/* GLint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
	PFNGLVERTEXSTREAM3IVATIPROC methodp_glVertexStream3ivATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream3ivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream3ivATI && args.Length() >= 2){
			obj->methodp_glVertexStream3ivATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
	PFNGLVERTEXSTREAM3SATIPROC methodp_glVertexStream3sATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream3sATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream3sATI && args.Length() >= 4){
			obj->methodp_glVertexStream3sATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */,
				(GLshort )(args[3]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
	PFNGLVERTEXSTREAM3SVATIPROC methodp_glVertexStream3svATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream3svATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream3svATI && args.Length() >= 2){
			obj->methodp_glVertexStream3svATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLVERTEXSTREAM4DATIPROC methodp_glVertexStream4dATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream4dATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream4dATI && args.Length() >= 5){
			obj->methodp_glVertexStream4dATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[4]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
	PFNGLVERTEXSTREAM4DVATIPROC methodp_glVertexStream4dvATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream4dvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream4dvATI && args.Length() >= 2){
			obj->methodp_glVertexStream4dvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLVERTEXSTREAM4FATIPROC methodp_glVertexStream4fATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream4fATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream4fATI && args.Length() >= 5){
			obj->methodp_glVertexStream4fATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
	PFNGLVERTEXSTREAM4FVATIPROC methodp_glVertexStream4fvATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream4fvATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream4fvATI && args.Length() >= 2){
			obj->methodp_glVertexStream4fvATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
	PFNGLVERTEXSTREAM4IATIPROC methodp_glVertexStream4iATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream4iATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream4iATI && args.Length() >= 5){
			obj->methodp_glVertexStream4iATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLint )(args[1]->NumberValue())/* GLint x */,
				(GLint )(args[2]->NumberValue())/* GLint y */,
				(GLint )(args[3]->NumberValue())/* GLint z */,
				(GLint )(args[4]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
	PFNGLVERTEXSTREAM4IVATIPROC methodp_glVertexStream4ivATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream4ivATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream4ivATI && args.Length() >= 2){
			obj->methodp_glVertexStream4ivATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
	PFNGLVERTEXSTREAM4SATIPROC methodp_glVertexStream4sATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream4sATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream4sATI && args.Length() >= 5){
			obj->methodp_glVertexStream4sATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(GLshort )(args[1]->NumberValue())/* GLshort x */,
				(GLshort )(args[2]->NumberValue())/* GLshort y */,
				(GLshort )(args[3]->NumberValue())/* GLshort z */,
				(GLshort )(args[4]->NumberValue())/* GLshort w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
	PFNGLVERTEXSTREAM4SVATIPROC methodp_glVertexStream4svATI{nullptr};
	static v8::Handle<v8::Value> method_glVertexStream4svATI(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexStream4svATI && args.Length() >= 2){
			obj->methodp_glVertexStream4svATI(
				(GLenum )(args[0]->NumberValue())/* GLenum stream */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *coords */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLVERTEXWEIGHTPOINTEREXTPROC methodp_glVertexWeightPointerEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexWeightPointerEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexWeightPointerEXT && args.Length() >= 4){
			obj->methodp_glVertexWeightPointerEXT(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
	PFNGLVERTEXWEIGHTFEXTPROC methodp_glVertexWeightfEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexWeightfEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexWeightfEXT && args.Length() >= 1){
			obj->methodp_glVertexWeightfEXT(
				(GLfloat )(args[0]->NumberValue())/* GLfloat weight */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);
	PFNGLVERTEXWEIGHTFVEXTPROC methodp_glVertexWeightfvEXT{nullptr};
	static v8::Handle<v8::Value> method_glVertexWeightfvEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexWeightfvEXT && args.Length() >= 1){
			obj->methodp_glVertexWeightfvEXT(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *weight */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);
	PFNGLVERTEXWEIGHTHNVPROC methodp_glVertexWeighthNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexWeighthNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexWeighthNV && args.Length() >= 1){
			obj->methodp_glVertexWeighthNV(
				(GLhalfNV )(args[0]->NumberValue())/* GLhalfNV weight */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);
	PFNGLVERTEXWEIGHTHVNVPROC methodp_glVertexWeighthvNV{nullptr};
	static v8::Handle<v8::Value> method_glVertexWeighthvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVertexWeighthvNV && args.Length() >= 1){
			obj->methodp_glVertexWeighthvNV(
				(const GLhalfNV *)((int64_t)args[0]->NumberValue())/* const GLhalfNV *weight */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef GLenum (APIENTRYP PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
	PFNGLVIDEOCAPTURENVPROC methodp_glVideoCaptureNV{nullptr};
	static v8::Handle<v8::Value> method_glVideoCaptureNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVideoCaptureNV && args.Length() >= 3){
			obj->methodp_glVideoCaptureNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint *)((int64_t)args[1]->NumberValue())/* GLuint *sequence_num */,
				(GLuint64EXT *)((int64_t)args[2]->NumberValue())/* GLuint64EXT *capture_time */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
	PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC methodp_glVideoCaptureStreamParameterdvNV{nullptr};
	static v8::Handle<v8::Value> method_glVideoCaptureStreamParameterdvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVideoCaptureStreamParameterdvNV && args.Length() >= 4){
			obj->methodp_glVideoCaptureStreamParameterdvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint )(args[1]->NumberValue())/* GLuint stream */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLdouble *)((int64_t)args[3]->NumberValue())/* const GLdouble *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
	PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC methodp_glVideoCaptureStreamParameterfvNV{nullptr};
	static v8::Handle<v8::Value> method_glVideoCaptureStreamParameterfvNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVideoCaptureStreamParameterfvNV && args.Length() >= 4){
			obj->methodp_glVideoCaptureStreamParameterfvNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint )(args[1]->NumberValue())/* GLuint stream */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
	PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC methodp_glVideoCaptureStreamParameterivNV{nullptr};
	static v8::Handle<v8::Value> method_glVideoCaptureStreamParameterivNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glVideoCaptureStreamParameterivNV && args.Length() >= 4){
			obj->methodp_glVideoCaptureStreamParameterivNV(
				(GLuint )(args[0]->NumberValue())/* GLuint video_capture_slot */,
				(GLuint )(args[1]->NumberValue())/* GLuint stream */,
				(GLenum )(args[2]->NumberValue())/* GLenum pname */,
				(const GLint *)((int64_t)args[3]->NumberValue())/* const GLint *params */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
	PFNGLVIEWPORTPROC methodp_glViewport{nullptr};
	static v8::Handle<v8::Value> method_glViewport(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glViewport && args.Length() >= 4){
			obj->methodp_glViewport(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei width */,
				(GLsizei )(args[3]->NumberValue())/* GLsizei height */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);
	PFNGLVIEWPORTARRAYVPROC methodp_glViewportArrayv{nullptr};
	static v8::Handle<v8::Value> method_glViewportArrayv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glViewportArrayv && args.Length() >= 3){
			obj->methodp_glViewportArrayv(
				(GLuint )(args[0]->NumberValue())/* GLuint first */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei count */,
				(const GLfloat *)((int64_t)args[2]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
	PFNGLVIEWPORTINDEXEDFPROC methodp_glViewportIndexedf{nullptr};
	static v8::Handle<v8::Value> method_glViewportIndexedf(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glViewportIndexedf && args.Length() >= 5){
			obj->methodp_glViewportIndexedf(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat w */,
				(GLfloat )(args[4]->NumberValue())/* GLfloat h */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);
	PFNGLVIEWPORTINDEXEDFVPROC methodp_glViewportIndexedfv{nullptr};
	static v8::Handle<v8::Value> method_glViewportIndexedfv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glViewportIndexedfv && args.Length() >= 2){
			obj->methodp_glViewportIndexedfv(
				(GLuint )(args[0]->NumberValue())/* GLuint index */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
	PFNGLWAITSYNCPROC methodp_glWaitSync{nullptr};
	static v8::Handle<v8::Value> method_glWaitSync(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWaitSync && args.Length() >= 3){
			obj->methodp_glWaitSync(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield flags */,
				(GLuint64 )(args[2]->NumberValue())/* GLuint64 timeout */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWAITSYNCAPPLEPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
	PFNGLWAITSYNCAPPLEPROC methodp_glWaitSyncAPPLE{nullptr};
	static v8::Handle<v8::Value> method_glWaitSyncAPPLE(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWaitSyncAPPLE && args.Length() >= 3){
			obj->methodp_glWaitSyncAPPLE(
				(GLsync )((int64_t)args[0]->NumberValue())/* GLsync sync */,
				(GLbitfield )(args[1]->NumberValue())/* GLbitfield flags */,
				(GLuint64 )(args[2]->NumberValue())/* GLuint64 timeout */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);
	PFNGLWEIGHTPATHSNVPROC methodp_glWeightPathsNV{nullptr};
	static v8::Handle<v8::Value> method_glWeightPathsNV(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightPathsNV && args.Length() >= 4){
			obj->methodp_glWeightPathsNV(
				(GLuint )(args[0]->NumberValue())/* GLuint resultPath */,
				(GLsizei )(args[1]->NumberValue())/* GLsizei numPaths */,
				(const GLuint *)((int64_t)args[2]->NumberValue())/* const GLuint *paths */,
				(const GLfloat *)((int64_t)args[3]->NumberValue())/* const GLfloat *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLWEIGHTPOINTERARBPROC methodp_glWeightPointerARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightPointerARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightPointerARB && args.Length() >= 4){
			obj->methodp_glWeightPointerARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTPOINTEROESPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);
	PFNGLWEIGHTPOINTEROESPROC methodp_glWeightPointerOES{nullptr};
	static v8::Handle<v8::Value> method_glWeightPointerOES(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightPointerOES && args.Length() >= 4){
			obj->methodp_glWeightPointerOES(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(GLenum )(args[1]->NumberValue())/* GLenum type */,
				(GLsizei )(args[2]->NumberValue())/* GLsizei stride */,
				(const void *)((int64_t)args[3]->NumberValue())/* const void *pointer */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);
	PFNGLWEIGHTBVARBPROC methodp_glWeightbvARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightbvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightbvARB && args.Length() >= 2){
			obj->methodp_glWeightbvARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLbyte *)((int64_t)args[1]->NumberValue())/* const GLbyte *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
	PFNGLWEIGHTDVARBPROC methodp_glWeightdvARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightdvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightdvARB && args.Length() >= 2){
			obj->methodp_glWeightdvARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLdouble *)((int64_t)args[1]->NumberValue())/* const GLdouble *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
	PFNGLWEIGHTFVARBPROC methodp_glWeightfvARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightfvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightfvARB && args.Length() >= 2){
			obj->methodp_glWeightfvARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLfloat *)((int64_t)args[1]->NumberValue())/* const GLfloat *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
	PFNGLWEIGHTIVARBPROC methodp_glWeightivARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightivARB && args.Length() >= 2){
			obj->methodp_glWeightivARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLint *)((int64_t)args[1]->NumberValue())/* const GLint *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);
	PFNGLWEIGHTSVARBPROC methodp_glWeightsvARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightsvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightsvARB && args.Length() >= 2){
			obj->methodp_glWeightsvARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLshort *)((int64_t)args[1]->NumberValue())/* const GLshort *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);
	PFNGLWEIGHTUBVARBPROC methodp_glWeightubvARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightubvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightubvARB && args.Length() >= 2){
			obj->methodp_glWeightubvARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLubyte *)((int64_t)args[1]->NumberValue())/* const GLubyte *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);
	PFNGLWEIGHTUIVARBPROC methodp_glWeightuivARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightuivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightuivARB && args.Length() >= 2){
			obj->methodp_glWeightuivARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLuint *)((int64_t)args[1]->NumberValue())/* const GLuint *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);
	PFNGLWEIGHTUSVARBPROC methodp_glWeightusvARB{nullptr};
	static v8::Handle<v8::Value> method_glWeightusvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWeightusvARB && args.Length() >= 2){
			obj->methodp_glWeightusvARB(
				(GLint )(args[0]->NumberValue())/* GLint size */,
				(const GLushort *)((int64_t)args[1]->NumberValue())/* const GLushort *weights */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
	PFNGLWINDOWPOS2DPROC methodp_glWindowPos2d{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2d && args.Length() >= 2){
			obj->methodp_glWindowPos2d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
	PFNGLWINDOWPOS2DARBPROC methodp_glWindowPos2dARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2dARB && args.Length() >= 2){
			obj->methodp_glWindowPos2dARB(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
	PFNGLWINDOWPOS2DMESAPROC methodp_glWindowPos2dMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2dMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2dMESA && args.Length() >= 2){
			obj->methodp_glWindowPos2dMESA(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);
	PFNGLWINDOWPOS2DVPROC methodp_glWindowPos2dv{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2dv && args.Length() >= 1){
			obj->methodp_glWindowPos2dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);
	PFNGLWINDOWPOS2DVARBPROC methodp_glWindowPos2dvARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2dvARB && args.Length() >= 1){
			obj->methodp_glWindowPos2dvARB(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);
	PFNGLWINDOWPOS2DVMESAPROC methodp_glWindowPos2dvMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2dvMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2dvMESA && args.Length() >= 1){
			obj->methodp_glWindowPos2dvMESA(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
	PFNGLWINDOWPOS2FPROC methodp_glWindowPos2f{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2f && args.Length() >= 2){
			obj->methodp_glWindowPos2f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
	PFNGLWINDOWPOS2FARBPROC methodp_glWindowPos2fARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2fARB && args.Length() >= 2){
			obj->methodp_glWindowPos2fARB(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
	PFNGLWINDOWPOS2FMESAPROC methodp_glWindowPos2fMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2fMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2fMESA && args.Length() >= 2){
			obj->methodp_glWindowPos2fMESA(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);
	PFNGLWINDOWPOS2FVPROC methodp_glWindowPos2fv{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2fv && args.Length() >= 1){
			obj->methodp_glWindowPos2fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);
	PFNGLWINDOWPOS2FVARBPROC methodp_glWindowPos2fvARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2fvARB && args.Length() >= 1){
			obj->methodp_glWindowPos2fvARB(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
	PFNGLWINDOWPOS2FVMESAPROC methodp_glWindowPos2fvMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2fvMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2fvMESA && args.Length() >= 1){
			obj->methodp_glWindowPos2fvMESA(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
	PFNGLWINDOWPOS2IPROC methodp_glWindowPos2i{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2i && args.Length() >= 2){
			obj->methodp_glWindowPos2i(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
	PFNGLWINDOWPOS2IARBPROC methodp_glWindowPos2iARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2iARB && args.Length() >= 2){
			obj->methodp_glWindowPos2iARB(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
	PFNGLWINDOWPOS2IMESAPROC methodp_glWindowPos2iMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2iMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2iMESA && args.Length() >= 2){
			obj->methodp_glWindowPos2iMESA(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC) (const GLint *v);
	PFNGLWINDOWPOS2IVPROC methodp_glWindowPos2iv{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2iv && args.Length() >= 1){
			obj->methodp_glWindowPos2iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);
	PFNGLWINDOWPOS2IVARBPROC methodp_glWindowPos2ivARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2ivARB && args.Length() >= 1){
			obj->methodp_glWindowPos2ivARB(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);
	PFNGLWINDOWPOS2IVMESAPROC methodp_glWindowPos2ivMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2ivMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2ivMESA && args.Length() >= 1){
			obj->methodp_glWindowPos2ivMESA(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
	PFNGLWINDOWPOS2SPROC methodp_glWindowPos2s{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2s && args.Length() >= 2){
			obj->methodp_glWindowPos2s(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
	PFNGLWINDOWPOS2SARBPROC methodp_glWindowPos2sARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2sARB && args.Length() >= 2){
			obj->methodp_glWindowPos2sARB(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
	PFNGLWINDOWPOS2SMESAPROC methodp_glWindowPos2sMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2sMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2sMESA && args.Length() >= 2){
			obj->methodp_glWindowPos2sMESA(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC) (const GLshort *v);
	PFNGLWINDOWPOS2SVPROC methodp_glWindowPos2sv{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2sv && args.Length() >= 1){
			obj->methodp_glWindowPos2sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);
	PFNGLWINDOWPOS2SVARBPROC methodp_glWindowPos2svARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2svARB && args.Length() >= 1){
			obj->methodp_glWindowPos2svARB(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);
	PFNGLWINDOWPOS2SVMESAPROC methodp_glWindowPos2svMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos2svMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos2svMESA && args.Length() >= 1){
			obj->methodp_glWindowPos2svMESA(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
	PFNGLWINDOWPOS3DPROC methodp_glWindowPos3d{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3d(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3d && args.Length() >= 3){
			obj->methodp_glWindowPos3d(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
	PFNGLWINDOWPOS3DARBPROC methodp_glWindowPos3dARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3dARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3dARB && args.Length() >= 3){
			obj->methodp_glWindowPos3dARB(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
	PFNGLWINDOWPOS3DMESAPROC methodp_glWindowPos3dMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3dMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3dMESA && args.Length() >= 3){
			obj->methodp_glWindowPos3dMESA(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);
	PFNGLWINDOWPOS3DVPROC methodp_glWindowPos3dv{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3dv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3dv && args.Length() >= 1){
			obj->methodp_glWindowPos3dv(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);
	PFNGLWINDOWPOS3DVARBPROC methodp_glWindowPos3dvARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3dvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3dvARB && args.Length() >= 1){
			obj->methodp_glWindowPos3dvARB(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);
	PFNGLWINDOWPOS3DVMESAPROC methodp_glWindowPos3dvMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3dvMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3dvMESA && args.Length() >= 1){
			obj->methodp_glWindowPos3dvMESA(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
	PFNGLWINDOWPOS3FPROC methodp_glWindowPos3f{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3f(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3f && args.Length() >= 3){
			obj->methodp_glWindowPos3f(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
	PFNGLWINDOWPOS3FARBPROC methodp_glWindowPos3fARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3fARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3fARB && args.Length() >= 3){
			obj->methodp_glWindowPos3fARB(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
	PFNGLWINDOWPOS3FMESAPROC methodp_glWindowPos3fMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3fMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3fMESA && args.Length() >= 3){
			obj->methodp_glWindowPos3fMESA(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);
	PFNGLWINDOWPOS3FVPROC methodp_glWindowPos3fv{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3fv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3fv && args.Length() >= 1){
			obj->methodp_glWindowPos3fv(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
	PFNGLWINDOWPOS3FVARBPROC methodp_glWindowPos3fvARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3fvARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3fvARB && args.Length() >= 1){
			obj->methodp_glWindowPos3fvARB(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);
	PFNGLWINDOWPOS3FVMESAPROC methodp_glWindowPos3fvMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3fvMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3fvMESA && args.Length() >= 1){
			obj->methodp_glWindowPos3fvMESA(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
	PFNGLWINDOWPOS3IPROC methodp_glWindowPos3i{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3i(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3i && args.Length() >= 3){
			obj->methodp_glWindowPos3i(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
	PFNGLWINDOWPOS3IARBPROC methodp_glWindowPos3iARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3iARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3iARB && args.Length() >= 3){
			obj->methodp_glWindowPos3iARB(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
	PFNGLWINDOWPOS3IMESAPROC methodp_glWindowPos3iMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3iMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3iMESA && args.Length() >= 3){
			obj->methodp_glWindowPos3iMESA(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC) (const GLint *v);
	PFNGLWINDOWPOS3IVPROC methodp_glWindowPos3iv{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3iv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3iv && args.Length() >= 1){
			obj->methodp_glWindowPos3iv(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);
	PFNGLWINDOWPOS3IVARBPROC methodp_glWindowPos3ivARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3ivARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3ivARB && args.Length() >= 1){
			obj->methodp_glWindowPos3ivARB(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);
	PFNGLWINDOWPOS3IVMESAPROC methodp_glWindowPos3ivMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3ivMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3ivMESA && args.Length() >= 1){
			obj->methodp_glWindowPos3ivMESA(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
	PFNGLWINDOWPOS3SPROC methodp_glWindowPos3s{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3s(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3s && args.Length() >= 3){
			obj->methodp_glWindowPos3s(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
	PFNGLWINDOWPOS3SARBPROC methodp_glWindowPos3sARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3sARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3sARB && args.Length() >= 3){
			obj->methodp_glWindowPos3sARB(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
	PFNGLWINDOWPOS3SMESAPROC methodp_glWindowPos3sMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3sMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3sMESA && args.Length() >= 3){
			obj->methodp_glWindowPos3sMESA(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC) (const GLshort *v);
	PFNGLWINDOWPOS3SVPROC methodp_glWindowPos3sv{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3sv(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3sv && args.Length() >= 1){
			obj->methodp_glWindowPos3sv(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);
	PFNGLWINDOWPOS3SVARBPROC methodp_glWindowPos3svARB{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3svARB(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3svARB && args.Length() >= 1){
			obj->methodp_glWindowPos3svARB(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);
	PFNGLWINDOWPOS3SVMESAPROC methodp_glWindowPos3svMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos3svMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos3svMESA && args.Length() >= 1){
			obj->methodp_glWindowPos3svMESA(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	PFNGLWINDOWPOS4DMESAPROC methodp_glWindowPos4dMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos4dMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos4dMESA && args.Length() >= 4){
			obj->methodp_glWindowPos4dMESA(
				(GLdouble )(args[0]->NumberValue())/* GLdouble x */,
				(GLdouble )(args[1]->NumberValue())/* GLdouble y */,
				(GLdouble )(args[2]->NumberValue())/* GLdouble z */,
				(GLdouble )(args[3]->NumberValue())/* GLdouble w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);
	PFNGLWINDOWPOS4DVMESAPROC methodp_glWindowPos4dvMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos4dvMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos4dvMESA && args.Length() >= 1){
			obj->methodp_glWindowPos4dvMESA(
				(const GLdouble *)((int64_t)args[0]->NumberValue())/* const GLdouble *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	PFNGLWINDOWPOS4FMESAPROC methodp_glWindowPos4fMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos4fMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos4fMESA && args.Length() >= 4){
			obj->methodp_glWindowPos4fMESA(
				(GLfloat )(args[0]->NumberValue())/* GLfloat x */,
				(GLfloat )(args[1]->NumberValue())/* GLfloat y */,
				(GLfloat )(args[2]->NumberValue())/* GLfloat z */,
				(GLfloat )(args[3]->NumberValue())/* GLfloat w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);
	PFNGLWINDOWPOS4FVMESAPROC methodp_glWindowPos4fvMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos4fvMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos4fvMESA && args.Length() >= 1){
			obj->methodp_glWindowPos4fvMESA(
				(const GLfloat *)((int64_t)args[0]->NumberValue())/* const GLfloat *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
	PFNGLWINDOWPOS4IMESAPROC methodp_glWindowPos4iMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos4iMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos4iMESA && args.Length() >= 4){
			obj->methodp_glWindowPos4iMESA(
				(GLint )(args[0]->NumberValue())/* GLint x */,
				(GLint )(args[1]->NumberValue())/* GLint y */,
				(GLint )(args[2]->NumberValue())/* GLint z */,
				(GLint )(args[3]->NumberValue())/* GLint w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);
	PFNGLWINDOWPOS4IVMESAPROC methodp_glWindowPos4ivMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos4ivMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos4ivMESA && args.Length() >= 1){
			obj->methodp_glWindowPos4ivMESA(
				(const GLint *)((int64_t)args[0]->NumberValue())/* const GLint *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
	PFNGLWINDOWPOS4SMESAPROC methodp_glWindowPos4sMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos4sMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos4sMESA && args.Length() >= 4){
			obj->methodp_glWindowPos4sMESA(
				(GLshort )(args[0]->NumberValue())/* GLshort x */,
				(GLshort )(args[1]->NumberValue())/* GLshort y */,
				(GLshort )(args[2]->NumberValue())/* GLshort z */,
				(GLshort )(args[3]->NumberValue())/* GLshort w */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);
	PFNGLWINDOWPOS4SVMESAPROC methodp_glWindowPos4svMESA{nullptr};
	static v8::Handle<v8::Value> method_glWindowPos4svMESA(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWindowPos4svMESA && args.Length() >= 1){
			obj->methodp_glWindowPos4svMESA(
				(const GLshort *)((int64_t)args[0]->NumberValue())/* const GLshort *v */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}

	typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
	PFNGLWRITEMASKEXTPROC methodp_glWriteMaskEXT{nullptr};
	static v8::Handle<v8::Value> method_glWriteMaskEXT(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = class_OpenGL::Unwrap<class_OpenGL>(args.This());
		if(obj && obj->methodp_glWriteMaskEXT && args.Length() >= 6){
			obj->methodp_glWriteMaskEXT(
				(GLuint )(args[0]->NumberValue())/* GLuint res */,
				(GLuint )(args[1]->NumberValue())/* GLuint in */,
				(GLenum )(args[2]->NumberValue())/* GLenum outX */,
				(GLenum )(args[3]->NumberValue())/* GLenum outY */,
				(GLenum )(args[4]->NumberValue())/* GLenum outZ */,
				(GLenum )(args[5]->NumberValue())/* GLenum outW */);
		} else {DebugBreak(); }
		return v8::Undefined();
	}


	static void Init(v8::Handle<v8::Object> target) {
		v8::HandleScope scope;

		// Prepare constructor template
		v8::Local<v8::FunctionTemplate> tpl = v8::FunctionTemplate::New(New);
		tpl->SetClassName(v8::String::NewSymbol("OpenGL"));
		tpl->InstanceTemplate()->SetInternalFieldCount(1);
		setPrototypeMethod(glAccum)
		setPrototypeMethod(glAccumxOES)
		setPrototypeMethod(glActiveProgramEXT)
		setPrototypeMethod(glActiveShaderProgram)
		setPrototypeMethod(glActiveShaderProgramEXT)
		setPrototypeMethod(glActiveStencilFaceEXT)
		setPrototypeMethod(glActiveTexture)
		setPrototypeMethod(glActiveTextureARB)
		setPrototypeMethod(glActiveVaryingNV)
		setPrototypeMethod(glAlphaFragmentOp1ATI)
		setPrototypeMethod(glAlphaFragmentOp2ATI)
		setPrototypeMethod(glAlphaFragmentOp3ATI)
		setPrototypeMethod(glAlphaFunc)
		setPrototypeMethod(glAlphaFuncQCOM)
		setPrototypeMethod(glAlphaFuncx)
		setPrototypeMethod(glAlphaFuncxOES)
		setPrototypeMethod(glApplyTextureEXT)
		setPrototypeMethod(glAreProgramsResidentNV)
		setPrototypeMethod(glAreTexturesResident)
		setPrototypeMethod(glAreTexturesResidentEXT)
		setPrototypeMethod(glArrayElement)
		setPrototypeMethod(glArrayElementEXT)
		setPrototypeMethod(glArrayObjectATI)
		setPrototypeMethod(glAsyncMarkerSGIX)
		setPrototypeMethod(glAttachObjectARB)
		setPrototypeMethod(glAttachShader)
		setPrototypeMethod(glBegin)
		setPrototypeMethod(glBeginConditionalRender)
		setPrototypeMethod(glBeginConditionalRenderNV)
		setPrototypeMethod(glBeginConditionalRenderNVX)
		setPrototypeMethod(glBeginFragmentShaderATI)
		setPrototypeMethod(glBeginOcclusionQueryNV)
		setPrototypeMethod(glBeginPerfMonitorAMD)
		setPrototypeMethod(glBeginPerfQueryINTEL)
		setPrototypeMethod(glBeginQuery)
		setPrototypeMethod(glBeginQueryARB)
		setPrototypeMethod(glBeginQueryEXT)
		setPrototypeMethod(glBeginQueryIndexed)
		setPrototypeMethod(glBeginTransformFeedback)
		setPrototypeMethod(glBeginTransformFeedbackEXT)
		setPrototypeMethod(glBeginTransformFeedbackNV)
		setPrototypeMethod(glBeginVertexShaderEXT)
		setPrototypeMethod(glBeginVideoCaptureNV)
		setPrototypeMethod(glBindAttribLocation)
		setPrototypeMethod(glBindAttribLocationARB)
		setPrototypeMethod(glBindBuffer)
		setPrototypeMethod(glBindBufferARB)
		setPrototypeMethod(glBindBufferBase)
		setPrototypeMethod(glBindBufferBaseEXT)
		setPrototypeMethod(glBindBufferBaseNV)
		setPrototypeMethod(glBindBufferOffsetEXT)
		setPrototypeMethod(glBindBufferOffsetNV)
		setPrototypeMethod(glBindBufferRange)
		setPrototypeMethod(glBindBufferRangeEXT)
		setPrototypeMethod(glBindBufferRangeNV)
		setPrototypeMethod(glBindBuffersBase)
		setPrototypeMethod(glBindBuffersRange)
		setPrototypeMethod(glBindFragDataLocation)
		setPrototypeMethod(glBindFragDataLocationEXT)
		setPrototypeMethod(glBindFragDataLocationIndexed)
		setPrototypeMethod(glBindFragmentShaderATI)
		setPrototypeMethod(glBindFramebuffer)
		setPrototypeMethod(glBindFramebufferEXT)
		setPrototypeMethod(glBindFramebufferOES)
		setPrototypeMethod(glBindImageTexture)
		setPrototypeMethod(glBindImageTextureEXT)
		setPrototypeMethod(glBindImageTextures)
		setPrototypeMethod(glBindLightParameterEXT)
		setPrototypeMethod(glBindMaterialParameterEXT)
		setPrototypeMethod(glBindMultiTextureEXT)
		setPrototypeMethod(glBindParameterEXT)
		setPrototypeMethod(glBindProgramARB)
		setPrototypeMethod(glBindProgramNV)
		setPrototypeMethod(glBindProgramPipeline)
		setPrototypeMethod(glBindProgramPipelineEXT)
		setPrototypeMethod(glBindRenderbuffer)
		setPrototypeMethod(glBindRenderbufferEXT)
		setPrototypeMethod(glBindRenderbufferOES)
		setPrototypeMethod(glBindSampler)
		setPrototypeMethod(glBindSamplers)
		setPrototypeMethod(glBindTexGenParameterEXT)
		setPrototypeMethod(glBindTexture)
		setPrototypeMethod(glBindTextureEXT)
		setPrototypeMethod(glBindTextureUnitParameterEXT)
		setPrototypeMethod(glBindTextures)
		setPrototypeMethod(glBindTransformFeedback)
		setPrototypeMethod(glBindTransformFeedbackNV)
		setPrototypeMethod(glBindVertexArray)
		setPrototypeMethod(glBindVertexArrayAPPLE)
		setPrototypeMethod(glBindVertexArrayOES)
		setPrototypeMethod(glBindVertexBuffer)
		setPrototypeMethod(glBindVertexBuffers)
		setPrototypeMethod(glBindVertexShaderEXT)
		setPrototypeMethod(glBindVideoCaptureStreamBufferNV)
		setPrototypeMethod(glBindVideoCaptureStreamTextureNV)
		setPrototypeMethod(glBinormal3bEXT)
		setPrototypeMethod(glBinormal3bvEXT)
		setPrototypeMethod(glBinormal3dEXT)
		setPrototypeMethod(glBinormal3dvEXT)
		setPrototypeMethod(glBinormal3fEXT)
		setPrototypeMethod(glBinormal3fvEXT)
		setPrototypeMethod(glBinormal3iEXT)
		setPrototypeMethod(glBinormal3ivEXT)
		setPrototypeMethod(glBinormal3sEXT)
		setPrototypeMethod(glBinormal3svEXT)
		setPrototypeMethod(glBinormalPointerEXT)
		setPrototypeMethod(glBitmap)
		setPrototypeMethod(glBitmapxOES)
		setPrototypeMethod(glBlendBarrierNV)
		setPrototypeMethod(glBlendBarrierKHR)
		setPrototypeMethod(glBlendColor)
		setPrototypeMethod(glBlendColorEXT)
		setPrototypeMethod(glBlendColorxOES)
		setPrototypeMethod(glBlendEquation)
		setPrototypeMethod(glBlendEquationEXT)
		setPrototypeMethod(glBlendEquationIndexedAMD)
		setPrototypeMethod(glBlendEquationOES)
		setPrototypeMethod(glBlendEquationSeparate)
		setPrototypeMethod(glBlendEquationSeparateEXT)
		setPrototypeMethod(glBlendEquationSeparateIndexedAMD)
		setPrototypeMethod(glBlendEquationSeparateOES)
		setPrototypeMethod(glBlendEquationSeparatei)
		setPrototypeMethod(glBlendEquationSeparateiARB)
		setPrototypeMethod(glBlendEquationSeparateiEXT)
		setPrototypeMethod(glBlendEquationi)
		setPrototypeMethod(glBlendEquationiEXT)
		setPrototypeMethod(glBlendEquationiARB)
		setPrototypeMethod(glBlendFunc)
		setPrototypeMethod(glBlendFuncIndexedAMD)
		setPrototypeMethod(glBlendFuncSeparate)
		setPrototypeMethod(glBlendFuncSeparateEXT)
		setPrototypeMethod(glBlendFuncSeparateINGR)
		setPrototypeMethod(glBlendFuncSeparateIndexedAMD)
		setPrototypeMethod(glBlendFuncSeparateOES)
		setPrototypeMethod(glBlendFuncSeparatei)
		setPrototypeMethod(glBlendFuncSeparateiARB)
		setPrototypeMethod(glBlendFuncSeparateiEXT)
		setPrototypeMethod(glBlendFunci)
		setPrototypeMethod(glBlendFunciARB)
		setPrototypeMethod(glBlendFunciEXT)
		setPrototypeMethod(glBlendParameteriNV)
		setPrototypeMethod(glBlitFramebuffer)
		setPrototypeMethod(glBlitFramebufferANGLE)
		setPrototypeMethod(glBlitFramebufferEXT)
		setPrototypeMethod(glBlitFramebufferNV)
		setPrototypeMethod(glBufferAddressRangeNV)
		setPrototypeMethod(glBufferData)
		setPrototypeMethod(glBufferDataARB)
		setPrototypeMethod(glBufferParameteriAPPLE)
		setPrototypeMethod(glBufferStorage)
		setPrototypeMethod(glBufferSubData)
		setPrototypeMethod(glBufferSubDataARB)
		setPrototypeMethod(glCallList)
		setPrototypeMethod(glCallLists)
		setPrototypeMethod(glCheckFramebufferStatus)
		setPrototypeMethod(glCheckFramebufferStatusEXT)
		setPrototypeMethod(glCheckFramebufferStatusOES)
		setPrototypeMethod(glCheckNamedFramebufferStatusEXT)
		setPrototypeMethod(glClampColor)
		setPrototypeMethod(glClampColorARB)
		setPrototypeMethod(glClear)
		setPrototypeMethod(glClearAccum)
		setPrototypeMethod(glClearAccumxOES)
		setPrototypeMethod(glClearBufferData)
		setPrototypeMethod(glClearBufferSubData)
		setPrototypeMethod(glClearBufferfi)
		setPrototypeMethod(glClearBufferfv)
		setPrototypeMethod(glClearBufferiv)
		setPrototypeMethod(glClearBufferuiv)
		setPrototypeMethod(glClearColor)
		setPrototypeMethod(glClearColorIiEXT)
		setPrototypeMethod(glClearColorIuiEXT)
		setPrototypeMethod(glClearColorx)
		setPrototypeMethod(glClearColorxOES)
		setPrototypeMethod(glClearDepth)
		setPrototypeMethod(glClearDepthdNV)
		setPrototypeMethod(glClearDepthf)
		setPrototypeMethod(glClearDepthfOES)
		setPrototypeMethod(glClearDepthx)
		setPrototypeMethod(glClearDepthxOES)
		setPrototypeMethod(glClearIndex)
		setPrototypeMethod(glClearNamedBufferDataEXT)
		setPrototypeMethod(glClearNamedBufferSubDataEXT)
		setPrototypeMethod(glClearStencil)
		setPrototypeMethod(glClearTexImage)
		setPrototypeMethod(glClearTexSubImage)
		setPrototypeMethod(glClientActiveTexture)
		setPrototypeMethod(glClientActiveTextureARB)
		setPrototypeMethod(glClientActiveVertexStreamATI)
		setPrototypeMethod(glClientAttribDefaultEXT)
		setPrototypeMethod(glClientWaitSync)
		setPrototypeMethod(glClientWaitSyncAPPLE)
		setPrototypeMethod(glClipPlane)
		setPrototypeMethod(glClipPlanef)
		setPrototypeMethod(glClipPlanefIMG)
		setPrototypeMethod(glClipPlanefOES)
		setPrototypeMethod(glClipPlanex)
		setPrototypeMethod(glClipPlanexIMG)
		setPrototypeMethod(glClipPlanexOES)
		setPrototypeMethod(glColor3b)
		setPrototypeMethod(glColor3bv)
		setPrototypeMethod(glColor3d)
		setPrototypeMethod(glColor3dv)
		setPrototypeMethod(glColor3f)
		setPrototypeMethod(glColor3fVertex3fSUN)
		setPrototypeMethod(glColor3fVertex3fvSUN)
		setPrototypeMethod(glColor3fv)
		setPrototypeMethod(glColor3hNV)
		setPrototypeMethod(glColor3hvNV)
		setPrototypeMethod(glColor3i)
		setPrototypeMethod(glColor3iv)
		setPrototypeMethod(glColor3s)
		setPrototypeMethod(glColor3sv)
		setPrototypeMethod(glColor3ub)
		setPrototypeMethod(glColor3ubv)
		setPrototypeMethod(glColor3ui)
		setPrototypeMethod(glColor3uiv)
		setPrototypeMethod(glColor3us)
		setPrototypeMethod(glColor3usv)
		setPrototypeMethod(glColor3xOES)
		setPrototypeMethod(glColor3xvOES)
		setPrototypeMethod(glColor4b)
		setPrototypeMethod(glColor4bv)
		setPrototypeMethod(glColor4d)
		setPrototypeMethod(glColor4dv)
		setPrototypeMethod(glColor4f)
		setPrototypeMethod(glColor4fNormal3fVertex3fSUN)
		setPrototypeMethod(glColor4fNormal3fVertex3fvSUN)
		setPrototypeMethod(glColor4fv)
		setPrototypeMethod(glColor4hNV)
		setPrototypeMethod(glColor4hvNV)
		setPrototypeMethod(glColor4i)
		setPrototypeMethod(glColor4iv)
		setPrototypeMethod(glColor4s)
		setPrototypeMethod(glColor4sv)
		setPrototypeMethod(glColor4ub)
		setPrototypeMethod(glColor4ubVertex2fSUN)
		setPrototypeMethod(glColor4ubVertex2fvSUN)
		setPrototypeMethod(glColor4ubVertex3fSUN)
		setPrototypeMethod(glColor4ubVertex3fvSUN)
		setPrototypeMethod(glColor4ubv)
		setPrototypeMethod(glColor4ui)
		setPrototypeMethod(glColor4uiv)
		setPrototypeMethod(glColor4us)
		setPrototypeMethod(glColor4usv)
		setPrototypeMethod(glColor4x)
		setPrototypeMethod(glColor4xOES)
		setPrototypeMethod(glColor4xvOES)
		setPrototypeMethod(glColorFormatNV)
		setPrototypeMethod(glColorFragmentOp1ATI)
		setPrototypeMethod(glColorFragmentOp2ATI)
		setPrototypeMethod(glColorFragmentOp3ATI)
		setPrototypeMethod(glColorMask)
		setPrototypeMethod(glColorMaskIndexedEXT)
		setPrototypeMethod(glColorMaski)
		setPrototypeMethod(glColorMaskiEXT)
		setPrototypeMethod(glColorMaterial)
		setPrototypeMethod(glColorP3ui)
		setPrototypeMethod(glColorP3uiv)
		setPrototypeMethod(glColorP4ui)
		setPrototypeMethod(glColorP4uiv)
		setPrototypeMethod(glColorPointer)
		setPrototypeMethod(glColorPointerEXT)
		setPrototypeMethod(glColorPointerListIBM)
		setPrototypeMethod(glColorPointervINTEL)
		setPrototypeMethod(glColorSubTable)
		setPrototypeMethod(glColorSubTableEXT)
		setPrototypeMethod(glColorTable)
		setPrototypeMethod(glColorTableEXT)
		setPrototypeMethod(glColorTableParameterfv)
		setPrototypeMethod(glColorTableParameterfvSGI)
		setPrototypeMethod(glColorTableParameteriv)
		setPrototypeMethod(glColorTableParameterivSGI)
		setPrototypeMethod(glColorTableSGI)
		setPrototypeMethod(glCombinerInputNV)
		setPrototypeMethod(glCombinerOutputNV)
		setPrototypeMethod(glCombinerParameterfNV)
		setPrototypeMethod(glCombinerParameterfvNV)
		setPrototypeMethod(glCombinerParameteriNV)
		setPrototypeMethod(glCombinerParameterivNV)
		setPrototypeMethod(glCombinerStageParameterfvNV)
		setPrototypeMethod(glCompileShader)
		setPrototypeMethod(glCompileShaderARB)
		setPrototypeMethod(glCompileShaderIncludeARB)
		setPrototypeMethod(glCompressedMultiTexImage1DEXT)
		setPrototypeMethod(glCompressedMultiTexImage2DEXT)
		setPrototypeMethod(glCompressedMultiTexImage3DEXT)
		setPrototypeMethod(glCompressedMultiTexSubImage1DEXT)
		setPrototypeMethod(glCompressedMultiTexSubImage2DEXT)
		setPrototypeMethod(glCompressedMultiTexSubImage3DEXT)
		setPrototypeMethod(glCompressedTexImage1D)
		setPrototypeMethod(glCompressedTexImage1DARB)
		setPrototypeMethod(glCompressedTexImage2D)
		setPrototypeMethod(glCompressedTexImage2DARB)
		setPrototypeMethod(glCompressedTexImage3D)
		setPrototypeMethod(glCompressedTexImage3DARB)
		setPrototypeMethod(glCompressedTexImage3DOES)
		setPrototypeMethod(glCompressedTexSubImage1D)
		setPrototypeMethod(glCompressedTexSubImage1DARB)
		setPrototypeMethod(glCompressedTexSubImage2D)
		setPrototypeMethod(glCompressedTexSubImage2DARB)
		setPrototypeMethod(glCompressedTexSubImage3D)
		setPrototypeMethod(glCompressedTexSubImage3DARB)
		setPrototypeMethod(glCompressedTexSubImage3DOES)
		setPrototypeMethod(glCompressedTextureImage1DEXT)
		setPrototypeMethod(glCompressedTextureImage2DEXT)
		setPrototypeMethod(glCompressedTextureImage3DEXT)
		setPrototypeMethod(glCompressedTextureSubImage1DEXT)
		setPrototypeMethod(glCompressedTextureSubImage2DEXT)
		setPrototypeMethod(glCompressedTextureSubImage3DEXT)
		setPrototypeMethod(glConvolutionFilter1D)
		setPrototypeMethod(glConvolutionFilter1DEXT)
		setPrototypeMethod(glConvolutionFilter2D)
		setPrototypeMethod(glConvolutionFilter2DEXT)
		setPrototypeMethod(glConvolutionParameterf)
		setPrototypeMethod(glConvolutionParameterfEXT)
		setPrototypeMethod(glConvolutionParameterfv)
		setPrototypeMethod(glConvolutionParameterfvEXT)
		setPrototypeMethod(glConvolutionParameteri)
		setPrototypeMethod(glConvolutionParameteriEXT)
		setPrototypeMethod(glConvolutionParameteriv)
		setPrototypeMethod(glConvolutionParameterivEXT)
		setPrototypeMethod(glConvolutionParameterxOES)
		setPrototypeMethod(glConvolutionParameterxvOES)
		setPrototypeMethod(glCopyBufferSubData)
		setPrototypeMethod(glCopyBufferSubDataNV)
		setPrototypeMethod(glCopyColorSubTable)
		setPrototypeMethod(glCopyColorSubTableEXT)
		setPrototypeMethod(glCopyColorTable)
		setPrototypeMethod(glCopyColorTableSGI)
		setPrototypeMethod(glCopyConvolutionFilter1D)
		setPrototypeMethod(glCopyConvolutionFilter1DEXT)
		setPrototypeMethod(glCopyConvolutionFilter2D)
		setPrototypeMethod(glCopyConvolutionFilter2DEXT)
		setPrototypeMethod(glCopyImageSubData)
		setPrototypeMethod(glCopyImageSubDataEXT)
		setPrototypeMethod(glCopyImageSubDataNV)
		setPrototypeMethod(glCopyMultiTexImage1DEXT)
		setPrototypeMethod(glCopyMultiTexImage2DEXT)
		setPrototypeMethod(glCopyMultiTexSubImage1DEXT)
		setPrototypeMethod(glCopyMultiTexSubImage2DEXT)
		setPrototypeMethod(glCopyMultiTexSubImage3DEXT)
		setPrototypeMethod(glCopyPathNV)
		setPrototypeMethod(glCopyPixels)
		setPrototypeMethod(glCopyTexImage1D)
		setPrototypeMethod(glCopyTexImage1DEXT)
		setPrototypeMethod(glCopyTexImage2D)
		setPrototypeMethod(glCopyTexImage2DEXT)
		setPrototypeMethod(glCopyTexSubImage1D)
		setPrototypeMethod(glCopyTexSubImage1DEXT)
		setPrototypeMethod(glCopyTexSubImage2D)
		setPrototypeMethod(glCopyTexSubImage2DEXT)
		setPrototypeMethod(glCopyTexSubImage3D)
		setPrototypeMethod(glCopyTexSubImage3DEXT)
		setPrototypeMethod(glCopyTexSubImage3DOES)
		setPrototypeMethod(glCopyTextureImage1DEXT)
		setPrototypeMethod(glCopyTextureImage2DEXT)
		setPrototypeMethod(glCopyTextureLevelsAPPLE)
		setPrototypeMethod(glCopyTextureSubImage1DEXT)
		setPrototypeMethod(glCopyTextureSubImage2DEXT)
		setPrototypeMethod(glCopyTextureSubImage3DEXT)
		setPrototypeMethod(glCoverFillPathInstancedNV)
		setPrototypeMethod(glCoverFillPathNV)
		setPrototypeMethod(glCoverStrokePathInstancedNV)
		setPrototypeMethod(glCoverStrokePathNV)
		setPrototypeMethod(glCoverageMaskNV)
		setPrototypeMethod(glCoverageOperationNV)
		setPrototypeMethod(glCreatePerfQueryINTEL)
		setPrototypeMethod(glCreateProgram)
		setPrototypeMethod(glCreateProgramObjectARB)
		setPrototypeMethod(glCreateShader)
		setPrototypeMethod(glCreateShaderObjectARB)
		setPrototypeMethod(glCreateShaderProgramEXT)
		setPrototypeMethod(glCreateShaderProgramv)
		setPrototypeMethod(glCreateShaderProgramvEXT)
		setPrototypeMethod(glCreateSyncFromCLeventARB)
		setPrototypeMethod(glCullFace)
		setPrototypeMethod(glCullParameterdvEXT)
		setPrototypeMethod(glCullParameterfvEXT)
		setPrototypeMethod(glCurrentPaletteMatrixARB)
		setPrototypeMethod(glCurrentPaletteMatrixOES)
		setPrototypeMethod(glDebugMessageCallback)
		setPrototypeMethod(glDebugMessageCallbackAMD)
		setPrototypeMethod(glDebugMessageCallbackARB)
		setPrototypeMethod(glDebugMessageCallbackKHR)
		setPrototypeMethod(glDebugMessageControl)
		setPrototypeMethod(glDebugMessageControlARB)
		setPrototypeMethod(glDebugMessageControlKHR)
		setPrototypeMethod(glDebugMessageEnableAMD)
		setPrototypeMethod(glDebugMessageInsert)
		setPrototypeMethod(glDebugMessageInsertAMD)
		setPrototypeMethod(glDebugMessageInsertARB)
		setPrototypeMethod(glDebugMessageInsertKHR)
		setPrototypeMethod(glDeformSGIX)
		setPrototypeMethod(glDeformationMap3dSGIX)
		setPrototypeMethod(glDeformationMap3fSGIX)
		setPrototypeMethod(glDeleteAsyncMarkersSGIX)
		setPrototypeMethod(glDeleteBuffers)
		setPrototypeMethod(glDeleteBuffersARB)
		setPrototypeMethod(glDeleteFencesAPPLE)
		setPrototypeMethod(glDeleteFencesNV)
		setPrototypeMethod(glDeleteFragmentShaderATI)
		setPrototypeMethod(glDeleteFramebuffers)
		setPrototypeMethod(glDeleteFramebuffersEXT)
		setPrototypeMethod(glDeleteFramebuffersOES)
		setPrototypeMethod(glDeleteLists)
		setPrototypeMethod(glDeleteNamedStringARB)
		setPrototypeMethod(glDeleteNamesAMD)
		setPrototypeMethod(glDeleteObjectARB)
		setPrototypeMethod(glDeleteOcclusionQueriesNV)
		setPrototypeMethod(glDeletePathsNV)
		setPrototypeMethod(glDeletePerfMonitorsAMD)
		setPrototypeMethod(glDeletePerfQueryINTEL)
		setPrototypeMethod(glDeleteProgram)
		setPrototypeMethod(glDeleteProgramPipelines)
		setPrototypeMethod(glDeleteProgramPipelinesEXT)
		setPrototypeMethod(glDeleteProgramsARB)
		setPrototypeMethod(glDeleteProgramsNV)
		setPrototypeMethod(glDeleteQueries)
		setPrototypeMethod(glDeleteQueriesARB)
		setPrototypeMethod(glDeleteQueriesEXT)
		setPrototypeMethod(glDeleteRenderbuffers)
		setPrototypeMethod(glDeleteRenderbuffersEXT)
		setPrototypeMethod(glDeleteRenderbuffersOES)
		setPrototypeMethod(glDeleteSamplers)
		setPrototypeMethod(glDeleteShader)
		setPrototypeMethod(glDeleteSync)
		setPrototypeMethod(glDeleteSyncAPPLE)
		setPrototypeMethod(glDeleteTextures)
		setPrototypeMethod(glDeleteTexturesEXT)
		setPrototypeMethod(glDeleteTransformFeedbacks)
		setPrototypeMethod(glDeleteTransformFeedbacksNV)
		setPrototypeMethod(glDeleteVertexArrays)
		setPrototypeMethod(glDeleteVertexArraysAPPLE)
		setPrototypeMethod(glDeleteVertexArraysOES)
		setPrototypeMethod(glDeleteVertexShaderEXT)
		setPrototypeMethod(glDepthBoundsEXT)
		setPrototypeMethod(glDepthBoundsdNV)
		setPrototypeMethod(glDepthFunc)
		setPrototypeMethod(glDepthMask)
		setPrototypeMethod(glDepthRange)
		setPrototypeMethod(glDepthRangeArrayv)
		setPrototypeMethod(glDepthRangeIndexed)
		setPrototypeMethod(glDepthRangedNV)
		setPrototypeMethod(glDepthRangef)
		setPrototypeMethod(glDepthRangefOES)
		setPrototypeMethod(glDepthRangex)
		setPrototypeMethod(glDepthRangexOES)
		setPrototypeMethod(glDetachObjectARB)
		setPrototypeMethod(glDetachShader)
		setPrototypeMethod(glDetailTexFuncSGIS)
		setPrototypeMethod(glDisable)
		setPrototypeMethod(glDisableClientState)
		setPrototypeMethod(glDisableClientStateIndexedEXT)
		setPrototypeMethod(glDisableClientStateiEXT)
		setPrototypeMethod(glDisableDriverControlQCOM)
		setPrototypeMethod(glDisableIndexedEXT)
		setPrototypeMethod(glDisableVariantClientStateEXT)
		setPrototypeMethod(glDisableVertexArrayAttribEXT)
		setPrototypeMethod(glDisableVertexArrayEXT)
		setPrototypeMethod(glDisableVertexAttribAPPLE)
		setPrototypeMethod(glDisableVertexAttribArray)
		setPrototypeMethod(glDisableVertexAttribArrayARB)
		setPrototypeMethod(glDisablei)
		setPrototypeMethod(glDisableiEXT)
		setPrototypeMethod(glDiscardFramebufferEXT)
		setPrototypeMethod(glDispatchCompute)
		setPrototypeMethod(glDispatchComputeGroupSizeARB)
		setPrototypeMethod(glDispatchComputeIndirect)
		setPrototypeMethod(glDrawArrays)
		setPrototypeMethod(glDrawArraysEXT)
		setPrototypeMethod(glDrawArraysIndirect)
		setPrototypeMethod(glDrawArraysInstanced)
		setPrototypeMethod(glDrawArraysInstancedANGLE)
		setPrototypeMethod(glDrawArraysInstancedARB)
		setPrototypeMethod(glDrawArraysInstancedBaseInstance)
		setPrototypeMethod(glDrawArraysInstancedEXT)
		setPrototypeMethod(glDrawArraysInstancedNV)
		setPrototypeMethod(glDrawBuffer)
		setPrototypeMethod(glDrawBuffers)
		setPrototypeMethod(glDrawBuffersARB)
		setPrototypeMethod(glDrawBuffersATI)
		setPrototypeMethod(glDrawBuffersEXT)
		setPrototypeMethod(glDrawBuffersIndexedEXT)
		setPrototypeMethod(glDrawBuffersNV)
		setPrototypeMethod(glDrawElementArrayAPPLE)
		setPrototypeMethod(glDrawElementArrayATI)
		setPrototypeMethod(glDrawElements)
		setPrototypeMethod(glDrawElementsBaseVertex)
		setPrototypeMethod(glDrawElementsIndirect)
		setPrototypeMethod(glDrawElementsInstanced)
		setPrototypeMethod(glDrawElementsInstancedANGLE)
		setPrototypeMethod(glDrawElementsInstancedARB)
		setPrototypeMethod(glDrawElementsInstancedBaseInstance)
		setPrototypeMethod(glDrawElementsInstancedBaseVertex)
		setPrototypeMethod(glDrawElementsInstancedBaseVertexBaseInstance)
		setPrototypeMethod(glDrawElementsInstancedEXT)
		setPrototypeMethod(glDrawElementsInstancedNV)
		setPrototypeMethod(glDrawMeshArraysSUN)
		setPrototypeMethod(glDrawPixels)
		setPrototypeMethod(glDrawRangeElementArrayAPPLE)
		setPrototypeMethod(glDrawRangeElementArrayATI)
		setPrototypeMethod(glDrawRangeElements)
		setPrototypeMethod(glDrawRangeElementsBaseVertex)
		setPrototypeMethod(glDrawRangeElementsEXT)
		setPrototypeMethod(glDrawTexfOES)
		setPrototypeMethod(glDrawTexfvOES)
		setPrototypeMethod(glDrawTexiOES)
		setPrototypeMethod(glDrawTexivOES)
		setPrototypeMethod(glDrawTexsOES)
		setPrototypeMethod(glDrawTexsvOES)
		setPrototypeMethod(glDrawTextureNV)
		setPrototypeMethod(glDrawTexxOES)
		setPrototypeMethod(glDrawTexxvOES)
		setPrototypeMethod(glDrawTransformFeedback)
		setPrototypeMethod(glDrawTransformFeedbackInstanced)
		setPrototypeMethod(glDrawTransformFeedbackNV)
		setPrototypeMethod(glDrawTransformFeedbackStream)
		setPrototypeMethod(glDrawTransformFeedbackStreamInstanced)
		setPrototypeMethod(glEGLImageTargetRenderbufferStorageOES)
		setPrototypeMethod(glEGLImageTargetTexture2DOES)
		setPrototypeMethod(glEdgeFlag)
		setPrototypeMethod(glEdgeFlagFormatNV)
		setPrototypeMethod(glEdgeFlagPointer)
		setPrototypeMethod(glEdgeFlagPointerEXT)
		setPrototypeMethod(glEdgeFlagPointerListIBM)
		setPrototypeMethod(glEdgeFlagv)
		setPrototypeMethod(glElementPointerAPPLE)
		setPrototypeMethod(glElementPointerATI)
		setPrototypeMethod(glEnable)
		setPrototypeMethod(glEnableClientState)
		setPrototypeMethod(glEnableClientStateIndexedEXT)
		setPrototypeMethod(glEnableClientStateiEXT)
		setPrototypeMethod(glEnableDriverControlQCOM)
		setPrototypeMethod(glEnableIndexedEXT)
		setPrototypeMethod(glEnableVariantClientStateEXT)
		setPrototypeMethod(glEnableVertexArrayAttribEXT)
		setPrototypeMethod(glEnableVertexArrayEXT)
		setPrototypeMethod(glEnableVertexAttribAPPLE)
		setPrototypeMethod(glEnableVertexAttribArray)
		setPrototypeMethod(glEnableVertexAttribArrayARB)
		setPrototypeMethod(glEnablei)
		setPrototypeMethod(glEnableiEXT)
		setPrototypeMethod(glEnd)
		setPrototypeMethod(glEndConditionalRender)
		setPrototypeMethod(glEndConditionalRenderNV)
		setPrototypeMethod(glEndConditionalRenderNVX)
		setPrototypeMethod(glEndFragmentShaderATI)
		setPrototypeMethod(glEndList)
		setPrototypeMethod(glEndOcclusionQueryNV)
		setPrototypeMethod(glEndPerfMonitorAMD)
		setPrototypeMethod(glEndPerfQueryINTEL)
		setPrototypeMethod(glEndQuery)
		setPrototypeMethod(glEndQueryARB)
		setPrototypeMethod(glEndQueryEXT)
		setPrototypeMethod(glEndQueryIndexed)
		setPrototypeMethod(glEndTilingQCOM)
		setPrototypeMethod(glEndTransformFeedback)
		setPrototypeMethod(glEndTransformFeedbackEXT)
		setPrototypeMethod(glEndTransformFeedbackNV)
		setPrototypeMethod(glEndVertexShaderEXT)
		setPrototypeMethod(glEndVideoCaptureNV)
		setPrototypeMethod(glEvalCoord1d)
		setPrototypeMethod(glEvalCoord1dv)
		setPrototypeMethod(glEvalCoord1f)
		setPrototypeMethod(glEvalCoord1fv)
		setPrototypeMethod(glEvalCoord1xOES)
		setPrototypeMethod(glEvalCoord1xvOES)
		setPrototypeMethod(glEvalCoord2d)
		setPrototypeMethod(glEvalCoord2dv)
		setPrototypeMethod(glEvalCoord2f)
		setPrototypeMethod(glEvalCoord2fv)
		setPrototypeMethod(glEvalCoord2xOES)
		setPrototypeMethod(glEvalCoord2xvOES)
		setPrototypeMethod(glEvalMapsNV)
		setPrototypeMethod(glEvalMesh1)
		setPrototypeMethod(glEvalMesh2)
		setPrototypeMethod(glEvalPoint1)
		setPrototypeMethod(glEvalPoint2)
		setPrototypeMethod(glExecuteProgramNV)
		setPrototypeMethod(glExtGetBufferPointervQCOM)
		setPrototypeMethod(glExtGetBuffersQCOM)
		setPrototypeMethod(glExtGetFramebuffersQCOM)
		setPrototypeMethod(glExtGetProgramBinarySourceQCOM)
		setPrototypeMethod(glExtGetProgramsQCOM)
		setPrototypeMethod(glExtGetRenderbuffersQCOM)
		setPrototypeMethod(glExtGetShadersQCOM)
		setPrototypeMethod(glExtGetTexLevelParameterivQCOM)
		setPrototypeMethod(glExtGetTexSubImageQCOM)
		setPrototypeMethod(glExtGetTexturesQCOM)
		setPrototypeMethod(glExtIsProgramBinaryQCOM)
		setPrototypeMethod(glExtTexObjectStateOverrideiQCOM)
		setPrototypeMethod(glExtractComponentEXT)
		setPrototypeMethod(glFeedbackBuffer)
		setPrototypeMethod(glFeedbackBufferxOES)
		setPrototypeMethod(glFenceSync)
		setPrototypeMethod(glFenceSyncAPPLE)
		setPrototypeMethod(glFinalCombinerInputNV)
		setPrototypeMethod(glFinish)
		setPrototypeMethod(glFinishAsyncSGIX)
		setPrototypeMethod(glFinishFenceAPPLE)
		setPrototypeMethod(glFinishFenceNV)
		setPrototypeMethod(glFinishObjectAPPLE)
		setPrototypeMethod(glFinishTextureSUNX)
		setPrototypeMethod(glFlush)
		setPrototypeMethod(glFlushMappedBufferRange)
		setPrototypeMethod(glFlushMappedBufferRangeAPPLE)
		setPrototypeMethod(glFlushMappedBufferRangeEXT)
		setPrototypeMethod(glFlushMappedNamedBufferRangeEXT)
		setPrototypeMethod(glFlushPixelDataRangeNV)
		setPrototypeMethod(glFlushRasterSGIX)
		setPrototypeMethod(glFlushStaticDataIBM)
		setPrototypeMethod(glFlushVertexArrayRangeAPPLE)
		setPrototypeMethod(glFlushVertexArrayRangeNV)
		setPrototypeMethod(glFogCoordFormatNV)
		setPrototypeMethod(glFogCoordPointer)
		setPrototypeMethod(glFogCoordPointerEXT)
		setPrototypeMethod(glFogCoordPointerListIBM)
		setPrototypeMethod(glFogCoordd)
		setPrototypeMethod(glFogCoorddEXT)
		setPrototypeMethod(glFogCoorddv)
		setPrototypeMethod(glFogCoorddvEXT)
		setPrototypeMethod(glFogCoordf)
		setPrototypeMethod(glFogCoordfEXT)
		setPrototypeMethod(glFogCoordfv)
		setPrototypeMethod(glFogCoordfvEXT)
		setPrototypeMethod(glFogCoordhNV)
		setPrototypeMethod(glFogCoordhvNV)
		setPrototypeMethod(glFogFuncSGIS)
		setPrototypeMethod(glFogf)
		setPrototypeMethod(glFogfv)
		setPrototypeMethod(glFogi)
		setPrototypeMethod(glFogiv)
		setPrototypeMethod(glFogx)
		setPrototypeMethod(glFogxOES)
		setPrototypeMethod(glFogxv)
		setPrototypeMethod(glFogxvOES)
		setPrototypeMethod(glFragmentColorMaterialSGIX)
		setPrototypeMethod(glFragmentLightModelfSGIX)
		setPrototypeMethod(glFragmentLightModelfvSGIX)
		setPrototypeMethod(glFragmentLightModeliSGIX)
		setPrototypeMethod(glFragmentLightModelivSGIX)
		setPrototypeMethod(glFragmentLightfSGIX)
		setPrototypeMethod(glFragmentLightfvSGIX)
		setPrototypeMethod(glFragmentLightiSGIX)
		setPrototypeMethod(glFragmentLightivSGIX)
		setPrototypeMethod(glFragmentMaterialfSGIX)
		setPrototypeMethod(glFragmentMaterialfvSGIX)
		setPrototypeMethod(glFragmentMaterialiSGIX)
		setPrototypeMethod(glFragmentMaterialivSGIX)
		setPrototypeMethod(glFrameTerminatorGREMEDY)
		setPrototypeMethod(glFrameZoomSGIX)
		setPrototypeMethod(glFramebufferDrawBufferEXT)
		setPrototypeMethod(glFramebufferDrawBuffersEXT)
		setPrototypeMethod(glFramebufferParameteri)
		setPrototypeMethod(glFramebufferReadBufferEXT)
		setPrototypeMethod(glFramebufferRenderbuffer)
		setPrototypeMethod(glFramebufferRenderbufferEXT)
		setPrototypeMethod(glFramebufferRenderbufferOES)
		setPrototypeMethod(glFramebufferTexture)
		setPrototypeMethod(glFramebufferTexture1D)
		setPrototypeMethod(glFramebufferTexture1DEXT)
		setPrototypeMethod(glFramebufferTexture2D)
		setPrototypeMethod(glFramebufferTexture2DEXT)
		setPrototypeMethod(glFramebufferTexture2DMultisampleEXT)
		setPrototypeMethod(glFramebufferTexture2DMultisampleIMG)
		setPrototypeMethod(glFramebufferTexture2DOES)
		setPrototypeMethod(glFramebufferTexture3D)
		setPrototypeMethod(glFramebufferTexture3DEXT)
		setPrototypeMethod(glFramebufferTexture3DOES)
		setPrototypeMethod(glFramebufferTextureARB)
		setPrototypeMethod(glFramebufferTextureEXT)
		setPrototypeMethod(glFramebufferTextureFaceARB)
		setPrototypeMethod(glFramebufferTextureFaceEXT)
		setPrototypeMethod(glFramebufferTextureLayer)
		setPrototypeMethod(glFramebufferTextureLayerARB)
		setPrototypeMethod(glFramebufferTextureLayerEXT)
		setPrototypeMethod(glFreeObjectBufferATI)
		setPrototypeMethod(glFrontFace)
		setPrototypeMethod(glFrustum)
		setPrototypeMethod(glFrustumf)
		setPrototypeMethod(glFrustumfOES)
		setPrototypeMethod(glFrustumx)
		setPrototypeMethod(glFrustumxOES)
		setPrototypeMethod(glGenAsyncMarkersSGIX)
		setPrototypeMethod(glGenBuffers)
		setPrototypeMethod(glGenBuffersARB)
		setPrototypeMethod(glGenFencesAPPLE)
		setPrototypeMethod(glGenFencesNV)
		setPrototypeMethod(glGenFragmentShadersATI)
		setPrototypeMethod(glGenFramebuffers)
		setPrototypeMethod(glGenFramebuffersEXT)
		setPrototypeMethod(glGenFramebuffersOES)
		setPrototypeMethod(glGenLists)
		setPrototypeMethod(glGenNamesAMD)
		setPrototypeMethod(glGenOcclusionQueriesNV)
		setPrototypeMethod(glGenPathsNV)
		setPrototypeMethod(glGenPerfMonitorsAMD)
		setPrototypeMethod(glGenProgramPipelines)
		setPrototypeMethod(glGenProgramPipelinesEXT)
		setPrototypeMethod(glGenProgramsARB)
		setPrototypeMethod(glGenProgramsNV)
		setPrototypeMethod(glGenQueries)
		setPrototypeMethod(glGenQueriesARB)
		setPrototypeMethod(glGenQueriesEXT)
		setPrototypeMethod(glGenRenderbuffers)
		setPrototypeMethod(glGenRenderbuffersEXT)
		setPrototypeMethod(glGenRenderbuffersOES)
		setPrototypeMethod(glGenSamplers)
		setPrototypeMethod(glGenSymbolsEXT)
		setPrototypeMethod(glGenTextures)
		setPrototypeMethod(glGenTexturesEXT)
		setPrototypeMethod(glGenTransformFeedbacks)
		setPrototypeMethod(glGenTransformFeedbacksNV)
		setPrototypeMethod(glGenVertexArrays)
		setPrototypeMethod(glGenVertexArraysAPPLE)
		setPrototypeMethod(glGenVertexArraysOES)
		setPrototypeMethod(glGenVertexShadersEXT)
		setPrototypeMethod(glGenerateMipmap)
		setPrototypeMethod(glGenerateMipmapEXT)
		setPrototypeMethod(glGenerateMipmapOES)
		setPrototypeMethod(glGenerateMultiTexMipmapEXT)
		setPrototypeMethod(glGenerateTextureMipmapEXT)
		setPrototypeMethod(glGetActiveAtomicCounterBufferiv)
		setPrototypeMethod(glGetActiveAttrib)
		setPrototypeMethod(glGetActiveAttribARB)
		setPrototypeMethod(glGetActiveSubroutineName)
		setPrototypeMethod(glGetActiveSubroutineUniformName)
		setPrototypeMethod(glGetActiveSubroutineUniformiv)
		setPrototypeMethod(glGetActiveUniform)
		setPrototypeMethod(glGetActiveUniformARB)
		setPrototypeMethod(glGetActiveUniformBlockName)
		setPrototypeMethod(glGetActiveUniformBlockiv)
		setPrototypeMethod(glGetActiveUniformName)
		setPrototypeMethod(glGetActiveUniformsiv)
		setPrototypeMethod(glGetActiveVaryingNV)
		setPrototypeMethod(glGetArrayObjectfvATI)
		setPrototypeMethod(glGetArrayObjectivATI)
		setPrototypeMethod(glGetAttachedObjectsARB)
		setPrototypeMethod(glGetAttachedShaders)
		setPrototypeMethod(glGetAttribLocation)
		setPrototypeMethod(glGetAttribLocationARB)
		setPrototypeMethod(glGetBooleanIndexedvEXT)
		setPrototypeMethod(glGetBooleani_v)
		setPrototypeMethod(glGetBooleanv)
		setPrototypeMethod(glGetBufferParameteri64v)
		setPrototypeMethod(glGetBufferParameteriv)
		setPrototypeMethod(glGetBufferParameterivARB)
		setPrototypeMethod(glGetBufferParameterui64vNV)
		setPrototypeMethod(glGetBufferPointerv)
		setPrototypeMethod(glGetBufferPointervARB)
		setPrototypeMethod(glGetBufferPointervOES)
		setPrototypeMethod(glGetBufferSubData)
		setPrototypeMethod(glGetBufferSubDataARB)
		setPrototypeMethod(glGetClipPlane)
		setPrototypeMethod(glGetClipPlanef)
		setPrototypeMethod(glGetClipPlanefOES)
		setPrototypeMethod(glGetClipPlanex)
		setPrototypeMethod(glGetClipPlanexOES)
		setPrototypeMethod(glGetColorTable)
		setPrototypeMethod(glGetColorTableEXT)
		setPrototypeMethod(glGetColorTableParameterfv)
		setPrototypeMethod(glGetColorTableParameterfvEXT)
		setPrototypeMethod(glGetColorTableParameterfvSGI)
		setPrototypeMethod(glGetColorTableParameteriv)
		setPrototypeMethod(glGetColorTableParameterivEXT)
		setPrototypeMethod(glGetColorTableParameterivSGI)
		setPrototypeMethod(glGetColorTableSGI)
		setPrototypeMethod(glGetCombinerInputParameterfvNV)
		setPrototypeMethod(glGetCombinerInputParameterivNV)
		setPrototypeMethod(glGetCombinerOutputParameterfvNV)
		setPrototypeMethod(glGetCombinerOutputParameterivNV)
		setPrototypeMethod(glGetCombinerStageParameterfvNV)
		setPrototypeMethod(glGetCompressedMultiTexImageEXT)
		setPrototypeMethod(glGetCompressedTexImage)
		setPrototypeMethod(glGetCompressedTexImageARB)
		setPrototypeMethod(glGetCompressedTextureImageEXT)
		setPrototypeMethod(glGetConvolutionFilter)
		setPrototypeMethod(glGetConvolutionFilterEXT)
		setPrototypeMethod(glGetConvolutionParameterfv)
		setPrototypeMethod(glGetConvolutionParameterfvEXT)
		setPrototypeMethod(glGetConvolutionParameteriv)
		setPrototypeMethod(glGetConvolutionParameterivEXT)
		setPrototypeMethod(glGetConvolutionParameterxvOES)
		setPrototypeMethod(glGetDebugMessageLog)
		setPrototypeMethod(glGetDebugMessageLogAMD)
		setPrototypeMethod(glGetDebugMessageLogARB)
		setPrototypeMethod(glGetDebugMessageLogKHR)
		setPrototypeMethod(glGetDetailTexFuncSGIS)
		setPrototypeMethod(glGetDoubleIndexedvEXT)
		setPrototypeMethod(glGetDoublei_v)
		setPrototypeMethod(glGetDoublei_vEXT)
		setPrototypeMethod(glGetDoublev)
		setPrototypeMethod(glGetDriverControlStringQCOM)
		setPrototypeMethod(glGetDriverControlsQCOM)
		setPrototypeMethod(glGetError)
		setPrototypeMethod(glGetFenceivNV)
		setPrototypeMethod(glGetFinalCombinerInputParameterfvNV)
		setPrototypeMethod(glGetFinalCombinerInputParameterivNV)
		setPrototypeMethod(glGetFirstPerfQueryIdINTEL)
		setPrototypeMethod(glGetFixedv)
		setPrototypeMethod(glGetFixedvOES)
		setPrototypeMethod(glGetFloatIndexedvEXT)
		setPrototypeMethod(glGetFloati_v)
		setPrototypeMethod(glGetFloati_vEXT)
		setPrototypeMethod(glGetFloatv)
		setPrototypeMethod(glGetFogFuncSGIS)
		setPrototypeMethod(glGetFragDataIndex)
		setPrototypeMethod(glGetFragDataLocation)
		setPrototypeMethod(glGetFragDataLocationEXT)
		setPrototypeMethod(glGetFragmentLightfvSGIX)
		setPrototypeMethod(glGetFragmentLightivSGIX)
		setPrototypeMethod(glGetFragmentMaterialfvSGIX)
		setPrototypeMethod(glGetFragmentMaterialivSGIX)
		setPrototypeMethod(glGetFramebufferAttachmentParameteriv)
		setPrototypeMethod(glGetFramebufferAttachmentParameterivEXT)
		setPrototypeMethod(glGetFramebufferAttachmentParameterivOES)
		setPrototypeMethod(glGetFramebufferParameteriv)
		setPrototypeMethod(glGetFramebufferParameterivEXT)
		setPrototypeMethod(glGetGraphicsResetStatusARB)
		setPrototypeMethod(glGetGraphicsResetStatusEXT)
		setPrototypeMethod(glGetHandleARB)
		setPrototypeMethod(glGetHistogram)
		setPrototypeMethod(glGetHistogramEXT)
		setPrototypeMethod(glGetHistogramParameterfv)
		setPrototypeMethod(glGetHistogramParameterfvEXT)
		setPrototypeMethod(glGetHistogramParameteriv)
		setPrototypeMethod(glGetHistogramParameterivEXT)
		setPrototypeMethod(glGetHistogramParameterxvOES)
		setPrototypeMethod(glGetImageHandleARB)
		setPrototypeMethod(glGetImageHandleNV)
		setPrototypeMethod(glGetImageTransformParameterfvHP)
		setPrototypeMethod(glGetImageTransformParameterivHP)
		setPrototypeMethod(glGetInfoLogARB)
		setPrototypeMethod(glGetInstrumentsSGIX)
		setPrototypeMethod(glGetInteger64i_v)
		setPrototypeMethod(glGetInteger64v)
		setPrototypeMethod(glGetInteger64vAPPLE)
		setPrototypeMethod(glGetIntegerIndexedvEXT)
		setPrototypeMethod(glGetIntegeri_v)
		setPrototypeMethod(glGetIntegeri_vEXT)
		setPrototypeMethod(glGetIntegerui64i_vNV)
		setPrototypeMethod(glGetIntegerui64vNV)
		setPrototypeMethod(glGetIntegerv)
		setPrototypeMethod(glGetInternalformati64v)
		setPrototypeMethod(glGetInternalformativ)
		setPrototypeMethod(glGetInvariantBooleanvEXT)
		setPrototypeMethod(glGetInvariantFloatvEXT)
		setPrototypeMethod(glGetInvariantIntegervEXT)
		setPrototypeMethod(glGetLightfv)
		setPrototypeMethod(glGetLightiv)
		setPrototypeMethod(glGetLightxOES)
		setPrototypeMethod(glGetLightxv)
		setPrototypeMethod(glGetLightxvOES)
		setPrototypeMethod(glGetListParameterfvSGIX)
		setPrototypeMethod(glGetListParameterivSGIX)
		setPrototypeMethod(glGetLocalConstantBooleanvEXT)
		setPrototypeMethod(glGetLocalConstantFloatvEXT)
		setPrototypeMethod(glGetLocalConstantIntegervEXT)
		setPrototypeMethod(glGetMapAttribParameterfvNV)
		setPrototypeMethod(glGetMapAttribParameterivNV)
		setPrototypeMethod(glGetMapControlPointsNV)
		setPrototypeMethod(glGetMapParameterfvNV)
		setPrototypeMethod(glGetMapParameterivNV)
		setPrototypeMethod(glGetMapdv)
		setPrototypeMethod(glGetMapfv)
		setPrototypeMethod(glGetMapiv)
		setPrototypeMethod(glGetMapxvOES)
		setPrototypeMethod(glGetMaterialfv)
		setPrototypeMethod(glGetMaterialiv)
		setPrototypeMethod(glGetMaterialxOES)
		setPrototypeMethod(glGetMaterialxv)
		setPrototypeMethod(glGetMaterialxvOES)
		setPrototypeMethod(glGetMinmax)
		setPrototypeMethod(glGetMinmaxEXT)
		setPrototypeMethod(glGetMinmaxParameterfv)
		setPrototypeMethod(glGetMinmaxParameterfvEXT)
		setPrototypeMethod(glGetMinmaxParameteriv)
		setPrototypeMethod(glGetMinmaxParameterivEXT)
		setPrototypeMethod(glGetMultiTexEnvfvEXT)
		setPrototypeMethod(glGetMultiTexEnvivEXT)
		setPrototypeMethod(glGetMultiTexGendvEXT)
		setPrototypeMethod(glGetMultiTexGenfvEXT)
		setPrototypeMethod(glGetMultiTexGenivEXT)
		setPrototypeMethod(glGetMultiTexImageEXT)
		setPrototypeMethod(glGetMultiTexLevelParameterfvEXT)
		setPrototypeMethod(glGetMultiTexLevelParameterivEXT)
		setPrototypeMethod(glGetMultiTexParameterIivEXT)
		setPrototypeMethod(glGetMultiTexParameterIuivEXT)
		setPrototypeMethod(glGetMultiTexParameterfvEXT)
		setPrototypeMethod(glGetMultiTexParameterivEXT)
		setPrototypeMethod(glGetMultisamplefv)
		setPrototypeMethod(glGetMultisamplefvNV)
		setPrototypeMethod(glGetNamedBufferParameterivEXT)
		setPrototypeMethod(glGetNamedBufferParameterui64vNV)
		setPrototypeMethod(glGetNamedBufferPointervEXT)
		setPrototypeMethod(glGetNamedBufferSubDataEXT)
		setPrototypeMethod(glGetNamedFramebufferAttachmentParameterivEXT)
		setPrototypeMethod(glGetNamedFramebufferParameterivEXT)
		setPrototypeMethod(glGetNamedProgramLocalParameterIivEXT)
		setPrototypeMethod(glGetNamedProgramLocalParameterIuivEXT)
		setPrototypeMethod(glGetNamedProgramLocalParameterdvEXT)
		setPrototypeMethod(glGetNamedProgramLocalParameterfvEXT)
		setPrototypeMethod(glGetNamedProgramStringEXT)
		setPrototypeMethod(glGetNamedProgramivEXT)
		setPrototypeMethod(glGetNamedRenderbufferParameterivEXT)
		setPrototypeMethod(glGetNamedStringARB)
		setPrototypeMethod(glGetNamedStringivARB)
		setPrototypeMethod(glGetNextPerfQueryIdINTEL)
		setPrototypeMethod(glGetObjectBufferfvATI)
		setPrototypeMethod(glGetObjectBufferivATI)
		setPrototypeMethod(glGetObjectLabel)
		setPrototypeMethod(glGetObjectLabelEXT)
		setPrototypeMethod(glGetObjectLabelKHR)
		setPrototypeMethod(glGetObjectParameterfvARB)
		setPrototypeMethod(glGetObjectParameterivAPPLE)
		setPrototypeMethod(glGetObjectParameterivARB)
		setPrototypeMethod(glGetObjectPtrLabel)
		setPrototypeMethod(glGetObjectPtrLabelKHR)
		setPrototypeMethod(glGetOcclusionQueryivNV)
		setPrototypeMethod(glGetOcclusionQueryuivNV)
		setPrototypeMethod(glGetPathColorGenfvNV)
		setPrototypeMethod(glGetPathColorGenivNV)
		setPrototypeMethod(glGetPathCommandsNV)
		setPrototypeMethod(glGetPathCoordsNV)
		setPrototypeMethod(glGetPathDashArrayNV)
		setPrototypeMethod(glGetPathLengthNV)
		setPrototypeMethod(glGetPathMetricRangeNV)
		setPrototypeMethod(glGetPathMetricsNV)
		setPrototypeMethod(glGetPathParameterfvNV)
		setPrototypeMethod(glGetPathParameterivNV)
		setPrototypeMethod(glGetPathSpacingNV)
		setPrototypeMethod(glGetPathTexGenfvNV)
		setPrototypeMethod(glGetPathTexGenivNV)
		setPrototypeMethod(glGetPerfCounterInfoINTEL)
		setPrototypeMethod(glGetPerfMonitorCounterDataAMD)
		setPrototypeMethod(glGetPerfMonitorCounterInfoAMD)
		setPrototypeMethod(glGetPerfMonitorCounterStringAMD)
		setPrototypeMethod(glGetPerfMonitorCountersAMD)
		setPrototypeMethod(glGetPerfMonitorGroupStringAMD)
		setPrototypeMethod(glGetPerfMonitorGroupsAMD)
		setPrototypeMethod(glGetPerfQueryDataINTEL)
		setPrototypeMethod(glGetPerfQueryIdByNameINTEL)
		setPrototypeMethod(glGetPerfQueryInfoINTEL)
		setPrototypeMethod(glGetPixelMapfv)
		setPrototypeMethod(glGetPixelMapuiv)
		setPrototypeMethod(glGetPixelMapusv)
		setPrototypeMethod(glGetPixelMapxv)
		setPrototypeMethod(glGetPixelTexGenParameterfvSGIS)
		setPrototypeMethod(glGetPixelTexGenParameterivSGIS)
		setPrototypeMethod(glGetPixelTransformParameterfvEXT)
		setPrototypeMethod(glGetPixelTransformParameterivEXT)
		setPrototypeMethod(glGetPointerIndexedvEXT)
		setPrototypeMethod(glGetPointeri_vEXT)
		setPrototypeMethod(glGetPointerv)
		setPrototypeMethod(glGetPointervEXT)
		setPrototypeMethod(glGetPointervKHR)
		setPrototypeMethod(glGetPolygonStipple)
		setPrototypeMethod(glGetProgramBinary)
		setPrototypeMethod(glGetProgramBinaryOES)
		setPrototypeMethod(glGetProgramEnvParameterIivNV)
		setPrototypeMethod(glGetProgramEnvParameterIuivNV)
		setPrototypeMethod(glGetProgramEnvParameterdvARB)
		setPrototypeMethod(glGetProgramEnvParameterfvARB)
		setPrototypeMethod(glGetProgramInfoLog)
		setPrototypeMethod(glGetProgramInterfaceiv)
		setPrototypeMethod(glGetProgramLocalParameterIivNV)
		setPrototypeMethod(glGetProgramLocalParameterIuivNV)
		setPrototypeMethod(glGetProgramLocalParameterdvARB)
		setPrototypeMethod(glGetProgramLocalParameterfvARB)
		setPrototypeMethod(glGetProgramNamedParameterdvNV)
		setPrototypeMethod(glGetProgramNamedParameterfvNV)
		setPrototypeMethod(glGetProgramParameterdvNV)
		setPrototypeMethod(glGetProgramParameterfvNV)
		setPrototypeMethod(glGetProgramPipelineInfoLog)
		setPrototypeMethod(glGetProgramPipelineInfoLogEXT)
		setPrototypeMethod(glGetProgramPipelineiv)
		setPrototypeMethod(glGetProgramPipelineivEXT)
		setPrototypeMethod(glGetProgramResourceIndex)
		setPrototypeMethod(glGetProgramResourceLocation)
		setPrototypeMethod(glGetProgramResourceLocationIndex)
		setPrototypeMethod(glGetProgramResourceName)
		setPrototypeMethod(glGetProgramResourceiv)
		setPrototypeMethod(glGetProgramStageiv)
		setPrototypeMethod(glGetProgramStringARB)
		setPrototypeMethod(glGetProgramStringNV)
		setPrototypeMethod(glGetProgramSubroutineParameteruivNV)
		setPrototypeMethod(glGetProgramiv)
		setPrototypeMethod(glGetProgramivARB)
		setPrototypeMethod(glGetProgramivNV)
		setPrototypeMethod(glGetQueryIndexediv)
		setPrototypeMethod(glGetQueryObjecti64v)
		setPrototypeMethod(glGetQueryObjecti64vEXT)
		setPrototypeMethod(glGetQueryObjectiv)
		setPrototypeMethod(glGetQueryObjectivARB)
		setPrototypeMethod(glGetQueryObjectivEXT)
		setPrototypeMethod(glGetQueryObjectui64v)
		setPrototypeMethod(glGetQueryObjectui64vEXT)
		setPrototypeMethod(glGetQueryObjectuiv)
		setPrototypeMethod(glGetQueryObjectuivARB)
		setPrototypeMethod(glGetQueryObjectuivEXT)
		setPrototypeMethod(glGetQueryiv)
		setPrototypeMethod(glGetQueryivARB)
		setPrototypeMethod(glGetQueryivEXT)
		setPrototypeMethod(glGetRenderbufferParameteriv)
		setPrototypeMethod(glGetRenderbufferParameterivEXT)
		setPrototypeMethod(glGetRenderbufferParameterivOES)
		setPrototypeMethod(glGetSamplerParameterIiv)
		setPrototypeMethod(glGetSamplerParameterIivEXT)
		setPrototypeMethod(glGetSamplerParameterIuiv)
		setPrototypeMethod(glGetSamplerParameterIuivEXT)
		setPrototypeMethod(glGetSamplerParameterfv)
		setPrototypeMethod(glGetSamplerParameteriv)
		setPrototypeMethod(glGetSeparableFilter)
		setPrototypeMethod(glGetSeparableFilterEXT)
		setPrototypeMethod(glGetShaderInfoLog)
		setPrototypeMethod(glGetShaderPrecisionFormat)
		setPrototypeMethod(glGetShaderSource)
		setPrototypeMethod(glGetShaderSourceARB)
		setPrototypeMethod(glGetShaderiv)
		setPrototypeMethod(glGetSharpenTexFuncSGIS)
		setPrototypeMethod(glGetString)
		setPrototypeMethod(glGetStringi)
		setPrototypeMethod(glGetSubroutineIndex)
		setPrototypeMethod(glGetSubroutineUniformLocation)
		setPrototypeMethod(glGetSynciv)
		setPrototypeMethod(glGetSyncivAPPLE)
		setPrototypeMethod(glGetTexBumpParameterfvATI)
		setPrototypeMethod(glGetTexBumpParameterivATI)
		setPrototypeMethod(glGetTexEnvfv)
		setPrototypeMethod(glGetTexEnviv)
		setPrototypeMethod(glGetTexEnvxv)
		setPrototypeMethod(glGetTexEnvxvOES)
		setPrototypeMethod(glGetTexFilterFuncSGIS)
		setPrototypeMethod(glGetTexGendv)
		setPrototypeMethod(glGetTexGenfv)
		setPrototypeMethod(glGetTexGenfvOES)
		setPrototypeMethod(glGetTexGeniv)
		setPrototypeMethod(glGetTexGenivOES)
		setPrototypeMethod(glGetTexGenxvOES)
		setPrototypeMethod(glGetTexImage)
		setPrototypeMethod(glGetTexLevelParameterfv)
		setPrototypeMethod(glGetTexLevelParameteriv)
		setPrototypeMethod(glGetTexLevelParameterxvOES)
		setPrototypeMethod(glGetTexParameterIiv)
		setPrototypeMethod(glGetTexParameterIivEXT)
		setPrototypeMethod(glGetTexParameterIuiv)
		setPrototypeMethod(glGetTexParameterIuivEXT)
		setPrototypeMethod(glGetTexParameterPointervAPPLE)
		setPrototypeMethod(glGetTexParameterfv)
		setPrototypeMethod(glGetTexParameteriv)
		setPrototypeMethod(glGetTexParameterxv)
		setPrototypeMethod(glGetTexParameterxvOES)
		setPrototypeMethod(glGetTextureHandleARB)
		setPrototypeMethod(glGetTextureHandleNV)
		setPrototypeMethod(glGetTextureImageEXT)
		setPrototypeMethod(glGetTextureLevelParameterfvEXT)
		setPrototypeMethod(glGetTextureLevelParameterivEXT)
		setPrototypeMethod(glGetTextureParameterIivEXT)
		setPrototypeMethod(glGetTextureParameterIuivEXT)
		setPrototypeMethod(glGetTextureParameterfvEXT)
		setPrototypeMethod(glGetTextureParameterivEXT)
		setPrototypeMethod(glGetTextureSamplerHandleARB)
		setPrototypeMethod(glGetTextureSamplerHandleNV)
		setPrototypeMethod(glGetTrackMatrixivNV)
		setPrototypeMethod(glGetTransformFeedbackVarying)
		setPrototypeMethod(glGetTransformFeedbackVaryingEXT)
		setPrototypeMethod(glGetTransformFeedbackVaryingNV)
		setPrototypeMethod(glGetTranslatedShaderSourceANGLE)
		setPrototypeMethod(glGetUniformBlockIndex)
		setPrototypeMethod(glGetUniformBufferSizeEXT)
		setPrototypeMethod(glGetUniformIndices)
		setPrototypeMethod(glGetUniformLocation)
		setPrototypeMethod(glGetUniformLocationARB)
		setPrototypeMethod(glGetUniformOffsetEXT)
		setPrototypeMethod(glGetUniformSubroutineuiv)
		setPrototypeMethod(glGetUniformdv)
		setPrototypeMethod(glGetUniformfv)
		setPrototypeMethod(glGetUniformfvARB)
		setPrototypeMethod(glGetUniformi64vNV)
		setPrototypeMethod(glGetUniformiv)
		setPrototypeMethod(glGetUniformivARB)
		setPrototypeMethod(glGetUniformui64vNV)
		setPrototypeMethod(glGetUniformuiv)
		setPrototypeMethod(glGetUniformuivEXT)
		setPrototypeMethod(glGetVariantArrayObjectfvATI)
		setPrototypeMethod(glGetVariantArrayObjectivATI)
		setPrototypeMethod(glGetVariantBooleanvEXT)
		setPrototypeMethod(glGetVariantFloatvEXT)
		setPrototypeMethod(glGetVariantIntegervEXT)
		setPrototypeMethod(glGetVariantPointervEXT)
		setPrototypeMethod(glGetVaryingLocationNV)
		setPrototypeMethod(glGetVertexArrayIntegeri_vEXT)
		setPrototypeMethod(glGetVertexArrayIntegervEXT)
		setPrototypeMethod(glGetVertexArrayPointeri_vEXT)
		setPrototypeMethod(glGetVertexArrayPointervEXT)
		setPrototypeMethod(glGetVertexAttribArrayObjectfvATI)
		setPrototypeMethod(glGetVertexAttribArrayObjectivATI)
		setPrototypeMethod(glGetVertexAttribIiv)
		setPrototypeMethod(glGetVertexAttribIivEXT)
		setPrototypeMethod(glGetVertexAttribIuiv)
		setPrototypeMethod(glGetVertexAttribIuivEXT)
		setPrototypeMethod(glGetVertexAttribLdv)
		setPrototypeMethod(glGetVertexAttribLdvEXT)
		setPrototypeMethod(glGetVertexAttribLi64vNV)
		setPrototypeMethod(glGetVertexAttribLui64vARB)
		setPrototypeMethod(glGetVertexAttribLui64vNV)
		setPrototypeMethod(glGetVertexAttribPointerv)
		setPrototypeMethod(glGetVertexAttribPointervARB)
		setPrototypeMethod(glGetVertexAttribPointervNV)
		setPrototypeMethod(glGetVertexAttribdv)
		setPrototypeMethod(glGetVertexAttribdvARB)
		setPrototypeMethod(glGetVertexAttribdvNV)
		setPrototypeMethod(glGetVertexAttribfv)
		setPrototypeMethod(glGetVertexAttribfvARB)
		setPrototypeMethod(glGetVertexAttribfvNV)
		setPrototypeMethod(glGetVertexAttribiv)
		setPrototypeMethod(glGetVertexAttribivARB)
		setPrototypeMethod(glGetVertexAttribivNV)
		setPrototypeMethod(glGetVideoCaptureStreamdvNV)
		setPrototypeMethod(glGetVideoCaptureStreamfvNV)
		setPrototypeMethod(glGetVideoCaptureStreamivNV)
		setPrototypeMethod(glGetVideoCaptureivNV)
		setPrototypeMethod(glGetVideoi64vNV)
		setPrototypeMethod(glGetVideoivNV)
		setPrototypeMethod(glGetVideoui64vNV)
		setPrototypeMethod(glGetVideouivNV)
		setPrototypeMethod(glGetnColorTableARB)
		setPrototypeMethod(glGetnCompressedTexImageARB)
		setPrototypeMethod(glGetnConvolutionFilterARB)
		setPrototypeMethod(glGetnHistogramARB)
		setPrototypeMethod(glGetnMapdvARB)
		setPrototypeMethod(glGetnMapfvARB)
		setPrototypeMethod(glGetnMapivARB)
		setPrototypeMethod(glGetnMinmaxARB)
		setPrototypeMethod(glGetnPixelMapfvARB)
		setPrototypeMethod(glGetnPixelMapuivARB)
		setPrototypeMethod(glGetnPixelMapusvARB)
		setPrototypeMethod(glGetnPolygonStippleARB)
		setPrototypeMethod(glGetnSeparableFilterARB)
		setPrototypeMethod(glGetnTexImageARB)
		setPrototypeMethod(glGetnUniformdvARB)
		setPrototypeMethod(glGetnUniformfvARB)
		setPrototypeMethod(glGetnUniformfvEXT)
		setPrototypeMethod(glGetnUniformivARB)
		setPrototypeMethod(glGetnUniformivEXT)
		setPrototypeMethod(glGetnUniformuivARB)
		setPrototypeMethod(glGlobalAlphaFactorbSUN)
		setPrototypeMethod(glGlobalAlphaFactordSUN)
		setPrototypeMethod(glGlobalAlphaFactorfSUN)
		setPrototypeMethod(glGlobalAlphaFactoriSUN)
		setPrototypeMethod(glGlobalAlphaFactorsSUN)
		setPrototypeMethod(glGlobalAlphaFactorubSUN)
		setPrototypeMethod(glGlobalAlphaFactoruiSUN)
		setPrototypeMethod(glGlobalAlphaFactorusSUN)
		setPrototypeMethod(glHint)
		setPrototypeMethod(glHintPGI)
		setPrototypeMethod(glHistogram)
		setPrototypeMethod(glHistogramEXT)
		setPrototypeMethod(glIglooInterfaceSGIX)
		setPrototypeMethod(glImageTransformParameterfHP)
		setPrototypeMethod(glImageTransformParameterfvHP)
		setPrototypeMethod(glImageTransformParameteriHP)
		setPrototypeMethod(glImageTransformParameterivHP)
		setPrototypeMethod(glImportSyncEXT)
		setPrototypeMethod(glIndexFormatNV)
		setPrototypeMethod(glIndexFuncEXT)
		setPrototypeMethod(glIndexMask)
		setPrototypeMethod(glIndexMaterialEXT)
		setPrototypeMethod(glIndexPointer)
		setPrototypeMethod(glIndexPointerEXT)
		setPrototypeMethod(glIndexPointerListIBM)
		setPrototypeMethod(glIndexd)
		setPrototypeMethod(glIndexdv)
		setPrototypeMethod(glIndexf)
		setPrototypeMethod(glIndexfv)
		setPrototypeMethod(glIndexi)
		setPrototypeMethod(glIndexiv)
		setPrototypeMethod(glIndexs)
		setPrototypeMethod(glIndexsv)
		setPrototypeMethod(glIndexub)
		setPrototypeMethod(glIndexubv)
		setPrototypeMethod(glIndexxOES)
		setPrototypeMethod(glIndexxvOES)
		setPrototypeMethod(glInitNames)
		setPrototypeMethod(glInsertComponentEXT)
		setPrototypeMethod(glInsertEventMarkerEXT)
		setPrototypeMethod(glInstrumentsBufferSGIX)
		setPrototypeMethod(glInterleavedArrays)
		setPrototypeMethod(glInterpolatePathsNV)
		setPrototypeMethod(glInvalidateBufferData)
		setPrototypeMethod(glInvalidateBufferSubData)
		setPrototypeMethod(glInvalidateFramebuffer)
		setPrototypeMethod(glInvalidateSubFramebuffer)
		setPrototypeMethod(glInvalidateTexImage)
		setPrototypeMethod(glInvalidateTexSubImage)
		setPrototypeMethod(glIsAsyncMarkerSGIX)
		setPrototypeMethod(glIsBuffer)
		setPrototypeMethod(glIsBufferARB)
		setPrototypeMethod(glIsBufferResidentNV)
		setPrototypeMethod(glIsEnabled)
		setPrototypeMethod(glIsEnabledIndexedEXT)
		setPrototypeMethod(glIsEnabledi)
		setPrototypeMethod(glIsEnablediEXT)
		setPrototypeMethod(glIsFenceAPPLE)
		setPrototypeMethod(glIsFenceNV)
		setPrototypeMethod(glIsFramebuffer)
		setPrototypeMethod(glIsFramebufferEXT)
		setPrototypeMethod(glIsFramebufferOES)
		setPrototypeMethod(glIsImageHandleResidentARB)
		setPrototypeMethod(glIsImageHandleResidentNV)
		setPrototypeMethod(glIsList)
		setPrototypeMethod(glIsNameAMD)
		setPrototypeMethod(glIsNamedBufferResidentNV)
		setPrototypeMethod(glIsNamedStringARB)
		setPrototypeMethod(glIsObjectBufferATI)
		setPrototypeMethod(glIsOcclusionQueryNV)
		setPrototypeMethod(glIsPathNV)
		setPrototypeMethod(glIsPointInFillPathNV)
		setPrototypeMethod(glIsPointInStrokePathNV)
		setPrototypeMethod(glIsProgram)
		setPrototypeMethod(glIsProgramARB)
		setPrototypeMethod(glIsProgramNV)
		setPrototypeMethod(glIsProgramPipeline)
		setPrototypeMethod(glIsProgramPipelineEXT)
		setPrototypeMethod(glIsQuery)
		setPrototypeMethod(glIsQueryARB)
		setPrototypeMethod(glIsQueryEXT)
		setPrototypeMethod(glIsRenderbuffer)
		setPrototypeMethod(glIsRenderbufferEXT)
		setPrototypeMethod(glIsRenderbufferOES)
		setPrototypeMethod(glIsSampler)
		setPrototypeMethod(glIsShader)
		setPrototypeMethod(glIsSync)
		setPrototypeMethod(glIsSyncAPPLE)
		setPrototypeMethod(glIsTexture)
		setPrototypeMethod(glIsTextureEXT)
		setPrototypeMethod(glIsTextureHandleResidentARB)
		setPrototypeMethod(glIsTextureHandleResidentNV)
		setPrototypeMethod(glIsTransformFeedback)
		setPrototypeMethod(glIsTransformFeedbackNV)
		setPrototypeMethod(glIsVariantEnabledEXT)
		setPrototypeMethod(glIsVertexArray)
		setPrototypeMethod(glIsVertexArrayAPPLE)
		setPrototypeMethod(glIsVertexArrayOES)
		setPrototypeMethod(glIsVertexAttribEnabledAPPLE)
		setPrototypeMethod(glLabelObjectEXT)
		setPrototypeMethod(glLightEnviSGIX)
		setPrototypeMethod(glLightModelf)
		setPrototypeMethod(glLightModelfv)
		setPrototypeMethod(glLightModeli)
		setPrototypeMethod(glLightModeliv)
		setPrototypeMethod(glLightModelx)
		setPrototypeMethod(glLightModelxOES)
		setPrototypeMethod(glLightModelxv)
		setPrototypeMethod(glLightModelxvOES)
		setPrototypeMethod(glLightf)
		setPrototypeMethod(glLightfv)
		setPrototypeMethod(glLighti)
		setPrototypeMethod(glLightiv)
		setPrototypeMethod(glLightx)
		setPrototypeMethod(glLightxOES)
		setPrototypeMethod(glLightxv)
		setPrototypeMethod(glLightxvOES)
		setPrototypeMethod(glLineStipple)
		setPrototypeMethod(glLineWidth)
		setPrototypeMethod(glLineWidthx)
		setPrototypeMethod(glLineWidthxOES)
		setPrototypeMethod(glLinkProgram)
		setPrototypeMethod(glLinkProgramARB)
		setPrototypeMethod(glListBase)
		setPrototypeMethod(glListParameterfSGIX)
		setPrototypeMethod(glListParameterfvSGIX)
		setPrototypeMethod(glListParameteriSGIX)
		setPrototypeMethod(glListParameterivSGIX)
		setPrototypeMethod(glLoadIdentity)
		setPrototypeMethod(glLoadIdentityDeformationMapSGIX)
		setPrototypeMethod(glLoadMatrixd)
		setPrototypeMethod(glLoadMatrixf)
		setPrototypeMethod(glLoadMatrixx)
		setPrototypeMethod(glLoadMatrixxOES)
		setPrototypeMethod(glLoadName)
		setPrototypeMethod(glLoadPaletteFromModelViewMatrixOES)
		setPrototypeMethod(glLoadProgramNV)
		setPrototypeMethod(glLoadTransposeMatrixd)
		setPrototypeMethod(glLoadTransposeMatrixdARB)
		setPrototypeMethod(glLoadTransposeMatrixf)
		setPrototypeMethod(glLoadTransposeMatrixfARB)
		setPrototypeMethod(glLoadTransposeMatrixxOES)
		setPrototypeMethod(glLockArraysEXT)
		setPrototypeMethod(glLogicOp)
		setPrototypeMethod(glMakeBufferNonResidentNV)
		setPrototypeMethod(glMakeBufferResidentNV)
		setPrototypeMethod(glMakeImageHandleNonResidentARB)
		setPrototypeMethod(glMakeImageHandleNonResidentNV)
		setPrototypeMethod(glMakeImageHandleResidentARB)
		setPrototypeMethod(glMakeImageHandleResidentNV)
		setPrototypeMethod(glMakeNamedBufferNonResidentNV)
		setPrototypeMethod(glMakeNamedBufferResidentNV)
		setPrototypeMethod(glMakeTextureHandleNonResidentARB)
		setPrototypeMethod(glMakeTextureHandleNonResidentNV)
		setPrototypeMethod(glMakeTextureHandleResidentARB)
		setPrototypeMethod(glMakeTextureHandleResidentNV)
		setPrototypeMethod(glMap1d)
		setPrototypeMethod(glMap1f)
		setPrototypeMethod(glMap1xOES)
		setPrototypeMethod(glMap2d)
		setPrototypeMethod(glMap2f)
		setPrototypeMethod(glMap2xOES)
		setPrototypeMethod(glMapBuffer)
		setPrototypeMethod(glMapBufferARB)
		setPrototypeMethod(glMapBufferOES)
		setPrototypeMethod(glMapBufferRange)
		setPrototypeMethod(glMapBufferRangeEXT)
		setPrototypeMethod(glMapControlPointsNV)
		setPrototypeMethod(glMapGrid1d)
		setPrototypeMethod(glMapGrid1f)
		setPrototypeMethod(glMapGrid1xOES)
		setPrototypeMethod(glMapGrid2d)
		setPrototypeMethod(glMapGrid2f)
		setPrototypeMethod(glMapGrid2xOES)
		setPrototypeMethod(glMapNamedBufferEXT)
		setPrototypeMethod(glMapNamedBufferRangeEXT)
		setPrototypeMethod(glMapObjectBufferATI)
		setPrototypeMethod(glMapParameterfvNV)
		setPrototypeMethod(glMapParameterivNV)
		setPrototypeMethod(glMapTexture2DINTEL)
		setPrototypeMethod(glMapVertexAttrib1dAPPLE)
		setPrototypeMethod(glMapVertexAttrib1fAPPLE)
		setPrototypeMethod(glMapVertexAttrib2dAPPLE)
		setPrototypeMethod(glMapVertexAttrib2fAPPLE)
		setPrototypeMethod(glMaterialf)
		setPrototypeMethod(glMaterialfv)
		setPrototypeMethod(glMateriali)
		setPrototypeMethod(glMaterialiv)
		setPrototypeMethod(glMaterialx)
		setPrototypeMethod(glMaterialxOES)
		setPrototypeMethod(glMaterialxv)
		setPrototypeMethod(glMaterialxvOES)
		setPrototypeMethod(glMatrixFrustumEXT)
		setPrototypeMethod(glMatrixIndexPointerARB)
		setPrototypeMethod(glMatrixIndexPointerOES)
		setPrototypeMethod(glMatrixIndexubvARB)
		setPrototypeMethod(glMatrixIndexuivARB)
		setPrototypeMethod(glMatrixIndexusvARB)
		setPrototypeMethod(glMatrixLoadIdentityEXT)
		setPrototypeMethod(glMatrixLoadTransposedEXT)
		setPrototypeMethod(glMatrixLoadTransposefEXT)
		setPrototypeMethod(glMatrixLoaddEXT)
		setPrototypeMethod(glMatrixLoadfEXT)
		setPrototypeMethod(glMatrixMode)
		setPrototypeMethod(glMatrixMultTransposedEXT)
		setPrototypeMethod(glMatrixMultTransposefEXT)
		setPrototypeMethod(glMatrixMultdEXT)
		setPrototypeMethod(glMatrixMultfEXT)
		setPrototypeMethod(glMatrixOrthoEXT)
		setPrototypeMethod(glMatrixPopEXT)
		setPrototypeMethod(glMatrixPushEXT)
		setPrototypeMethod(glMatrixRotatedEXT)
		setPrototypeMethod(glMatrixRotatefEXT)
		setPrototypeMethod(glMatrixScaledEXT)
		setPrototypeMethod(glMatrixScalefEXT)
		setPrototypeMethod(glMatrixTranslatedEXT)
		setPrototypeMethod(glMatrixTranslatefEXT)
		setPrototypeMethod(glMemoryBarrier)
		setPrototypeMethod(glMemoryBarrierByRegion)
		setPrototypeMethod(glMemoryBarrierEXT)
		setPrototypeMethod(glMinSampleShading)
		setPrototypeMethod(glMinSampleShadingARB)
		setPrototypeMethod(glMinSampleShadingOES)
		setPrototypeMethod(glMinmax)
		setPrototypeMethod(glMinmaxEXT)
		setPrototypeMethod(glMultMatrixd)
		setPrototypeMethod(glMultMatrixf)
		setPrototypeMethod(glMultMatrixx)
		setPrototypeMethod(glMultMatrixxOES)
		setPrototypeMethod(glMultTransposeMatrixd)
		setPrototypeMethod(glMultTransposeMatrixdARB)
		setPrototypeMethod(glMultTransposeMatrixf)
		setPrototypeMethod(glMultTransposeMatrixfARB)
		setPrototypeMethod(glMultTransposeMatrixxOES)
		setPrototypeMethod(glMultiDrawArrays)
		setPrototypeMethod(glMultiDrawArraysEXT)
		setPrototypeMethod(glMultiDrawArraysIndirect)
		setPrototypeMethod(glMultiDrawArraysIndirectAMD)
		setPrototypeMethod(glMultiDrawArraysIndirectBindlessNV)
		setPrototypeMethod(glMultiDrawArraysIndirectCountARB)
		setPrototypeMethod(glMultiDrawElementArrayAPPLE)
		setPrototypeMethod(glMultiDrawElements)
		setPrototypeMethod(glMultiDrawElementsBaseVertex)
		setPrototypeMethod(glMultiDrawElementsEXT)
		setPrototypeMethod(glMultiDrawElementsIndirect)
		setPrototypeMethod(glMultiDrawElementsIndirectAMD)
		setPrototypeMethod(glMultiDrawElementsIndirectBindlessNV)
		setPrototypeMethod(glMultiDrawElementsIndirectCountARB)
		setPrototypeMethod(glMultiDrawRangeElementArrayAPPLE)
		setPrototypeMethod(glMultiModeDrawArraysIBM)
		setPrototypeMethod(glMultiModeDrawElementsIBM)
		setPrototypeMethod(glMultiTexBufferEXT)
		setPrototypeMethod(glMultiTexCoord1bOES)
		setPrototypeMethod(glMultiTexCoord1bvOES)
		setPrototypeMethod(glMultiTexCoord1d)
		setPrototypeMethod(glMultiTexCoord1dARB)
		setPrototypeMethod(glMultiTexCoord1dv)
		setPrototypeMethod(glMultiTexCoord1dvARB)
		setPrototypeMethod(glMultiTexCoord1f)
		setPrototypeMethod(glMultiTexCoord1fARB)
		setPrototypeMethod(glMultiTexCoord1fv)
		setPrototypeMethod(glMultiTexCoord1fvARB)
		setPrototypeMethod(glMultiTexCoord1hNV)
		setPrototypeMethod(glMultiTexCoord1hvNV)
		setPrototypeMethod(glMultiTexCoord1i)
		setPrototypeMethod(glMultiTexCoord1iARB)
		setPrototypeMethod(glMultiTexCoord1iv)
		setPrototypeMethod(glMultiTexCoord1ivARB)
		setPrototypeMethod(glMultiTexCoord1s)
		setPrototypeMethod(glMultiTexCoord1sARB)
		setPrototypeMethod(glMultiTexCoord1sv)
		setPrototypeMethod(glMultiTexCoord1svARB)
		setPrototypeMethod(glMultiTexCoord1xOES)
		setPrototypeMethod(glMultiTexCoord1xvOES)
		setPrototypeMethod(glMultiTexCoord2bOES)
		setPrototypeMethod(glMultiTexCoord2bvOES)
		setPrototypeMethod(glMultiTexCoord2d)
		setPrototypeMethod(glMultiTexCoord2dARB)
		setPrototypeMethod(glMultiTexCoord2dv)
		setPrototypeMethod(glMultiTexCoord2dvARB)
		setPrototypeMethod(glMultiTexCoord2f)
		setPrototypeMethod(glMultiTexCoord2fARB)
		setPrototypeMethod(glMultiTexCoord2fv)
		setPrototypeMethod(glMultiTexCoord2fvARB)
		setPrototypeMethod(glMultiTexCoord2hNV)
		setPrototypeMethod(glMultiTexCoord2hvNV)
		setPrototypeMethod(glMultiTexCoord2i)
		setPrototypeMethod(glMultiTexCoord2iARB)
		setPrototypeMethod(glMultiTexCoord2iv)
		setPrototypeMethod(glMultiTexCoord2ivARB)
		setPrototypeMethod(glMultiTexCoord2s)
		setPrototypeMethod(glMultiTexCoord2sARB)
		setPrototypeMethod(glMultiTexCoord2sv)
		setPrototypeMethod(glMultiTexCoord2svARB)
		setPrototypeMethod(glMultiTexCoord2xOES)
		setPrototypeMethod(glMultiTexCoord2xvOES)
		setPrototypeMethod(glMultiTexCoord3bOES)
		setPrototypeMethod(glMultiTexCoord3bvOES)
		setPrototypeMethod(glMultiTexCoord3d)
		setPrototypeMethod(glMultiTexCoord3dARB)
		setPrototypeMethod(glMultiTexCoord3dv)
		setPrototypeMethod(glMultiTexCoord3dvARB)
		setPrototypeMethod(glMultiTexCoord3f)
		setPrototypeMethod(glMultiTexCoord3fARB)
		setPrototypeMethod(glMultiTexCoord3fv)
		setPrototypeMethod(glMultiTexCoord3fvARB)
		setPrototypeMethod(glMultiTexCoord3hNV)
		setPrototypeMethod(glMultiTexCoord3hvNV)
		setPrototypeMethod(glMultiTexCoord3i)
		setPrototypeMethod(glMultiTexCoord3iARB)
		setPrototypeMethod(glMultiTexCoord3iv)
		setPrototypeMethod(glMultiTexCoord3ivARB)
		setPrototypeMethod(glMultiTexCoord3s)
		setPrototypeMethod(glMultiTexCoord3sARB)
		setPrototypeMethod(glMultiTexCoord3sv)
		setPrototypeMethod(glMultiTexCoord3svARB)
		setPrototypeMethod(glMultiTexCoord3xOES)
		setPrototypeMethod(glMultiTexCoord3xvOES)
		setPrototypeMethod(glMultiTexCoord4bOES)
		setPrototypeMethod(glMultiTexCoord4bvOES)
		setPrototypeMethod(glMultiTexCoord4d)
		setPrototypeMethod(glMultiTexCoord4dARB)
		setPrototypeMethod(glMultiTexCoord4dv)
		setPrototypeMethod(glMultiTexCoord4dvARB)
		setPrototypeMethod(glMultiTexCoord4f)
		setPrototypeMethod(glMultiTexCoord4fARB)
		setPrototypeMethod(glMultiTexCoord4fv)
		setPrototypeMethod(glMultiTexCoord4fvARB)
		setPrototypeMethod(glMultiTexCoord4hNV)
		setPrototypeMethod(glMultiTexCoord4hvNV)
		setPrototypeMethod(glMultiTexCoord4i)
		setPrototypeMethod(glMultiTexCoord4iARB)
		setPrototypeMethod(glMultiTexCoord4iv)
		setPrototypeMethod(glMultiTexCoord4ivARB)
		setPrototypeMethod(glMultiTexCoord4s)
		setPrototypeMethod(glMultiTexCoord4sARB)
		setPrototypeMethod(glMultiTexCoord4sv)
		setPrototypeMethod(glMultiTexCoord4svARB)
		setPrototypeMethod(glMultiTexCoord4x)
		setPrototypeMethod(glMultiTexCoord4xOES)
		setPrototypeMethod(glMultiTexCoord4xvOES)
		setPrototypeMethod(glMultiTexCoordP1ui)
		setPrototypeMethod(glMultiTexCoordP1uiv)
		setPrototypeMethod(glMultiTexCoordP2ui)
		setPrototypeMethod(glMultiTexCoordP2uiv)
		setPrototypeMethod(glMultiTexCoordP3ui)
		setPrototypeMethod(glMultiTexCoordP3uiv)
		setPrototypeMethod(glMultiTexCoordP4ui)
		setPrototypeMethod(glMultiTexCoordP4uiv)
		setPrototypeMethod(glMultiTexCoordPointerEXT)
		setPrototypeMethod(glMultiTexEnvfEXT)
		setPrototypeMethod(glMultiTexEnvfvEXT)
		setPrototypeMethod(glMultiTexEnviEXT)
		setPrototypeMethod(glMultiTexEnvivEXT)
		setPrototypeMethod(glMultiTexGendEXT)
		setPrototypeMethod(glMultiTexGendvEXT)
		setPrototypeMethod(glMultiTexGenfEXT)
		setPrototypeMethod(glMultiTexGenfvEXT)
		setPrototypeMethod(glMultiTexGeniEXT)
		setPrototypeMethod(glMultiTexGenivEXT)
		setPrototypeMethod(glMultiTexImage1DEXT)
		setPrototypeMethod(glMultiTexImage2DEXT)
		setPrototypeMethod(glMultiTexImage3DEXT)
		setPrototypeMethod(glMultiTexParameterIivEXT)
		setPrototypeMethod(glMultiTexParameterIuivEXT)
		setPrototypeMethod(glMultiTexParameterfEXT)
		setPrototypeMethod(glMultiTexParameterfvEXT)
		setPrototypeMethod(glMultiTexParameteriEXT)
		setPrototypeMethod(glMultiTexParameterivEXT)
		setPrototypeMethod(glMultiTexRenderbufferEXT)
		setPrototypeMethod(glMultiTexSubImage1DEXT)
		setPrototypeMethod(glMultiTexSubImage2DEXT)
		setPrototypeMethod(glMultiTexSubImage3DEXT)
		setPrototypeMethod(glNamedBufferDataEXT)
		setPrototypeMethod(glNamedBufferStorageEXT)
		setPrototypeMethod(glNamedBufferSubDataEXT)
		setPrototypeMethod(glNamedCopyBufferSubDataEXT)
		setPrototypeMethod(glNamedFramebufferParameteriEXT)
		setPrototypeMethod(glNamedFramebufferRenderbufferEXT)
		setPrototypeMethod(glNamedFramebufferTexture1DEXT)
		setPrototypeMethod(glNamedFramebufferTexture2DEXT)
		setPrototypeMethod(glNamedFramebufferTexture3DEXT)
		setPrototypeMethod(glNamedFramebufferTextureEXT)
		setPrototypeMethod(glNamedFramebufferTextureFaceEXT)
		setPrototypeMethod(glNamedFramebufferTextureLayerEXT)
		setPrototypeMethod(glNamedProgramLocalParameter4dEXT)
		setPrototypeMethod(glNamedProgramLocalParameter4dvEXT)
		setPrototypeMethod(glNamedProgramLocalParameter4fEXT)
		setPrototypeMethod(glNamedProgramLocalParameter4fvEXT)
		setPrototypeMethod(glNamedProgramLocalParameterI4iEXT)
		setPrototypeMethod(glNamedProgramLocalParameterI4ivEXT)
		setPrototypeMethod(glNamedProgramLocalParameterI4uiEXT)
		setPrototypeMethod(glNamedProgramLocalParameterI4uivEXT)
		setPrototypeMethod(glNamedProgramLocalParameters4fvEXT)
		setPrototypeMethod(glNamedProgramLocalParametersI4ivEXT)
		setPrototypeMethod(glNamedProgramLocalParametersI4uivEXT)
		setPrototypeMethod(glNamedProgramStringEXT)
		setPrototypeMethod(glNamedRenderbufferStorageEXT)
		setPrototypeMethod(glNamedRenderbufferStorageMultisampleCoverageEXT)
		setPrototypeMethod(glNamedRenderbufferStorageMultisampleEXT)
		setPrototypeMethod(glNamedStringARB)
		setPrototypeMethod(glNewList)
		setPrototypeMethod(glNewObjectBufferATI)
		setPrototypeMethod(glNormal3b)
		setPrototypeMethod(glNormal3bv)
		setPrototypeMethod(glNormal3d)
		setPrototypeMethod(glNormal3dv)
		setPrototypeMethod(glNormal3f)
		setPrototypeMethod(glNormal3fVertex3fSUN)
		setPrototypeMethod(glNormal3fVertex3fvSUN)
		setPrototypeMethod(glNormal3fv)
		setPrototypeMethod(glNormal3hNV)
		setPrototypeMethod(glNormal3hvNV)
		setPrototypeMethod(glNormal3i)
		setPrototypeMethod(glNormal3iv)
		setPrototypeMethod(glNormal3s)
		setPrototypeMethod(glNormal3sv)
		setPrototypeMethod(glNormal3x)
		setPrototypeMethod(glNormal3xOES)
		setPrototypeMethod(glNormal3xvOES)
		setPrototypeMethod(glNormalFormatNV)
		setPrototypeMethod(glNormalP3ui)
		setPrototypeMethod(glNormalP3uiv)
		setPrototypeMethod(glNormalPointer)
		setPrototypeMethod(glNormalPointerEXT)
		setPrototypeMethod(glNormalPointerListIBM)
		setPrototypeMethod(glNormalPointervINTEL)
		setPrototypeMethod(glNormalStream3bATI)
		setPrototypeMethod(glNormalStream3bvATI)
		setPrototypeMethod(glNormalStream3dATI)
		setPrototypeMethod(glNormalStream3dvATI)
		setPrototypeMethod(glNormalStream3fATI)
		setPrototypeMethod(glNormalStream3fvATI)
		setPrototypeMethod(glNormalStream3iATI)
		setPrototypeMethod(glNormalStream3ivATI)
		setPrototypeMethod(glNormalStream3sATI)
		setPrototypeMethod(glNormalStream3svATI)
		setPrototypeMethod(glObjectLabel)
		setPrototypeMethod(glObjectLabelKHR)
		setPrototypeMethod(glObjectPtrLabel)
		setPrototypeMethod(glObjectPtrLabelKHR)
		setPrototypeMethod(glObjectPurgeableAPPLE)
		setPrototypeMethod(glObjectUnpurgeableAPPLE)
		setPrototypeMethod(glOrtho)
		setPrototypeMethod(glOrthof)
		setPrototypeMethod(glOrthofOES)
		setPrototypeMethod(glOrthox)
		setPrototypeMethod(glOrthoxOES)
		setPrototypeMethod(glPNTrianglesfATI)
		setPrototypeMethod(glPNTrianglesiATI)
		setPrototypeMethod(glPassTexCoordATI)
		setPrototypeMethod(glPassThrough)
		setPrototypeMethod(glPassThroughxOES)
		setPrototypeMethod(glPatchParameterfv)
		setPrototypeMethod(glPatchParameteri)
		setPrototypeMethod(glPatchParameteriEXT)
		setPrototypeMethod(glPathColorGenNV)
		setPrototypeMethod(glPathCommandsNV)
		setPrototypeMethod(glPathCoordsNV)
		setPrototypeMethod(glPathCoverDepthFuncNV)
		setPrototypeMethod(glPathDashArrayNV)
		setPrototypeMethod(glPathFogGenNV)
		setPrototypeMethod(glPathGlyphRangeNV)
		setPrototypeMethod(glPathGlyphsNV)
		setPrototypeMethod(glPathParameterfNV)
		setPrototypeMethod(glPathParameterfvNV)
		setPrototypeMethod(glPathParameteriNV)
		setPrototypeMethod(glPathParameterivNV)
		setPrototypeMethod(glPathStencilDepthOffsetNV)
		setPrototypeMethod(glPathStencilFuncNV)
		setPrototypeMethod(glPathStringNV)
		setPrototypeMethod(glPathSubCommandsNV)
		setPrototypeMethod(glPathSubCoordsNV)
		setPrototypeMethod(glPathTexGenNV)
		setPrototypeMethod(glPauseTransformFeedback)
		setPrototypeMethod(glPauseTransformFeedbackNV)
		setPrototypeMethod(glPixelDataRangeNV)
		setPrototypeMethod(glPixelMapfv)
		setPrototypeMethod(glPixelMapuiv)
		setPrototypeMethod(glPixelMapusv)
		setPrototypeMethod(glPixelMapx)
		setPrototypeMethod(glPixelStoref)
		setPrototypeMethod(glPixelStorei)
		setPrototypeMethod(glPixelStorex)
		setPrototypeMethod(glPixelTexGenParameterfSGIS)
		setPrototypeMethod(glPixelTexGenParameterfvSGIS)
		setPrototypeMethod(glPixelTexGenParameteriSGIS)
		setPrototypeMethod(glPixelTexGenParameterivSGIS)
		setPrototypeMethod(glPixelTexGenSGIX)
		setPrototypeMethod(glPixelTransferf)
		setPrototypeMethod(glPixelTransferi)
		setPrototypeMethod(glPixelTransferxOES)
		setPrototypeMethod(glPixelTransformParameterfEXT)
		setPrototypeMethod(glPixelTransformParameterfvEXT)
		setPrototypeMethod(glPixelTransformParameteriEXT)
		setPrototypeMethod(glPixelTransformParameterivEXT)
		setPrototypeMethod(glPixelZoom)
		setPrototypeMethod(glPixelZoomxOES)
		setPrototypeMethod(glPointAlongPathNV)
		setPrototypeMethod(glPointParameterf)
		setPrototypeMethod(glPointParameterfARB)
		setPrototypeMethod(glPointParameterfEXT)
		setPrototypeMethod(glPointParameterfSGIS)
		setPrototypeMethod(glPointParameterfv)
		setPrototypeMethod(glPointParameterfvARB)
		setPrototypeMethod(glPointParameterfvEXT)
		setPrototypeMethod(glPointParameterfvSGIS)
		setPrototypeMethod(glPointParameteri)
		setPrototypeMethod(glPointParameteriNV)
		setPrototypeMethod(glPointParameteriv)
		setPrototypeMethod(glPointParameterivNV)
		setPrototypeMethod(glPointParameterx)
		setPrototypeMethod(glPointParameterxOES)
		setPrototypeMethod(glPointParameterxv)
		setPrototypeMethod(glPointParameterxvOES)
		setPrototypeMethod(glPointSize)
		setPrototypeMethod(glPointSizePointerOES)
		setPrototypeMethod(glPointSizex)
		setPrototypeMethod(glPointSizexOES)
		setPrototypeMethod(glPollAsyncSGIX)
		setPrototypeMethod(glPollInstrumentsSGIX)
		setPrototypeMethod(glPolygonMode)
		setPrototypeMethod(glPolygonOffset)
		setPrototypeMethod(glPolygonOffsetEXT)
		setPrototypeMethod(glPolygonOffsetx)
		setPrototypeMethod(glPolygonOffsetxOES)
		setPrototypeMethod(glPolygonStipple)
		setPrototypeMethod(glPopAttrib)
		setPrototypeMethod(glPopClientAttrib)
		setPrototypeMethod(glPopDebugGroup)
		setPrototypeMethod(glPopDebugGroupKHR)
		setPrototypeMethod(glPopGroupMarkerEXT)
		setPrototypeMethod(glPopMatrix)
		setPrototypeMethod(glPopName)
		setPrototypeMethod(glPresentFrameDualFillNV)
		setPrototypeMethod(glPresentFrameKeyedNV)
		setPrototypeMethod(glPrimitiveRestartIndex)
		setPrototypeMethod(glPrimitiveRestartIndexNV)
		setPrototypeMethod(glPrimitiveRestartNV)
		setPrototypeMethod(glPrioritizeTextures)
		setPrototypeMethod(glPrimitiveBoundingBoxEXT)
		setPrototypeMethod(glPrioritizeTexturesEXT)
		setPrototypeMethod(glPrioritizeTexturesxOES)
		setPrototypeMethod(glProgramBinary)
		setPrototypeMethod(glProgramBinaryOES)
		setPrototypeMethod(glProgramBufferParametersIivNV)
		setPrototypeMethod(glProgramBufferParametersIuivNV)
		setPrototypeMethod(glProgramBufferParametersfvNV)
		setPrototypeMethod(glProgramEnvParameter4dARB)
		setPrototypeMethod(glProgramEnvParameter4dvARB)
		setPrototypeMethod(glProgramEnvParameter4fARB)
		setPrototypeMethod(glProgramEnvParameter4fvARB)
		setPrototypeMethod(glProgramEnvParameterI4iNV)
		setPrototypeMethod(glProgramEnvParameterI4ivNV)
		setPrototypeMethod(glProgramEnvParameterI4uiNV)
		setPrototypeMethod(glProgramEnvParameterI4uivNV)
		setPrototypeMethod(glProgramEnvParameters4fvEXT)
		setPrototypeMethod(glProgramEnvParametersI4ivNV)
		setPrototypeMethod(glProgramEnvParametersI4uivNV)
		setPrototypeMethod(glProgramLocalParameter4dARB)
		setPrototypeMethod(glProgramLocalParameter4dvARB)
		setPrototypeMethod(glProgramLocalParameter4fARB)
		setPrototypeMethod(glProgramLocalParameter4fvARB)
		setPrototypeMethod(glProgramLocalParameterI4iNV)
		setPrototypeMethod(glProgramLocalParameterI4ivNV)
		setPrototypeMethod(glProgramLocalParameterI4uiNV)
		setPrototypeMethod(glProgramLocalParameterI4uivNV)
		setPrototypeMethod(glProgramLocalParameters4fvEXT)
		setPrototypeMethod(glProgramLocalParametersI4ivNV)
		setPrototypeMethod(glProgramLocalParametersI4uivNV)
		setPrototypeMethod(glProgramNamedParameter4dNV)
		setPrototypeMethod(glProgramNamedParameter4dvNV)
		setPrototypeMethod(glProgramNamedParameter4fNV)
		setPrototypeMethod(glProgramNamedParameter4fvNV)
		setPrototypeMethod(glProgramParameter4dNV)
		setPrototypeMethod(glProgramParameter4dvNV)
		setPrototypeMethod(glProgramParameter4fNV)
		setPrototypeMethod(glProgramParameter4fvNV)
		setPrototypeMethod(glProgramParameteri)
		setPrototypeMethod(glProgramParameteriARB)
		setPrototypeMethod(glProgramParameteriEXT)
		setPrototypeMethod(glProgramParameters4dvNV)
		setPrototypeMethod(glProgramParameters4fvNV)
		setPrototypeMethod(glProgramStringARB)
		setPrototypeMethod(glProgramSubroutineParametersuivNV)
		setPrototypeMethod(glProgramUniform1d)
		setPrototypeMethod(glProgramUniform1dEXT)
		setPrototypeMethod(glProgramUniform1dv)
		setPrototypeMethod(glProgramUniform1dvEXT)
		setPrototypeMethod(glProgramUniform1f)
		setPrototypeMethod(glProgramUniform1fEXT)
		setPrototypeMethod(glProgramUniform1fv)
		setPrototypeMethod(glProgramUniform1fvEXT)
		setPrototypeMethod(glProgramUniform1i)
		setPrototypeMethod(glProgramUniform1i64NV)
		setPrototypeMethod(glProgramUniform1i64vNV)
		setPrototypeMethod(glProgramUniform1iEXT)
		setPrototypeMethod(glProgramUniform1iv)
		setPrototypeMethod(glProgramUniform1ivEXT)
		setPrototypeMethod(glProgramUniform1ui)
		setPrototypeMethod(glProgramUniform1ui64NV)
		setPrototypeMethod(glProgramUniform1ui64vNV)
		setPrototypeMethod(glProgramUniform1uiEXT)
		setPrototypeMethod(glProgramUniform1uiv)
		setPrototypeMethod(glProgramUniform1uivEXT)
		setPrototypeMethod(glProgramUniform2d)
		setPrototypeMethod(glProgramUniform2dEXT)
		setPrototypeMethod(glProgramUniform2dv)
		setPrototypeMethod(glProgramUniform2dvEXT)
		setPrototypeMethod(glProgramUniform2f)
		setPrototypeMethod(glProgramUniform2fEXT)
		setPrototypeMethod(glProgramUniform2fv)
		setPrototypeMethod(glProgramUniform2fvEXT)
		setPrototypeMethod(glProgramUniform2i)
		setPrototypeMethod(glProgramUniform2i64NV)
		setPrototypeMethod(glProgramUniform2i64vNV)
		setPrototypeMethod(glProgramUniform2iEXT)
		setPrototypeMethod(glProgramUniform2iv)
		setPrototypeMethod(glProgramUniform2ivEXT)
		setPrototypeMethod(glProgramUniform2ui)
		setPrototypeMethod(glProgramUniform2ui64NV)
		setPrototypeMethod(glProgramUniform2ui64vNV)
		setPrototypeMethod(glProgramUniform2uiEXT)
		setPrototypeMethod(glProgramUniform2uiv)
		setPrototypeMethod(glProgramUniform2uivEXT)
		setPrototypeMethod(glProgramUniform3d)
		setPrototypeMethod(glProgramUniform3dEXT)
		setPrototypeMethod(glProgramUniform3dv)
		setPrototypeMethod(glProgramUniform3dvEXT)
		setPrototypeMethod(glProgramUniform3f)
		setPrototypeMethod(glProgramUniform3fEXT)
		setPrototypeMethod(glProgramUniform3fv)
		setPrototypeMethod(glProgramUniform3fvEXT)
		setPrototypeMethod(glProgramUniform3i)
		setPrototypeMethod(glProgramUniform3i64NV)
		setPrototypeMethod(glProgramUniform3i64vNV)
		setPrototypeMethod(glProgramUniform3iEXT)
		setPrototypeMethod(glProgramUniform3iv)
		setPrototypeMethod(glProgramUniform3ivEXT)
		setPrototypeMethod(glProgramUniform3ui)
		setPrototypeMethod(glProgramUniform3ui64NV)
		setPrototypeMethod(glProgramUniform3ui64vNV)
		setPrototypeMethod(glProgramUniform3uiEXT)
		setPrototypeMethod(glProgramUniform3uiv)
		setPrototypeMethod(glProgramUniform3uivEXT)
		setPrototypeMethod(glProgramUniform4d)
		setPrototypeMethod(glProgramUniform4dEXT)
		setPrototypeMethod(glProgramUniform4dv)
		setPrototypeMethod(glProgramUniform4dvEXT)
		setPrototypeMethod(glProgramUniform4f)
		setPrototypeMethod(glProgramUniform4fEXT)
		setPrototypeMethod(glProgramUniform4fv)
		setPrototypeMethod(glProgramUniform4fvEXT)
		setPrototypeMethod(glProgramUniform4i)
		setPrototypeMethod(glProgramUniform4i64NV)
		setPrototypeMethod(glProgramUniform4i64vNV)
		setPrototypeMethod(glProgramUniform4iEXT)
		setPrototypeMethod(glProgramUniform4iv)
		setPrototypeMethod(glProgramUniform4ivEXT)
		setPrototypeMethod(glProgramUniform4ui)
		setPrototypeMethod(glProgramUniform4ui64NV)
		setPrototypeMethod(glProgramUniform4ui64vNV)
		setPrototypeMethod(glProgramUniform4uiEXT)
		setPrototypeMethod(glProgramUniform4uiv)
		setPrototypeMethod(glProgramUniform4uivEXT)
		setPrototypeMethod(glProgramUniformHandleui64ARB)
		setPrototypeMethod(glProgramUniformHandleui64NV)
		setPrototypeMethod(glProgramUniformHandleui64vARB)
		setPrototypeMethod(glProgramUniformHandleui64vNV)
		setPrototypeMethod(glProgramUniformMatrix2dv)
		setPrototypeMethod(glProgramUniformMatrix2dvEXT)
		setPrototypeMethod(glProgramUniformMatrix2fv)
		setPrototypeMethod(glProgramUniformMatrix2fvEXT)
		setPrototypeMethod(glProgramUniformMatrix2x3dv)
		setPrototypeMethod(glProgramUniformMatrix2x3dvEXT)
		setPrototypeMethod(glProgramUniformMatrix2x3fv)
		setPrototypeMethod(glProgramUniformMatrix2x3fvEXT)
		setPrototypeMethod(glProgramUniformMatrix2x4dv)
		setPrototypeMethod(glProgramUniformMatrix2x4dvEXT)
		setPrototypeMethod(glProgramUniformMatrix2x4fv)
		setPrototypeMethod(glProgramUniformMatrix2x4fvEXT)
		setPrototypeMethod(glProgramUniformMatrix3dv)
		setPrototypeMethod(glProgramUniformMatrix3dvEXT)
		setPrototypeMethod(glProgramUniformMatrix3fv)
		setPrototypeMethod(glProgramUniformMatrix3fvEXT)
		setPrototypeMethod(glProgramUniformMatrix3x2dv)
		setPrototypeMethod(glProgramUniformMatrix3x2dvEXT)
		setPrototypeMethod(glProgramUniformMatrix3x2fv)
		setPrototypeMethod(glProgramUniformMatrix3x2fvEXT)
		setPrototypeMethod(glProgramUniformMatrix3x4dv)
		setPrototypeMethod(glProgramUniformMatrix3x4dvEXT)
		setPrototypeMethod(glProgramUniformMatrix3x4fv)
		setPrototypeMethod(glProgramUniformMatrix3x4fvEXT)
		setPrototypeMethod(glProgramUniformMatrix4dv)
		setPrototypeMethod(glProgramUniformMatrix4dvEXT)
		setPrototypeMethod(glProgramUniformMatrix4fv)
		setPrototypeMethod(glProgramUniformMatrix4fvEXT)
		setPrototypeMethod(glProgramUniformMatrix4x2dv)
		setPrototypeMethod(glProgramUniformMatrix4x2dvEXT)
		setPrototypeMethod(glProgramUniformMatrix4x2fv)
		setPrototypeMethod(glProgramUniformMatrix4x2fvEXT)
		setPrototypeMethod(glProgramUniformMatrix4x3dv)
		setPrototypeMethod(glProgramUniformMatrix4x3dvEXT)
		setPrototypeMethod(glProgramUniformMatrix4x3fv)
		setPrototypeMethod(glProgramUniformMatrix4x3fvEXT)
		setPrototypeMethod(glProgramUniformui64NV)
		setPrototypeMethod(glProgramUniformui64vNV)
		setPrototypeMethod(glProgramVertexLimitNV)
		setPrototypeMethod(glProvokingVertex)
		setPrototypeMethod(glProvokingVertexEXT)
		setPrototypeMethod(glPushAttrib)
		setPrototypeMethod(glPushClientAttrib)
		setPrototypeMethod(glPushClientAttribDefaultEXT)
		setPrototypeMethod(glPushDebugGroup)
		setPrototypeMethod(glPushDebugGroupKHR)
		setPrototypeMethod(glPushGroupMarkerEXT)
		setPrototypeMethod(glPushMatrix)
		setPrototypeMethod(glPushName)
		setPrototypeMethod(glQueryCounter)
		setPrototypeMethod(glQueryCounterEXT)
		setPrototypeMethod(glQueryMatrixxOES)
		setPrototypeMethod(glQueryObjectParameteruiAMD)
		setPrototypeMethod(glRasterPos2d)
		setPrototypeMethod(glRasterPos2dv)
		setPrototypeMethod(glRasterPos2f)
		setPrototypeMethod(glRasterPos2fv)
		setPrototypeMethod(glRasterPos2i)
		setPrototypeMethod(glRasterPos2iv)
		setPrototypeMethod(glRasterPos2s)
		setPrototypeMethod(glRasterPos2sv)
		setPrototypeMethod(glRasterPos2xOES)
		setPrototypeMethod(glRasterPos2xvOES)
		setPrototypeMethod(glRasterPos3d)
		setPrototypeMethod(glRasterPos3dv)
		setPrototypeMethod(glRasterPos3f)
		setPrototypeMethod(glRasterPos3fv)
		setPrototypeMethod(glRasterPos3i)
		setPrototypeMethod(glRasterPos3iv)
		setPrototypeMethod(glRasterPos3s)
		setPrototypeMethod(glRasterPos3sv)
		setPrototypeMethod(glRasterPos3xOES)
		setPrototypeMethod(glRasterPos3xvOES)
		setPrototypeMethod(glRasterPos4d)
		setPrototypeMethod(glRasterPos4dv)
		setPrototypeMethod(glRasterPos4f)
		setPrototypeMethod(glRasterPos4fv)
		setPrototypeMethod(glRasterPos4i)
		setPrototypeMethod(glRasterPos4iv)
		setPrototypeMethod(glRasterPos4s)
		setPrototypeMethod(glRasterPos4sv)
		setPrototypeMethod(glRasterPos4xOES)
		setPrototypeMethod(glRasterPos4xvOES)
		setPrototypeMethod(glReadBuffer)
		setPrototypeMethod(glReadBufferIndexedEXT)
		setPrototypeMethod(glReadBufferNV)
		setPrototypeMethod(glReadInstrumentsSGIX)
		setPrototypeMethod(glReadPixels)
		setPrototypeMethod(glReadnPixelsARB)
		setPrototypeMethod(glReadnPixelsEXT)
		setPrototypeMethod(glRectd)
		setPrototypeMethod(glRectdv)
		setPrototypeMethod(glRectf)
		setPrototypeMethod(glRectfv)
		setPrototypeMethod(glRecti)
		setPrototypeMethod(glRectiv)
		setPrototypeMethod(glRects)
		setPrototypeMethod(glRectsv)
		setPrototypeMethod(glRectxOES)
		setPrototypeMethod(glRectxvOES)
		setPrototypeMethod(glReferencePlaneSGIX)
		setPrototypeMethod(glReleaseShaderCompiler)
		setPrototypeMethod(glRenderMode)
		setPrototypeMethod(glRenderbufferStorage)
		setPrototypeMethod(glRenderbufferStorageEXT)
		setPrototypeMethod(glRenderbufferStorageMultisample)
		setPrototypeMethod(glRenderbufferStorageMultisampleANGLE)
		setPrototypeMethod(glRenderbufferStorageMultisampleAPPLE)
		setPrototypeMethod(glRenderbufferStorageMultisampleCoverageNV)
		setPrototypeMethod(glRenderbufferStorageMultisampleEXT)
		setPrototypeMethod(glRenderbufferStorageMultisampleIMG)
		setPrototypeMethod(glRenderbufferStorageMultisampleNV)
		setPrototypeMethod(glRenderbufferStorageOES)
		setPrototypeMethod(glReplacementCodePointerSUN)
		setPrototypeMethod(glReplacementCodeubSUN)
		setPrototypeMethod(glReplacementCodeubvSUN)
		setPrototypeMethod(glReplacementCodeuiColor3fVertex3fSUN)
		setPrototypeMethod(glReplacementCodeuiColor3fVertex3fvSUN)
		setPrototypeMethod(glReplacementCodeuiColor4fNormal3fVertex3fSUN)
		setPrototypeMethod(glReplacementCodeuiColor4fNormal3fVertex3fvSUN)
		setPrototypeMethod(glReplacementCodeuiColor4ubVertex3fSUN)
		setPrototypeMethod(glReplacementCodeuiColor4ubVertex3fvSUN)
		setPrototypeMethod(glReplacementCodeuiNormal3fVertex3fSUN)
		setPrototypeMethod(glReplacementCodeuiNormal3fVertex3fvSUN)
		setPrototypeMethod(glReplacementCodeuiSUN)
		setPrototypeMethod(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)
		setPrototypeMethod(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)
		setPrototypeMethod(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)
		setPrototypeMethod(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)
		setPrototypeMethod(glReplacementCodeuiTexCoord2fVertex3fSUN)
		setPrototypeMethod(glReplacementCodeuiTexCoord2fVertex3fvSUN)
		setPrototypeMethod(glReplacementCodeuiVertex3fSUN)
		setPrototypeMethod(glReplacementCodeuiVertex3fvSUN)
		setPrototypeMethod(glReplacementCodeuivSUN)
		setPrototypeMethod(glReplacementCodeusSUN)
		setPrototypeMethod(glReplacementCodeusvSUN)
		setPrototypeMethod(glRequestResidentProgramsNV)
		setPrototypeMethod(glResetHistogram)
		setPrototypeMethod(glResetHistogramEXT)
		setPrototypeMethod(glResetMinmax)
		setPrototypeMethod(glResetMinmaxEXT)
		setPrototypeMethod(glResizeBuffersMESA)
		setPrototypeMethod(glResolveMultisampleFramebufferAPPLE)
		setPrototypeMethod(glResumeTransformFeedback)
		setPrototypeMethod(glResumeTransformFeedbackNV)
		setPrototypeMethod(glRotated)
		setPrototypeMethod(glRotatef)
		setPrototypeMethod(glRotatex)
		setPrototypeMethod(glRotatexOES)
		setPrototypeMethod(glSampleCoverage)
		setPrototypeMethod(glSampleCoverageARB)
		setPrototypeMethod(glSampleCoverageOES)
		setPrototypeMethod(glSampleCoveragex)
		setPrototypeMethod(glSampleCoveragexOES)
		setPrototypeMethod(glSampleMapATI)
		setPrototypeMethod(glSampleMaskEXT)
		setPrototypeMethod(glSampleMaskIndexedNV)
		setPrototypeMethod(glSampleMaskSGIS)
		setPrototypeMethod(glSampleMaski)
		setPrototypeMethod(glSamplePatternEXT)
		setPrototypeMethod(glSamplePatternSGIS)
		setPrototypeMethod(glSamplerParameterIiv)
		setPrototypeMethod(glSamplerParameterIivEXT)
		setPrototypeMethod(glSamplerParameterIuiv)
		setPrototypeMethod(glSamplerParameterIuivEXT)
		setPrototypeMethod(glSamplerParameterf)
		setPrototypeMethod(glSamplerParameterfv)
		setPrototypeMethod(glSamplerParameteri)
		setPrototypeMethod(glSamplerParameteriv)
		setPrototypeMethod(glScaled)
		setPrototypeMethod(glScalef)
		setPrototypeMethod(glScalex)
		setPrototypeMethod(glScalexOES)
		setPrototypeMethod(glScissor)
		setPrototypeMethod(glScissorArrayv)
		setPrototypeMethod(glScissorIndexed)
		setPrototypeMethod(glScissorIndexedv)
		setPrototypeMethod(glSecondaryColor3b)
		setPrototypeMethod(glSecondaryColor3bEXT)
		setPrototypeMethod(glSecondaryColor3bv)
		setPrototypeMethod(glSecondaryColor3bvEXT)
		setPrototypeMethod(glSecondaryColor3d)
		setPrototypeMethod(glSecondaryColor3dEXT)
		setPrototypeMethod(glSecondaryColor3dv)
		setPrototypeMethod(glSecondaryColor3dvEXT)
		setPrototypeMethod(glSecondaryColor3f)
		setPrototypeMethod(glSecondaryColor3fEXT)
		setPrototypeMethod(glSecondaryColor3fv)
		setPrototypeMethod(glSecondaryColor3fvEXT)
		setPrototypeMethod(glSecondaryColor3hNV)
		setPrototypeMethod(glSecondaryColor3hvNV)
		setPrototypeMethod(glSecondaryColor3i)
		setPrototypeMethod(glSecondaryColor3iEXT)
		setPrototypeMethod(glSecondaryColor3iv)
		setPrototypeMethod(glSecondaryColor3ivEXT)
		setPrototypeMethod(glSecondaryColor3s)
		setPrototypeMethod(glSecondaryColor3sEXT)
		setPrototypeMethod(glSecondaryColor3sv)
		setPrototypeMethod(glSecondaryColor3svEXT)
		setPrototypeMethod(glSecondaryColor3ub)
		setPrototypeMethod(glSecondaryColor3ubEXT)
		setPrototypeMethod(glSecondaryColor3ubv)
		setPrototypeMethod(glSecondaryColor3ubvEXT)
		setPrototypeMethod(glSecondaryColor3ui)
		setPrototypeMethod(glSecondaryColor3uiEXT)
		setPrototypeMethod(glSecondaryColor3uiv)
		setPrototypeMethod(glSecondaryColor3uivEXT)
		setPrototypeMethod(glSecondaryColor3us)
		setPrototypeMethod(glSecondaryColor3usEXT)
		setPrototypeMethod(glSecondaryColor3usv)
		setPrototypeMethod(glSecondaryColor3usvEXT)
		setPrototypeMethod(glSecondaryColorFormatNV)
		setPrototypeMethod(glSecondaryColorP3ui)
		setPrototypeMethod(glSecondaryColorP3uiv)
		setPrototypeMethod(glSecondaryColorPointer)
		setPrototypeMethod(glSecondaryColorPointerEXT)
		setPrototypeMethod(glSecondaryColorPointerListIBM)
		setPrototypeMethod(glSelectBuffer)
		setPrototypeMethod(glSelectPerfMonitorCountersAMD)
		setPrototypeMethod(glSeparableFilter2D)
		setPrototypeMethod(glSeparableFilter2DEXT)
		setPrototypeMethod(glSetFenceAPPLE)
		setPrototypeMethod(glSetFenceNV)
		setPrototypeMethod(glSetFragmentShaderConstantATI)
		setPrototypeMethod(glSetInvariantEXT)
		setPrototypeMethod(glSetLocalConstantEXT)
		setPrototypeMethod(glSetMultisamplefvAMD)
		setPrototypeMethod(glShadeModel)
		setPrototypeMethod(glShaderBinary)
		setPrototypeMethod(glShaderOp1EXT)
		setPrototypeMethod(glShaderOp2EXT)
		setPrototypeMethod(glShaderOp3EXT)
		setPrototypeMethod(glShaderSource)
		setPrototypeMethod(glShaderSourceARB)
		setPrototypeMethod(glShaderStorageBlockBinding)
		setPrototypeMethod(glSharpenTexFuncSGIS)
		setPrototypeMethod(glSpriteParameterfSGIX)
		setPrototypeMethod(glSpriteParameterfvSGIX)
		setPrototypeMethod(glSpriteParameteriSGIX)
		setPrototypeMethod(glSpriteParameterivSGIX)
		setPrototypeMethod(glStartInstrumentsSGIX)
		setPrototypeMethod(glStartTilingQCOM)
		setPrototypeMethod(glStencilClearTagEXT)
		setPrototypeMethod(glStencilFillPathInstancedNV)
		setPrototypeMethod(glStencilFillPathNV)
		setPrototypeMethod(glStencilFunc)
		setPrototypeMethod(glStencilFuncSeparate)
		setPrototypeMethod(glStencilFuncSeparateATI)
		setPrototypeMethod(glStencilMask)
		setPrototypeMethod(glStencilMaskSeparate)
		setPrototypeMethod(glStencilOp)
		setPrototypeMethod(glStencilOpSeparate)
		setPrototypeMethod(glStencilOpSeparateATI)
		setPrototypeMethod(glStencilOpValueAMD)
		setPrototypeMethod(glStencilStrokePathInstancedNV)
		setPrototypeMethod(glStencilStrokePathNV)
		setPrototypeMethod(glStopInstrumentsSGIX)
		setPrototypeMethod(glStringMarkerGREMEDY)
		setPrototypeMethod(glSwizzleEXT)
		setPrototypeMethod(glSyncTextureINTEL)
		setPrototypeMethod(glTagSampleBufferSGIX)
		setPrototypeMethod(glTangent3bEXT)
		setPrototypeMethod(glTangent3bvEXT)
		setPrototypeMethod(glTangent3dEXT)
		setPrototypeMethod(glTangent3dvEXT)
		setPrototypeMethod(glTangent3fEXT)
		setPrototypeMethod(glTangent3fvEXT)
		setPrototypeMethod(glTangent3iEXT)
		setPrototypeMethod(glTangent3ivEXT)
		setPrototypeMethod(glTangent3sEXT)
		setPrototypeMethod(glTangent3svEXT)
		setPrototypeMethod(glTangentPointerEXT)
		setPrototypeMethod(glTbufferMask3DFX)
		setPrototypeMethod(glTessellationFactorAMD)
		setPrototypeMethod(glTessellationModeAMD)
		setPrototypeMethod(glTestFenceAPPLE)
		setPrototypeMethod(glTestFenceNV)
		setPrototypeMethod(glTestObjectAPPLE)
		setPrototypeMethod(glTexBuffer)
		setPrototypeMethod(glTexBufferARB)
		setPrototypeMethod(glTexBufferEXT)
		setPrototypeMethod(glTexBufferRange)
		setPrototypeMethod(glTexBufferRangeEXT)
		setPrototypeMethod(glTexBumpParameterfvATI)
		setPrototypeMethod(glTexBumpParameterivATI)
		setPrototypeMethod(glTexCoord1bOES)
		setPrototypeMethod(glTexCoord1bvOES)
		setPrototypeMethod(glTexCoord1d)
		setPrototypeMethod(glTexCoord1dv)
		setPrototypeMethod(glTexCoord1f)
		setPrototypeMethod(glTexCoord1fv)
		setPrototypeMethod(glTexCoord1hNV)
		setPrototypeMethod(glTexCoord1hvNV)
		setPrototypeMethod(glTexCoord1i)
		setPrototypeMethod(glTexCoord1iv)
		setPrototypeMethod(glTexCoord1s)
		setPrototypeMethod(glTexCoord1sv)
		setPrototypeMethod(glTexCoord1xOES)
		setPrototypeMethod(glTexCoord1xvOES)
		setPrototypeMethod(glTexCoord2bOES)
		setPrototypeMethod(glTexCoord2bvOES)
		setPrototypeMethod(glTexCoord2d)
		setPrototypeMethod(glTexCoord2dv)
		setPrototypeMethod(glTexCoord2f)
		setPrototypeMethod(glTexCoord2fColor3fVertex3fSUN)
		setPrototypeMethod(glTexCoord2fColor3fVertex3fvSUN)
		setPrototypeMethod(glTexCoord2fColor4fNormal3fVertex3fSUN)
		setPrototypeMethod(glTexCoord2fColor4fNormal3fVertex3fvSUN)
		setPrototypeMethod(glTexCoord2fColor4ubVertex3fSUN)
		setPrototypeMethod(glTexCoord2fColor4ubVertex3fvSUN)
		setPrototypeMethod(glTexCoord2fNormal3fVertex3fSUN)
		setPrototypeMethod(glTexCoord2fNormal3fVertex3fvSUN)
		setPrototypeMethod(glTexCoord2fVertex3fSUN)
		setPrototypeMethod(glTexCoord2fVertex3fvSUN)
		setPrototypeMethod(glTexCoord2fv)
		setPrototypeMethod(glTexCoord2hNV)
		setPrototypeMethod(glTexCoord2hvNV)
		setPrototypeMethod(glTexCoord2i)
		setPrototypeMethod(glTexCoord2iv)
		setPrototypeMethod(glTexCoord2s)
		setPrototypeMethod(glTexCoord2sv)
		setPrototypeMethod(glTexCoord2xOES)
		setPrototypeMethod(glTexCoord2xvOES)
		setPrototypeMethod(glTexCoord3bOES)
		setPrototypeMethod(glTexCoord3bvOES)
		setPrototypeMethod(glTexCoord3d)
		setPrototypeMethod(glTexCoord3dv)
		setPrototypeMethod(glTexCoord3f)
		setPrototypeMethod(glTexCoord3fv)
		setPrototypeMethod(glTexCoord3hNV)
		setPrototypeMethod(glTexCoord3hvNV)
		setPrototypeMethod(glTexCoord3i)
		setPrototypeMethod(glTexCoord3iv)
		setPrototypeMethod(glTexCoord3s)
		setPrototypeMethod(glTexCoord3sv)
		setPrototypeMethod(glTexCoord3xOES)
		setPrototypeMethod(glTexCoord3xvOES)
		setPrototypeMethod(glTexCoord4bOES)
		setPrototypeMethod(glTexCoord4bvOES)
		setPrototypeMethod(glTexCoord4d)
		setPrototypeMethod(glTexCoord4dv)
		setPrototypeMethod(glTexCoord4f)
		setPrototypeMethod(glTexCoord4fColor4fNormal3fVertex4fSUN)
		setPrototypeMethod(glTexCoord4fColor4fNormal3fVertex4fvSUN)
		setPrototypeMethod(glTexCoord4fVertex4fSUN)
		setPrototypeMethod(glTexCoord4fVertex4fvSUN)
		setPrototypeMethod(glTexCoord4fv)
		setPrototypeMethod(glTexCoord4hNV)
		setPrototypeMethod(glTexCoord4hvNV)
		setPrototypeMethod(glTexCoord4i)
		setPrototypeMethod(glTexCoord4iv)
		setPrototypeMethod(glTexCoord4s)
		setPrototypeMethod(glTexCoord4sv)
		setPrototypeMethod(glTexCoord4xOES)
		setPrototypeMethod(glTexCoord4xvOES)
		setPrototypeMethod(glTexCoordFormatNV)
		setPrototypeMethod(glTexCoordP1ui)
		setPrototypeMethod(glTexCoordP1uiv)
		setPrototypeMethod(glTexCoordP2ui)
		setPrototypeMethod(glTexCoordP2uiv)
		setPrototypeMethod(glTexCoordP3ui)
		setPrototypeMethod(glTexCoordP3uiv)
		setPrototypeMethod(glTexCoordP4ui)
		setPrototypeMethod(glTexCoordP4uiv)
		setPrototypeMethod(glTexCoordPointer)
		setPrototypeMethod(glTexCoordPointerEXT)
		setPrototypeMethod(glTexCoordPointerListIBM)
		setPrototypeMethod(glTexCoordPointervINTEL)
		setPrototypeMethod(glTexEnvf)
		setPrototypeMethod(glTexEnvfv)
		setPrototypeMethod(glTexEnvi)
		setPrototypeMethod(glTexEnviv)
		setPrototypeMethod(glTexEnvx)
		setPrototypeMethod(glTexEnvxOES)
		setPrototypeMethod(glTexEnvxv)
		setPrototypeMethod(glTexEnvxvOES)
		setPrototypeMethod(glTexFilterFuncSGIS)
		setPrototypeMethod(glTexGend)
		setPrototypeMethod(glTexGendv)
		setPrototypeMethod(glTexGenf)
		setPrototypeMethod(glTexGenfOES)
		setPrototypeMethod(glTexGenfv)
		setPrototypeMethod(glTexGenfvOES)
		setPrototypeMethod(glTexGeni)
		setPrototypeMethod(glTexGeniOES)
		setPrototypeMethod(glTexGeniv)
		setPrototypeMethod(glTexGenivOES)
		setPrototypeMethod(glTexGenxOES)
		setPrototypeMethod(glTexGenxvOES)
		setPrototypeMethod(glTexImage1D)
		setPrototypeMethod(glTexImage2D)
		setPrototypeMethod(glTexImage2DMultisample)
		setPrototypeMethod(glTexImage2DMultisampleCoverageNV)
		setPrototypeMethod(glTexImage3D)
		setPrototypeMethod(glTexImage3DEXT)
		setPrototypeMethod(glTexImage3DMultisample)
		setPrototypeMethod(glTexImage3DMultisampleCoverageNV)
		setPrototypeMethod(glTexImage3DOES)
		setPrototypeMethod(glTexImage4DSGIS)
		setPrototypeMethod(glTexPageCommitmentARB)
		setPrototypeMethod(glTexParameterIiv)
		setPrototypeMethod(glTexParameterIivEXT)
		setPrototypeMethod(glTexParameterIuiv)
		setPrototypeMethod(glTexParameterIuivEXT)
		setPrototypeMethod(glTexParameterf)
		setPrototypeMethod(glTexParameterfv)
		setPrototypeMethod(glTexParameteri)
		setPrototypeMethod(glTexParameteriv)
		setPrototypeMethod(glTexParameterx)
		setPrototypeMethod(glTexParameterxOES)
		setPrototypeMethod(glTexParameterxv)
		setPrototypeMethod(glTexParameterxvOES)
		setPrototypeMethod(glTexRenderbufferNV)
		setPrototypeMethod(glTexStorage1D)
		setPrototypeMethod(glTexStorage1DEXT)
		setPrototypeMethod(glTexStorage2D)
		setPrototypeMethod(glTexStorage2DEXT)
		setPrototypeMethod(glTexStorage2DMultisample)
		setPrototypeMethod(glTexStorage3D)
		setPrototypeMethod(glTexStorage3DEXT)
		setPrototypeMethod(glTexStorage3DMultisample)
		setPrototypeMethod(glTexStorage3DMultisampleOES)
		setPrototypeMethod(glTexStorageSparseAMD)
		setPrototypeMethod(glTexSubImage1D)
		setPrototypeMethod(glTexSubImage1DEXT)
		setPrototypeMethod(glTexSubImage2D)
		setPrototypeMethod(glTexSubImage2DEXT)
		setPrototypeMethod(glTexSubImage3D)
		setPrototypeMethod(glTexSubImage3DEXT)
		setPrototypeMethod(glTexSubImage3DOES)
		setPrototypeMethod(glTexSubImage4DSGIS)
		setPrototypeMethod(glTextureBarrierNV)
		setPrototypeMethod(glTextureBufferEXT)
		setPrototypeMethod(glTextureBufferRangeEXT)
		setPrototypeMethod(glTextureColorMaskSGIS)
		setPrototypeMethod(glTextureImage1DEXT)
		setPrototypeMethod(glTextureImage2DEXT)
		setPrototypeMethod(glTextureImage2DMultisampleCoverageNV)
		setPrototypeMethod(glTextureImage2DMultisampleNV)
		setPrototypeMethod(glTextureImage3DEXT)
		setPrototypeMethod(glTextureImage3DMultisampleCoverageNV)
		setPrototypeMethod(glTextureImage3DMultisampleNV)
		setPrototypeMethod(glTextureLightEXT)
		setPrototypeMethod(glTextureMaterialEXT)
		setPrototypeMethod(glTextureNormalEXT)
		setPrototypeMethod(glTexturePageCommitmentEXT)
		setPrototypeMethod(glTextureParameterIivEXT)
		setPrototypeMethod(glTextureParameterIuivEXT)
		setPrototypeMethod(glTextureParameterfEXT)
		setPrototypeMethod(glTextureParameterfvEXT)
		setPrototypeMethod(glTextureParameteriEXT)
		setPrototypeMethod(glTextureParameterivEXT)
		setPrototypeMethod(glTextureRangeAPPLE)
		setPrototypeMethod(glTextureRenderbufferEXT)
		setPrototypeMethod(glTextureStorage1DEXT)
		setPrototypeMethod(glTextureStorage2DEXT)
		setPrototypeMethod(glTextureStorage2DMultisampleEXT)
		setPrototypeMethod(glTextureStorage3DEXT)
		setPrototypeMethod(glTextureStorage3DMultisampleEXT)
		setPrototypeMethod(glTextureStorageSparseAMD)
		setPrototypeMethod(glTextureSubImage1DEXT)
		setPrototypeMethod(glTextureSubImage2DEXT)
		setPrototypeMethod(glTextureSubImage3DEXT)
		setPrototypeMethod(glTextureView)
		setPrototypeMethod(glTextureViewEXT)
		setPrototypeMethod(glTrackMatrixNV)
		setPrototypeMethod(glTransformFeedbackAttribsNV)
		setPrototypeMethod(glTransformFeedbackStreamAttribsNV)
		setPrototypeMethod(glTransformFeedbackVaryings)
		setPrototypeMethod(glTransformFeedbackVaryingsEXT)
		setPrototypeMethod(glTransformFeedbackVaryingsNV)
		setPrototypeMethod(glTransformPathNV)
		setPrototypeMethod(glTranslated)
		setPrototypeMethod(glTranslatef)
		setPrototypeMethod(glTranslatex)
		setPrototypeMethod(glTranslatexOES)
		setPrototypeMethod(glUniform1d)
		setPrototypeMethod(glUniform1dv)
		setPrototypeMethod(glUniform1f)
		setPrototypeMethod(glUniform1fARB)
		setPrototypeMethod(glUniform1fv)
		setPrototypeMethod(glUniform1fvARB)
		setPrototypeMethod(glUniform1i)
		setPrototypeMethod(glUniform1i64NV)
		setPrototypeMethod(glUniform1i64vNV)
		setPrototypeMethod(glUniform1iARB)
		setPrototypeMethod(glUniform1iv)
		setPrototypeMethod(glUniform1ivARB)
		setPrototypeMethod(glUniform1ui)
		setPrototypeMethod(glUniform1ui64NV)
		setPrototypeMethod(glUniform1ui64vNV)
		setPrototypeMethod(glUniform1uiEXT)
		setPrototypeMethod(glUniform1uiv)
		setPrototypeMethod(glUniform1uivEXT)
		setPrototypeMethod(glUniform2d)
		setPrototypeMethod(glUniform2dv)
		setPrototypeMethod(glUniform2f)
		setPrototypeMethod(glUniform2fARB)
		setPrototypeMethod(glUniform2fv)
		setPrototypeMethod(glUniform2fvARB)
		setPrototypeMethod(glUniform2i)
		setPrototypeMethod(glUniform2i64NV)
		setPrototypeMethod(glUniform2i64vNV)
		setPrototypeMethod(glUniform2iARB)
		setPrototypeMethod(glUniform2iv)
		setPrototypeMethod(glUniform2ivARB)
		setPrototypeMethod(glUniform2ui)
		setPrototypeMethod(glUniform2ui64NV)
		setPrototypeMethod(glUniform2ui64vNV)
		setPrototypeMethod(glUniform2uiEXT)
		setPrototypeMethod(glUniform2uiv)
		setPrototypeMethod(glUniform2uivEXT)
		setPrototypeMethod(glUniform3d)
		setPrototypeMethod(glUniform3dv)
		setPrototypeMethod(glUniform3f)
		setPrototypeMethod(glUniform3fARB)
		setPrototypeMethod(glUniform3fv)
		setPrototypeMethod(glUniform3fvARB)
		setPrototypeMethod(glUniform3i)
		setPrototypeMethod(glUniform3i64NV)
		setPrototypeMethod(glUniform3i64vNV)
		setPrototypeMethod(glUniform3iARB)
		setPrototypeMethod(glUniform3iv)
		setPrototypeMethod(glUniform3ivARB)
		setPrototypeMethod(glUniform3ui)
		setPrototypeMethod(glUniform3ui64NV)
		setPrototypeMethod(glUniform3ui64vNV)
		setPrototypeMethod(glUniform3uiEXT)
		setPrototypeMethod(glUniform3uiv)
		setPrototypeMethod(glUniform3uivEXT)
		setPrototypeMethod(glUniform4d)
		setPrototypeMethod(glUniform4dv)
		setPrototypeMethod(glUniform4f)
		setPrototypeMethod(glUniform4fARB)
		setPrototypeMethod(glUniform4fv)
		setPrototypeMethod(glUniform4fvARB)
		setPrototypeMethod(glUniform4i)
		setPrototypeMethod(glUniform4i64NV)
		setPrototypeMethod(glUniform4i64vNV)
		setPrototypeMethod(glUniform4iARB)
		setPrototypeMethod(glUniform4iv)
		setPrototypeMethod(glUniform4ivARB)
		setPrototypeMethod(glUniform4ui)
		setPrototypeMethod(glUniform4ui64NV)
		setPrototypeMethod(glUniform4ui64vNV)
		setPrototypeMethod(glUniform4uiEXT)
		setPrototypeMethod(glUniform4uiv)
		setPrototypeMethod(glUniform4uivEXT)
		setPrototypeMethod(glUniformBlockBinding)
		setPrototypeMethod(glUniformBufferEXT)
		setPrototypeMethod(glUniformHandleui64ARB)
		setPrototypeMethod(glUniformHandleui64NV)
		setPrototypeMethod(glUniformHandleui64vARB)
		setPrototypeMethod(glUniformHandleui64vNV)
		setPrototypeMethod(glUniformMatrix2dv)
		setPrototypeMethod(glUniformMatrix2fv)
		setPrototypeMethod(glUniformMatrix2fvARB)
		setPrototypeMethod(glUniformMatrix2x3dv)
		setPrototypeMethod(glUniformMatrix2x3fv)
		setPrototypeMethod(glUniformMatrix2x3fvNV)
		setPrototypeMethod(glUniformMatrix2x4dv)
		setPrototypeMethod(glUniformMatrix2x4fv)
		setPrototypeMethod(glUniformMatrix2x4fvNV)
		setPrototypeMethod(glUniformMatrix3dv)
		setPrototypeMethod(glUniformMatrix3fv)
		setPrototypeMethod(glUniformMatrix3fvARB)
		setPrototypeMethod(glUniformMatrix3x2dv)
		setPrototypeMethod(glUniformMatrix3x2fv)
		setPrototypeMethod(glUniformMatrix3x2fvNV)
		setPrototypeMethod(glUniformMatrix3x4dv)
		setPrototypeMethod(glUniformMatrix3x4fv)
		setPrototypeMethod(glUniformMatrix3x4fvNV)
		setPrototypeMethod(glUniformMatrix4dv)
		setPrototypeMethod(glUniformMatrix4fv)
		setPrototypeMethod(glUniformMatrix4fvARB)
		setPrototypeMethod(glUniformMatrix4x2dv)
		setPrototypeMethod(glUniformMatrix4x2fv)
		setPrototypeMethod(glUniformMatrix4x2fvNV)
		setPrototypeMethod(glUniformMatrix4x3dv)
		setPrototypeMethod(glUniformMatrix4x3fv)
		setPrototypeMethod(glUniformMatrix4x3fvNV)
		setPrototypeMethod(glUniformSubroutinesuiv)
		setPrototypeMethod(glUniformui64NV)
		setPrototypeMethod(glUniformui64vNV)
		setPrototypeMethod(glUnlockArraysEXT)
		setPrototypeMethod(glUnmapBuffer)
		setPrototypeMethod(glUnmapBufferARB)
		setPrototypeMethod(glUnmapBufferOES)
		setPrototypeMethod(glUnmapNamedBufferEXT)
		setPrototypeMethod(glUnmapObjectBufferATI)
		setPrototypeMethod(glUnmapTexture2DINTEL)
		setPrototypeMethod(glUpdateObjectBufferATI)
		setPrototypeMethod(glUseProgram)
		setPrototypeMethod(glUseProgramObjectARB)
		setPrototypeMethod(glUseProgramStages)
		setPrototypeMethod(glUseProgramStagesEXT)
		setPrototypeMethod(glUseShaderProgramEXT)
		setPrototypeMethod(glVDPAUFiniNV)
		setPrototypeMethod(glVDPAUGetSurfaceivNV)
		setPrototypeMethod(glVDPAUInitNV)
		setPrototypeMethod(glVDPAUIsSurfaceNV)
		setPrototypeMethod(glVDPAUMapSurfacesNV)
		setPrototypeMethod(glVDPAURegisterOutputSurfaceNV)
		setPrototypeMethod(glVDPAURegisterVideoSurfaceNV)
		setPrototypeMethod(glVDPAUSurfaceAccessNV)
		setPrototypeMethod(glVDPAUUnmapSurfacesNV)
		setPrototypeMethod(glVDPAUUnregisterSurfaceNV)
		setPrototypeMethod(glValidateProgram)
		setPrototypeMethod(glValidateProgramARB)
		setPrototypeMethod(glValidateProgramPipeline)
		setPrototypeMethod(glValidateProgramPipelineEXT)
		setPrototypeMethod(glVariantArrayObjectATI)
		setPrototypeMethod(glVariantPointerEXT)
		setPrototypeMethod(glVariantbvEXT)
		setPrototypeMethod(glVariantdvEXT)
		setPrototypeMethod(glVariantfvEXT)
		setPrototypeMethod(glVariantivEXT)
		setPrototypeMethod(glVariantsvEXT)
		setPrototypeMethod(glVariantubvEXT)
		setPrototypeMethod(glVariantuivEXT)
		setPrototypeMethod(glVariantusvEXT)
		setPrototypeMethod(glVertex2bOES)
		setPrototypeMethod(glVertex2bvOES)
		setPrototypeMethod(glVertex2d)
		setPrototypeMethod(glVertex2dv)
		setPrototypeMethod(glVertex2f)
		setPrototypeMethod(glVertex2fv)
		setPrototypeMethod(glVertex2hNV)
		setPrototypeMethod(glVertex2hvNV)
		setPrototypeMethod(glVertex2i)
		setPrototypeMethod(glVertex2iv)
		setPrototypeMethod(glVertex2s)
		setPrototypeMethod(glVertex2sv)
		setPrototypeMethod(glVertex2xOES)
		setPrototypeMethod(glVertex2xvOES)
		setPrototypeMethod(glVertex3bOES)
		setPrototypeMethod(glVertex3bvOES)
		setPrototypeMethod(glVertex3d)
		setPrototypeMethod(glVertex3dv)
		setPrototypeMethod(glVertex3f)
		setPrototypeMethod(glVertex3fv)
		setPrototypeMethod(glVertex3hNV)
		setPrototypeMethod(glVertex3hvNV)
		setPrototypeMethod(glVertex3i)
		setPrototypeMethod(glVertex3iv)
		setPrototypeMethod(glVertex3s)
		setPrototypeMethod(glVertex3sv)
		setPrototypeMethod(glVertex3xOES)
		setPrototypeMethod(glVertex3xvOES)
		setPrototypeMethod(glVertex4bOES)
		setPrototypeMethod(glVertex4bvOES)
		setPrototypeMethod(glVertex4d)
		setPrototypeMethod(glVertex4dv)
		setPrototypeMethod(glVertex4f)
		setPrototypeMethod(glVertex4fv)
		setPrototypeMethod(glVertex4hNV)
		setPrototypeMethod(glVertex4hvNV)
		setPrototypeMethod(glVertex4i)
		setPrototypeMethod(glVertex4iv)
		setPrototypeMethod(glVertex4s)
		setPrototypeMethod(glVertex4sv)
		setPrototypeMethod(glVertex4xOES)
		setPrototypeMethod(glVertex4xvOES)
		setPrototypeMethod(glVertexArrayBindVertexBufferEXT)
		setPrototypeMethod(glVertexArrayColorOffsetEXT)
		setPrototypeMethod(glVertexArrayEdgeFlagOffsetEXT)
		setPrototypeMethod(glVertexArrayFogCoordOffsetEXT)
		setPrototypeMethod(glVertexArrayIndexOffsetEXT)
		setPrototypeMethod(glVertexArrayMultiTexCoordOffsetEXT)
		setPrototypeMethod(glVertexArrayNormalOffsetEXT)
		setPrototypeMethod(glVertexArrayParameteriAPPLE)
		setPrototypeMethod(glVertexArrayRangeAPPLE)
		setPrototypeMethod(glVertexArrayRangeNV)
		setPrototypeMethod(glVertexArraySecondaryColorOffsetEXT)
		setPrototypeMethod(glVertexArrayTexCoordOffsetEXT)
		setPrototypeMethod(glVertexArrayVertexAttribBindingEXT)
		setPrototypeMethod(glVertexArrayVertexAttribDivisorEXT)
		setPrototypeMethod(glVertexArrayVertexAttribFormatEXT)
		setPrototypeMethod(glVertexArrayVertexAttribIFormatEXT)
		setPrototypeMethod(glVertexArrayVertexAttribIOffsetEXT)
		setPrototypeMethod(glVertexArrayVertexAttribLFormatEXT)
		setPrototypeMethod(glVertexArrayVertexAttribLOffsetEXT)
		setPrototypeMethod(glVertexArrayVertexAttribOffsetEXT)
		setPrototypeMethod(glVertexArrayVertexBindingDivisorEXT)
		setPrototypeMethod(glVertexArrayVertexOffsetEXT)
		setPrototypeMethod(glVertexAttrib1d)
		setPrototypeMethod(glVertexAttrib1dARB)
		setPrototypeMethod(glVertexAttrib1dNV)
		setPrototypeMethod(glVertexAttrib1dv)
		setPrototypeMethod(glVertexAttrib1dvARB)
		setPrototypeMethod(glVertexAttrib1dvNV)
		setPrototypeMethod(glVertexAttrib1f)
		setPrototypeMethod(glVertexAttrib1fARB)
		setPrototypeMethod(glVertexAttrib1fNV)
		setPrototypeMethod(glVertexAttrib1fv)
		setPrototypeMethod(glVertexAttrib1fvARB)
		setPrototypeMethod(glVertexAttrib1fvNV)
		setPrototypeMethod(glVertexAttrib1hNV)
		setPrototypeMethod(glVertexAttrib1hvNV)
		setPrototypeMethod(glVertexAttrib1s)
		setPrototypeMethod(glVertexAttrib1sARB)
		setPrototypeMethod(glVertexAttrib1sNV)
		setPrototypeMethod(glVertexAttrib1sv)
		setPrototypeMethod(glVertexAttrib1svARB)
		setPrototypeMethod(glVertexAttrib1svNV)
		setPrototypeMethod(glVertexAttrib2d)
		setPrototypeMethod(glVertexAttrib2dARB)
		setPrototypeMethod(glVertexAttrib2dNV)
		setPrototypeMethod(glVertexAttrib2dv)
		setPrototypeMethod(glVertexAttrib2dvARB)
		setPrototypeMethod(glVertexAttrib2dvNV)
		setPrototypeMethod(glVertexAttrib2f)
		setPrototypeMethod(glVertexAttrib2fARB)
		setPrototypeMethod(glVertexAttrib2fNV)
		setPrototypeMethod(glVertexAttrib2fv)
		setPrototypeMethod(glVertexAttrib2fvARB)
		setPrototypeMethod(glVertexAttrib2fvNV)
		setPrototypeMethod(glVertexAttrib2hNV)
		setPrototypeMethod(glVertexAttrib2hvNV)
		setPrototypeMethod(glVertexAttrib2s)
		setPrototypeMethod(glVertexAttrib2sARB)
		setPrototypeMethod(glVertexAttrib2sNV)
		setPrototypeMethod(glVertexAttrib2sv)
		setPrototypeMethod(glVertexAttrib2svARB)
		setPrototypeMethod(glVertexAttrib2svNV)
		setPrototypeMethod(glVertexAttrib3d)
		setPrototypeMethod(glVertexAttrib3dARB)
		setPrototypeMethod(glVertexAttrib3dNV)
		setPrototypeMethod(glVertexAttrib3dv)
		setPrototypeMethod(glVertexAttrib3dvARB)
		setPrototypeMethod(glVertexAttrib3dvNV)
		setPrototypeMethod(glVertexAttrib3f)
		setPrototypeMethod(glVertexAttrib3fARB)
		setPrototypeMethod(glVertexAttrib3fNV)
		setPrototypeMethod(glVertexAttrib3fv)
		setPrototypeMethod(glVertexAttrib3fvARB)
		setPrototypeMethod(glVertexAttrib3fvNV)
		setPrototypeMethod(glVertexAttrib3hNV)
		setPrototypeMethod(glVertexAttrib3hvNV)
		setPrototypeMethod(glVertexAttrib3s)
		setPrototypeMethod(glVertexAttrib3sARB)
		setPrototypeMethod(glVertexAttrib3sNV)
		setPrototypeMethod(glVertexAttrib3sv)
		setPrototypeMethod(glVertexAttrib3svARB)
		setPrototypeMethod(glVertexAttrib3svNV)
		setPrototypeMethod(glVertexAttrib4Nbv)
		setPrototypeMethod(glVertexAttrib4NbvARB)
		setPrototypeMethod(glVertexAttrib4Niv)
		setPrototypeMethod(glVertexAttrib4NivARB)
		setPrototypeMethod(glVertexAttrib4Nsv)
		setPrototypeMethod(glVertexAttrib4NsvARB)
		setPrototypeMethod(glVertexAttrib4Nub)
		setPrototypeMethod(glVertexAttrib4NubARB)
		setPrototypeMethod(glVertexAttrib4Nubv)
		setPrototypeMethod(glVertexAttrib4NubvARB)
		setPrototypeMethod(glVertexAttrib4Nuiv)
		setPrototypeMethod(glVertexAttrib4NuivARB)
		setPrototypeMethod(glVertexAttrib4Nusv)
		setPrototypeMethod(glVertexAttrib4NusvARB)
		setPrototypeMethod(glVertexAttrib4bv)
		setPrototypeMethod(glVertexAttrib4bvARB)
		setPrototypeMethod(glVertexAttrib4d)
		setPrototypeMethod(glVertexAttrib4dARB)
		setPrototypeMethod(glVertexAttrib4dNV)
		setPrototypeMethod(glVertexAttrib4dv)
		setPrototypeMethod(glVertexAttrib4dvARB)
		setPrototypeMethod(glVertexAttrib4dvNV)
		setPrototypeMethod(glVertexAttrib4f)
		setPrototypeMethod(glVertexAttrib4fARB)
		setPrototypeMethod(glVertexAttrib4fNV)
		setPrototypeMethod(glVertexAttrib4fv)
		setPrototypeMethod(glVertexAttrib4fvARB)
		setPrototypeMethod(glVertexAttrib4fvNV)
		setPrototypeMethod(glVertexAttrib4hNV)
		setPrototypeMethod(glVertexAttrib4hvNV)
		setPrototypeMethod(glVertexAttrib4iv)
		setPrototypeMethod(glVertexAttrib4ivARB)
		setPrototypeMethod(glVertexAttrib4s)
		setPrototypeMethod(glVertexAttrib4sARB)
		setPrototypeMethod(glVertexAttrib4sNV)
		setPrototypeMethod(glVertexAttrib4sv)
		setPrototypeMethod(glVertexAttrib4svARB)
		setPrototypeMethod(glVertexAttrib4svNV)
		setPrototypeMethod(glVertexAttrib4ubNV)
		setPrototypeMethod(glVertexAttrib4ubv)
		setPrototypeMethod(glVertexAttrib4ubvARB)
		setPrototypeMethod(glVertexAttrib4ubvNV)
		setPrototypeMethod(glVertexAttrib4uiv)
		setPrototypeMethod(glVertexAttrib4uivARB)
		setPrototypeMethod(glVertexAttrib4usv)
		setPrototypeMethod(glVertexAttrib4usvARB)
		setPrototypeMethod(glVertexAttribArrayObjectATI)
		setPrototypeMethod(glVertexAttribBinding)
		setPrototypeMethod(glVertexAttribDivisor)
		setPrototypeMethod(glVertexAttribDivisorANGLE)
		setPrototypeMethod(glVertexAttribDivisorARB)
		setPrototypeMethod(glVertexAttribDivisorEXT)
		setPrototypeMethod(glVertexAttribDivisorNV)
		setPrototypeMethod(glVertexAttribFormat)
		setPrototypeMethod(glVertexAttribFormatNV)
		setPrototypeMethod(glVertexAttribI1i)
		setPrototypeMethod(glVertexAttribI1iEXT)
		setPrototypeMethod(glVertexAttribI1iv)
		setPrototypeMethod(glVertexAttribI1ivEXT)
		setPrototypeMethod(glVertexAttribI1ui)
		setPrototypeMethod(glVertexAttribI1uiEXT)
		setPrototypeMethod(glVertexAttribI1uiv)
		setPrototypeMethod(glVertexAttribI1uivEXT)
		setPrototypeMethod(glVertexAttribI2i)
		setPrototypeMethod(glVertexAttribI2iEXT)
		setPrototypeMethod(glVertexAttribI2iv)
		setPrototypeMethod(glVertexAttribI2ivEXT)
		setPrototypeMethod(glVertexAttribI2ui)
		setPrototypeMethod(glVertexAttribI2uiEXT)
		setPrototypeMethod(glVertexAttribI2uiv)
		setPrototypeMethod(glVertexAttribI2uivEXT)
		setPrototypeMethod(glVertexAttribI3i)
		setPrototypeMethod(glVertexAttribI3iEXT)
		setPrototypeMethod(glVertexAttribI3iv)
		setPrototypeMethod(glVertexAttribI3ivEXT)
		setPrototypeMethod(glVertexAttribI3ui)
		setPrototypeMethod(glVertexAttribI3uiEXT)
		setPrototypeMethod(glVertexAttribI3uiv)
		setPrototypeMethod(glVertexAttribI3uivEXT)
		setPrototypeMethod(glVertexAttribI4bv)
		setPrototypeMethod(glVertexAttribI4bvEXT)
		setPrototypeMethod(glVertexAttribI4i)
		setPrototypeMethod(glVertexAttribI4iEXT)
		setPrototypeMethod(glVertexAttribI4iv)
		setPrototypeMethod(glVertexAttribI4ivEXT)
		setPrototypeMethod(glVertexAttribI4sv)
		setPrototypeMethod(glVertexAttribI4svEXT)
		setPrototypeMethod(glVertexAttribI4ubv)
		setPrototypeMethod(glVertexAttribI4ubvEXT)
		setPrototypeMethod(glVertexAttribI4ui)
		setPrototypeMethod(glVertexAttribI4uiEXT)
		setPrototypeMethod(glVertexAttribI4uiv)
		setPrototypeMethod(glVertexAttribI4uivEXT)
		setPrototypeMethod(glVertexAttribI4usv)
		setPrototypeMethod(glVertexAttribI4usvEXT)
		setPrototypeMethod(glVertexAttribIFormat)
		setPrototypeMethod(glVertexAttribIFormatNV)
		setPrototypeMethod(glVertexAttribIPointer)
		setPrototypeMethod(glVertexAttribIPointerEXT)
		setPrototypeMethod(glVertexAttribL1d)
		setPrototypeMethod(glVertexAttribL1dEXT)
		setPrototypeMethod(glVertexAttribL1dv)
		setPrototypeMethod(glVertexAttribL1dvEXT)
		setPrototypeMethod(glVertexAttribL1i64NV)
		setPrototypeMethod(glVertexAttribL1i64vNV)
		setPrototypeMethod(glVertexAttribL1ui64ARB)
		setPrototypeMethod(glVertexAttribL1ui64NV)
		setPrototypeMethod(glVertexAttribL1ui64vARB)
		setPrototypeMethod(glVertexAttribL1ui64vNV)
		setPrototypeMethod(glVertexAttribL2d)
		setPrototypeMethod(glVertexAttribL2dEXT)
		setPrototypeMethod(glVertexAttribL2dv)
		setPrototypeMethod(glVertexAttribL2dvEXT)
		setPrototypeMethod(glVertexAttribL2i64NV)
		setPrototypeMethod(glVertexAttribL2i64vNV)
		setPrototypeMethod(glVertexAttribL2ui64NV)
		setPrototypeMethod(glVertexAttribL2ui64vNV)
		setPrototypeMethod(glVertexAttribL3d)
		setPrototypeMethod(glVertexAttribL3dEXT)
		setPrototypeMethod(glVertexAttribL3dv)
		setPrototypeMethod(glVertexAttribL3dvEXT)
		setPrototypeMethod(glVertexAttribL3i64NV)
		setPrototypeMethod(glVertexAttribL3i64vNV)
		setPrototypeMethod(glVertexAttribL3ui64NV)
		setPrototypeMethod(glVertexAttribL3ui64vNV)
		setPrototypeMethod(glVertexAttribL4d)
		setPrototypeMethod(glVertexAttribL4dEXT)
		setPrototypeMethod(glVertexAttribL4dv)
		setPrototypeMethod(glVertexAttribL4dvEXT)
		setPrototypeMethod(glVertexAttribL4i64NV)
		setPrototypeMethod(glVertexAttribL4i64vNV)
		setPrototypeMethod(glVertexAttribL4ui64NV)
		setPrototypeMethod(glVertexAttribL4ui64vNV)
		setPrototypeMethod(glVertexAttribLFormat)
		setPrototypeMethod(glVertexAttribLFormatNV)
		setPrototypeMethod(glVertexAttribLPointer)
		setPrototypeMethod(glVertexAttribLPointerEXT)
		setPrototypeMethod(glVertexAttribP1ui)
		setPrototypeMethod(glVertexAttribP1uiv)
		setPrototypeMethod(glVertexAttribP2ui)
		setPrototypeMethod(glVertexAttribP2uiv)
		setPrototypeMethod(glVertexAttribP3ui)
		setPrototypeMethod(glVertexAttribP3uiv)
		setPrototypeMethod(glVertexAttribP4ui)
		setPrototypeMethod(glVertexAttribP4uiv)
		setPrototypeMethod(glVertexAttribParameteriAMD)
		setPrototypeMethod(glVertexAttribPointer)
		setPrototypeMethod(glVertexAttribPointerARB)
		setPrototypeMethod(glVertexAttribPointerNV)
		setPrototypeMethod(glVertexAttribs1dvNV)
		setPrototypeMethod(glVertexAttribs1fvNV)
		setPrototypeMethod(glVertexAttribs1hvNV)
		setPrototypeMethod(glVertexAttribs1svNV)
		setPrototypeMethod(glVertexAttribs2dvNV)
		setPrototypeMethod(glVertexAttribs2fvNV)
		setPrototypeMethod(glVertexAttribs2hvNV)
		setPrototypeMethod(glVertexAttribs2svNV)
		setPrototypeMethod(glVertexAttribs3dvNV)
		setPrototypeMethod(glVertexAttribs3fvNV)
		setPrototypeMethod(glVertexAttribs3hvNV)
		setPrototypeMethod(glVertexAttribs3svNV)
		setPrototypeMethod(glVertexAttribs4dvNV)
		setPrototypeMethod(glVertexAttribs4fvNV)
		setPrototypeMethod(glVertexAttribs4hvNV)
		setPrototypeMethod(glVertexAttribs4svNV)
		setPrototypeMethod(glVertexAttribs4ubvNV)
		setPrototypeMethod(glVertexBindingDivisor)
		setPrototypeMethod(glVertexBlendARB)
		setPrototypeMethod(glVertexBlendEnvfATI)
		setPrototypeMethod(glVertexBlendEnviATI)
		setPrototypeMethod(glVertexFormatNV)
		setPrototypeMethod(glVertexP2ui)
		setPrototypeMethod(glVertexP2uiv)
		setPrototypeMethod(glVertexP3ui)
		setPrototypeMethod(glVertexP3uiv)
		setPrototypeMethod(glVertexP4ui)
		setPrototypeMethod(glVertexP4uiv)
		setPrototypeMethod(glVertexPointer)
		setPrototypeMethod(glVertexPointerEXT)
		setPrototypeMethod(glVertexPointerListIBM)
		setPrototypeMethod(glVertexPointervINTEL)
		setPrototypeMethod(glVertexStream1dATI)
		setPrototypeMethod(glVertexStream1dvATI)
		setPrototypeMethod(glVertexStream1fATI)
		setPrototypeMethod(glVertexStream1fvATI)
		setPrototypeMethod(glVertexStream1iATI)
		setPrototypeMethod(glVertexStream1ivATI)
		setPrototypeMethod(glVertexStream1sATI)
		setPrototypeMethod(glVertexStream1svATI)
		setPrototypeMethod(glVertexStream2dATI)
		setPrototypeMethod(glVertexStream2dvATI)
		setPrototypeMethod(glVertexStream2fATI)
		setPrototypeMethod(glVertexStream2fvATI)
		setPrototypeMethod(glVertexStream2iATI)
		setPrototypeMethod(glVertexStream2ivATI)
		setPrototypeMethod(glVertexStream2sATI)
		setPrototypeMethod(glVertexStream2svATI)
		setPrototypeMethod(glVertexStream3dATI)
		setPrototypeMethod(glVertexStream3dvATI)
		setPrototypeMethod(glVertexStream3fATI)
		setPrototypeMethod(glVertexStream3fvATI)
		setPrototypeMethod(glVertexStream3iATI)
		setPrototypeMethod(glVertexStream3ivATI)
		setPrototypeMethod(glVertexStream3sATI)
		setPrototypeMethod(glVertexStream3svATI)
		setPrototypeMethod(glVertexStream4dATI)
		setPrototypeMethod(glVertexStream4dvATI)
		setPrototypeMethod(glVertexStream4fATI)
		setPrototypeMethod(glVertexStream4fvATI)
		setPrototypeMethod(glVertexStream4iATI)
		setPrototypeMethod(glVertexStream4ivATI)
		setPrototypeMethod(glVertexStream4sATI)
		setPrototypeMethod(glVertexStream4svATI)
		setPrototypeMethod(glVertexWeightPointerEXT)
		setPrototypeMethod(glVertexWeightfEXT)
		setPrototypeMethod(glVertexWeightfvEXT)
		setPrototypeMethod(glVertexWeighthNV)
		setPrototypeMethod(glVertexWeighthvNV)
		setPrototypeMethod(glVideoCaptureNV)
		setPrototypeMethod(glVideoCaptureStreamParameterdvNV)
		setPrototypeMethod(glVideoCaptureStreamParameterfvNV)
		setPrototypeMethod(glVideoCaptureStreamParameterivNV)
		setPrototypeMethod(glViewport)
		setPrototypeMethod(glViewportArrayv)
		setPrototypeMethod(glViewportIndexedf)
		setPrototypeMethod(glViewportIndexedfv)
		setPrototypeMethod(glWaitSync)
		setPrototypeMethod(glWaitSyncAPPLE)
		setPrototypeMethod(glWeightPathsNV)
		setPrototypeMethod(glWeightPointerARB)
		setPrototypeMethod(glWeightPointerOES)
		setPrototypeMethod(glWeightbvARB)
		setPrototypeMethod(glWeightdvARB)
		setPrototypeMethod(glWeightfvARB)
		setPrototypeMethod(glWeightivARB)
		setPrototypeMethod(glWeightsvARB)
		setPrototypeMethod(glWeightubvARB)
		setPrototypeMethod(glWeightuivARB)
		setPrototypeMethod(glWeightusvARB)
		setPrototypeMethod(glWindowPos2d)
		setPrototypeMethod(glWindowPos2dARB)
		setPrototypeMethod(glWindowPos2dMESA)
		setPrototypeMethod(glWindowPos2dv)
		setPrototypeMethod(glWindowPos2dvARB)
		setPrototypeMethod(glWindowPos2dvMESA)
		setPrototypeMethod(glWindowPos2f)
		setPrototypeMethod(glWindowPos2fARB)
		setPrototypeMethod(glWindowPos2fMESA)
		setPrototypeMethod(glWindowPos2fv)
		setPrototypeMethod(glWindowPos2fvARB)
		setPrototypeMethod(glWindowPos2fvMESA)
		setPrototypeMethod(glWindowPos2i)
		setPrototypeMethod(glWindowPos2iARB)
		setPrototypeMethod(glWindowPos2iMESA)
		setPrototypeMethod(glWindowPos2iv)
		setPrototypeMethod(glWindowPos2ivARB)
		setPrototypeMethod(glWindowPos2ivMESA)
		setPrototypeMethod(glWindowPos2s)
		setPrototypeMethod(glWindowPos2sARB)
		setPrototypeMethod(glWindowPos2sMESA)
		setPrototypeMethod(glWindowPos2sv)
		setPrototypeMethod(glWindowPos2svARB)
		setPrototypeMethod(glWindowPos2svMESA)
		setPrototypeMethod(glWindowPos3d)
		setPrototypeMethod(glWindowPos3dARB)
		setPrototypeMethod(glWindowPos3dMESA)
		setPrototypeMethod(glWindowPos3dv)
		setPrototypeMethod(glWindowPos3dvARB)
		setPrototypeMethod(glWindowPos3dvMESA)
		setPrototypeMethod(glWindowPos3f)
		setPrototypeMethod(glWindowPos3fARB)
		setPrototypeMethod(glWindowPos3fMESA)
		setPrototypeMethod(glWindowPos3fv)
		setPrototypeMethod(glWindowPos3fvARB)
		setPrototypeMethod(glWindowPos3fvMESA)
		setPrototypeMethod(glWindowPos3i)
		setPrototypeMethod(glWindowPos3iARB)
		setPrototypeMethod(glWindowPos3iMESA)
		setPrototypeMethod(glWindowPos3iv)
		setPrototypeMethod(glWindowPos3ivARB)
		setPrototypeMethod(glWindowPos3ivMESA)
		setPrototypeMethod(glWindowPos3s)
		setPrototypeMethod(glWindowPos3sARB)
		setPrototypeMethod(glWindowPos3sMESA)
		setPrototypeMethod(glWindowPos3sv)
		setPrototypeMethod(glWindowPos3svARB)
		setPrototypeMethod(glWindowPos3svMESA)
		setPrototypeMethod(glWindowPos4dMESA)
		setPrototypeMethod(glWindowPos4dvMESA)
		setPrototypeMethod(glWindowPos4fMESA)
		setPrototypeMethod(glWindowPos4fvMESA)
		setPrototypeMethod(glWindowPos4iMESA)
		setPrototypeMethod(glWindowPos4ivMESA)
		setPrototypeMethod(glWindowPos4sMESA)
		setPrototypeMethod(glWindowPos4svMESA)
		setPrototypeMethod(glWriteMaskEXT)

		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_BIT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_BIT"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_BIT"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_BIT"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_STIPPLE_BIT"), v8::Uint32::NewFromUnsigned(0x00000010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MODE_BIT"), v8::Uint32::NewFromUnsigned(0x00000020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHTING_BIT"), v8::Uint32::NewFromUnsigned(0x00000040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_BIT"), v8::Uint32::NewFromUnsigned(0x00000080));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT"), v8::Uint32::NewFromUnsigned(0x00000100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACCUM_BUFFER_BIT"), v8::Uint32::NewFromUnsigned(0x00000200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT"), v8::Uint32::NewFromUnsigned(0x00000400));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEWPORT_BIT"), v8::Uint32::NewFromUnsigned(0x00000800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_BIT"), v8::Uint32::NewFromUnsigned(0x00001000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ENABLE_BIT"), v8::Uint32::NewFromUnsigned(0x00002000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT"), v8::Uint32::NewFromUnsigned(0x00004000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HINT_BIT"), v8::Uint32::NewFromUnsigned(0x00008000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_BIT"), v8::Uint32::NewFromUnsigned(0x00010000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIST_BIT"), v8::Uint32::NewFromUnsigned(0x00020000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BIT"), v8::Uint32::NewFromUnsigned(0x00040000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCISSOR_BIT"), v8::Uint32::NewFromUnsigned(0x00080000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BIT"), v8::Uint32::NewFromUnsigned(0x20000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BIT_ARB"), v8::Uint32::NewFromUnsigned(0x20000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x20000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BIT_3DFX"), v8::Uint32::NewFromUnsigned(0x20000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALL_ATTRIB_BITS"), v8::Uint32::NewFromUnsigned(0xFFFFFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_BUFFER_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00008000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIENT_PIXEL_STORE_BIT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIENT_VERTEX_ARRAY_BIT"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIENT_ALL_ATTRIB_BITS"), v8::Uint32::NewFromUnsigned(0xFFFFFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_FLAG_DEBUG_BIT"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_FLAG_DEBUG_BIT_KHR"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_CORE_PROFILE_BIT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_COMPATIBILITY_PROFILE_BIT"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_READ_BIT"), v8::Uint32::NewFromUnsigned(0x0001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_READ_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x0001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_WRITE_BIT"), v8::Uint32::NewFromUnsigned(0x0002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_WRITE_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x0002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_INVALIDATE_RANGE_BIT"), v8::Uint32::NewFromUnsigned(0x0004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_INVALIDATE_RANGE_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x0004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_INVALIDATE_BUFFER_BIT"), v8::Uint32::NewFromUnsigned(0x0008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_INVALIDATE_BUFFER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x0008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_FLUSH_EXPLICIT_BIT"), v8::Uint32::NewFromUnsigned(0x0010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_FLUSH_EXPLICIT_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x0010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_UNSYNCHRONIZED_BIT"), v8::Uint32::NewFromUnsigned(0x0020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_UNSYNCHRONIZED_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x0020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_PERSISTENT_BIT"), v8::Uint32::NewFromUnsigned(0x0040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_COHERENT_BIT"), v8::Uint32::NewFromUnsigned(0x0080));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DYNAMIC_STORAGE_BIT"), v8::Uint32::NewFromUnsigned(0x0100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIENT_STORAGE_BIT"), v8::Uint32::NewFromUnsigned(0x0200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FETCH_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FETCH_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00000010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_IMAGE_ACCESS_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMMAND_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMMAND_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_BUFFER_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000080));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_BUFFER_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000080));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_UPDATE_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_UPDATE_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_UPDATE_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_UPDATE_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000400));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000400));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00000800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00001000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BARRIER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00001000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_STORAGE_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00002000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00004000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BUFFER_BARRIER_BIT"), v8::Uint32::NewFromUnsigned(0x00008000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALL_BARRIER_BITS"), v8::Uint32::NewFromUnsigned(0xFFFFFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALL_BARRIER_BITS_EXT"), v8::Uint32::NewFromUnsigned(0xFFFFFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_ALL_EVENT_BITS_AMD"), v8::Uint32::NewFromUnsigned(0xFFFFFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_FLUSH_COMMANDS_BIT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_FLUSH_COMMANDS_BIT_APPLE"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_BIT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_BIT"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SHADER_BIT"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SHADER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_SHADER_BIT"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_SHADER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_SHADER_BIT"), v8::Uint32::NewFromUnsigned(0x00000010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_SHADER_BIT_EXT"), v8::Uint32::NewFromUnsigned(0x00000010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPUTE_SHADER_BIT"), v8::Uint32::NewFromUnsigned(0x00000020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALL_SHADER_BITS"), v8::Uint32::NewFromUnsigned(0xFFFFFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALL_SHADER_BITS_EXT"), v8::Uint32::NewFromUnsigned(0xFFFFFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_STORAGE_SPARSE_BIT_AMD"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_2X_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4X_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_8X_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HALF_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUARTER_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EIGHTH_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SATURATE_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMP_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEGATE_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BIAS_BIT_ATI"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_OPERATIONS_BIT_MESA"), v8::Uint32::NewFromUnsigned(0x0001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_PRIMITIVES_BIT_MESA"), v8::Uint32::NewFromUnsigned(0x0002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_ARRAYS_BIT_MESA"), v8::Uint32::NewFromUnsigned(0x0004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_TEXTURES_BIT_MESA"), v8::Uint32::NewFromUnsigned(0x0008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_PIXELS_BIT_MESA"), v8::Uint32::NewFromUnsigned(0x0010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_ERRORS_BIT_MESA"), v8::Uint32::NewFromUnsigned(0x0020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_ALL_BITS_MESA"), v8::Uint32::NewFromUnsigned(0xFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOLD_BIT_NV"), v8::Uint32::NewFromUnsigned(0x01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ITALIC_BIT_NV"), v8::Uint32::NewFromUnsigned(0x02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_WIDTH_BIT_NV"), v8::Uint32::NewFromUnsigned(0x01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_HEIGHT_BIT_NV"), v8::Uint32::NewFromUnsigned(0x02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV"), v8::Uint32::NewFromUnsigned(0x04));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV"), v8::Uint32::NewFromUnsigned(0x08));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV"), v8::Uint32::NewFromUnsigned(0x10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_VERTICAL_BEARING_X_BIT_NV"), v8::Uint32::NewFromUnsigned(0x20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV"), v8::Uint32::NewFromUnsigned(0x40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV"), v8::Uint32::NewFromUnsigned(0x80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLYPH_HAS_KERNING_BIT_NV"), v8::Uint32::NewFromUnsigned(0x100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_X_MIN_BOUNDS_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00010000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_Y_MIN_BOUNDS_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00020000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_X_MAX_BOUNDS_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00040000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_Y_MAX_BOUNDS_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00080000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_UNITS_PER_EM_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00100000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_ASCENDER_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00200000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_DESCENDER_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00400000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_HEIGHT_BIT_NV"), v8::Uint32::NewFromUnsigned(0x00800000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV"), v8::Uint32::NewFromUnsigned(0x01000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV"), v8::Uint32::NewFromUnsigned(0x02000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_UNDERLINE_POSITION_BIT_NV"), v8::Uint32::NewFromUnsigned(0x04000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_UNDERLINE_THICKNESS_BIT_NV"), v8::Uint32::NewFromUnsigned(0x08000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FONT_HAS_KERNING_BIT_NV"), v8::Uint32::NewFromUnsigned(0x10000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_SINGLE_CONTEXT_INTEL"), v8::Uint32::NewFromUnsigned(0x00000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_GLOBAL_CONTEXT_INTEL"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX23_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX4_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR3_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00010000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR4_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00020000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGEFLAG_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00040000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00080000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAT_AMBIENT_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00100000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00200000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAT_DIFFUSE_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00400000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAT_EMISSION_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x00800000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAT_COLOR_INDEXES_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x01000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAT_SHININESS_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x02000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAT_SPECULAR_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x04000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x08000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXCOORD1_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x10000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXCOORD2_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x20000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXCOORD3_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x40000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXCOORD4_BIT_PGI"), v8::Uint32::NewFromUnsigned(0x80000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT0_QCOM"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT1_QCOM"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT2_QCOM"), v8::Uint32::NewFromUnsigned(0x00000004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT3_QCOM"), v8::Uint32::NewFromUnsigned(0x00000008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT4_QCOM"), v8::Uint32::NewFromUnsigned(0x00000010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT5_QCOM"), v8::Uint32::NewFromUnsigned(0x00000020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT6_QCOM"), v8::Uint32::NewFromUnsigned(0x00000040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_BUFFER_BIT7_QCOM"), v8::Uint32::NewFromUnsigned(0x00000080));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT0_QCOM"), v8::Uint32::NewFromUnsigned(0x00000100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT1_QCOM"), v8::Uint32::NewFromUnsigned(0x00000200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT2_QCOM"), v8::Uint32::NewFromUnsigned(0x00000400));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT3_QCOM"), v8::Uint32::NewFromUnsigned(0x00000800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT4_QCOM"), v8::Uint32::NewFromUnsigned(0x00001000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT5_QCOM"), v8::Uint32::NewFromUnsigned(0x00002000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT6_QCOM"), v8::Uint32::NewFromUnsigned(0x00004000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_BIT7_QCOM"), v8::Uint32::NewFromUnsigned(0x00008000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT0_QCOM"), v8::Uint32::NewFromUnsigned(0x00010000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT1_QCOM"), v8::Uint32::NewFromUnsigned(0x00020000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT2_QCOM"), v8::Uint32::NewFromUnsigned(0x00040000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT3_QCOM"), v8::Uint32::NewFromUnsigned(0x00080000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT4_QCOM"), v8::Uint32::NewFromUnsigned(0x00100000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT5_QCOM"), v8::Uint32::NewFromUnsigned(0x00200000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT6_QCOM"), v8::Uint32::NewFromUnsigned(0x00400000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BUFFER_BIT7_QCOM"), v8::Uint32::NewFromUnsigned(0x00800000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BUFFER_BIT0_QCOM"), v8::Uint32::NewFromUnsigned(0x01000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BUFFER_BIT1_QCOM"), v8::Uint32::NewFromUnsigned(0x02000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BUFFER_BIT2_QCOM"), v8::Uint32::NewFromUnsigned(0x04000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BUFFER_BIT3_QCOM"), v8::Uint32::NewFromUnsigned(0x08000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BUFFER_BIT4_QCOM"), v8::Uint32::NewFromUnsigned(0x10000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BUFFER_BIT5_QCOM"), v8::Uint32::NewFromUnsigned(0x20000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BUFFER_BIT6_QCOM"), v8::Uint32::NewFromUnsigned(0x40000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_BUFFER_BIT7_QCOM"), v8::Uint32::NewFromUnsigned(0x80000000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEFORMATION_BIT_SGIX"), v8::Uint32::NewFromUnsigned(0x00000001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_DEFORMATION_BIT_SGIX"), v8::Uint32::NewFromUnsigned(0x00000002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESTART_SUN"), v8::Uint32::NewFromUnsigned(0x0001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACE_MIDDLE_SUN"), v8::Uint32::NewFromUnsigned(0x0002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACE_OLDEST_SUN"), v8::Uint32::NewFromUnsigned(0x0003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAYOUT_DEFAULT_INTEL"), v8::Uint32::NewFromUnsigned(0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAYOUT_LINEAR_INTEL"), v8::Uint32::NewFromUnsigned(1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAYOUT_LINEAR_CPU_CACHED_INTEL"), v8::Uint32::NewFromUnsigned(2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEXT_BUFFER_NV"), v8::Int32::New(-2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SKIP_COMPONENTS4_NV"), v8::Int32::New(-3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SKIP_COMPONENTS3_NV"), v8::Int32::New(-4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SKIP_COMPONENTS2_NV"), v8::Int32::New(-5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SKIP_COMPONENTS1_NV"), v8::Int32::New(-6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLOSE_PATH_NV"), v8::Uint32::NewFromUnsigned(0x00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MOVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_MOVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x03));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_TO_NV"), v8::Uint32::NewFromUnsigned(0x04));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_LINE_TO_NV"), v8::Uint32::NewFromUnsigned(0x05));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HORIZONTAL_LINE_TO_NV"), v8::Uint32::NewFromUnsigned(0x06));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_HORIZONTAL_LINE_TO_NV"), v8::Uint32::NewFromUnsigned(0x07));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTICAL_LINE_TO_NV"), v8::Uint32::NewFromUnsigned(0x08));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_VERTICAL_LINE_TO_NV"), v8::Uint32::NewFromUnsigned(0x09));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUADRATIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x0A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_QUADRATIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x0B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CUBIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x0C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_CUBIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x0D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMOOTH_QUADRATIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x0E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x0F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMOOTH_CUBIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0x11));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMALL_CCW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0x12));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_SMALL_CCW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0x13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMALL_CW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0x14));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_SMALL_CW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0x15));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LARGE_CCW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0x16));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_LARGE_CCW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0x17));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LARGE_CW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0x18));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_LARGE_CW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0x19));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESTART_PATH_NV"), v8::Uint32::NewFromUnsigned(0xF0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUP_FIRST_CUBIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0xF2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUP_LAST_CUBIC_CURVE_TO_NV"), v8::Uint32::NewFromUnsigned(0xF4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RECT_NV"), v8::Uint32::NewFromUnsigned(0xF6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CIRCULAR_CCW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0xF8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CIRCULAR_CW_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0xFA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CIRCULAR_TANGENT_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0xFC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0xFE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELATIVE_ARC_TO_NV"), v8::Uint32::NewFromUnsigned(0xFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FALSE"), v8::Uint32::NewFromUnsigned(0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NO_ERROR"), v8::Uint32::NewFromUnsigned(0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ZERO"), v8::Uint32::NewFromUnsigned(0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NONE"), v8::Uint32::NewFromUnsigned(0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NONE_OES"), v8::Uint32::NewFromUnsigned(0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRUE"), v8::Uint32::NewFromUnsigned(1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE"), v8::Uint32::NewFromUnsigned(1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVALID_INDEX"), v8::Uint32::NewFromUnsigned(0xFFFFFFFF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TIMEOUT_IGNORED"), v8::Number::New(-1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TIMEOUT_IGNORED_APPLE"), v8::Number::New(-1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERSION_ES_CL_1_0"), v8::Uint32::NewFromUnsigned(1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERSION_ES_CM_1_1"), v8::Uint32::NewFromUnsigned(1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERSION_ES_CL_1_1"), v8::Uint32::NewFromUnsigned(1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINTS"), v8::Uint32::NewFromUnsigned(0x0000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINES"), v8::Uint32::NewFromUnsigned(0x0001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_LOOP"), v8::Uint32::NewFromUnsigned(0x0002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_STRIP"), v8::Uint32::NewFromUnsigned(0x0003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLES"), v8::Uint32::NewFromUnsigned(0x0004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLE_STRIP"), v8::Uint32::NewFromUnsigned(0x0005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLE_FAN"), v8::Uint32::NewFromUnsigned(0x0006));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUADS"), v8::Uint32::NewFromUnsigned(0x0007));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUADS_EXT"), v8::Uint32::NewFromUnsigned(0x0007));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_STRIP"), v8::Uint32::NewFromUnsigned(0x0008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON"), v8::Uint32::NewFromUnsigned(0x0009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINES_ADJACENCY"), v8::Uint32::NewFromUnsigned(0x000A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINES_ADJACENCY_ARB"), v8::Uint32::NewFromUnsigned(0x000A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINES_ADJACENCY_EXT"), v8::Uint32::NewFromUnsigned(0x000A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_STRIP_ADJACENCY"), v8::Uint32::NewFromUnsigned(0x000B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_STRIP_ADJACENCY_ARB"), v8::Uint32::NewFromUnsigned(0x000B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_STRIP_ADJACENCY_EXT"), v8::Uint32::NewFromUnsigned(0x000B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLES_ADJACENCY"), v8::Uint32::NewFromUnsigned(0x000C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLES_ADJACENCY_ARB"), v8::Uint32::NewFromUnsigned(0x000C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLES_ADJACENCY_EXT"), v8::Uint32::NewFromUnsigned(0x000C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLE_STRIP_ADJACENCY"), v8::Uint32::NewFromUnsigned(0x000D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLE_STRIP_ADJACENCY_ARB"), v8::Uint32::NewFromUnsigned(0x000D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLE_STRIP_ADJACENCY_EXT"), v8::Uint32::NewFromUnsigned(0x000D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATCHES"), v8::Uint32::NewFromUnsigned(0x000E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATCHES_EXT"), v8::Uint32::NewFromUnsigned(0x000E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACCUM"), v8::Uint32::NewFromUnsigned(0x0100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOAD"), v8::Uint32::NewFromUnsigned(0x0101));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RETURN"), v8::Uint32::NewFromUnsigned(0x0102));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULT"), v8::Uint32::NewFromUnsigned(0x0103));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ADD"), v8::Uint32::NewFromUnsigned(0x0104));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEVER"), v8::Uint32::NewFromUnsigned(0x0200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LESS"), v8::Uint32::NewFromUnsigned(0x0201));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EQUAL"), v8::Uint32::NewFromUnsigned(0x0202));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LEQUAL"), v8::Uint32::NewFromUnsigned(0x0203));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREATER"), v8::Uint32::NewFromUnsigned(0x0204));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NOTEQUAL"), v8::Uint32::NewFromUnsigned(0x0205));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEQUAL"), v8::Uint32::NewFromUnsigned(0x0206));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALWAYS"), v8::Uint32::NewFromUnsigned(0x0207));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC_COLOR"), v8::Uint32::NewFromUnsigned(0x0300));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_SRC_COLOR"), v8::Uint32::NewFromUnsigned(0x0301));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC_ALPHA"), v8::Uint32::NewFromUnsigned(0x0302));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_SRC_ALPHA"), v8::Uint32::NewFromUnsigned(0x0303));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DST_ALPHA"), v8::Uint32::NewFromUnsigned(0x0304));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_DST_ALPHA"), v8::Uint32::NewFromUnsigned(0x0305));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DST_COLOR"), v8::Uint32::NewFromUnsigned(0x0306));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_DST_COLOR"), v8::Uint32::NewFromUnsigned(0x0307));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC_ALPHA_SATURATE"), v8::Uint32::NewFromUnsigned(0x0308));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRONT_LEFT"), v8::Uint32::NewFromUnsigned(0x0400));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRONT_RIGHT"), v8::Uint32::NewFromUnsigned(0x0401));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BACK_LEFT"), v8::Uint32::NewFromUnsigned(0x0402));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BACK_RIGHT"), v8::Uint32::NewFromUnsigned(0x0403));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRONT"), v8::Uint32::NewFromUnsigned(0x0404));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BACK"), v8::Uint32::NewFromUnsigned(0x0405));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LEFT"), v8::Uint32::NewFromUnsigned(0x0406));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RIGHT"), v8::Uint32::NewFromUnsigned(0x0407));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRONT_AND_BACK"), v8::Uint32::NewFromUnsigned(0x0408));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AUX0"), v8::Uint32::NewFromUnsigned(0x0409));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AUX1"), v8::Uint32::NewFromUnsigned(0x040A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AUX2"), v8::Uint32::NewFromUnsigned(0x040B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AUX3"), v8::Uint32::NewFromUnsigned(0x040C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVALID_ENUM"), v8::Uint32::NewFromUnsigned(0x0500));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVALID_VALUE"), v8::Uint32::NewFromUnsigned(0x0501));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVALID_OPERATION"), v8::Uint32::NewFromUnsigned(0x0502));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STACK_OVERFLOW"), v8::Uint32::NewFromUnsigned(0x0503));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STACK_OVERFLOW_KHR"), v8::Uint32::NewFromUnsigned(0x0503));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STACK_UNDERFLOW"), v8::Uint32::NewFromUnsigned(0x0504));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STACK_UNDERFLOW_KHR"), v8::Uint32::NewFromUnsigned(0x0504));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUT_OF_MEMORY"), v8::Uint32::NewFromUnsigned(0x0505));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVALID_FRAMEBUFFER_OPERATION"), v8::Uint32::NewFromUnsigned(0x0506));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVALID_FRAMEBUFFER_OPERATION_EXT"), v8::Uint32::NewFromUnsigned(0x0506));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVALID_FRAMEBUFFER_OPERATION_OES"), v8::Uint32::NewFromUnsigned(0x0506));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_2D"), v8::Uint32::NewFromUnsigned(0x0600));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_3D"), v8::Uint32::NewFromUnsigned(0x0601));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_3D_COLOR"), v8::Uint32::NewFromUnsigned(0x0602));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_3D_COLOR_TEXTURE"), v8::Uint32::NewFromUnsigned(0x0603));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4D_COLOR_TEXTURE"), v8::Uint32::NewFromUnsigned(0x0604));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PASS_THROUGH_TOKEN"), v8::Uint32::NewFromUnsigned(0x0700));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_TOKEN"), v8::Uint32::NewFromUnsigned(0x0701));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_TOKEN"), v8::Uint32::NewFromUnsigned(0x0702));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_TOKEN"), v8::Uint32::NewFromUnsigned(0x0703));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BITMAP_TOKEN"), v8::Uint32::NewFromUnsigned(0x0704));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_PIXEL_TOKEN"), v8::Uint32::NewFromUnsigned(0x0705));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY_PIXEL_TOKEN"), v8::Uint32::NewFromUnsigned(0x0706));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_RESET_TOKEN"), v8::Uint32::NewFromUnsigned(0x0707));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EXP"), v8::Uint32::NewFromUnsigned(0x0800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EXP2"), v8::Uint32::NewFromUnsigned(0x0801));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CW"), v8::Uint32::NewFromUnsigned(0x0900));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CCW"), v8::Uint32::NewFromUnsigned(0x0901));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COEFF"), v8::Uint32::NewFromUnsigned(0x0A00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ORDER"), v8::Uint32::NewFromUnsigned(0x0A01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOMAIN"), v8::Uint32::NewFromUnsigned(0x0A02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_COLOR"), v8::Uint32::NewFromUnsigned(0x0B00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_INDEX"), v8::Uint32::NewFromUnsigned(0x0B01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_NORMAL"), v8::Uint32::NewFromUnsigned(0x0B02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_TEXTURE_COORDS"), v8::Uint32::NewFromUnsigned(0x0B03));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_RASTER_COLOR"), v8::Uint32::NewFromUnsigned(0x0B04));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_RASTER_INDEX"), v8::Uint32::NewFromUnsigned(0x0B05));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_RASTER_TEXTURE_COORDS"), v8::Uint32::NewFromUnsigned(0x0B06));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_RASTER_POSITION"), v8::Uint32::NewFromUnsigned(0x0B07));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_RASTER_POSITION_VALID"), v8::Uint32::NewFromUnsigned(0x0B08));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_RASTER_DISTANCE"), v8::Uint32::NewFromUnsigned(0x0B09));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SMOOTH"), v8::Uint32::NewFromUnsigned(0x0B10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE"), v8::Uint32::NewFromUnsigned(0x0B11));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_RANGE"), v8::Uint32::NewFromUnsigned(0x0B12));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMOOTH_POINT_SIZE_RANGE"), v8::Uint32::NewFromUnsigned(0x0B12));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_GRANULARITY"), v8::Uint32::NewFromUnsigned(0x0B13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMOOTH_POINT_SIZE_GRANULARITY"), v8::Uint32::NewFromUnsigned(0x0B13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_SMOOTH"), v8::Uint32::NewFromUnsigned(0x0B20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_WIDTH"), v8::Uint32::NewFromUnsigned(0x0B21));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_WIDTH_RANGE"), v8::Uint32::NewFromUnsigned(0x0B22));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMOOTH_LINE_WIDTH_RANGE"), v8::Uint32::NewFromUnsigned(0x0B22));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_WIDTH_GRANULARITY"), v8::Uint32::NewFromUnsigned(0x0B23));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMOOTH_LINE_WIDTH_GRANULARITY"), v8::Uint32::NewFromUnsigned(0x0B23));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_STIPPLE"), v8::Uint32::NewFromUnsigned(0x0B24));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_STIPPLE_PATTERN"), v8::Uint32::NewFromUnsigned(0x0B25));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_STIPPLE_REPEAT"), v8::Uint32::NewFromUnsigned(0x0B26));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIST_MODE"), v8::Uint32::NewFromUnsigned(0x0B30));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_LIST_NESTING"), v8::Uint32::NewFromUnsigned(0x0B31));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIST_BASE"), v8::Uint32::NewFromUnsigned(0x0B32));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIST_INDEX"), v8::Uint32::NewFromUnsigned(0x0B33));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_MODE"), v8::Uint32::NewFromUnsigned(0x0B40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_SMOOTH"), v8::Uint32::NewFromUnsigned(0x0B41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_STIPPLE"), v8::Uint32::NewFromUnsigned(0x0B42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG"), v8::Uint32::NewFromUnsigned(0x0B43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CULL_FACE"), v8::Uint32::NewFromUnsigned(0x0B44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CULL_FACE_MODE"), v8::Uint32::NewFromUnsigned(0x0B45));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRONT_FACE"), v8::Uint32::NewFromUnsigned(0x0B46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHTING"), v8::Uint32::NewFromUnsigned(0x0B50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT_MODEL_LOCAL_VIEWER"), v8::Uint32::NewFromUnsigned(0x0B51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT_MODEL_TWO_SIDE"), v8::Uint32::NewFromUnsigned(0x0B52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT_MODEL_AMBIENT"), v8::Uint32::NewFromUnsigned(0x0B53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADE_MODEL"), v8::Uint32::NewFromUnsigned(0x0B54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_MATERIAL_FACE"), v8::Uint32::NewFromUnsigned(0x0B55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_MATERIAL_PARAMETER"), v8::Uint32::NewFromUnsigned(0x0B56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_MATERIAL"), v8::Uint32::NewFromUnsigned(0x0B57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG"), v8::Uint32::NewFromUnsigned(0x0B60));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_INDEX"), v8::Uint32::NewFromUnsigned(0x0B61));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_DENSITY"), v8::Uint32::NewFromUnsigned(0x0B62));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_START"), v8::Uint32::NewFromUnsigned(0x0B63));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_END"), v8::Uint32::NewFromUnsigned(0x0B64));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_MODE"), v8::Uint32::NewFromUnsigned(0x0B65));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COLOR"), v8::Uint32::NewFromUnsigned(0x0B66));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_RANGE"), v8::Uint32::NewFromUnsigned(0x0B70));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_TEST"), v8::Uint32::NewFromUnsigned(0x0B71));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_WRITEMASK"), v8::Uint32::NewFromUnsigned(0x0B72));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_CLEAR_VALUE"), v8::Uint32::NewFromUnsigned(0x0B73));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_FUNC"), v8::Uint32::NewFromUnsigned(0x0B74));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACCUM_CLEAR_VALUE"), v8::Uint32::NewFromUnsigned(0x0B80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_TEST"), v8::Uint32::NewFromUnsigned(0x0B90));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_CLEAR_VALUE"), v8::Uint32::NewFromUnsigned(0x0B91));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_FUNC"), v8::Uint32::NewFromUnsigned(0x0B92));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_VALUE_MASK"), v8::Uint32::NewFromUnsigned(0x0B93));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_FAIL"), v8::Uint32::NewFromUnsigned(0x0B94));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_PASS_DEPTH_FAIL"), v8::Uint32::NewFromUnsigned(0x0B95));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_PASS_DEPTH_PASS"), v8::Uint32::NewFromUnsigned(0x0B96));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_REF"), v8::Uint32::NewFromUnsigned(0x0B97));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_WRITEMASK"), v8::Uint32::NewFromUnsigned(0x0B98));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_MODE"), v8::Uint32::NewFromUnsigned(0x0BA0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMALIZE"), v8::Uint32::NewFromUnsigned(0x0BA1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEWPORT"), v8::Uint32::NewFromUnsigned(0x0BA2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0BA3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW0_STACK_DEPTH_EXT"), v8::Uint32::NewFromUnsigned(0x0BA3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROJECTION_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0BA4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0BA5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW_MATRIX"), v8::Uint32::NewFromUnsigned(0x0BA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW0_MATRIX_EXT"), v8::Uint32::NewFromUnsigned(0x0BA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROJECTION_MATRIX"), v8::Uint32::NewFromUnsigned(0x0BA7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MATRIX"), v8::Uint32::NewFromUnsigned(0x0BA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATTRIB_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0BB0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIENT_ATTRIB_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0BB1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_TEST"), v8::Uint32::NewFromUnsigned(0x0BC0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_TEST_QCOM"), v8::Uint32::NewFromUnsigned(0x0BC0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_TEST_FUNC"), v8::Uint32::NewFromUnsigned(0x0BC1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_TEST_FUNC_QCOM"), v8::Uint32::NewFromUnsigned(0x0BC1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_TEST_REF"), v8::Uint32::NewFromUnsigned(0x0BC2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_TEST_REF_QCOM"), v8::Uint32::NewFromUnsigned(0x0BC2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DITHER"), v8::Uint32::NewFromUnsigned(0x0BD0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_DST"), v8::Uint32::NewFromUnsigned(0x0BE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_SRC"), v8::Uint32::NewFromUnsigned(0x0BE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND"), v8::Uint32::NewFromUnsigned(0x0BE2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOGIC_OP_MODE"), v8::Uint32::NewFromUnsigned(0x0BF0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_LOGIC_OP"), v8::Uint32::NewFromUnsigned(0x0BF1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOGIC_OP"), v8::Uint32::NewFromUnsigned(0x0BF1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_LOGIC_OP"), v8::Uint32::NewFromUnsigned(0x0BF2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AUX_BUFFERS"), v8::Uint32::NewFromUnsigned(0x0C00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER"), v8::Uint32::NewFromUnsigned(0x0C01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x0C01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_BUFFER"), v8::Uint32::NewFromUnsigned(0x0C02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x0C02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x0C02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCISSOR_BOX"), v8::Uint32::NewFromUnsigned(0x0C10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCISSOR_TEST"), v8::Uint32::NewFromUnsigned(0x0C11));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_CLEAR_VALUE"), v8::Uint32::NewFromUnsigned(0x0C20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_WRITEMASK"), v8::Uint32::NewFromUnsigned(0x0C21));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_CLEAR_VALUE"), v8::Uint32::NewFromUnsigned(0x0C22));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_WRITEMASK"), v8::Uint32::NewFromUnsigned(0x0C23));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_MODE"), v8::Uint32::NewFromUnsigned(0x0C30));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_MODE"), v8::Uint32::NewFromUnsigned(0x0C31));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLEBUFFER"), v8::Uint32::NewFromUnsigned(0x0C32));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STEREO"), v8::Uint32::NewFromUnsigned(0x0C33));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDER_MODE"), v8::Uint32::NewFromUnsigned(0x0C40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERSPECTIVE_CORRECTION_HINT"), v8::Uint32::NewFromUnsigned(0x0C50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SMOOTH_HINT"), v8::Uint32::NewFromUnsigned(0x0C51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_SMOOTH_HINT"), v8::Uint32::NewFromUnsigned(0x0C52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_SMOOTH_HINT"), v8::Uint32::NewFromUnsigned(0x0C53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_HINT"), v8::Uint32::NewFromUnsigned(0x0C54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GEN_S"), v8::Uint32::NewFromUnsigned(0x0C60));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GEN_T"), v8::Uint32::NewFromUnsigned(0x0C61));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GEN_R"), v8::Uint32::NewFromUnsigned(0x0C62));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GEN_Q"), v8::Uint32::NewFromUnsigned(0x0C63));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_I"), v8::Uint32::NewFromUnsigned(0x0C70));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_S_TO_S"), v8::Uint32::NewFromUnsigned(0x0C71));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_R"), v8::Uint32::NewFromUnsigned(0x0C72));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_G"), v8::Uint32::NewFromUnsigned(0x0C73));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_B"), v8::Uint32::NewFromUnsigned(0x0C74));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_A"), v8::Uint32::NewFromUnsigned(0x0C75));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_R_TO_R"), v8::Uint32::NewFromUnsigned(0x0C76));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_G_TO_G"), v8::Uint32::NewFromUnsigned(0x0C77));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_B_TO_B"), v8::Uint32::NewFromUnsigned(0x0C78));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_A_TO_A"), v8::Uint32::NewFromUnsigned(0x0C79));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_I_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_S_TO_S_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_R_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_G_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_B_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_I_TO_A_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_R_TO_R_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_G_TO_G_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_B_TO_B_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAP_A_TO_A_SIZE"), v8::Uint32::NewFromUnsigned(0x0CB9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SWAP_BYTES"), v8::Uint32::NewFromUnsigned(0x0CF0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_LSB_FIRST"), v8::Uint32::NewFromUnsigned(0x0CF1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_ROW_LENGTH"), v8::Uint32::NewFromUnsigned(0x0CF2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_ROW_LENGTH_EXT"), v8::Uint32::NewFromUnsigned(0x0CF2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SKIP_ROWS"), v8::Uint32::NewFromUnsigned(0x0CF3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SKIP_ROWS_EXT"), v8::Uint32::NewFromUnsigned(0x0CF3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SKIP_PIXELS"), v8::Uint32::NewFromUnsigned(0x0CF4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SKIP_PIXELS_EXT"), v8::Uint32::NewFromUnsigned(0x0CF4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_ALIGNMENT"), v8::Uint32::NewFromUnsigned(0x0CF5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_SWAP_BYTES"), v8::Uint32::NewFromUnsigned(0x0D00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_LSB_FIRST"), v8::Uint32::NewFromUnsigned(0x0D01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_ROW_LENGTH"), v8::Uint32::NewFromUnsigned(0x0D02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_SKIP_ROWS"), v8::Uint32::NewFromUnsigned(0x0D03));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_SKIP_PIXELS"), v8::Uint32::NewFromUnsigned(0x0D04));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_ALIGNMENT"), v8::Uint32::NewFromUnsigned(0x0D05));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_COLOR"), v8::Uint32::NewFromUnsigned(0x0D10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_STENCIL"), v8::Uint32::NewFromUnsigned(0x0D11));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_SHIFT"), v8::Uint32::NewFromUnsigned(0x0D12));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_OFFSET"), v8::Uint32::NewFromUnsigned(0x0D13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_SCALE"), v8::Uint32::NewFromUnsigned(0x0D14));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_BIAS"), v8::Uint32::NewFromUnsigned(0x0D15));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ZOOM_X"), v8::Uint32::NewFromUnsigned(0x0D16));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ZOOM_Y"), v8::Uint32::NewFromUnsigned(0x0D17));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_SCALE"), v8::Uint32::NewFromUnsigned(0x0D18));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_BIAS"), v8::Uint32::NewFromUnsigned(0x0D19));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_SCALE"), v8::Uint32::NewFromUnsigned(0x0D1A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_BIAS"), v8::Uint32::NewFromUnsigned(0x0D1B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_SCALE"), v8::Uint32::NewFromUnsigned(0x0D1C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_BIAS"), v8::Uint32::NewFromUnsigned(0x0D1D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_SCALE"), v8::Uint32::NewFromUnsigned(0x0D1E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BIAS"), v8::Uint32::NewFromUnsigned(0x0D1F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_EVAL_ORDER"), v8::Uint32::NewFromUnsigned(0x0D30));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_LIGHTS"), v8::Uint32::NewFromUnsigned(0x0D31));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CLIP_PLANES"), v8::Uint32::NewFromUnsigned(0x0D32));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CLIP_PLANES_IMG"), v8::Uint32::NewFromUnsigned(0x0D32));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CLIP_DISTANCES"), v8::Uint32::NewFromUnsigned(0x0D32));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_SIZE"), v8::Uint32::NewFromUnsigned(0x0D33));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PIXEL_MAP_TABLE"), v8::Uint32::NewFromUnsigned(0x0D34));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ATTRIB_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0D35));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_MODELVIEW_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0D36));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_NAME_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0D37));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROJECTION_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0D38));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0D39));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VIEWPORT_DIMS"), v8::Uint32::NewFromUnsigned(0x0D3A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CLIENT_ATTRIB_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0D3B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SUBPIXEL_BITS"), v8::Uint32::NewFromUnsigned(0x0D50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_BITS"), v8::Uint32::NewFromUnsigned(0x0D51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_BITS"), v8::Uint32::NewFromUnsigned(0x0D52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_BITS"), v8::Uint32::NewFromUnsigned(0x0D53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_BITS"), v8::Uint32::NewFromUnsigned(0x0D54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_BITS"), v8::Uint32::NewFromUnsigned(0x0D55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BITS"), v8::Uint32::NewFromUnsigned(0x0D56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BITS"), v8::Uint32::NewFromUnsigned(0x0D57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACCUM_RED_BITS"), v8::Uint32::NewFromUnsigned(0x0D58));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACCUM_GREEN_BITS"), v8::Uint32::NewFromUnsigned(0x0D59));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACCUM_BLUE_BITS"), v8::Uint32::NewFromUnsigned(0x0D5A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACCUM_ALPHA_BITS"), v8::Uint32::NewFromUnsigned(0x0D5B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NAME_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x0D70));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AUTO_NORMAL"), v8::Uint32::NewFromUnsigned(0x0D80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_COLOR_4"), v8::Uint32::NewFromUnsigned(0x0D90));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_INDEX"), v8::Uint32::NewFromUnsigned(0x0D91));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_NORMAL"), v8::Uint32::NewFromUnsigned(0x0D92));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_TEXTURE_COORD_1"), v8::Uint32::NewFromUnsigned(0x0D93));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_TEXTURE_COORD_2"), v8::Uint32::NewFromUnsigned(0x0D94));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_TEXTURE_COORD_3"), v8::Uint32::NewFromUnsigned(0x0D95));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_TEXTURE_COORD_4"), v8::Uint32::NewFromUnsigned(0x0D96));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_3"), v8::Uint32::NewFromUnsigned(0x0D97));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_4"), v8::Uint32::NewFromUnsigned(0x0D98));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_COLOR_4"), v8::Uint32::NewFromUnsigned(0x0DB0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_INDEX"), v8::Uint32::NewFromUnsigned(0x0DB1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_NORMAL"), v8::Uint32::NewFromUnsigned(0x0DB2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_TEXTURE_COORD_1"), v8::Uint32::NewFromUnsigned(0x0DB3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_TEXTURE_COORD_2"), v8::Uint32::NewFromUnsigned(0x0DB4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_TEXTURE_COORD_3"), v8::Uint32::NewFromUnsigned(0x0DB5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_TEXTURE_COORD_4"), v8::Uint32::NewFromUnsigned(0x0DB6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_3"), v8::Uint32::NewFromUnsigned(0x0DB7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_4"), v8::Uint32::NewFromUnsigned(0x0DB8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_GRID_DOMAIN"), v8::Uint32::NewFromUnsigned(0x0DD0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_GRID_SEGMENTS"), v8::Uint32::NewFromUnsigned(0x0DD1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_GRID_DOMAIN"), v8::Uint32::NewFromUnsigned(0x0DD2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_GRID_SEGMENTS"), v8::Uint32::NewFromUnsigned(0x0DD3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_1D"), v8::Uint32::NewFromUnsigned(0x0DE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D"), v8::Uint32::NewFromUnsigned(0x0DE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FEEDBACK_BUFFER_POINTER"), v8::Uint32::NewFromUnsigned(0x0DF0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FEEDBACK_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x0DF1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FEEDBACK_BUFFER_TYPE"), v8::Uint32::NewFromUnsigned(0x0DF2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SELECTION_BUFFER_POINTER"), v8::Uint32::NewFromUnsigned(0x0DF3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SELECTION_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x0DF4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_WIDTH"), v8::Uint32::NewFromUnsigned(0x1000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_HEIGHT"), v8::Uint32::NewFromUnsigned(0x1001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_INTERNAL_FORMAT"), v8::Uint32::NewFromUnsigned(0x1003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x1003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BORDER_COLOR"), v8::Uint32::NewFromUnsigned(0x1004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BORDER_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x1004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BORDER_COLOR_NV"), v8::Uint32::NewFromUnsigned(0x1004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BORDER"), v8::Uint32::NewFromUnsigned(0x1005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DONT_CARE"), v8::Uint32::NewFromUnsigned(0x1100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FASTEST"), v8::Uint32::NewFromUnsigned(0x1101));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NICEST"), v8::Uint32::NewFromUnsigned(0x1102));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AMBIENT"), v8::Uint32::NewFromUnsigned(0x1200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DIFFUSE"), v8::Uint32::NewFromUnsigned(0x1201));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPECULAR"), v8::Uint32::NewFromUnsigned(0x1202));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POSITION"), v8::Uint32::NewFromUnsigned(0x1203));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPOT_DIRECTION"), v8::Uint32::NewFromUnsigned(0x1204));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPOT_EXPONENT"), v8::Uint32::NewFromUnsigned(0x1205));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPOT_CUTOFF"), v8::Uint32::NewFromUnsigned(0x1206));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_ATTENUATION"), v8::Uint32::NewFromUnsigned(0x1207));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_ATTENUATION"), v8::Uint32::NewFromUnsigned(0x1208));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUADRATIC_ATTENUATION"), v8::Uint32::NewFromUnsigned(0x1209));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPILE"), v8::Uint32::NewFromUnsigned(0x1300));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPILE_AND_EXECUTE"), v8::Uint32::NewFromUnsigned(0x1301));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BYTE"), v8::Uint32::NewFromUnsigned(0x1400));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_BYTE"), v8::Uint32::NewFromUnsigned(0x1401));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHORT"), v8::Uint32::NewFromUnsigned(0x1402));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT"), v8::Uint32::NewFromUnsigned(0x1403));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT"), v8::Uint32::NewFromUnsigned(0x1404));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT"), v8::Uint32::NewFromUnsigned(0x1405));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT"), v8::Uint32::NewFromUnsigned(0x1406));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_2_BYTES"), v8::Uint32::NewFromUnsigned(0x1407));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_3_BYTES"), v8::Uint32::NewFromUnsigned(0x1408));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4_BYTES"), v8::Uint32::NewFromUnsigned(0x1409));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE"), v8::Uint32::NewFromUnsigned(0x140A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_EXT"), v8::Uint32::NewFromUnsigned(0x140A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HALF_FLOAT"), v8::Uint32::NewFromUnsigned(0x140B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HALF_FLOAT_ARB"), v8::Uint32::NewFromUnsigned(0x140B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HALF_FLOAT_NV"), v8::Uint32::NewFromUnsigned(0x140B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HALF_APPLE"), v8::Uint32::NewFromUnsigned(0x140B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIXED"), v8::Uint32::NewFromUnsigned(0x140C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIXED_OES"), v8::Uint32::NewFromUnsigned(0x140C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT64_NV"), v8::Uint32::NewFromUnsigned(0x140E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT64_ARB"), v8::Uint32::NewFromUnsigned(0x140F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT64_NV"), v8::Uint32::NewFromUnsigned(0x140F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLEAR"), v8::Uint32::NewFromUnsigned(0x1500));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AND"), v8::Uint32::NewFromUnsigned(0x1501));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AND_REVERSE"), v8::Uint32::NewFromUnsigned(0x1502));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY"), v8::Uint32::NewFromUnsigned(0x1503));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AND_INVERTED"), v8::Uint32::NewFromUnsigned(0x1504));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NOOP"), v8::Uint32::NewFromUnsigned(0x1505));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_XOR"), v8::Uint32::NewFromUnsigned(0x1506));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_XOR_NV"), v8::Uint32::NewFromUnsigned(0x1506));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OR"), v8::Uint32::NewFromUnsigned(0x1507));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NOR"), v8::Uint32::NewFromUnsigned(0x1508));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EQUIV"), v8::Uint32::NewFromUnsigned(0x1509));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVERT"), v8::Uint32::NewFromUnsigned(0x150A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OR_REVERSE"), v8::Uint32::NewFromUnsigned(0x150B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY_INVERTED"), v8::Uint32::NewFromUnsigned(0x150C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OR_INVERTED"), v8::Uint32::NewFromUnsigned(0x150D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NAND"), v8::Uint32::NewFromUnsigned(0x150E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SET"), v8::Uint32::NewFromUnsigned(0x150F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EMISSION"), v8::Uint32::NewFromUnsigned(0x1600));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHININESS"), v8::Uint32::NewFromUnsigned(0x1601));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AMBIENT_AND_DIFFUSE"), v8::Uint32::NewFromUnsigned(0x1602));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_INDEXES"), v8::Uint32::NewFromUnsigned(0x1603));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW"), v8::Uint32::NewFromUnsigned(0x1700));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW0_ARB"), v8::Uint32::NewFromUnsigned(0x1700));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW0_EXT"), v8::Uint32::NewFromUnsigned(0x1700));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROJECTION"), v8::Uint32::NewFromUnsigned(0x1701));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE"), v8::Uint32::NewFromUnsigned(0x1702));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR"), v8::Uint32::NewFromUnsigned(0x1800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x1800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH"), v8::Uint32::NewFromUnsigned(0x1801));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_EXT"), v8::Uint32::NewFromUnsigned(0x1801));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL"), v8::Uint32::NewFromUnsigned(0x1802));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_EXT"), v8::Uint32::NewFromUnsigned(0x1802));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_INDEX"), v8::Uint32::NewFromUnsigned(0x1900));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX"), v8::Uint32::NewFromUnsigned(0x1901));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX_OES"), v8::Uint32::NewFromUnsigned(0x1901));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT"), v8::Uint32::NewFromUnsigned(0x1902));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED"), v8::Uint32::NewFromUnsigned(0x1903));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_EXT"), v8::Uint32::NewFromUnsigned(0x1903));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_NV"), v8::Uint32::NewFromUnsigned(0x1903));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN"), v8::Uint32::NewFromUnsigned(0x1904));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_NV"), v8::Uint32::NewFromUnsigned(0x1904));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE"), v8::Uint32::NewFromUnsigned(0x1905));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_NV"), v8::Uint32::NewFromUnsigned(0x1905));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA"), v8::Uint32::NewFromUnsigned(0x1906));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB"), v8::Uint32::NewFromUnsigned(0x1907));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA"), v8::Uint32::NewFromUnsigned(0x1908));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE"), v8::Uint32::NewFromUnsigned(0x1909));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA"), v8::Uint32::NewFromUnsigned(0x190A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BITMAP"), v8::Uint32::NewFromUnsigned(0x1A00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT"), v8::Uint32::NewFromUnsigned(0x1B00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE"), v8::Uint32::NewFromUnsigned(0x1B01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FILL"), v8::Uint32::NewFromUnsigned(0x1B02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDER"), v8::Uint32::NewFromUnsigned(0x1C00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FEEDBACK"), v8::Uint32::NewFromUnsigned(0x1C01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SELECT"), v8::Uint32::NewFromUnsigned(0x1C02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLAT"), v8::Uint32::NewFromUnsigned(0x1D00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SMOOTH"), v8::Uint32::NewFromUnsigned(0x1D01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_KEEP"), v8::Uint32::NewFromUnsigned(0x1E00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACE"), v8::Uint32::NewFromUnsigned(0x1E01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INCR"), v8::Uint32::NewFromUnsigned(0x1E02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DECR"), v8::Uint32::NewFromUnsigned(0x1E03));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VENDOR"), v8::Uint32::NewFromUnsigned(0x1F00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERER"), v8::Uint32::NewFromUnsigned(0x1F01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERSION"), v8::Uint32::NewFromUnsigned(0x1F02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EXTENSIONS"), v8::Uint32::NewFromUnsigned(0x1F03));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_S"), v8::Uint32::NewFromUnsigned(0x2000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T"), v8::Uint32::NewFromUnsigned(0x2001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R"), v8::Uint32::NewFromUnsigned(0x2002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Q"), v8::Uint32::NewFromUnsigned(0x2003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODULATE"), v8::Uint32::NewFromUnsigned(0x2100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DECAL"), v8::Uint32::NewFromUnsigned(0x2101));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ENV_MODE"), v8::Uint32::NewFromUnsigned(0x2200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ENV_COLOR"), v8::Uint32::NewFromUnsigned(0x2201));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ENV"), v8::Uint32::NewFromUnsigned(0x2300));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EYE_LINEAR"), v8::Uint32::NewFromUnsigned(0x2400));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_LINEAR"), v8::Uint32::NewFromUnsigned(0x2401));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPHERE_MAP"), v8::Uint32::NewFromUnsigned(0x2402));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GEN_MODE"), v8::Uint32::NewFromUnsigned(0x2500));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GEN_MODE_OES"), v8::Uint32::NewFromUnsigned(0x2500));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_PLANE"), v8::Uint32::NewFromUnsigned(0x2501));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EYE_PLANE"), v8::Uint32::NewFromUnsigned(0x2502));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEAREST"), v8::Uint32::NewFromUnsigned(0x2600));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR"), v8::Uint32::NewFromUnsigned(0x2601));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEAREST_MIPMAP_NEAREST"), v8::Uint32::NewFromUnsigned(0x2700));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_MIPMAP_NEAREST"), v8::Uint32::NewFromUnsigned(0x2701));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEAREST_MIPMAP_LINEAR"), v8::Uint32::NewFromUnsigned(0x2702));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_MIPMAP_LINEAR"), v8::Uint32::NewFromUnsigned(0x2703));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAG_FILTER"), v8::Uint32::NewFromUnsigned(0x2800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MIN_FILTER"), v8::Uint32::NewFromUnsigned(0x2801));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_WRAP_S"), v8::Uint32::NewFromUnsigned(0x2802));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_WRAP_T"), v8::Uint32::NewFromUnsigned(0x2803));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP"), v8::Uint32::NewFromUnsigned(0x2900));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPEAT"), v8::Uint32::NewFromUnsigned(0x2901));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_OFFSET_UNITS"), v8::Uint32::NewFromUnsigned(0x2A00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_OFFSET_POINT"), v8::Uint32::NewFromUnsigned(0x2A01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_OFFSET_LINE"), v8::Uint32::NewFromUnsigned(0x2A02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R3_G3_B2"), v8::Uint32::NewFromUnsigned(0x2A10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_V2F"), v8::Uint32::NewFromUnsigned(0x2A20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_V3F"), v8::Uint32::NewFromUnsigned(0x2A21));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_C4UB_V2F"), v8::Uint32::NewFromUnsigned(0x2A22));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_C4UB_V3F"), v8::Uint32::NewFromUnsigned(0x2A23));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_C3F_V3F"), v8::Uint32::NewFromUnsigned(0x2A24));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_N3F_V3F"), v8::Uint32::NewFromUnsigned(0x2A25));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_C4F_N3F_V3F"), v8::Uint32::NewFromUnsigned(0x2A26));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_V3F"), v8::Uint32::NewFromUnsigned(0x2A27));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T4F_V4F"), v8::Uint32::NewFromUnsigned(0x2A28));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_C4UB_V3F"), v8::Uint32::NewFromUnsigned(0x2A29));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_C3F_V3F"), v8::Uint32::NewFromUnsigned(0x2A2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_N3F_V3F"), v8::Uint32::NewFromUnsigned(0x2A2B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_C4F_N3F_V3F"), v8::Uint32::NewFromUnsigned(0x2A2C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T4F_C4F_N3F_V4F"), v8::Uint32::NewFromUnsigned(0x2A2D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE0"), v8::Uint32::NewFromUnsigned(0x3000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE0_IMG"), v8::Uint32::NewFromUnsigned(0x3000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE0"), v8::Uint32::NewFromUnsigned(0x3000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE1"), v8::Uint32::NewFromUnsigned(0x3001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE1_IMG"), v8::Uint32::NewFromUnsigned(0x3001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE1"), v8::Uint32::NewFromUnsigned(0x3001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE2"), v8::Uint32::NewFromUnsigned(0x3002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE2_IMG"), v8::Uint32::NewFromUnsigned(0x3002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE2"), v8::Uint32::NewFromUnsigned(0x3002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE3"), v8::Uint32::NewFromUnsigned(0x3003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE3_IMG"), v8::Uint32::NewFromUnsigned(0x3003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE3"), v8::Uint32::NewFromUnsigned(0x3003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE4"), v8::Uint32::NewFromUnsigned(0x3004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE4_IMG"), v8::Uint32::NewFromUnsigned(0x3004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE4"), v8::Uint32::NewFromUnsigned(0x3004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE5"), v8::Uint32::NewFromUnsigned(0x3005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_PLANE5_IMG"), v8::Uint32::NewFromUnsigned(0x3005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE5"), v8::Uint32::NewFromUnsigned(0x3005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE6"), v8::Uint32::NewFromUnsigned(0x3006));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE7"), v8::Uint32::NewFromUnsigned(0x3007));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT0"), v8::Uint32::NewFromUnsigned(0x4000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT1"), v8::Uint32::NewFromUnsigned(0x4001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT2"), v8::Uint32::NewFromUnsigned(0x4002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT3"), v8::Uint32::NewFromUnsigned(0x4003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT4"), v8::Uint32::NewFromUnsigned(0x4004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT5"), v8::Uint32::NewFromUnsigned(0x4005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT6"), v8::Uint32::NewFromUnsigned(0x4006));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT7"), v8::Uint32::NewFromUnsigned(0x4007));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ABGR_EXT"), v8::Uint32::NewFromUnsigned(0x8000));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_COLOR"), v8::Uint32::NewFromUnsigned(0x8001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x8001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_CONSTANT_COLOR"), v8::Uint32::NewFromUnsigned(0x8002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_CONSTANT_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x8002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_ALPHA"), v8::Uint32::NewFromUnsigned(0x8003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_CONSTANT_ALPHA"), v8::Uint32::NewFromUnsigned(0x8004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_CONSTANT_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_COLOR"), v8::Uint32::NewFromUnsigned(0x8005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x8005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_ADD"), v8::Uint32::NewFromUnsigned(0x8006));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_ADD_EXT"), v8::Uint32::NewFromUnsigned(0x8006));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_ADD_OES"), v8::Uint32::NewFromUnsigned(0x8006));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN"), v8::Uint32::NewFromUnsigned(0x8007));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_EXT"), v8::Uint32::NewFromUnsigned(0x8007));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX"), v8::Uint32::NewFromUnsigned(0x8008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_EXT"), v8::Uint32::NewFromUnsigned(0x8008));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION"), v8::Uint32::NewFromUnsigned(0x8009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION_EXT"), v8::Uint32::NewFromUnsigned(0x8009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION_OES"), v8::Uint32::NewFromUnsigned(0x8009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION_RGB"), v8::Uint32::NewFromUnsigned(0x8009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION_RGB_OES"), v8::Uint32::NewFromUnsigned(0x8009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_SUBTRACT"), v8::Uint32::NewFromUnsigned(0x800A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_SUBTRACT_EXT"), v8::Uint32::NewFromUnsigned(0x800A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_SUBTRACT_OES"), v8::Uint32::NewFromUnsigned(0x800A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_REVERSE_SUBTRACT"), v8::Uint32::NewFromUnsigned(0x800B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_REVERSE_SUBTRACT_EXT"), v8::Uint32::NewFromUnsigned(0x800B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FUNC_REVERSE_SUBTRACT_OES"), v8::Uint32::NewFromUnsigned(0x800B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CMYK_EXT"), v8::Uint32::NewFromUnsigned(0x800C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CMYKA_EXT"), v8::Uint32::NewFromUnsigned(0x800D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_CMYK_HINT_EXT"), v8::Uint32::NewFromUnsigned(0x800E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_CMYK_HINT_EXT"), v8::Uint32::NewFromUnsigned(0x800F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_1D"), v8::Uint32::NewFromUnsigned(0x8010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_1D_EXT"), v8::Uint32::NewFromUnsigned(0x8010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_2D"), v8::Uint32::NewFromUnsigned(0x8011));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_2D_EXT"), v8::Uint32::NewFromUnsigned(0x8011));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SEPARABLE_2D"), v8::Uint32::NewFromUnsigned(0x8012));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SEPARABLE_2D_EXT"), v8::Uint32::NewFromUnsigned(0x8012));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_BORDER_MODE"), v8::Uint32::NewFromUnsigned(0x8013));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_BORDER_MODE_EXT"), v8::Uint32::NewFromUnsigned(0x8013));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_FILTER_SCALE"), v8::Uint32::NewFromUnsigned(0x8014));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_FILTER_SCALE_EXT"), v8::Uint32::NewFromUnsigned(0x8014));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_FILTER_BIAS"), v8::Uint32::NewFromUnsigned(0x8015));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_FILTER_BIAS_EXT"), v8::Uint32::NewFromUnsigned(0x8015));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REDUCE"), v8::Uint32::NewFromUnsigned(0x8016));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REDUCE_EXT"), v8::Uint32::NewFromUnsigned(0x8016));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_FORMAT"), v8::Uint32::NewFromUnsigned(0x8017));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_FORMAT_EXT"), v8::Uint32::NewFromUnsigned(0x8017));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_WIDTH"), v8::Uint32::NewFromUnsigned(0x8018));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_WIDTH_EXT"), v8::Uint32::NewFromUnsigned(0x8018));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_HEIGHT"), v8::Uint32::NewFromUnsigned(0x8019));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_HEIGHT_EXT"), v8::Uint32::NewFromUnsigned(0x8019));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CONVOLUTION_WIDTH"), v8::Uint32::NewFromUnsigned(0x801A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CONVOLUTION_WIDTH_EXT"), v8::Uint32::NewFromUnsigned(0x801A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CONVOLUTION_HEIGHT"), v8::Uint32::NewFromUnsigned(0x801B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CONVOLUTION_HEIGHT_EXT"), v8::Uint32::NewFromUnsigned(0x801B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_RED_SCALE"), v8::Uint32::NewFromUnsigned(0x801C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_RED_SCALE_EXT"), v8::Uint32::NewFromUnsigned(0x801C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_GREEN_SCALE"), v8::Uint32::NewFromUnsigned(0x801D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_GREEN_SCALE_EXT"), v8::Uint32::NewFromUnsigned(0x801D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_BLUE_SCALE"), v8::Uint32::NewFromUnsigned(0x801E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_BLUE_SCALE_EXT"), v8::Uint32::NewFromUnsigned(0x801E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_ALPHA_SCALE"), v8::Uint32::NewFromUnsigned(0x801F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_ALPHA_SCALE_EXT"), v8::Uint32::NewFromUnsigned(0x801F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_RED_BIAS"), v8::Uint32::NewFromUnsigned(0x8020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_RED_BIAS_EXT"), v8::Uint32::NewFromUnsigned(0x8020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_GREEN_BIAS"), v8::Uint32::NewFromUnsigned(0x8021));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_GREEN_BIAS_EXT"), v8::Uint32::NewFromUnsigned(0x8021));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_BLUE_BIAS"), v8::Uint32::NewFromUnsigned(0x8022));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_BLUE_BIAS_EXT"), v8::Uint32::NewFromUnsigned(0x8022));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_ALPHA_BIAS"), v8::Uint32::NewFromUnsigned(0x8023));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_ALPHA_BIAS_EXT"), v8::Uint32::NewFromUnsigned(0x8023));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM"), v8::Uint32::NewFromUnsigned(0x8024));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_EXT"), v8::Uint32::NewFromUnsigned(0x8024));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_HISTOGRAM"), v8::Uint32::NewFromUnsigned(0x8025));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_HISTOGRAM_EXT"), v8::Uint32::NewFromUnsigned(0x8025));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_WIDTH"), v8::Uint32::NewFromUnsigned(0x8026));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_WIDTH_EXT"), v8::Uint32::NewFromUnsigned(0x8026));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_FORMAT"), v8::Uint32::NewFromUnsigned(0x8027));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_FORMAT_EXT"), v8::Uint32::NewFromUnsigned(0x8027));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_RED_SIZE"), v8::Uint32::NewFromUnsigned(0x8028));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_RED_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8028));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_GREEN_SIZE"), v8::Uint32::NewFromUnsigned(0x8029));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_GREEN_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8029));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_BLUE_SIZE"), v8::Uint32::NewFromUnsigned(0x802A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_BLUE_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x802A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_ALPHA_SIZE"), v8::Uint32::NewFromUnsigned(0x802B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_ALPHA_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x802B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_LUMINANCE_SIZE"), v8::Uint32::NewFromUnsigned(0x802C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_LUMINANCE_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x802C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_SINK"), v8::Uint32::NewFromUnsigned(0x802D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HISTOGRAM_SINK_EXT"), v8::Uint32::NewFromUnsigned(0x802D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINMAX"), v8::Uint32::NewFromUnsigned(0x802E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINMAX_EXT"), v8::Uint32::NewFromUnsigned(0x802E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINMAX_FORMAT"), v8::Uint32::NewFromUnsigned(0x802F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINMAX_FORMAT_EXT"), v8::Uint32::NewFromUnsigned(0x802F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINMAX_SINK"), v8::Uint32::NewFromUnsigned(0x8030));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINMAX_SINK_EXT"), v8::Uint32::NewFromUnsigned(0x8030));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TABLE_TOO_LARGE_EXT"), v8::Uint32::NewFromUnsigned(0x8031));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TABLE_TOO_LARGE"), v8::Uint32::NewFromUnsigned(0x8031));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_BYTE_3_3_2"), v8::Uint32::NewFromUnsigned(0x8032));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_BYTE_3_3_2_EXT"), v8::Uint32::NewFromUnsigned(0x8032));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_4_4_4_4"), v8::Uint32::NewFromUnsigned(0x8033));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_4_4_4_4_EXT"), v8::Uint32::NewFromUnsigned(0x8033));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_5_5_5_1"), v8::Uint32::NewFromUnsigned(0x8034));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_5_5_5_1_EXT"), v8::Uint32::NewFromUnsigned(0x8034));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_8_8_8_8"), v8::Uint32::NewFromUnsigned(0x8035));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_8_8_8_8_EXT"), v8::Uint32::NewFromUnsigned(0x8035));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_10_10_10_2"), v8::Uint32::NewFromUnsigned(0x8036));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_10_10_10_2_EXT"), v8::Uint32::NewFromUnsigned(0x8036));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_OFFSET_EXT"), v8::Uint32::NewFromUnsigned(0x8037));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_OFFSET_FILL"), v8::Uint32::NewFromUnsigned(0x8037));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_OFFSET_FACTOR"), v8::Uint32::NewFromUnsigned(0x8038));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_OFFSET_FACTOR_EXT"), v8::Uint32::NewFromUnsigned(0x8038));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POLYGON_OFFSET_BIAS_EXT"), v8::Uint32::NewFromUnsigned(0x8039));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESCALE_NORMAL"), v8::Uint32::NewFromUnsigned(0x803A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESCALE_NORMAL_EXT"), v8::Uint32::NewFromUnsigned(0x803A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA4"), v8::Uint32::NewFromUnsigned(0x803B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA4_EXT"), v8::Uint32::NewFromUnsigned(0x803B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA8"), v8::Uint32::NewFromUnsigned(0x803C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA8_EXT"), v8::Uint32::NewFromUnsigned(0x803C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA8_OES"), v8::Uint32::NewFromUnsigned(0x803C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA12"), v8::Uint32::NewFromUnsigned(0x803D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA12_EXT"), v8::Uint32::NewFromUnsigned(0x803D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA16"), v8::Uint32::NewFromUnsigned(0x803E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA16_EXT"), v8::Uint32::NewFromUnsigned(0x803E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE4"), v8::Uint32::NewFromUnsigned(0x803F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE4_EXT"), v8::Uint32::NewFromUnsigned(0x803F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8"), v8::Uint32::NewFromUnsigned(0x8040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8_EXT"), v8::Uint32::NewFromUnsigned(0x8040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8_OES"), v8::Uint32::NewFromUnsigned(0x8040));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE12"), v8::Uint32::NewFromUnsigned(0x8041));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE12_EXT"), v8::Uint32::NewFromUnsigned(0x8041));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16"), v8::Uint32::NewFromUnsigned(0x8042));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16_EXT"), v8::Uint32::NewFromUnsigned(0x8042));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE4_ALPHA4"), v8::Uint32::NewFromUnsigned(0x8043));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE4_ALPHA4_EXT"), v8::Uint32::NewFromUnsigned(0x8043));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE4_ALPHA4_OES"), v8::Uint32::NewFromUnsigned(0x8043));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE6_ALPHA2"), v8::Uint32::NewFromUnsigned(0x8044));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE6_ALPHA2_EXT"), v8::Uint32::NewFromUnsigned(0x8044));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8_ALPHA8"), v8::Uint32::NewFromUnsigned(0x8045));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8_ALPHA8_EXT"), v8::Uint32::NewFromUnsigned(0x8045));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8_ALPHA8_OES"), v8::Uint32::NewFromUnsigned(0x8045));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE12_ALPHA4"), v8::Uint32::NewFromUnsigned(0x8046));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE12_ALPHA4_EXT"), v8::Uint32::NewFromUnsigned(0x8046));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE12_ALPHA12"), v8::Uint32::NewFromUnsigned(0x8047));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE12_ALPHA12_EXT"), v8::Uint32::NewFromUnsigned(0x8047));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16_ALPHA16"), v8::Uint32::NewFromUnsigned(0x8048));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16_ALPHA16_EXT"), v8::Uint32::NewFromUnsigned(0x8048));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY"), v8::Uint32::NewFromUnsigned(0x8049));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY_EXT"), v8::Uint32::NewFromUnsigned(0x8049));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY4"), v8::Uint32::NewFromUnsigned(0x804A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY4_EXT"), v8::Uint32::NewFromUnsigned(0x804A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY8"), v8::Uint32::NewFromUnsigned(0x804B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY8_EXT"), v8::Uint32::NewFromUnsigned(0x804B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY12"), v8::Uint32::NewFromUnsigned(0x804C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY12_EXT"), v8::Uint32::NewFromUnsigned(0x804C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY16"), v8::Uint32::NewFromUnsigned(0x804D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY16_EXT"), v8::Uint32::NewFromUnsigned(0x804D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB2_EXT"), v8::Uint32::NewFromUnsigned(0x804E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB4"), v8::Uint32::NewFromUnsigned(0x804F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB4_EXT"), v8::Uint32::NewFromUnsigned(0x804F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB5"), v8::Uint32::NewFromUnsigned(0x8050));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB5_EXT"), v8::Uint32::NewFromUnsigned(0x8050));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB8"), v8::Uint32::NewFromUnsigned(0x8051));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB8_EXT"), v8::Uint32::NewFromUnsigned(0x8051));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB8_OES"), v8::Uint32::NewFromUnsigned(0x8051));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB10"), v8::Uint32::NewFromUnsigned(0x8052));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB10_EXT"), v8::Uint32::NewFromUnsigned(0x8052));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB12"), v8::Uint32::NewFromUnsigned(0x8053));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB12_EXT"), v8::Uint32::NewFromUnsigned(0x8053));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16"), v8::Uint32::NewFromUnsigned(0x8054));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16_EXT"), v8::Uint32::NewFromUnsigned(0x8054));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA2"), v8::Uint32::NewFromUnsigned(0x8055));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA2_EXT"), v8::Uint32::NewFromUnsigned(0x8055));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA4"), v8::Uint32::NewFromUnsigned(0x8056));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA4_EXT"), v8::Uint32::NewFromUnsigned(0x8056));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA4_OES"), v8::Uint32::NewFromUnsigned(0x8056));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB5_A1"), v8::Uint32::NewFromUnsigned(0x8057));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB5_A1_EXT"), v8::Uint32::NewFromUnsigned(0x8057));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB5_A1_OES"), v8::Uint32::NewFromUnsigned(0x8057));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA8"), v8::Uint32::NewFromUnsigned(0x8058));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA8_EXT"), v8::Uint32::NewFromUnsigned(0x8058));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA8_OES"), v8::Uint32::NewFromUnsigned(0x8058));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB10_A2"), v8::Uint32::NewFromUnsigned(0x8059));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB10_A2_EXT"), v8::Uint32::NewFromUnsigned(0x8059));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA12"), v8::Uint32::NewFromUnsigned(0x805A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA12_EXT"), v8::Uint32::NewFromUnsigned(0x805A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16"), v8::Uint32::NewFromUnsigned(0x805B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16_EXT"), v8::Uint32::NewFromUnsigned(0x805B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RED_SIZE"), v8::Uint32::NewFromUnsigned(0x805C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RED_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x805C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GREEN_SIZE"), v8::Uint32::NewFromUnsigned(0x805D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GREEN_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x805D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BLUE_SIZE"), v8::Uint32::NewFromUnsigned(0x805E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BLUE_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x805E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ALPHA_SIZE"), v8::Uint32::NewFromUnsigned(0x805F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ALPHA_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x805F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LUMINANCE_SIZE"), v8::Uint32::NewFromUnsigned(0x8060));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LUMINANCE_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8060));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_INTENSITY_SIZE"), v8::Uint32::NewFromUnsigned(0x8061));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_INTENSITY_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8061));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACE_EXT"), v8::Uint32::NewFromUnsigned(0x8062));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_1D"), v8::Uint32::NewFromUnsigned(0x8063));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_1D_EXT"), v8::Uint32::NewFromUnsigned(0x8063));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_2D"), v8::Uint32::NewFromUnsigned(0x8064));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_2D_EXT"), v8::Uint32::NewFromUnsigned(0x8064));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_TOO_LARGE_EXT"), v8::Uint32::NewFromUnsigned(0x8065));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_PRIORITY"), v8::Uint32::NewFromUnsigned(0x8066));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_PRIORITY_EXT"), v8::Uint32::NewFromUnsigned(0x8066));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RESIDENT"), v8::Uint32::NewFromUnsigned(0x8067));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RESIDENT_EXT"), v8::Uint32::NewFromUnsigned(0x8067));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_1D_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8068));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_1D"), v8::Uint32::NewFromUnsigned(0x8068));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8069));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_2D"), v8::Uint32::NewFromUnsigned(0x8069));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_3D_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x806A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_3D_BINDING_OES"), v8::Uint32::NewFromUnsigned(0x806A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_3D"), v8::Uint32::NewFromUnsigned(0x806A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_3D_OES"), v8::Uint32::NewFromUnsigned(0x806A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_SKIP_IMAGES"), v8::Uint32::NewFromUnsigned(0x806B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_SKIP_IMAGES_EXT"), v8::Uint32::NewFromUnsigned(0x806B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_IMAGE_HEIGHT"), v8::Uint32::NewFromUnsigned(0x806C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_IMAGE_HEIGHT_EXT"), v8::Uint32::NewFromUnsigned(0x806C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SKIP_IMAGES"), v8::Uint32::NewFromUnsigned(0x806D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SKIP_IMAGES_EXT"), v8::Uint32::NewFromUnsigned(0x806D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_IMAGE_HEIGHT"), v8::Uint32::NewFromUnsigned(0x806E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_IMAGE_HEIGHT_EXT"), v8::Uint32::NewFromUnsigned(0x806E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_3D"), v8::Uint32::NewFromUnsigned(0x806F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_3D_EXT"), v8::Uint32::NewFromUnsigned(0x806F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_3D_OES"), v8::Uint32::NewFromUnsigned(0x806F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_3D"), v8::Uint32::NewFromUnsigned(0x8070));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_3D_EXT"), v8::Uint32::NewFromUnsigned(0x8070));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEPTH"), v8::Uint32::NewFromUnsigned(0x8071));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEPTH_EXT"), v8::Uint32::NewFromUnsigned(0x8071));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_WRAP_R"), v8::Uint32::NewFromUnsigned(0x8072));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_WRAP_R_EXT"), v8::Uint32::NewFromUnsigned(0x8072));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_WRAP_R_OES"), v8::Uint32::NewFromUnsigned(0x8072));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_3D_TEXTURE_SIZE"), v8::Uint32::NewFromUnsigned(0x8073));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_3D_TEXTURE_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8073));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_3D_TEXTURE_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x8073));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY"), v8::Uint32::NewFromUnsigned(0x8074));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8074));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_KHR"), v8::Uint32::NewFromUnsigned(0x8074));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY"), v8::Uint32::NewFromUnsigned(0x8075));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8075));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY"), v8::Uint32::NewFromUnsigned(0x8076));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8076));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY"), v8::Uint32::NewFromUnsigned(0x8077));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8077));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY"), v8::Uint32::NewFromUnsigned(0x8078));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8078));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY"), v8::Uint32::NewFromUnsigned(0x8079));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8079));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_SIZE"), v8::Uint32::NewFromUnsigned(0x807A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x807A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x807B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x807B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x807C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x807C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_COUNT_EXT"), v8::Uint32::NewFromUnsigned(0x807D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x807E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x807E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x807F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x807F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_COUNT_EXT"), v8::Uint32::NewFromUnsigned(0x8080));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_SIZE"), v8::Uint32::NewFromUnsigned(0x8081));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8081));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x8082));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8082));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x8083));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x8083));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_COUNT_EXT"), v8::Uint32::NewFromUnsigned(0x8084));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x8085));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8085));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x8086));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x8086));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_COUNT_EXT"), v8::Uint32::NewFromUnsigned(0x8087));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_SIZE"), v8::Uint32::NewFromUnsigned(0x8088));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8088));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x8089));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8089));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x808A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x808A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_COUNT_EXT"), v8::Uint32::NewFromUnsigned(0x808B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x808C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x808C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_COUNT_EXT"), v8::Uint32::NewFromUnsigned(0x808D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x808E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x808E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x808F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x808F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x8090));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x8090));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x8091));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x8091));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x8092));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x8092));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x8093));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x8093));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERLACE_SGIX"), v8::Uint32::NewFromUnsigned(0x8094));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DETAIL_TEXTURE_2D_SGIS"), v8::Uint32::NewFromUnsigned(0x8095));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DETAIL_TEXTURE_2D_BINDING_SGIS"), v8::Uint32::NewFromUnsigned(0x8096));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_DETAIL_SGIS"), v8::Uint32::NewFromUnsigned(0x8097));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_DETAIL_ALPHA_SGIS"), v8::Uint32::NewFromUnsigned(0x8098));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_DETAIL_COLOR_SGIS"), v8::Uint32::NewFromUnsigned(0x8099));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DETAIL_TEXTURE_LEVEL_SGIS"), v8::Uint32::NewFromUnsigned(0x809A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DETAIL_TEXTURE_MODE_SGIS"), v8::Uint32::NewFromUnsigned(0x809B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS"), v8::Uint32::NewFromUnsigned(0x809C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x809D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_ARB"), v8::Uint32::NewFromUnsigned(0x809D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_EXT"), v8::Uint32::NewFromUnsigned(0x809D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_SGIS"), v8::Uint32::NewFromUnsigned(0x809D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_ALPHA_TO_COVERAGE"), v8::Uint32::NewFromUnsigned(0x809E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_ALPHA_TO_COVERAGE_ARB"), v8::Uint32::NewFromUnsigned(0x809E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_ALPHA_TO_MASK_EXT"), v8::Uint32::NewFromUnsigned(0x809E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_ALPHA_TO_MASK_SGIS"), v8::Uint32::NewFromUnsigned(0x809E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_ALPHA_TO_ONE"), v8::Uint32::NewFromUnsigned(0x809F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_ALPHA_TO_ONE_ARB"), v8::Uint32::NewFromUnsigned(0x809F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_ALPHA_TO_ONE_EXT"), v8::Uint32::NewFromUnsigned(0x809F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_ALPHA_TO_ONE_SGIS"), v8::Uint32::NewFromUnsigned(0x809F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_COVERAGE"), v8::Uint32::NewFromUnsigned(0x80A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_COVERAGE_ARB"), v8::Uint32::NewFromUnsigned(0x80A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_EXT"), v8::Uint32::NewFromUnsigned(0x80A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_SGIS"), v8::Uint32::NewFromUnsigned(0x80A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_1PASS_EXT"), v8::Uint32::NewFromUnsigned(0x80A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_1PASS_SGIS"), v8::Uint32::NewFromUnsigned(0x80A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_2PASS_0_EXT"), v8::Uint32::NewFromUnsigned(0x80A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_2PASS_0_SGIS"), v8::Uint32::NewFromUnsigned(0x80A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_2PASS_1_EXT"), v8::Uint32::NewFromUnsigned(0x80A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_2PASS_1_SGIS"), v8::Uint32::NewFromUnsigned(0x80A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4PASS_0_EXT"), v8::Uint32::NewFromUnsigned(0x80A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4PASS_0_SGIS"), v8::Uint32::NewFromUnsigned(0x80A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4PASS_1_EXT"), v8::Uint32::NewFromUnsigned(0x80A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4PASS_1_SGIS"), v8::Uint32::NewFromUnsigned(0x80A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4PASS_2_EXT"), v8::Uint32::NewFromUnsigned(0x80A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4PASS_2_SGIS"), v8::Uint32::NewFromUnsigned(0x80A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4PASS_3_EXT"), v8::Uint32::NewFromUnsigned(0x80A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_4PASS_3_SGIS"), v8::Uint32::NewFromUnsigned(0x80A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_BUFFERS"), v8::Uint32::NewFromUnsigned(0x80A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_BUFFERS_ARB"), v8::Uint32::NewFromUnsigned(0x80A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_BUFFERS_EXT"), v8::Uint32::NewFromUnsigned(0x80A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_BUFFERS_SGIS"), v8::Uint32::NewFromUnsigned(0x80A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLES"), v8::Uint32::NewFromUnsigned(0x80A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLES_ARB"), v8::Uint32::NewFromUnsigned(0x80A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLES_EXT"), v8::Uint32::NewFromUnsigned(0x80A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLES_SGIS"), v8::Uint32::NewFromUnsigned(0x80A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_COVERAGE_VALUE"), v8::Uint32::NewFromUnsigned(0x80AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_COVERAGE_VALUE_ARB"), v8::Uint32::NewFromUnsigned(0x80AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_VALUE_EXT"), v8::Uint32::NewFromUnsigned(0x80AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_VALUE_SGIS"), v8::Uint32::NewFromUnsigned(0x80AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_COVERAGE_INVERT"), v8::Uint32::NewFromUnsigned(0x80AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_COVERAGE_INVERT_ARB"), v8::Uint32::NewFromUnsigned(0x80AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_INVERT_EXT"), v8::Uint32::NewFromUnsigned(0x80AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_INVERT_SGIS"), v8::Uint32::NewFromUnsigned(0x80AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_PATTERN_EXT"), v8::Uint32::NewFromUnsigned(0x80AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_PATTERN_SGIS"), v8::Uint32::NewFromUnsigned(0x80AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_SHARPEN_SGIS"), v8::Uint32::NewFromUnsigned(0x80AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_SHARPEN_ALPHA_SGIS"), v8::Uint32::NewFromUnsigned(0x80AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_SHARPEN_COLOR_SGIS"), v8::Uint32::NewFromUnsigned(0x80AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS"), v8::Uint32::NewFromUnsigned(0x80B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_MATRIX"), v8::Uint32::NewFromUnsigned(0x80B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_MATRIX_SGI"), v8::Uint32::NewFromUnsigned(0x80B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_MATRIX_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x80B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_MATRIX_STACK_DEPTH_SGI"), v8::Uint32::NewFromUnsigned(0x80B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COLOR_MATRIX_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x80B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI"), v8::Uint32::NewFromUnsigned(0x80B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_RED_SCALE"), v8::Uint32::NewFromUnsigned(0x80B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_RED_SCALE_SGI"), v8::Uint32::NewFromUnsigned(0x80B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_GREEN_SCALE"), v8::Uint32::NewFromUnsigned(0x80B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI"), v8::Uint32::NewFromUnsigned(0x80B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_BLUE_SCALE"), v8::Uint32::NewFromUnsigned(0x80B6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI"), v8::Uint32::NewFromUnsigned(0x80B6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_ALPHA_SCALE"), v8::Uint32::NewFromUnsigned(0x80B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI"), v8::Uint32::NewFromUnsigned(0x80B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_RED_BIAS"), v8::Uint32::NewFromUnsigned(0x80B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_RED_BIAS_SGI"), v8::Uint32::NewFromUnsigned(0x80B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_GREEN_BIAS"), v8::Uint32::NewFromUnsigned(0x80B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI"), v8::Uint32::NewFromUnsigned(0x80B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_BLUE_BIAS"), v8::Uint32::NewFromUnsigned(0x80BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI"), v8::Uint32::NewFromUnsigned(0x80BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_ALPHA_BIAS"), v8::Uint32::NewFromUnsigned(0x80BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI"), v8::Uint32::NewFromUnsigned(0x80BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COLOR_TABLE_SGI"), v8::Uint32::NewFromUnsigned(0x80BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_COLOR_TABLE_SGI"), v8::Uint32::NewFromUnsigned(0x80BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ENV_BIAS_SGIX"), v8::Uint32::NewFromUnsigned(0x80BE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADOW_AMBIENT_SGIX"), v8::Uint32::NewFromUnsigned(0x80BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_FAIL_VALUE_ARB"), v8::Uint32::NewFromUnsigned(0x80BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_DST_RGB"), v8::Uint32::NewFromUnsigned(0x80C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_DST_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x80C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_DST_RGB_OES"), v8::Uint32::NewFromUnsigned(0x80C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_SRC_RGB"), v8::Uint32::NewFromUnsigned(0x80C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_SRC_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x80C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_SRC_RGB_OES"), v8::Uint32::NewFromUnsigned(0x80C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_DST_ALPHA"), v8::Uint32::NewFromUnsigned(0x80CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_DST_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x80CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_DST_ALPHA_OES"), v8::Uint32::NewFromUnsigned(0x80CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_SRC_ALPHA"), v8::Uint32::NewFromUnsigned(0x80CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_SRC_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x80CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_SRC_ALPHA_OES"), v8::Uint32::NewFromUnsigned(0x80CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_422_EXT"), v8::Uint32::NewFromUnsigned(0x80CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_422_REV_EXT"), v8::Uint32::NewFromUnsigned(0x80CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_422_AVERAGE_EXT"), v8::Uint32::NewFromUnsigned(0x80CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_422_REV_AVERAGE_EXT"), v8::Uint32::NewFromUnsigned(0x80CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE"), v8::Uint32::NewFromUnsigned(0x80D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_SGI"), v8::Uint32::NewFromUnsigned(0x80D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_COLOR_TABLE"), v8::Uint32::NewFromUnsigned(0x80D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_CONVOLUTION_COLOR_TABLE_SGI"), v8::Uint32::NewFromUnsigned(0x80D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_COLOR_TABLE"), v8::Uint32::NewFromUnsigned(0x80D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI"), v8::Uint32::NewFromUnsigned(0x80D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_COLOR_TABLE"), v8::Uint32::NewFromUnsigned(0x80D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_COLOR_TABLE_SGI"), v8::Uint32::NewFromUnsigned(0x80D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_POST_CONVOLUTION_COLOR_TABLE"), v8::Uint32::NewFromUnsigned(0x80D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI"), v8::Uint32::NewFromUnsigned(0x80D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE"), v8::Uint32::NewFromUnsigned(0x80D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI"), v8::Uint32::NewFromUnsigned(0x80D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_SCALE"), v8::Uint32::NewFromUnsigned(0x80D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_SCALE_SGI"), v8::Uint32::NewFromUnsigned(0x80D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_BIAS"), v8::Uint32::NewFromUnsigned(0x80D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_BIAS_SGI"), v8::Uint32::NewFromUnsigned(0x80D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_FORMAT"), v8::Uint32::NewFromUnsigned(0x80D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_FORMAT_SGI"), v8::Uint32::NewFromUnsigned(0x80D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_WIDTH"), v8::Uint32::NewFromUnsigned(0x80D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_WIDTH_SGI"), v8::Uint32::NewFromUnsigned(0x80D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_RED_SIZE"), v8::Uint32::NewFromUnsigned(0x80DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_RED_SIZE_SGI"), v8::Uint32::NewFromUnsigned(0x80DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_GREEN_SIZE"), v8::Uint32::NewFromUnsigned(0x80DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_GREEN_SIZE_SGI"), v8::Uint32::NewFromUnsigned(0x80DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_BLUE_SIZE"), v8::Uint32::NewFromUnsigned(0x80DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_BLUE_SIZE_SGI"), v8::Uint32::NewFromUnsigned(0x80DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_ALPHA_SIZE"), v8::Uint32::NewFromUnsigned(0x80DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_ALPHA_SIZE_SGI"), v8::Uint32::NewFromUnsigned(0x80DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_LUMINANCE_SIZE"), v8::Uint32::NewFromUnsigned(0x80DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_LUMINANCE_SIZE_SGI"), v8::Uint32::NewFromUnsigned(0x80DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_INTENSITY_SIZE"), v8::Uint32::NewFromUnsigned(0x80DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_TABLE_INTENSITY_SIZE_SGI"), v8::Uint32::NewFromUnsigned(0x80DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGR"), v8::Uint32::NewFromUnsigned(0x80E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGR_EXT"), v8::Uint32::NewFromUnsigned(0x80E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGRA"), v8::Uint32::NewFromUnsigned(0x80E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGRA_EXT"), v8::Uint32::NewFromUnsigned(0x80E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGRA_IMG"), v8::Uint32::NewFromUnsigned(0x80E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_INDEX1_EXT"), v8::Uint32::NewFromUnsigned(0x80E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_INDEX2_EXT"), v8::Uint32::NewFromUnsigned(0x80E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_INDEX4_EXT"), v8::Uint32::NewFromUnsigned(0x80E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_INDEX8_EXT"), v8::Uint32::NewFromUnsigned(0x80E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_INDEX12_EXT"), v8::Uint32::NewFromUnsigned(0x80E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_INDEX16_EXT"), v8::Uint32::NewFromUnsigned(0x80E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ELEMENTS_VERTICES"), v8::Uint32::NewFromUnsigned(0x80E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ELEMENTS_VERTICES_EXT"), v8::Uint32::NewFromUnsigned(0x80E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ELEMENTS_INDICES"), v8::Uint32::NewFromUnsigned(0x80E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ELEMENTS_INDICES_EXT"), v8::Uint32::NewFromUnsigned(0x80E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PHONG_WIN"), v8::Uint32::NewFromUnsigned(0x80EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PHONG_HINT_WIN"), v8::Uint32::NewFromUnsigned(0x80EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_SPECULAR_TEXTURE_WIN"), v8::Uint32::NewFromUnsigned(0x80EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_INDEX_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x80ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PARAMETER_BUFFER_ARB"), v8::Uint32::NewFromUnsigned(0x80EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PARAMETER_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x80EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_VOLUME_CLIPPING_HINT_EXT"), v8::Uint32::NewFromUnsigned(0x80F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_ALPHA4_SGIS"), v8::Uint32::NewFromUnsigned(0x8110));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_ALPHA8_SGIS"), v8::Uint32::NewFromUnsigned(0x8111));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_ALPHA12_SGIS"), v8::Uint32::NewFromUnsigned(0x8112));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_ALPHA16_SGIS"), v8::Uint32::NewFromUnsigned(0x8113));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_LUMINANCE4_SGIS"), v8::Uint32::NewFromUnsigned(0x8114));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_LUMINANCE8_SGIS"), v8::Uint32::NewFromUnsigned(0x8115));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_LUMINANCE12_SGIS"), v8::Uint32::NewFromUnsigned(0x8116));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_LUMINANCE16_SGIS"), v8::Uint32::NewFromUnsigned(0x8117));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_INTENSITY4_SGIS"), v8::Uint32::NewFromUnsigned(0x8118));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_INTENSITY8_SGIS"), v8::Uint32::NewFromUnsigned(0x8119));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_INTENSITY12_SGIS"), v8::Uint32::NewFromUnsigned(0x811A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_INTENSITY16_SGIS"), v8::Uint32::NewFromUnsigned(0x811B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_LUMINANCE_ALPHA4_SGIS"), v8::Uint32::NewFromUnsigned(0x811C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_LUMINANCE_ALPHA8_SGIS"), v8::Uint32::NewFromUnsigned(0x811D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_ALPHA4_SGIS"), v8::Uint32::NewFromUnsigned(0x811E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_ALPHA8_SGIS"), v8::Uint32::NewFromUnsigned(0x811F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_LUMINANCE4_SGIS"), v8::Uint32::NewFromUnsigned(0x8120));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_LUMINANCE8_SGIS"), v8::Uint32::NewFromUnsigned(0x8121));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_INTENSITY4_SGIS"), v8::Uint32::NewFromUnsigned(0x8122));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_INTENSITY8_SGIS"), v8::Uint32::NewFromUnsigned(0x8123));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUAL_TEXTURE_SELECT_SGIS"), v8::Uint32::NewFromUnsigned(0x8124));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_TEXTURE_SELECT_SGIS"), v8::Uint32::NewFromUnsigned(0x8125));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_MIN"), v8::Uint32::NewFromUnsigned(0x8126));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_MIN_ARB"), v8::Uint32::NewFromUnsigned(0x8126));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_MIN_EXT"), v8::Uint32::NewFromUnsigned(0x8126));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_MIN_SGIS"), v8::Uint32::NewFromUnsigned(0x8126));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_MAX"), v8::Uint32::NewFromUnsigned(0x8127));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_MAX_ARB"), v8::Uint32::NewFromUnsigned(0x8127));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_MAX_EXT"), v8::Uint32::NewFromUnsigned(0x8127));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_MAX_SGIS"), v8::Uint32::NewFromUnsigned(0x8127));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_FADE_THRESHOLD_SIZE"), v8::Uint32::NewFromUnsigned(0x8128));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_FADE_THRESHOLD_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x8128));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_FADE_THRESHOLD_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8128));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_FADE_THRESHOLD_SIZE_SGIS"), v8::Uint32::NewFromUnsigned(0x8128));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISTANCE_ATTENUATION_EXT"), v8::Uint32::NewFromUnsigned(0x8129));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISTANCE_ATTENUATION_SGIS"), v8::Uint32::NewFromUnsigned(0x8129));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_DISTANCE_ATTENUATION"), v8::Uint32::NewFromUnsigned(0x8129));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_DISTANCE_ATTENUATION_ARB"), v8::Uint32::NewFromUnsigned(0x8129));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_FUNC_SGIS"), v8::Uint32::NewFromUnsigned(0x812A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_FUNC_POINTS_SGIS"), v8::Uint32::NewFromUnsigned(0x812B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FOG_FUNC_POINTS_SGIS"), v8::Uint32::NewFromUnsigned(0x812C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_TO_BORDER"), v8::Uint32::NewFromUnsigned(0x812D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_TO_BORDER_ARB"), v8::Uint32::NewFromUnsigned(0x812D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_TO_BORDER_EXT"), v8::Uint32::NewFromUnsigned(0x812D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_TO_BORDER_NV"), v8::Uint32::NewFromUnsigned(0x812D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_TO_BORDER_SGIS"), v8::Uint32::NewFromUnsigned(0x812D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MULTI_BUFFER_HINT_SGIX"), v8::Uint32::NewFromUnsigned(0x812E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_TO_EDGE"), v8::Uint32::NewFromUnsigned(0x812F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_TO_EDGE_SGIS"), v8::Uint32::NewFromUnsigned(0x812F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_SKIP_VOLUMES_SGIS"), v8::Uint32::NewFromUnsigned(0x8130));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_IMAGE_DEPTH_SGIS"), v8::Uint32::NewFromUnsigned(0x8131));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SKIP_VOLUMES_SGIS"), v8::Uint32::NewFromUnsigned(0x8132));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_IMAGE_DEPTH_SGIS"), v8::Uint32::NewFromUnsigned(0x8133));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_4D_SGIS"), v8::Uint32::NewFromUnsigned(0x8134));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_4D_SGIS"), v8::Uint32::NewFromUnsigned(0x8135));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_4DSIZE_SGIS"), v8::Uint32::NewFromUnsigned(0x8136));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_WRAP_Q_SGIS"), v8::Uint32::NewFromUnsigned(0x8137));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_4D_TEXTURE_SIZE_SGIS"), v8::Uint32::NewFromUnsigned(0x8138));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_SGIX"), v8::Uint32::NewFromUnsigned(0x8139));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MIN_LOD"), v8::Uint32::NewFromUnsigned(0x813A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MIN_LOD_SGIS"), v8::Uint32::NewFromUnsigned(0x813A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_LOD"), v8::Uint32::NewFromUnsigned(0x813B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_LOD_SGIS"), v8::Uint32::NewFromUnsigned(0x813B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BASE_LEVEL"), v8::Uint32::NewFromUnsigned(0x813C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BASE_LEVEL_SGIS"), v8::Uint32::NewFromUnsigned(0x813C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_LEVEL"), v8::Uint32::NewFromUnsigned(0x813D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_LEVEL_APPLE"), v8::Uint32::NewFromUnsigned(0x813D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_LEVEL_SGIS"), v8::Uint32::NewFromUnsigned(0x813D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX"), v8::Uint32::NewFromUnsigned(0x813E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TILE_CACHE_INCREMENT_SGIX"), v8::Uint32::NewFromUnsigned(0x813F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TILE_WIDTH_SGIX"), v8::Uint32::NewFromUnsigned(0x8140));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TILE_HEIGHT_SGIX"), v8::Uint32::NewFromUnsigned(0x8141));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TILE_GRID_WIDTH_SGIX"), v8::Uint32::NewFromUnsigned(0x8142));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TILE_GRID_HEIGHT_SGIX"), v8::Uint32::NewFromUnsigned(0x8143));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TILE_GRID_DEPTH_SGIX"), v8::Uint32::NewFromUnsigned(0x8144));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TILE_CACHE_SIZE_SGIX"), v8::Uint32::NewFromUnsigned(0x8145));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FILTER4_SGIS"), v8::Uint32::NewFromUnsigned(0x8146));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FILTER4_SIZE_SGIS"), v8::Uint32::NewFromUnsigned(0x8147));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPRITE_SGIX"), v8::Uint32::NewFromUnsigned(0x8148));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPRITE_MODE_SGIX"), v8::Uint32::NewFromUnsigned(0x8149));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPRITE_AXIS_SGIX"), v8::Uint32::NewFromUnsigned(0x814A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPRITE_TRANSLATION_SGIX"), v8::Uint32::NewFromUnsigned(0x814B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPRITE_AXIAL_SGIX"), v8::Uint32::NewFromUnsigned(0x814C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPRITE_OBJECT_ALIGNED_SGIX"), v8::Uint32::NewFromUnsigned(0x814D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPRITE_EYE_ALIGNED_SGIX"), v8::Uint32::NewFromUnsigned(0x814E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_4D_BINDING_SGIS"), v8::Uint32::NewFromUnsigned(0x814F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IGNORE_BORDER_HP"), v8::Uint32::NewFromUnsigned(0x8150));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_BORDER"), v8::Uint32::NewFromUnsigned(0x8151));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_BORDER_HP"), v8::Uint32::NewFromUnsigned(0x8151));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLICATE_BORDER"), v8::Uint32::NewFromUnsigned(0x8153));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLICATE_BORDER_HP"), v8::Uint32::NewFromUnsigned(0x8153));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_BORDER_COLOR"), v8::Uint32::NewFromUnsigned(0x8154));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_BORDER_COLOR_HP"), v8::Uint32::NewFromUnsigned(0x8154));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_SCALE_X_HP"), v8::Uint32::NewFromUnsigned(0x8155));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_SCALE_Y_HP"), v8::Uint32::NewFromUnsigned(0x8156));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_TRANSLATE_X_HP"), v8::Uint32::NewFromUnsigned(0x8157));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_TRANSLATE_Y_HP"), v8::Uint32::NewFromUnsigned(0x8158));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_ROTATE_ANGLE_HP"), v8::Uint32::NewFromUnsigned(0x8159));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_ROTATE_ORIGIN_X_HP"), v8::Uint32::NewFromUnsigned(0x815A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_ROTATE_ORIGIN_Y_HP"), v8::Uint32::NewFromUnsigned(0x815B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_MAG_FILTER_HP"), v8::Uint32::NewFromUnsigned(0x815C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_MIN_FILTER_HP"), v8::Uint32::NewFromUnsigned(0x815D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CUBIC_WEIGHT_HP"), v8::Uint32::NewFromUnsigned(0x815E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CUBIC_HP"), v8::Uint32::NewFromUnsigned(0x815F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AVERAGE_HP"), v8::Uint32::NewFromUnsigned(0x8160));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_TRANSFORM_2D_HP"), v8::Uint32::NewFromUnsigned(0x8161));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP"), v8::Uint32::NewFromUnsigned(0x8162));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP"), v8::Uint32::NewFromUnsigned(0x8163));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OCCLUSION_TEST_HP"), v8::Uint32::NewFromUnsigned(0x8165));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OCCLUSION_TEST_RESULT_HP"), v8::Uint32::NewFromUnsigned(0x8166));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LIGHTING_MODE_HP"), v8::Uint32::NewFromUnsigned(0x8167));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_POST_SPECULAR_HP"), v8::Uint32::NewFromUnsigned(0x8168));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_PRE_SPECULAR_HP"), v8::Uint32::NewFromUnsigned(0x8169));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_CLIPMAP_LINEAR_SGIX"), v8::Uint32::NewFromUnsigned(0x8170));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CLIPMAP_CENTER_SGIX"), v8::Uint32::NewFromUnsigned(0x8171));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CLIPMAP_FRAME_SGIX"), v8::Uint32::NewFromUnsigned(0x8172));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CLIPMAP_OFFSET_SGIX"), v8::Uint32::NewFromUnsigned(0x8173));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX"), v8::Uint32::NewFromUnsigned(0x8174));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX"), v8::Uint32::NewFromUnsigned(0x8175));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CLIPMAP_DEPTH_SGIX"), v8::Uint32::NewFromUnsigned(0x8176));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CLIPMAP_DEPTH_SGIX"), v8::Uint32::NewFromUnsigned(0x8177));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX"), v8::Uint32::NewFromUnsigned(0x8178));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_TEXTURE_FILTER_BIAS_SGIX"), v8::Uint32::NewFromUnsigned(0x8179));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_TEXTURE_FILTER_SCALE_SGIX"), v8::Uint32::NewFromUnsigned(0x817A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX"), v8::Uint32::NewFromUnsigned(0x817B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX"), v8::Uint32::NewFromUnsigned(0x817C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCE_PLANE_SGIX"), v8::Uint32::NewFromUnsigned(0x817D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCE_PLANE_EQUATION_SGIX"), v8::Uint32::NewFromUnsigned(0x817E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IR_INSTRUMENT1_SGIX"), v8::Uint32::NewFromUnsigned(0x817F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INSTRUMENT_BUFFER_POINTER_SGIX"), v8::Uint32::NewFromUnsigned(0x8180));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INSTRUMENT_MEASUREMENTS_SGIX"), v8::Uint32::NewFromUnsigned(0x8181));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIST_PRIORITY_SGIX"), v8::Uint32::NewFromUnsigned(0x8182));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CALLIGRAPHIC_FRAGMENT_SGIX"), v8::Uint32::NewFromUnsigned(0x8183));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_Q_CEILING_SGIX"), v8::Uint32::NewFromUnsigned(0x8184));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_Q_ROUND_SGIX"), v8::Uint32::NewFromUnsigned(0x8185));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX"), v8::Uint32::NewFromUnsigned(0x8186));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX"), v8::Uint32::NewFromUnsigned(0x8187));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX"), v8::Uint32::NewFromUnsigned(0x8188));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX"), v8::Uint32::NewFromUnsigned(0x8189));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX"), v8::Uint32::NewFromUnsigned(0x818A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEZOOM_SGIX"), v8::Uint32::NewFromUnsigned(0x818B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEZOOM_FACTOR_SGIX"), v8::Uint32::NewFromUnsigned(0x818C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAMEZOOM_FACTOR_SGIX"), v8::Uint32::NewFromUnsigned(0x818D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LOD_BIAS_S_SGIX"), v8::Uint32::NewFromUnsigned(0x818E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LOD_BIAS_T_SGIX"), v8::Uint32::NewFromUnsigned(0x818F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LOD_BIAS_R_SGIX"), v8::Uint32::NewFromUnsigned(0x8190));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GENERATE_MIPMAP"), v8::Uint32::NewFromUnsigned(0x8191));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GENERATE_MIPMAP_SGIS"), v8::Uint32::NewFromUnsigned(0x8191));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GENERATE_MIPMAP_HINT"), v8::Uint32::NewFromUnsigned(0x8192));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GENERATE_MIPMAP_HINT_SGIS"), v8::Uint32::NewFromUnsigned(0x8192));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_DEFORMATION_SGIX"), v8::Uint32::NewFromUnsigned(0x8194));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEFORMATION_SGIX"), v8::Uint32::NewFromUnsigned(0x8195));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEFORMATIONS_MASK_SGIX"), v8::Uint32::NewFromUnsigned(0x8196));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEFORMATION_ORDER_SGIX"), v8::Uint32::NewFromUnsigned(0x8197));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_OFFSET_SGIX"), v8::Uint32::NewFromUnsigned(0x8198));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_OFFSET_VALUE_SGIX"), v8::Uint32::NewFromUnsigned(0x8199));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_SGIX"), v8::Uint32::NewFromUnsigned(0x819A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_OPERATOR_SGIX"), v8::Uint32::NewFromUnsigned(0x819B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LEQUAL_R_SGIX"), v8::Uint32::NewFromUnsigned(0x819C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GEQUAL_R_SGIX"), v8::Uint32::NewFromUnsigned(0x819D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT16"), v8::Uint32::NewFromUnsigned(0x81A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT16_ARB"), v8::Uint32::NewFromUnsigned(0x81A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT16_OES"), v8::Uint32::NewFromUnsigned(0x81A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT16_SGIX"), v8::Uint32::NewFromUnsigned(0x81A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT24"), v8::Uint32::NewFromUnsigned(0x81A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT24_ARB"), v8::Uint32::NewFromUnsigned(0x81A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT24_OES"), v8::Uint32::NewFromUnsigned(0x81A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT24_SGIX"), v8::Uint32::NewFromUnsigned(0x81A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT32"), v8::Uint32::NewFromUnsigned(0x81A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT32_ARB"), v8::Uint32::NewFromUnsigned(0x81A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT32_OES"), v8::Uint32::NewFromUnsigned(0x81A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT32_SGIX"), v8::Uint32::NewFromUnsigned(0x81A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_ELEMENT_LOCK_FIRST_EXT"), v8::Uint32::NewFromUnsigned(0x81A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_ELEMENT_LOCK_COUNT_EXT"), v8::Uint32::NewFromUnsigned(0x81A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CULL_VERTEX_EXT"), v8::Uint32::NewFromUnsigned(0x81AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CULL_VERTEX_EYE_POSITION_EXT"), v8::Uint32::NewFromUnsigned(0x81AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CULL_VERTEX_OBJECT_POSITION_EXT"), v8::Uint32::NewFromUnsigned(0x81AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IUI_V2F_EXT"), v8::Uint32::NewFromUnsigned(0x81AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IUI_V3F_EXT"), v8::Uint32::NewFromUnsigned(0x81AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IUI_N3F_V2F_EXT"), v8::Uint32::NewFromUnsigned(0x81AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IUI_N3F_V3F_EXT"), v8::Uint32::NewFromUnsigned(0x81B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_IUI_V2F_EXT"), v8::Uint32::NewFromUnsigned(0x81B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_IUI_V3F_EXT"), v8::Uint32::NewFromUnsigned(0x81B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_IUI_N3F_V2F_EXT"), v8::Uint32::NewFromUnsigned(0x81B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_T2F_IUI_N3F_V3F_EXT"), v8::Uint32::NewFromUnsigned(0x81B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_TEST_EXT"), v8::Uint32::NewFromUnsigned(0x81B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_TEST_FUNC_EXT"), v8::Uint32::NewFromUnsigned(0x81B6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_TEST_REF_EXT"), v8::Uint32::NewFromUnsigned(0x81B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_MATERIAL_EXT"), v8::Uint32::NewFromUnsigned(0x81B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_MATERIAL_PARAMETER_EXT"), v8::Uint32::NewFromUnsigned(0x81B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_MATERIAL_FACE_EXT"), v8::Uint32::NewFromUnsigned(0x81BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_YCRCB_422_SGIX"), v8::Uint32::NewFromUnsigned(0x81BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_YCRCB_444_SGIX"), v8::Uint32::NewFromUnsigned(0x81BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRAP_BORDER_SUN"), v8::Uint32::NewFromUnsigned(0x81D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_CONSTANT_DATA_SUNX"), v8::Uint32::NewFromUnsigned(0x81D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CONSTANT_DATA_SUNX"), v8::Uint32::NewFromUnsigned(0x81D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLE_LIST_SUN"), v8::Uint32::NewFromUnsigned(0x81D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACEMENT_CODE_SUN"), v8::Uint32::NewFromUnsigned(0x81D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLOBAL_ALPHA_SUN"), v8::Uint32::NewFromUnsigned(0x81D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GLOBAL_ALPHA_FACTOR_SUN"), v8::Uint32::NewFromUnsigned(0x81DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COLOR_WRITEMASK_SGIS"), v8::Uint32::NewFromUnsigned(0x81EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EYE_DISTANCE_TO_POINT_SGIS"), v8::Uint32::NewFromUnsigned(0x81F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_DISTANCE_TO_POINT_SGIS"), v8::Uint32::NewFromUnsigned(0x81F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EYE_DISTANCE_TO_LINE_SGIS"), v8::Uint32::NewFromUnsigned(0x81F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_DISTANCE_TO_LINE_SGIS"), v8::Uint32::NewFromUnsigned(0x81F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EYE_POINT_SGIS"), v8::Uint32::NewFromUnsigned(0x81F4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_POINT_SGIS"), v8::Uint32::NewFromUnsigned(0x81F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EYE_LINE_SGIS"), v8::Uint32::NewFromUnsigned(0x81F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_LINE_SGIS"), v8::Uint32::NewFromUnsigned(0x81F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT_MODEL_COLOR_CONTROL"), v8::Uint32::NewFromUnsigned(0x81F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT_MODEL_COLOR_CONTROL_EXT"), v8::Uint32::NewFromUnsigned(0x81F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SINGLE_COLOR"), v8::Uint32::NewFromUnsigned(0x81F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SINGLE_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x81F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SEPARATE_SPECULAR_COLOR"), v8::Uint32::NewFromUnsigned(0x81FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SEPARATE_SPECULAR_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x81FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHARED_TEXTURE_PALETTE_EXT"), v8::Uint32::NewFromUnsigned(0x81FB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXT_FRAGMENT_SHADER_ATI"), v8::Uint32::NewFromUnsigned(0x8200));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"), v8::Uint32::NewFromUnsigned(0x8210));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT"), v8::Uint32::NewFromUnsigned(0x8210));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"), v8::Uint32::NewFromUnsigned(0x8211));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8211));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE"), v8::Uint32::NewFromUnsigned(0x8212));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"), v8::Uint32::NewFromUnsigned(0x8213));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"), v8::Uint32::NewFromUnsigned(0x8214));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"), v8::Uint32::NewFromUnsigned(0x8215));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"), v8::Uint32::NewFromUnsigned(0x8216));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"), v8::Uint32::NewFromUnsigned(0x8217));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_DEFAULT"), v8::Uint32::NewFromUnsigned(0x8218));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_UNDEFINED"), v8::Uint32::NewFromUnsigned(0x8219));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_UNDEFINED_OES"), v8::Uint32::NewFromUnsigned(0x8219));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL_ATTACHMENT"), v8::Uint32::NewFromUnsigned(0x821A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAJOR_VERSION"), v8::Uint32::NewFromUnsigned(0x821B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINOR_VERSION"), v8::Uint32::NewFromUnsigned(0x821C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_EXTENSIONS"), v8::Uint32::NewFromUnsigned(0x821D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_FLAGS"), v8::Uint32::NewFromUnsigned(0x821E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_IMMUTABLE_STORAGE"), v8::Uint32::NewFromUnsigned(0x821F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_STORAGE_FLAGS"), v8::Uint32::NewFromUnsigned(0x8220));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED"), v8::Uint32::NewFromUnsigned(0x8221));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX"), v8::Uint32::NewFromUnsigned(0x8222));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RED"), v8::Uint32::NewFromUnsigned(0x8225));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RG"), v8::Uint32::NewFromUnsigned(0x8226));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG"), v8::Uint32::NewFromUnsigned(0x8227));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG_EXT"), v8::Uint32::NewFromUnsigned(0x8227));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG_INTEGER"), v8::Uint32::NewFromUnsigned(0x8228));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R8"), v8::Uint32::NewFromUnsigned(0x8229));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R8_EXT"), v8::Uint32::NewFromUnsigned(0x8229));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R16"), v8::Uint32::NewFromUnsigned(0x822A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG8"), v8::Uint32::NewFromUnsigned(0x822B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG8_EXT"), v8::Uint32::NewFromUnsigned(0x822B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG16"), v8::Uint32::NewFromUnsigned(0x822C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R16F"), v8::Uint32::NewFromUnsigned(0x822D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R16F_EXT"), v8::Uint32::NewFromUnsigned(0x822D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R32F"), v8::Uint32::NewFromUnsigned(0x822E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R32F_EXT"), v8::Uint32::NewFromUnsigned(0x822E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG16F"), v8::Uint32::NewFromUnsigned(0x822F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG16F_EXT"), v8::Uint32::NewFromUnsigned(0x822F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG32F"), v8::Uint32::NewFromUnsigned(0x8230));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG32F_EXT"), v8::Uint32::NewFromUnsigned(0x8230));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R8I"), v8::Uint32::NewFromUnsigned(0x8231));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R8UI"), v8::Uint32::NewFromUnsigned(0x8232));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R16I"), v8::Uint32::NewFromUnsigned(0x8233));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R16UI"), v8::Uint32::NewFromUnsigned(0x8234));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R32I"), v8::Uint32::NewFromUnsigned(0x8235));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R32UI"), v8::Uint32::NewFromUnsigned(0x8236));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG8I"), v8::Uint32::NewFromUnsigned(0x8237));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG8UI"), v8::Uint32::NewFromUnsigned(0x8238));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG16I"), v8::Uint32::NewFromUnsigned(0x8239));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG16UI"), v8::Uint32::NewFromUnsigned(0x823A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG32I"), v8::Uint32::NewFromUnsigned(0x823B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG32UI"), v8::Uint32::NewFromUnsigned(0x823C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_CL_EVENT_ARB"), v8::Uint32::NewFromUnsigned(0x8240));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_CL_EVENT_COMPLETE_ARB"), v8::Uint32::NewFromUnsigned(0x8241));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_OUTPUT_SYNCHRONOUS"), v8::Uint32::NewFromUnsigned(0x8242));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB"), v8::Uint32::NewFromUnsigned(0x8242));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR"), v8::Uint32::NewFromUnsigned(0x8242));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH"), v8::Uint32::NewFromUnsigned(0x8243));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB"), v8::Uint32::NewFromUnsigned(0x8243));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR"), v8::Uint32::NewFromUnsigned(0x8243));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CALLBACK_FUNCTION"), v8::Uint32::NewFromUnsigned(0x8244));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CALLBACK_FUNCTION_ARB"), v8::Uint32::NewFromUnsigned(0x8244));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CALLBACK_FUNCTION_KHR"), v8::Uint32::NewFromUnsigned(0x8244));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CALLBACK_USER_PARAM"), v8::Uint32::NewFromUnsigned(0x8245));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CALLBACK_USER_PARAM_ARB"), v8::Uint32::NewFromUnsigned(0x8245));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CALLBACK_USER_PARAM_KHR"), v8::Uint32::NewFromUnsigned(0x8245));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_API"), v8::Uint32::NewFromUnsigned(0x8246));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_API_ARB"), v8::Uint32::NewFromUnsigned(0x8246));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_API_KHR"), v8::Uint32::NewFromUnsigned(0x8246));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_WINDOW_SYSTEM"), v8::Uint32::NewFromUnsigned(0x8247));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB"), v8::Uint32::NewFromUnsigned(0x8247));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR"), v8::Uint32::NewFromUnsigned(0x8247));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_SHADER_COMPILER"), v8::Uint32::NewFromUnsigned(0x8248));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_SHADER_COMPILER_ARB"), v8::Uint32::NewFromUnsigned(0x8248));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_SHADER_COMPILER_KHR"), v8::Uint32::NewFromUnsigned(0x8248));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_THIRD_PARTY"), v8::Uint32::NewFromUnsigned(0x8249));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_THIRD_PARTY_ARB"), v8::Uint32::NewFromUnsigned(0x8249));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_THIRD_PARTY_KHR"), v8::Uint32::NewFromUnsigned(0x8249));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_APPLICATION"), v8::Uint32::NewFromUnsigned(0x824A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_APPLICATION_ARB"), v8::Uint32::NewFromUnsigned(0x824A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_APPLICATION_KHR"), v8::Uint32::NewFromUnsigned(0x824A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_OTHER"), v8::Uint32::NewFromUnsigned(0x824B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_OTHER_ARB"), v8::Uint32::NewFromUnsigned(0x824B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SOURCE_OTHER_KHR"), v8::Uint32::NewFromUnsigned(0x824B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_ERROR"), v8::Uint32::NewFromUnsigned(0x824C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_ERROR_ARB"), v8::Uint32::NewFromUnsigned(0x824C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_ERROR_KHR"), v8::Uint32::NewFromUnsigned(0x824C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR"), v8::Uint32::NewFromUnsigned(0x824D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB"), v8::Uint32::NewFromUnsigned(0x824D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR"), v8::Uint32::NewFromUnsigned(0x824D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR"), v8::Uint32::NewFromUnsigned(0x824E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB"), v8::Uint32::NewFromUnsigned(0x824E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR"), v8::Uint32::NewFromUnsigned(0x824E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_PORTABILITY"), v8::Uint32::NewFromUnsigned(0x824F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_PORTABILITY_ARB"), v8::Uint32::NewFromUnsigned(0x824F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_PORTABILITY_KHR"), v8::Uint32::NewFromUnsigned(0x824F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_PERFORMANCE"), v8::Uint32::NewFromUnsigned(0x8250));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_PERFORMANCE_ARB"), v8::Uint32::NewFromUnsigned(0x8250));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_PERFORMANCE_KHR"), v8::Uint32::NewFromUnsigned(0x8250));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_OTHER"), v8::Uint32::NewFromUnsigned(0x8251));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_OTHER_ARB"), v8::Uint32::NewFromUnsigned(0x8251));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_OTHER_KHR"), v8::Uint32::NewFromUnsigned(0x8251));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOSE_CONTEXT_ON_RESET_ARB"), v8::Uint32::NewFromUnsigned(0x8252));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOSE_CONTEXT_ON_RESET_EXT"), v8::Uint32::NewFromUnsigned(0x8252));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GUILTY_CONTEXT_RESET_ARB"), v8::Uint32::NewFromUnsigned(0x8253));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GUILTY_CONTEXT_RESET_EXT"), v8::Uint32::NewFromUnsigned(0x8253));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INNOCENT_CONTEXT_RESET_ARB"), v8::Uint32::NewFromUnsigned(0x8254));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INNOCENT_CONTEXT_RESET_EXT"), v8::Uint32::NewFromUnsigned(0x8254));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNKNOWN_CONTEXT_RESET_ARB"), v8::Uint32::NewFromUnsigned(0x8255));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNKNOWN_CONTEXT_RESET_EXT"), v8::Uint32::NewFromUnsigned(0x8255));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESET_NOTIFICATION_STRATEGY_ARB"), v8::Uint32::NewFromUnsigned(0x8256));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESET_NOTIFICATION_STRATEGY_EXT"), v8::Uint32::NewFromUnsigned(0x8256));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_BINARY_RETRIEVABLE_HINT"), v8::Uint32::NewFromUnsigned(0x8257));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_SEPARABLE"), v8::Uint32::NewFromUnsigned(0x8258));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_SEPARABLE_EXT"), v8::Uint32::NewFromUnsigned(0x8258));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_PROGRAM"), v8::Uint32::NewFromUnsigned(0x8259));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_PROGRAM_EXT"), v8::Uint32::NewFromUnsigned(0x8259));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_PIPELINE_BINDING"), v8::Uint32::NewFromUnsigned(0x825A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_PIPELINE_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x825A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VIEWPORTS"), v8::Uint32::NewFromUnsigned(0x825B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEWPORT_SUBPIXEL_BITS"), v8::Uint32::NewFromUnsigned(0x825C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEWPORT_BOUNDS_RANGE"), v8::Uint32::NewFromUnsigned(0x825D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAYER_PROVOKING_VERTEX"), v8::Uint32::NewFromUnsigned(0x825E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAYER_PROVOKING_VERTEX_EXT"), v8::Uint32::NewFromUnsigned(0x825E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEWPORT_INDEX_PROVOKING_VERTEX"), v8::Uint32::NewFromUnsigned(0x825F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNDEFINED_VERTEX"), v8::Uint32::NewFromUnsigned(0x8260));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNDEFINED_VERTEX_EXT"), v8::Uint32::NewFromUnsigned(0x8260));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NO_RESET_NOTIFICATION_ARB"), v8::Uint32::NewFromUnsigned(0x8261));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NO_RESET_NOTIFICATION_EXT"), v8::Uint32::NewFromUnsigned(0x8261));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_SHARED_MEMORY_SIZE"), v8::Uint32::NewFromUnsigned(0x8262));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8263));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS"), v8::Uint32::NewFromUnsigned(0x8264));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_ATOMIC_COUNTERS"), v8::Uint32::NewFromUnsigned(0x8265));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8266));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPUTE_WORK_GROUP_SIZE"), v8::Uint32::NewFromUnsigned(0x8267));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_MARKER"), v8::Uint32::NewFromUnsigned(0x8268));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_MARKER_KHR"), v8::Uint32::NewFromUnsigned(0x8268));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_PUSH_GROUP"), v8::Uint32::NewFromUnsigned(0x8269));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_PUSH_GROUP_KHR"), v8::Uint32::NewFromUnsigned(0x8269));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_POP_GROUP"), v8::Uint32::NewFromUnsigned(0x826A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_TYPE_POP_GROUP_KHR"), v8::Uint32::NewFromUnsigned(0x826A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_NOTIFICATION"), v8::Uint32::NewFromUnsigned(0x826B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_NOTIFICATION_KHR"), v8::Uint32::NewFromUnsigned(0x826B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_GROUP_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x826C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR"), v8::Uint32::NewFromUnsigned(0x826C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_GROUP_STACK_DEPTH"), v8::Uint32::NewFromUnsigned(0x826D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_GROUP_STACK_DEPTH_KHR"), v8::Uint32::NewFromUnsigned(0x826D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_UNIFORM_LOCATIONS"), v8::Uint32::NewFromUnsigned(0x826E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_SUPPORTED"), v8::Uint32::NewFromUnsigned(0x826F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_PREFERRED"), v8::Uint32::NewFromUnsigned(0x8270));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_RED_SIZE"), v8::Uint32::NewFromUnsigned(0x8271));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_GREEN_SIZE"), v8::Uint32::NewFromUnsigned(0x8272));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_BLUE_SIZE"), v8::Uint32::NewFromUnsigned(0x8273));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_ALPHA_SIZE"), v8::Uint32::NewFromUnsigned(0x8274));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_DEPTH_SIZE"), v8::Uint32::NewFromUnsigned(0x8275));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_STENCIL_SIZE"), v8::Uint32::NewFromUnsigned(0x8276));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_SHARED_SIZE"), v8::Uint32::NewFromUnsigned(0x8277));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_RED_TYPE"), v8::Uint32::NewFromUnsigned(0x8278));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_GREEN_TYPE"), v8::Uint32::NewFromUnsigned(0x8279));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_BLUE_TYPE"), v8::Uint32::NewFromUnsigned(0x827A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_ALPHA_TYPE"), v8::Uint32::NewFromUnsigned(0x827B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_DEPTH_TYPE"), v8::Uint32::NewFromUnsigned(0x827C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERNALFORMAT_STENCIL_TYPE"), v8::Uint32::NewFromUnsigned(0x827D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_WIDTH"), v8::Uint32::NewFromUnsigned(0x827E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_HEIGHT"), v8::Uint32::NewFromUnsigned(0x827F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEPTH"), v8::Uint32::NewFromUnsigned(0x8280));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_LAYERS"), v8::Uint32::NewFromUnsigned(0x8281));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_DIMENSIONS"), v8::Uint32::NewFromUnsigned(0x8282));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8283));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8284));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8285));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_RENDERABLE"), v8::Uint32::NewFromUnsigned(0x8286));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_RENDERABLE"), v8::Uint32::NewFromUnsigned(0x8287));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_RENDERABLE"), v8::Uint32::NewFromUnsigned(0x8288));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_RENDERABLE"), v8::Uint32::NewFromUnsigned(0x8289));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_RENDERABLE_LAYERED"), v8::Uint32::NewFromUnsigned(0x828A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_BLEND"), v8::Uint32::NewFromUnsigned(0x828B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_PIXELS"), v8::Uint32::NewFromUnsigned(0x828C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_PIXELS_FORMAT"), v8::Uint32::NewFromUnsigned(0x828D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_PIXELS_TYPE"), v8::Uint32::NewFromUnsigned(0x828E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_IMAGE_FORMAT"), v8::Uint32::NewFromUnsigned(0x828F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_IMAGE_TYPE"), v8::Uint32::NewFromUnsigned(0x8290));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GET_TEXTURE_IMAGE_FORMAT"), v8::Uint32::NewFromUnsigned(0x8291));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GET_TEXTURE_IMAGE_TYPE"), v8::Uint32::NewFromUnsigned(0x8292));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIPMAP"), v8::Uint32::NewFromUnsigned(0x8293));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MANUAL_GENERATE_MIPMAP"), v8::Uint32::NewFromUnsigned(0x8294));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AUTO_GENERATE_MIPMAP"), v8::Uint32::NewFromUnsigned(0x8295));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ENCODING"), v8::Uint32::NewFromUnsigned(0x8296));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB_READ"), v8::Uint32::NewFromUnsigned(0x8297));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB_WRITE"), v8::Uint32::NewFromUnsigned(0x8298));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB_DECODE_ARB"), v8::Uint32::NewFromUnsigned(0x8299));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FILTER"), v8::Uint32::NewFromUnsigned(0x829A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_TEXTURE"), v8::Uint32::NewFromUnsigned(0x829B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_TEXTURE"), v8::Uint32::NewFromUnsigned(0x829C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_TEXTURE"), v8::Uint32::NewFromUnsigned(0x829D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_TEXTURE"), v8::Uint32::NewFromUnsigned(0x829E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_TEXTURE"), v8::Uint32::NewFromUnsigned(0x829F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPUTE_TEXTURE"), v8::Uint32::NewFromUnsigned(0x82A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SHADOW"), v8::Uint32::NewFromUnsigned(0x82A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GATHER"), v8::Uint32::NewFromUnsigned(0x82A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GATHER_SHADOW"), v8::Uint32::NewFromUnsigned(0x82A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_IMAGE_LOAD"), v8::Uint32::NewFromUnsigned(0x82A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_IMAGE_STORE"), v8::Uint32::NewFromUnsigned(0x82A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_IMAGE_ATOMIC"), v8::Uint32::NewFromUnsigned(0x82A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_TEXEL_SIZE"), v8::Uint32::NewFromUnsigned(0x82A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_COMPATIBILITY_CLASS"), v8::Uint32::NewFromUnsigned(0x82A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_PIXEL_FORMAT"), v8::Uint32::NewFromUnsigned(0x82A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_PIXEL_TYPE"), v8::Uint32::NewFromUnsigned(0x82AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST"), v8::Uint32::NewFromUnsigned(0x82AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST"), v8::Uint32::NewFromUnsigned(0x82AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE"), v8::Uint32::NewFromUnsigned(0x82AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE"), v8::Uint32::NewFromUnsigned(0x82AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSED_BLOCK_WIDTH"), v8::Uint32::NewFromUnsigned(0x82B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT"), v8::Uint32::NewFromUnsigned(0x82B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSED_BLOCK_SIZE"), v8::Uint32::NewFromUnsigned(0x82B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLEAR_BUFFER"), v8::Uint32::NewFromUnsigned(0x82B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW"), v8::Uint32::NewFromUnsigned(0x82B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_COMPATIBILITY_CLASS"), v8::Uint32::NewFromUnsigned(0x82B6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FULL_SUPPORT"), v8::Uint32::NewFromUnsigned(0x82B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CAVEAT_SUPPORT"), v8::Uint32::NewFromUnsigned(0x82B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_4_X_32"), v8::Uint32::NewFromUnsigned(0x82B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_2_X_32"), v8::Uint32::NewFromUnsigned(0x82BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_1_X_32"), v8::Uint32::NewFromUnsigned(0x82BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_4_X_16"), v8::Uint32::NewFromUnsigned(0x82BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_2_X_16"), v8::Uint32::NewFromUnsigned(0x82BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_1_X_16"), v8::Uint32::NewFromUnsigned(0x82BE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_4_X_8"), v8::Uint32::NewFromUnsigned(0x82BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_2_X_8"), v8::Uint32::NewFromUnsigned(0x82C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_1_X_8"), v8::Uint32::NewFromUnsigned(0x82C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_11_11_10"), v8::Uint32::NewFromUnsigned(0x82C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CLASS_10_10_10_2"), v8::Uint32::NewFromUnsigned(0x82C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_128_BITS"), v8::Uint32::NewFromUnsigned(0x82C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_96_BITS"), v8::Uint32::NewFromUnsigned(0x82C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_64_BITS"), v8::Uint32::NewFromUnsigned(0x82C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_48_BITS"), v8::Uint32::NewFromUnsigned(0x82C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_32_BITS"), v8::Uint32::NewFromUnsigned(0x82C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_24_BITS"), v8::Uint32::NewFromUnsigned(0x82C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_16_BITS"), v8::Uint32::NewFromUnsigned(0x82CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_8_BITS"), v8::Uint32::NewFromUnsigned(0x82CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_S3TC_DXT1_RGB"), v8::Uint32::NewFromUnsigned(0x82CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_S3TC_DXT1_RGBA"), v8::Uint32::NewFromUnsigned(0x82CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_S3TC_DXT3_RGBA"), v8::Uint32::NewFromUnsigned(0x82CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_S3TC_DXT5_RGBA"), v8::Uint32::NewFromUnsigned(0x82CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_RGTC1_RED"), v8::Uint32::NewFromUnsigned(0x82D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_RGTC2_RG"), v8::Uint32::NewFromUnsigned(0x82D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_BPTC_UNORM"), v8::Uint32::NewFromUnsigned(0x82D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIEW_CLASS_BPTC_FLOAT"), v8::Uint32::NewFromUnsigned(0x82D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_BINDING"), v8::Uint32::NewFromUnsigned(0x82D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_RELATIVE_OFFSET"), v8::Uint32::NewFromUnsigned(0x82D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_BINDING_DIVISOR"), v8::Uint32::NewFromUnsigned(0x82D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_BINDING_OFFSET"), v8::Uint32::NewFromUnsigned(0x82D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_BINDING_STRIDE"), v8::Uint32::NewFromUnsigned(0x82D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET"), v8::Uint32::NewFromUnsigned(0x82D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_ATTRIB_BINDINGS"), v8::Uint32::NewFromUnsigned(0x82DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW_MIN_LEVEL"), v8::Uint32::NewFromUnsigned(0x82DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW_MIN_LEVEL_EXT"), v8::Uint32::NewFromUnsigned(0x82DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW_NUM_LEVELS"), v8::Uint32::NewFromUnsigned(0x82DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW_NUM_LEVELS_EXT"), v8::Uint32::NewFromUnsigned(0x82DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW_MIN_LAYER"), v8::Uint32::NewFromUnsigned(0x82DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW_MIN_LAYER_EXT"), v8::Uint32::NewFromUnsigned(0x82DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW_NUM_LAYERS"), v8::Uint32::NewFromUnsigned(0x82DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_VIEW_NUM_LAYERS_EXT"), v8::Uint32::NewFromUnsigned(0x82DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_IMMUTABLE_LEVELS"), v8::Uint32::NewFromUnsigned(0x82DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER"), v8::Uint32::NewFromUnsigned(0x82E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_KHR"), v8::Uint32::NewFromUnsigned(0x82E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER"), v8::Uint32::NewFromUnsigned(0x82E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_KHR"), v8::Uint32::NewFromUnsigned(0x82E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM"), v8::Uint32::NewFromUnsigned(0x82E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_KHR"), v8::Uint32::NewFromUnsigned(0x82E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY"), v8::Uint32::NewFromUnsigned(0x82E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_KHR"), v8::Uint32::NewFromUnsigned(0x82E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_PIPELINE"), v8::Uint32::NewFromUnsigned(0x82E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_ATTRIB_STRIDE"), v8::Uint32::NewFromUnsigned(0x82E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER"), v8::Uint32::NewFromUnsigned(0x82E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_KHR"), v8::Uint32::NewFromUnsigned(0x82E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISPLAY_LIST"), v8::Uint32::NewFromUnsigned(0x82E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_LABEL_LENGTH"), v8::Uint32::NewFromUnsigned(0x82E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_LABEL_LENGTH_KHR"), v8::Uint32::NewFromUnsigned(0x82E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_SHADING_LANGUAGE_VERSIONS"), v8::Uint32::NewFromUnsigned(0x82E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_PASS_INSTRUMENT_SGIX"), v8::Uint32::NewFromUnsigned(0x8310));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX"), v8::Uint32::NewFromUnsigned(0x8311));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX"), v8::Uint32::NewFromUnsigned(0x8312));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENTS_INSTRUMENT_SGIX"), v8::Uint32::NewFromUnsigned(0x8313));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX"), v8::Uint32::NewFromUnsigned(0x8314));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENTS_INSTRUMENT_MAX_SGIX"), v8::Uint32::NewFromUnsigned(0x8315));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVOLUTION_HINT_SGIX"), v8::Uint32::NewFromUnsigned(0x8316));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_YCRCB_SGIX"), v8::Uint32::NewFromUnsigned(0x8318));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_YCRCBA_SGIX"), v8::Uint32::NewFromUnsigned(0x8319));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_COMPRESSED_SIZE_SGIX"), v8::Uint32::NewFromUnsigned(0x831A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_MAX_COMPRESSED_SIZE_SGIX"), v8::Uint32::NewFromUnsigned(0x831B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_COMPRESSED_SIZE_SGIX"), v8::Uint32::NewFromUnsigned(0x831C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLIM8U_SGIX"), v8::Uint32::NewFromUnsigned(0x831D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLIM10U_SGIX"), v8::Uint32::NewFromUnsigned(0x831E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLIM12S_SGIX"), v8::Uint32::NewFromUnsigned(0x831F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_MIN_SGIX"), v8::Uint32::NewFromUnsigned(0x8320));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_MAX_SGIX"), v8::Uint32::NewFromUnsigned(0x8321));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCALEBIAS_HINT_SGIX"), v8::Uint32::NewFromUnsigned(0x8322));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ASYNC_MARKER_SGIX"), v8::Uint32::NewFromUnsigned(0x8329));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEX_GEN_MODE_SGIX"), v8::Uint32::NewFromUnsigned(0x832B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ASYNC_HISTOGRAM_SGIX"), v8::Uint32::NewFromUnsigned(0x832C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ASYNC_HISTOGRAM_SGIX"), v8::Uint32::NewFromUnsigned(0x832D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TRANSFORM_2D_EXT"), v8::Uint32::NewFromUnsigned(0x8330));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MAG_FILTER_EXT"), v8::Uint32::NewFromUnsigned(0x8331));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_MIN_FILTER_EXT"), v8::Uint32::NewFromUnsigned(0x8332));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_CUBIC_WEIGHT_EXT"), v8::Uint32::NewFromUnsigned(0x8333));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CUBIC_EXT"), v8::Uint32::NewFromUnsigned(0x8334));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AVERAGE_EXT"), v8::Uint32::NewFromUnsigned(0x8335));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT"), v8::Uint32::NewFromUnsigned(0x8336));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT"), v8::Uint32::NewFromUnsigned(0x8337));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TRANSFORM_2D_MATRIX_EXT"), v8::Uint32::NewFromUnsigned(0x8338));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_MATERIAL_EXT"), v8::Uint32::NewFromUnsigned(0x8349));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_NORMAL_EXT"), v8::Uint32::NewFromUnsigned(0x834A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x834C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATTENUATION_EXT"), v8::Uint32::NewFromUnsigned(0x834D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADOW_ATTENUATION_EXT"), v8::Uint32::NewFromUnsigned(0x834E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_APPLICATION_MODE_EXT"), v8::Uint32::NewFromUnsigned(0x834F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LIGHT_EXT"), v8::Uint32::NewFromUnsigned(0x8350));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MATERIAL_FACE_EXT"), v8::Uint32::NewFromUnsigned(0x8351));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MATERIAL_PARAMETER_EXT"), v8::Uint32::NewFromUnsigned(0x8352));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_TEXTURE_SGIS"), v8::Uint32::NewFromUnsigned(0x8353));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS"), v8::Uint32::NewFromUnsigned(0x8354));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS"), v8::Uint32::NewFromUnsigned(0x8355));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_GROUP_COLOR_SGIS"), v8::Uint32::NewFromUnsigned(0x8356));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINE_QUALITY_HINT_SGIX"), v8::Uint32::NewFromUnsigned(0x835B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ASYNC_TEX_IMAGE_SGIX"), v8::Uint32::NewFromUnsigned(0x835C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ASYNC_DRAW_PIXELS_SGIX"), v8::Uint32::NewFromUnsigned(0x835D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ASYNC_READ_PIXELS_SGIX"), v8::Uint32::NewFromUnsigned(0x835E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ASYNC_TEX_IMAGE_SGIX"), v8::Uint32::NewFromUnsigned(0x835F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ASYNC_DRAW_PIXELS_SGIX"), v8::Uint32::NewFromUnsigned(0x8360));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ASYNC_READ_PIXELS_SGIX"), v8::Uint32::NewFromUnsigned(0x8361));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_BYTE_2_3_3_REV"), v8::Uint32::NewFromUnsigned(0x8362));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_BYTE_2_3_3_REV_EXT"), v8::Uint32::NewFromUnsigned(0x8362));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_5_6_5"), v8::Uint32::NewFromUnsigned(0x8363));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_5_6_5_EXT"), v8::Uint32::NewFromUnsigned(0x8363));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_5_6_5_REV"), v8::Uint32::NewFromUnsigned(0x8364));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_5_6_5_REV_EXT"), v8::Uint32::NewFromUnsigned(0x8364));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_4_4_4_4_REV"), v8::Uint32::NewFromUnsigned(0x8365));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT"), v8::Uint32::NewFromUnsigned(0x8365));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG"), v8::Uint32::NewFromUnsigned(0x8365));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_1_5_5_5_REV"), v8::Uint32::NewFromUnsigned(0x8366));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT"), v8::Uint32::NewFromUnsigned(0x8366));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_8_8_8_8_REV"), v8::Uint32::NewFromUnsigned(0x8367));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_8_8_8_8_REV_EXT"), v8::Uint32::NewFromUnsigned(0x8367));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_2_10_10_10_REV"), v8::Uint32::NewFromUnsigned(0x8368));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_2_10_10_10_REV_EXT"), v8::Uint32::NewFromUnsigned(0x8368));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_CLAMP_S_SGIX"), v8::Uint32::NewFromUnsigned(0x8369));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_CLAMP_T_SGIX"), v8::Uint32::NewFromUnsigned(0x836A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_CLAMP_R_SGIX"), v8::Uint32::NewFromUnsigned(0x836B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRRORED_REPEAT"), v8::Uint32::NewFromUnsigned(0x8370));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRRORED_REPEAT_ARB"), v8::Uint32::NewFromUnsigned(0x8370));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRRORED_REPEAT_IBM"), v8::Uint32::NewFromUnsigned(0x8370));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRRORED_REPEAT_OES"), v8::Uint32::NewFromUnsigned(0x8370));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_S3TC"), v8::Uint32::NewFromUnsigned(0x83A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB4_S3TC"), v8::Uint32::NewFromUnsigned(0x83A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_S3TC"), v8::Uint32::NewFromUnsigned(0x83A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA4_S3TC"), v8::Uint32::NewFromUnsigned(0x83A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_DXT5_S3TC"), v8::Uint32::NewFromUnsigned(0x83A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA4_DXT5_S3TC"), v8::Uint32::NewFromUnsigned(0x83A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PRECLIP_SGIX"), v8::Uint32::NewFromUnsigned(0x83EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PRECLIP_HINT_SGIX"), v8::Uint32::NewFromUnsigned(0x83EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_S3TC_DXT1_EXT"), v8::Uint32::NewFromUnsigned(0x83F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_S3TC_DXT1_EXT"), v8::Uint32::NewFromUnsigned(0x83F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE"), v8::Uint32::NewFromUnsigned(0x83F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_S3TC_DXT3_EXT"), v8::Uint32::NewFromUnsigned(0x83F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE"), v8::Uint32::NewFromUnsigned(0x83F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_S3TC_DXT5_EXT"), v8::Uint32::NewFromUnsigned(0x83F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PARALLEL_ARRAYS_INTEL"), v8::Uint32::NewFromUnsigned(0x83F4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL"), v8::Uint32::NewFromUnsigned(0x83F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL"), v8::Uint32::NewFromUnsigned(0x83F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL"), v8::Uint32::NewFromUnsigned(0x83F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL"), v8::Uint32::NewFromUnsigned(0x83F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_DONOT_FLUSH_INTEL"), v8::Uint32::NewFromUnsigned(0x83F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_FLUSH_INTEL"), v8::Uint32::NewFromUnsigned(0x83FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_WAIT_INTEL"), v8::Uint32::NewFromUnsigned(0x83FB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MEMORY_LAYOUT_INTEL"), v8::Uint32::NewFromUnsigned(0x83FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHTING_SGIX"), v8::Uint32::NewFromUnsigned(0x8400));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_COLOR_MATERIAL_SGIX"), v8::Uint32::NewFromUnsigned(0x8401));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX"), v8::Uint32::NewFromUnsigned(0x8402));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX"), v8::Uint32::NewFromUnsigned(0x8403));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_LIGHTS_SGIX"), v8::Uint32::NewFromUnsigned(0x8404));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ACTIVE_LIGHTS_SGIX"), v8::Uint32::NewFromUnsigned(0x8405));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_RASTER_NORMAL_SGIX"), v8::Uint32::NewFromUnsigned(0x8406));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT_ENV_MODE_SGIX"), v8::Uint32::NewFromUnsigned(0x8407));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX"), v8::Uint32::NewFromUnsigned(0x8408));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX"), v8::Uint32::NewFromUnsigned(0x8409));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX"), v8::Uint32::NewFromUnsigned(0x840A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX"), v8::Uint32::NewFromUnsigned(0x840B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT0_SGIX"), v8::Uint32::NewFromUnsigned(0x840C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT1_SGIX"), v8::Uint32::NewFromUnsigned(0x840D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT2_SGIX"), v8::Uint32::NewFromUnsigned(0x840E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT3_SGIX"), v8::Uint32::NewFromUnsigned(0x840F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT4_SGIX"), v8::Uint32::NewFromUnsigned(0x8410));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT5_SGIX"), v8::Uint32::NewFromUnsigned(0x8411));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT6_SGIX"), v8::Uint32::NewFromUnsigned(0x8412));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_LIGHT7_SGIX"), v8::Uint32::NewFromUnsigned(0x8413));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_RESAMPLE_SGIX"), v8::Uint32::NewFromUnsigned(0x842C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_RESAMPLE_SGIX"), v8::Uint32::NewFromUnsigned(0x842D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESAMPLE_REPLICATE_SGIX"), v8::Uint32::NewFromUnsigned(0x842E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESAMPLE_ZERO_FILL_SGIX"), v8::Uint32::NewFromUnsigned(0x842F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESAMPLE_DECIMATE_SGIX"), v8::Uint32::NewFromUnsigned(0x8430));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TANGENT_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8439));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BINORMAL_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x843A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_TANGENT_EXT"), v8::Uint32::NewFromUnsigned(0x843B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_BINORMAL_EXT"), v8::Uint32::NewFromUnsigned(0x843C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TANGENT_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x843E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TANGENT_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x843F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BINORMAL_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8440));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BINORMAL_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x8441));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TANGENT_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x8442));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BINORMAL_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x8443));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_TANGENT_EXT"), v8::Uint32::NewFromUnsigned(0x8444));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_TANGENT_EXT"), v8::Uint32::NewFromUnsigned(0x8445));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_BINORMAL_EXT"), v8::Uint32::NewFromUnsigned(0x8446));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_BINORMAL_EXT"), v8::Uint32::NewFromUnsigned(0x8447));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEAREST_CLIPMAP_NEAREST_SGIX"), v8::Uint32::NewFromUnsigned(0x844D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEAREST_CLIPMAP_LINEAR_SGIX"), v8::Uint32::NewFromUnsigned(0x844E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEAR_CLIPMAP_NEAREST_SGIX"), v8::Uint32::NewFromUnsigned(0x844F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_SOURCE"), v8::Uint32::NewFromUnsigned(0x8450));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_SOURCE_EXT"), v8::Uint32::NewFromUnsigned(0x8450));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD_SRC"), v8::Uint32::NewFromUnsigned(0x8450));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE"), v8::Uint32::NewFromUnsigned(0x8451));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD"), v8::Uint32::NewFromUnsigned(0x8451));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_EXT"), v8::Uint32::NewFromUnsigned(0x8451));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_DEPTH"), v8::Uint32::NewFromUnsigned(0x8452));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_DEPTH_EXT"), v8::Uint32::NewFromUnsigned(0x8452));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_FOG_COORDINATE"), v8::Uint32::NewFromUnsigned(0x8453));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_FOG_COORD"), v8::Uint32::NewFromUnsigned(0x8453));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_FOG_COORDINATE_EXT"), v8::Uint32::NewFromUnsigned(0x8453));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x8454));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8454));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x8454));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x8455));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x8455));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x8455));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x8456));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x8456));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x8456));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY"), v8::Uint32::NewFromUnsigned(0x8457));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8457));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD_ARRAY"), v8::Uint32::NewFromUnsigned(0x8457));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_SUM"), v8::Uint32::NewFromUnsigned(0x8458));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_SUM_ARB"), v8::Uint32::NewFromUnsigned(0x8458));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_SUM_EXT"), v8::Uint32::NewFromUnsigned(0x8458));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_SECONDARY_COLOR"), v8::Uint32::NewFromUnsigned(0x8459));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_SECONDARY_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x8459));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_SIZE"), v8::Uint32::NewFromUnsigned(0x845A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x845A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x845B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x845B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x845C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x845C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x845D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x845D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY"), v8::Uint32::NewFromUnsigned(0x845E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x845E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_RASTER_SECONDARY_COLOR"), v8::Uint32::NewFromUnsigned(0x845F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALIASED_POINT_SIZE_RANGE"), v8::Uint32::NewFromUnsigned(0x846D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALIASED_LINE_WIDTH_RANGE"), v8::Uint32::NewFromUnsigned(0x846E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCREEN_COORDINATES_REND"), v8::Uint32::NewFromUnsigned(0x8490));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVERTED_SCREEN_W_REND"), v8::Uint32::NewFromUnsigned(0x8491));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE0"), v8::Uint32::NewFromUnsigned(0x84C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE0_ARB"), v8::Uint32::NewFromUnsigned(0x84C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE1"), v8::Uint32::NewFromUnsigned(0x84C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE1_ARB"), v8::Uint32::NewFromUnsigned(0x84C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE2"), v8::Uint32::NewFromUnsigned(0x84C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE2_ARB"), v8::Uint32::NewFromUnsigned(0x84C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE3"), v8::Uint32::NewFromUnsigned(0x84C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE3_ARB"), v8::Uint32::NewFromUnsigned(0x84C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE4"), v8::Uint32::NewFromUnsigned(0x84C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE4_ARB"), v8::Uint32::NewFromUnsigned(0x84C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE5"), v8::Uint32::NewFromUnsigned(0x84C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE5_ARB"), v8::Uint32::NewFromUnsigned(0x84C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE6"), v8::Uint32::NewFromUnsigned(0x84C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE6_ARB"), v8::Uint32::NewFromUnsigned(0x84C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE7"), v8::Uint32::NewFromUnsigned(0x84C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE7_ARB"), v8::Uint32::NewFromUnsigned(0x84C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE8"), v8::Uint32::NewFromUnsigned(0x84C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE8_ARB"), v8::Uint32::NewFromUnsigned(0x84C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE9"), v8::Uint32::NewFromUnsigned(0x84C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE9_ARB"), v8::Uint32::NewFromUnsigned(0x84C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE10"), v8::Uint32::NewFromUnsigned(0x84CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE10_ARB"), v8::Uint32::NewFromUnsigned(0x84CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE11"), v8::Uint32::NewFromUnsigned(0x84CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE11_ARB"), v8::Uint32::NewFromUnsigned(0x84CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE12"), v8::Uint32::NewFromUnsigned(0x84CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE12_ARB"), v8::Uint32::NewFromUnsigned(0x84CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE13"), v8::Uint32::NewFromUnsigned(0x84CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE13_ARB"), v8::Uint32::NewFromUnsigned(0x84CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE14"), v8::Uint32::NewFromUnsigned(0x84CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE14_ARB"), v8::Uint32::NewFromUnsigned(0x84CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE15"), v8::Uint32::NewFromUnsigned(0x84CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE15_ARB"), v8::Uint32::NewFromUnsigned(0x84CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE16"), v8::Uint32::NewFromUnsigned(0x84D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE16_ARB"), v8::Uint32::NewFromUnsigned(0x84D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE17"), v8::Uint32::NewFromUnsigned(0x84D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE17_ARB"), v8::Uint32::NewFromUnsigned(0x84D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE18"), v8::Uint32::NewFromUnsigned(0x84D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE18_ARB"), v8::Uint32::NewFromUnsigned(0x84D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE19"), v8::Uint32::NewFromUnsigned(0x84D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE19_ARB"), v8::Uint32::NewFromUnsigned(0x84D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE20"), v8::Uint32::NewFromUnsigned(0x84D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE20_ARB"), v8::Uint32::NewFromUnsigned(0x84D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE21"), v8::Uint32::NewFromUnsigned(0x84D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE21_ARB"), v8::Uint32::NewFromUnsigned(0x84D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE22"), v8::Uint32::NewFromUnsigned(0x84D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE22_ARB"), v8::Uint32::NewFromUnsigned(0x84D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE23"), v8::Uint32::NewFromUnsigned(0x84D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE23_ARB"), v8::Uint32::NewFromUnsigned(0x84D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE24"), v8::Uint32::NewFromUnsigned(0x84D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE24_ARB"), v8::Uint32::NewFromUnsigned(0x84D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE25"), v8::Uint32::NewFromUnsigned(0x84D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE25_ARB"), v8::Uint32::NewFromUnsigned(0x84D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE26"), v8::Uint32::NewFromUnsigned(0x84DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE26_ARB"), v8::Uint32::NewFromUnsigned(0x84DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE27"), v8::Uint32::NewFromUnsigned(0x84DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE27_ARB"), v8::Uint32::NewFromUnsigned(0x84DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE28"), v8::Uint32::NewFromUnsigned(0x84DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE28_ARB"), v8::Uint32::NewFromUnsigned(0x84DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE29"), v8::Uint32::NewFromUnsigned(0x84DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE29_ARB"), v8::Uint32::NewFromUnsigned(0x84DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE30"), v8::Uint32::NewFromUnsigned(0x84DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE30_ARB"), v8::Uint32::NewFromUnsigned(0x84DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE31"), v8::Uint32::NewFromUnsigned(0x84DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE31_ARB"), v8::Uint32::NewFromUnsigned(0x84DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_TEXTURE"), v8::Uint32::NewFromUnsigned(0x84E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_TEXTURE_ARB"), v8::Uint32::NewFromUnsigned(0x84E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIENT_ACTIVE_TEXTURE"), v8::Uint32::NewFromUnsigned(0x84E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIENT_ACTIVE_TEXTURE_ARB"), v8::Uint32::NewFromUnsigned(0x84E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_UNITS"), v8::Uint32::NewFromUnsigned(0x84E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_UNITS_ARB"), v8::Uint32::NewFromUnsigned(0x84E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_MODELVIEW_MATRIX"), v8::Uint32::NewFromUnsigned(0x84E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_MODELVIEW_MATRIX_ARB"), v8::Uint32::NewFromUnsigned(0x84E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_PROJECTION_MATRIX"), v8::Uint32::NewFromUnsigned(0x84E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_PROJECTION_MATRIX_ARB"), v8::Uint32::NewFromUnsigned(0x84E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_TEXTURE_MATRIX"), v8::Uint32::NewFromUnsigned(0x84E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_TEXTURE_MATRIX_ARB"), v8::Uint32::NewFromUnsigned(0x84E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_COLOR_MATRIX"), v8::Uint32::NewFromUnsigned(0x84E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_COLOR_MATRIX_ARB"), v8::Uint32::NewFromUnsigned(0x84E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SUBTRACT"), v8::Uint32::NewFromUnsigned(0x84E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SUBTRACT_ARB"), v8::Uint32::NewFromUnsigned(0x84E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_RENDERBUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x84E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_RENDERBUFFER_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x84E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_RENDERBUFFER_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x84E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_ALPHA"), v8::Uint32::NewFromUnsigned(0x84E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x84E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_LUMINANCE"), v8::Uint32::NewFromUnsigned(0x84EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_LUMINANCE_ARB"), v8::Uint32::NewFromUnsigned(0x84EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_LUMINANCE_ALPHA"), v8::Uint32::NewFromUnsigned(0x84EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_LUMINANCE_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x84EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_INTENSITY"), v8::Uint32::NewFromUnsigned(0x84EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_INTENSITY_ARB"), v8::Uint32::NewFromUnsigned(0x84EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB"), v8::Uint32::NewFromUnsigned(0x84ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x84ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA"), v8::Uint32::NewFromUnsigned(0x84EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ARB"), v8::Uint32::NewFromUnsigned(0x84EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSION_HINT"), v8::Uint32::NewFromUnsigned(0x84EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSION_HINT_ARB"), v8::Uint32::NewFromUnsigned(0x84EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER"), v8::Uint32::NewFromUnsigned(0x84F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER"), v8::Uint32::NewFromUnsigned(0x84F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALL_COMPLETED_NV"), v8::Uint32::NewFromUnsigned(0x84F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FENCE_STATUS_NV"), v8::Uint32::NewFromUnsigned(0x84F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FENCE_CONDITION_NV"), v8::Uint32::NewFromUnsigned(0x84F4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RECTANGLE"), v8::Uint32::NewFromUnsigned(0x84F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RECTANGLE_ARB"), v8::Uint32::NewFromUnsigned(0x84F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RECTANGLE_NV"), v8::Uint32::NewFromUnsigned(0x84F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_RECTANGLE"), v8::Uint32::NewFromUnsigned(0x84F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_RECTANGLE_ARB"), v8::Uint32::NewFromUnsigned(0x84F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_RECTANGLE_NV"), v8::Uint32::NewFromUnsigned(0x84F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_RECTANGLE"), v8::Uint32::NewFromUnsigned(0x84F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_RECTANGLE_ARB"), v8::Uint32::NewFromUnsigned(0x84F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_RECTANGLE_NV"), v8::Uint32::NewFromUnsigned(0x84F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_RECTANGLE_TEXTURE_SIZE"), v8::Uint32::NewFromUnsigned(0x84F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x84F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_RECTANGLE_TEXTURE_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x84F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL"), v8::Uint32::NewFromUnsigned(0x84F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL_EXT"), v8::Uint32::NewFromUnsigned(0x84F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL_NV"), v8::Uint32::NewFromUnsigned(0x84F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL_OES"), v8::Uint32::NewFromUnsigned(0x84F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_24_8"), v8::Uint32::NewFromUnsigned(0x84FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_24_8_EXT"), v8::Uint32::NewFromUnsigned(0x84FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_24_8_NV"), v8::Uint32::NewFromUnsigned(0x84FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_24_8_OES"), v8::Uint32::NewFromUnsigned(0x84FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_LOD_BIAS"), v8::Uint32::NewFromUnsigned(0x84FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_LOD_BIAS_EXT"), v8::Uint32::NewFromUnsigned(0x84FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAX_ANISOTROPY_EXT"), v8::Uint32::NewFromUnsigned(0x84FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT"), v8::Uint32::NewFromUnsigned(0x84FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FILTER_CONTROL"), v8::Uint32::NewFromUnsigned(0x8500));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FILTER_CONTROL_EXT"), v8::Uint32::NewFromUnsigned(0x8500));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LOD_BIAS"), v8::Uint32::NewFromUnsigned(0x8501));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LOD_BIAS_EXT"), v8::Uint32::NewFromUnsigned(0x8501));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW1_STACK_DEPTH_EXT"), v8::Uint32::NewFromUnsigned(0x8502));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE4_NV"), v8::Uint32::NewFromUnsigned(0x8503));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SHININESS_NV"), v8::Uint32::NewFromUnsigned(0x8504));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SPOT_EXPONENT_NV"), v8::Uint32::NewFromUnsigned(0x8505));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW1_MATRIX_EXT"), v8::Uint32::NewFromUnsigned(0x8506));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INCR_WRAP"), v8::Uint32::NewFromUnsigned(0x8507));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INCR_WRAP_EXT"), v8::Uint32::NewFromUnsigned(0x8507));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INCR_WRAP_OES"), v8::Uint32::NewFromUnsigned(0x8507));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DECR_WRAP"), v8::Uint32::NewFromUnsigned(0x8508));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DECR_WRAP_EXT"), v8::Uint32::NewFromUnsigned(0x8508));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DECR_WRAP_OES"), v8::Uint32::NewFromUnsigned(0x8508));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_WEIGHTING_EXT"), v8::Uint32::NewFromUnsigned(0x8509));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW1_ARB"), v8::Uint32::NewFromUnsigned(0x850A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW1_EXT"), v8::Uint32::NewFromUnsigned(0x850A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_VERTEX_WEIGHT_EXT"), v8::Uint32::NewFromUnsigned(0x850B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_WEIGHT_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x850C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x850D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x850E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x850F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x8510));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_MAP"), v8::Uint32::NewFromUnsigned(0x8511));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_MAP_ARB"), v8::Uint32::NewFromUnsigned(0x8511));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_MAP_EXT"), v8::Uint32::NewFromUnsigned(0x8511));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_MAP_NV"), v8::Uint32::NewFromUnsigned(0x8511));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_MAP_OES"), v8::Uint32::NewFromUnsigned(0x8511));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFLECTION_MAP"), v8::Uint32::NewFromUnsigned(0x8512));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFLECTION_MAP_ARB"), v8::Uint32::NewFromUnsigned(0x8512));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFLECTION_MAP_EXT"), v8::Uint32::NewFromUnsigned(0x8512));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFLECTION_MAP_NV"), v8::Uint32::NewFromUnsigned(0x8512));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFLECTION_MAP_OES"), v8::Uint32::NewFromUnsigned(0x8512));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP"), v8::Uint32::NewFromUnsigned(0x8513));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_ARB"), v8::Uint32::NewFromUnsigned(0x8513));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_EXT"), v8::Uint32::NewFromUnsigned(0x8513));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_OES"), v8::Uint32::NewFromUnsigned(0x8513));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_CUBE_MAP"), v8::Uint32::NewFromUnsigned(0x8514));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_CUBE_MAP_ARB"), v8::Uint32::NewFromUnsigned(0x8514));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_CUBE_MAP_EXT"), v8::Uint32::NewFromUnsigned(0x8514));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_CUBE_MAP_OES"), v8::Uint32::NewFromUnsigned(0x8514));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_X"), v8::Uint32::NewFromUnsigned(0x8515));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB"), v8::Uint32::NewFromUnsigned(0x8515));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT"), v8::Uint32::NewFromUnsigned(0x8515));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES"), v8::Uint32::NewFromUnsigned(0x8515));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_X"), v8::Uint32::NewFromUnsigned(0x8516));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB"), v8::Uint32::NewFromUnsigned(0x8516));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT"), v8::Uint32::NewFromUnsigned(0x8516));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES"), v8::Uint32::NewFromUnsigned(0x8516));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_Y"), v8::Uint32::NewFromUnsigned(0x8517));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB"), v8::Uint32::NewFromUnsigned(0x8517));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT"), v8::Uint32::NewFromUnsigned(0x8517));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES"), v8::Uint32::NewFromUnsigned(0x8517));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_Y"), v8::Uint32::NewFromUnsigned(0x8518));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB"), v8::Uint32::NewFromUnsigned(0x8518));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT"), v8::Uint32::NewFromUnsigned(0x8518));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES"), v8::Uint32::NewFromUnsigned(0x8518));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_Z"), v8::Uint32::NewFromUnsigned(0x8519));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB"), v8::Uint32::NewFromUnsigned(0x8519));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT"), v8::Uint32::NewFromUnsigned(0x8519));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES"), v8::Uint32::NewFromUnsigned(0x8519));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_Z"), v8::Uint32::NewFromUnsigned(0x851A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB"), v8::Uint32::NewFromUnsigned(0x851A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT"), v8::Uint32::NewFromUnsigned(0x851A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES"), v8::Uint32::NewFromUnsigned(0x851A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_CUBE_MAP"), v8::Uint32::NewFromUnsigned(0x851B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_CUBE_MAP_ARB"), v8::Uint32::NewFromUnsigned(0x851B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_CUBE_MAP_EXT"), v8::Uint32::NewFromUnsigned(0x851B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CUBE_MAP_TEXTURE_SIZE"), v8::Uint32::NewFromUnsigned(0x851C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x851C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x851C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x851C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_RANGE_APPLE"), v8::Uint32::NewFromUnsigned(0x851D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_RANGE_NV"), v8::Uint32::NewFromUnsigned(0x851D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE"), v8::Uint32::NewFromUnsigned(0x851E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_RANGE_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x851E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_RANGE_VALID_NV"), v8::Uint32::NewFromUnsigned(0x851F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_STORAGE_HINT_APPLE"), v8::Uint32::NewFromUnsigned(0x851F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV"), v8::Uint32::NewFromUnsigned(0x8520));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_RANGE_POINTER_APPLE"), v8::Uint32::NewFromUnsigned(0x8521));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_RANGE_POINTER_NV"), v8::Uint32::NewFromUnsigned(0x8521));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REGISTER_COMBINERS_NV"), v8::Uint32::NewFromUnsigned(0x8522));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIABLE_A_NV"), v8::Uint32::NewFromUnsigned(0x8523));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIABLE_B_NV"), v8::Uint32::NewFromUnsigned(0x8524));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIABLE_C_NV"), v8::Uint32::NewFromUnsigned(0x8525));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIABLE_D_NV"), v8::Uint32::NewFromUnsigned(0x8526));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIABLE_E_NV"), v8::Uint32::NewFromUnsigned(0x8527));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIABLE_F_NV"), v8::Uint32::NewFromUnsigned(0x8528));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIABLE_G_NV"), v8::Uint32::NewFromUnsigned(0x8529));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_COLOR0_NV"), v8::Uint32::NewFromUnsigned(0x852A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_COLOR1_NV"), v8::Uint32::NewFromUnsigned(0x852B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMARY_COLOR_NV"), v8::Uint32::NewFromUnsigned(0x852C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_NV"), v8::Uint32::NewFromUnsigned(0x852D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPARE0_NV"), v8::Uint32::NewFromUnsigned(0x852E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPARE1_NV"), v8::Uint32::NewFromUnsigned(0x852F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISCARD_NV"), v8::Uint32::NewFromUnsigned(0x8530));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_E_TIMES_F_NV"), v8::Uint32::NewFromUnsigned(0x8531));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPARE0_PLUS_SECONDARY_COLOR_NV"), v8::Uint32::NewFromUnsigned(0x8532));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV"), v8::Uint32::NewFromUnsigned(0x8533));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_FILTER_HINT_NV"), v8::Uint32::NewFromUnsigned(0x8534));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PER_STAGE_CONSTANTS_NV"), v8::Uint32::NewFromUnsigned(0x8535));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_IDENTITY_NV"), v8::Uint32::NewFromUnsigned(0x8536));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INVERT_NV"), v8::Uint32::NewFromUnsigned(0x8537));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EXPAND_NORMAL_NV"), v8::Uint32::NewFromUnsigned(0x8538));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EXPAND_NEGATE_NV"), v8::Uint32::NewFromUnsigned(0x8539));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HALF_BIAS_NORMAL_NV"), v8::Uint32::NewFromUnsigned(0x853A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HALF_BIAS_NEGATE_NV"), v8::Uint32::NewFromUnsigned(0x853B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_IDENTITY_NV"), v8::Uint32::NewFromUnsigned(0x853C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_NEGATE_NV"), v8::Uint32::NewFromUnsigned(0x853D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCALE_BY_TWO_NV"), v8::Uint32::NewFromUnsigned(0x853E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCALE_BY_FOUR_NV"), v8::Uint32::NewFromUnsigned(0x853F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCALE_BY_ONE_HALF_NV"), v8::Uint32::NewFromUnsigned(0x8540));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BIAS_BY_NEGATIVE_ONE_HALF_NV"), v8::Uint32::NewFromUnsigned(0x8541));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_INPUT_NV"), v8::Uint32::NewFromUnsigned(0x8542));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_MAPPING_NV"), v8::Uint32::NewFromUnsigned(0x8543));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_COMPONENT_USAGE_NV"), v8::Uint32::NewFromUnsigned(0x8544));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_AB_DOT_PRODUCT_NV"), v8::Uint32::NewFromUnsigned(0x8545));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_CD_DOT_PRODUCT_NV"), v8::Uint32::NewFromUnsigned(0x8546));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_MUX_SUM_NV"), v8::Uint32::NewFromUnsigned(0x8547));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x8548));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x8549));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_AB_OUTPUT_NV"), v8::Uint32::NewFromUnsigned(0x854A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_CD_OUTPUT_NV"), v8::Uint32::NewFromUnsigned(0x854B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER_SUM_OUTPUT_NV"), v8::Uint32::NewFromUnsigned(0x854C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GENERAL_COMBINERS_NV"), v8::Uint32::NewFromUnsigned(0x854D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_GENERAL_COMBINERS_NV"), v8::Uint32::NewFromUnsigned(0x854E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_SUM_CLAMP_NV"), v8::Uint32::NewFromUnsigned(0x854F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER0_NV"), v8::Uint32::NewFromUnsigned(0x8550));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER1_NV"), v8::Uint32::NewFromUnsigned(0x8551));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER2_NV"), v8::Uint32::NewFromUnsigned(0x8552));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER3_NV"), v8::Uint32::NewFromUnsigned(0x8553));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER4_NV"), v8::Uint32::NewFromUnsigned(0x8554));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER5_NV"), v8::Uint32::NewFromUnsigned(0x8555));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER6_NV"), v8::Uint32::NewFromUnsigned(0x8556));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINER7_NV"), v8::Uint32::NewFromUnsigned(0x8557));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVE_RESTART_NV"), v8::Uint32::NewFromUnsigned(0x8558));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVE_RESTART_INDEX_NV"), v8::Uint32::NewFromUnsigned(0x8559));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_DISTANCE_MODE_NV"), v8::Uint32::NewFromUnsigned(0x855A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EYE_RADIAL_NV"), v8::Uint32::NewFromUnsigned(0x855B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EYE_PLANE_ABSOLUTE_NV"), v8::Uint32::NewFromUnsigned(0x855C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EMBOSS_LIGHT_NV"), v8::Uint32::NewFromUnsigned(0x855D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EMBOSS_CONSTANT_NV"), v8::Uint32::NewFromUnsigned(0x855E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EMBOSS_MAP_NV"), v8::Uint32::NewFromUnsigned(0x855F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_MIN_CLAMP_INGR"), v8::Uint32::NewFromUnsigned(0x8560));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_MIN_CLAMP_INGR"), v8::Uint32::NewFromUnsigned(0x8561));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_MIN_CLAMP_INGR"), v8::Uint32::NewFromUnsigned(0x8562));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_MIN_CLAMP_INGR"), v8::Uint32::NewFromUnsigned(0x8563));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_MAX_CLAMP_INGR"), v8::Uint32::NewFromUnsigned(0x8564));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_MAX_CLAMP_INGR"), v8::Uint32::NewFromUnsigned(0x8565));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_MAX_CLAMP_INGR"), v8::Uint32::NewFromUnsigned(0x8566));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_MAX_CLAMP_INGR"), v8::Uint32::NewFromUnsigned(0x8567));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERLACE_READ_INGR"), v8::Uint32::NewFromUnsigned(0x8568));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE"), v8::Uint32::NewFromUnsigned(0x8570));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE_ARB"), v8::Uint32::NewFromUnsigned(0x8570));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE_EXT"), v8::Uint32::NewFromUnsigned(0x8570));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE_RGB"), v8::Uint32::NewFromUnsigned(0x8571));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x8571));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8571));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE_ALPHA"), v8::Uint32::NewFromUnsigned(0x8572));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x8572));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMBINE_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8572));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_SCALE"), v8::Uint32::NewFromUnsigned(0x8573));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_SCALE_ARB"), v8::Uint32::NewFromUnsigned(0x8573));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_SCALE_EXT"), v8::Uint32::NewFromUnsigned(0x8573));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ADD_SIGNED"), v8::Uint32::NewFromUnsigned(0x8574));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ADD_SIGNED_ARB"), v8::Uint32::NewFromUnsigned(0x8574));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ADD_SIGNED_EXT"), v8::Uint32::NewFromUnsigned(0x8574));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERPOLATE"), v8::Uint32::NewFromUnsigned(0x8575));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERPOLATE_ARB"), v8::Uint32::NewFromUnsigned(0x8575));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERPOLATE_EXT"), v8::Uint32::NewFromUnsigned(0x8575));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT"), v8::Uint32::NewFromUnsigned(0x8576));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_ARB"), v8::Uint32::NewFromUnsigned(0x8576));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSTANT_EXT"), v8::Uint32::NewFromUnsigned(0x8576));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMARY_COLOR"), v8::Uint32::NewFromUnsigned(0x8577));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMARY_COLOR_ARB"), v8::Uint32::NewFromUnsigned(0x8577));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMARY_COLOR_EXT"), v8::Uint32::NewFromUnsigned(0x8577));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PREVIOUS"), v8::Uint32::NewFromUnsigned(0x8578));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PREVIOUS_ARB"), v8::Uint32::NewFromUnsigned(0x8578));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PREVIOUS_EXT"), v8::Uint32::NewFromUnsigned(0x8578));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE0_RGB"), v8::Uint32::NewFromUnsigned(0x8580));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE0_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x8580));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE0_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8580));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC0_RGB"), v8::Uint32::NewFromUnsigned(0x8580));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE1_RGB"), v8::Uint32::NewFromUnsigned(0x8581));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE1_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x8581));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE1_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8581));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC1_RGB"), v8::Uint32::NewFromUnsigned(0x8581));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE2_RGB"), v8::Uint32::NewFromUnsigned(0x8582));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE2_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x8582));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE2_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8582));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC2_RGB"), v8::Uint32::NewFromUnsigned(0x8582));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE3_RGB_NV"), v8::Uint32::NewFromUnsigned(0x8583));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE0_ALPHA"), v8::Uint32::NewFromUnsigned(0x8588));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE0_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x8588));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE0_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8588));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC0_ALPHA"), v8::Uint32::NewFromUnsigned(0x8588));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE1_ALPHA"), v8::Uint32::NewFromUnsigned(0x8589));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE1_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x8589));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE1_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8589));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC1_ALPHA"), v8::Uint32::NewFromUnsigned(0x8589));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE2_ALPHA"), v8::Uint32::NewFromUnsigned(0x858A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE2_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x858A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE2_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x858A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC2_ALPHA"), v8::Uint32::NewFromUnsigned(0x858A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOURCE3_ALPHA_NV"), v8::Uint32::NewFromUnsigned(0x858B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND0_RGB"), v8::Uint32::NewFromUnsigned(0x8590));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND0_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x8590));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND0_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8590));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND1_RGB"), v8::Uint32::NewFromUnsigned(0x8591));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND1_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x8591));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND1_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8591));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND2_RGB"), v8::Uint32::NewFromUnsigned(0x8592));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND2_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x8592));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND2_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8592));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND3_RGB_NV"), v8::Uint32::NewFromUnsigned(0x8593));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND0_ALPHA"), v8::Uint32::NewFromUnsigned(0x8598));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND0_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x8598));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND0_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8598));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND1_ALPHA"), v8::Uint32::NewFromUnsigned(0x8599));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND1_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x8599));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND1_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8599));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND2_ALPHA"), v8::Uint32::NewFromUnsigned(0x859A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND2_ALPHA_ARB"), v8::Uint32::NewFromUnsigned(0x859A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND2_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x859A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OPERAND3_ALPHA_NV"), v8::Uint32::NewFromUnsigned(0x859B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_SUBSAMPLE_RATE_SGIX"), v8::Uint32::NewFromUnsigned(0x85A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_SUBSAMPLE_RATE_SGIX"), v8::Uint32::NewFromUnsigned(0x85A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_SUBSAMPLE_4444_SGIX"), v8::Uint32::NewFromUnsigned(0x85A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_SUBSAMPLE_2424_SGIX"), v8::Uint32::NewFromUnsigned(0x85A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_SUBSAMPLE_4242_SGIX"), v8::Uint32::NewFromUnsigned(0x85A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERTURB_EXT"), v8::Uint32::NewFromUnsigned(0x85AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_NORMAL_EXT"), v8::Uint32::NewFromUnsigned(0x85AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE"), v8::Uint32::NewFromUnsigned(0x85B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_HINT_APPLE"), v8::Uint32::NewFromUnsigned(0x85B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_CLIENT_STORAGE_APPLE"), v8::Uint32::NewFromUnsigned(0x85B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_OBJECT_APPLE"), v8::Uint32::NewFromUnsigned(0x85B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STORAGE_CLIENT_APPLE"), v8::Uint32::NewFromUnsigned(0x85B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_BINDING"), v8::Uint32::NewFromUnsigned(0x85B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_BINDING_APPLE"), v8::Uint32::NewFromUnsigned(0x85B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_BINDING_OES"), v8::Uint32::NewFromUnsigned(0x85B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RANGE_LENGTH_APPLE"), v8::Uint32::NewFromUnsigned(0x85B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RANGE_POINTER_APPLE"), v8::Uint32::NewFromUnsigned(0x85B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_YCBCR_422_APPLE"), v8::Uint32::NewFromUnsigned(0x85B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_8_8_APPLE"), v8::Uint32::NewFromUnsigned(0x85BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_8_8_MESA"), v8::Uint32::NewFromUnsigned(0x85BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_8_8_REV_APPLE"), v8::Uint32::NewFromUnsigned(0x85BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_8_8_REV_MESA"), v8::Uint32::NewFromUnsigned(0x85BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_STORAGE_HINT_APPLE"), v8::Uint32::NewFromUnsigned(0x85BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STORAGE_PRIVATE_APPLE"), v8::Uint32::NewFromUnsigned(0x85BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STORAGE_CACHED_APPLE"), v8::Uint32::NewFromUnsigned(0x85BE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STORAGE_SHARED_APPLE"), v8::Uint32::NewFromUnsigned(0x85BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACEMENT_CODE_ARRAY_SUN"), v8::Uint32::NewFromUnsigned(0x85C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN"), v8::Uint32::NewFromUnsigned(0x85C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN"), v8::Uint32::NewFromUnsigned(0x85C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN"), v8::Uint32::NewFromUnsigned(0x85C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R1UI_V3F_SUN"), v8::Uint32::NewFromUnsigned(0x85C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R1UI_C4UB_V3F_SUN"), v8::Uint32::NewFromUnsigned(0x85C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R1UI_C3F_V3F_SUN"), v8::Uint32::NewFromUnsigned(0x85C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R1UI_N3F_V3F_SUN"), v8::Uint32::NewFromUnsigned(0x85C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R1UI_C4F_N3F_V3F_SUN"), v8::Uint32::NewFromUnsigned(0x85C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R1UI_T2F_V3F_SUN"), v8::Uint32::NewFromUnsigned(0x85C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R1UI_T2F_N3F_V3F_SUN"), v8::Uint32::NewFromUnsigned(0x85CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R1UI_T2F_C4F_N3F_V3F_SUN"), v8::Uint32::NewFromUnsigned(0x85CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLICE_ACCUM_SUN"), v8::Uint32::NewFromUnsigned(0x85CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUAD_MESH_SUN"), v8::Uint32::NewFromUnsigned(0x8614));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGLE_MESH_SUN"), v8::Uint32::NewFromUnsigned(0x8615));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_ARB"), v8::Uint32::NewFromUnsigned(0x8620));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_NV"), v8::Uint32::NewFromUnsigned(0x8620));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STATE_PROGRAM_NV"), v8::Uint32::NewFromUnsigned(0x8621));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_ENABLED"), v8::Uint32::NewFromUnsigned(0x8622));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB"), v8::Uint32::NewFromUnsigned(0x8622));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATTRIB_ARRAY_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x8623));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_SIZE"), v8::Uint32::NewFromUnsigned(0x8623));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x8623));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATTRIB_ARRAY_STRIDE_NV"), v8::Uint32::NewFromUnsigned(0x8624));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x8624));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB"), v8::Uint32::NewFromUnsigned(0x8624));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATTRIB_ARRAY_TYPE_NV"), v8::Uint32::NewFromUnsigned(0x8625));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_TYPE"), v8::Uint32::NewFromUnsigned(0x8625));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8625));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_ATTRIB_NV"), v8::Uint32::NewFromUnsigned(0x8626));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_VERTEX_ATTRIB"), v8::Uint32::NewFromUnsigned(0x8626));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_VERTEX_ATTRIB_ARB"), v8::Uint32::NewFromUnsigned(0x8626));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_LENGTH_ARB"), v8::Uint32::NewFromUnsigned(0x8627));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8627));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_STRING_ARB"), v8::Uint32::NewFromUnsigned(0x8628));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_STRING_NV"), v8::Uint32::NewFromUnsigned(0x8628));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW_PROJECTION_NV"), v8::Uint32::NewFromUnsigned(0x8629));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IDENTITY_NV"), v8::Uint32::NewFromUnsigned(0x862A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVERSE_NV"), v8::Uint32::NewFromUnsigned(0x862B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_NV"), v8::Uint32::NewFromUnsigned(0x862C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVERSE_TRANSPOSE_NV"), v8::Uint32::NewFromUnsigned(0x862D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB"), v8::Uint32::NewFromUnsigned(0x862E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV"), v8::Uint32::NewFromUnsigned(0x862E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_MATRICES_ARB"), v8::Uint32::NewFromUnsigned(0x862F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRACK_MATRICES_NV"), v8::Uint32::NewFromUnsigned(0x862F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX0_NV"), v8::Uint32::NewFromUnsigned(0x8630));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX1_NV"), v8::Uint32::NewFromUnsigned(0x8631));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX2_NV"), v8::Uint32::NewFromUnsigned(0x8632));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX3_NV"), v8::Uint32::NewFromUnsigned(0x8633));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX4_NV"), v8::Uint32::NewFromUnsigned(0x8634));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX5_NV"), v8::Uint32::NewFromUnsigned(0x8635));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX6_NV"), v8::Uint32::NewFromUnsigned(0x8636));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX7_NV"), v8::Uint32::NewFromUnsigned(0x8637));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_MATRIX_STACK_DEPTH_ARB"), v8::Uint32::NewFromUnsigned(0x8640));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_MATRIX_STACK_DEPTH_NV"), v8::Uint32::NewFromUnsigned(0x8640));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_MATRIX_ARB"), v8::Uint32::NewFromUnsigned(0x8641));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_MATRIX_NV"), v8::Uint32::NewFromUnsigned(0x8641));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_POINT_SIZE"), v8::Uint32::NewFromUnsigned(0x8642));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_POINT_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x8642));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_POINT_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x8642));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_POINT_SIZE"), v8::Uint32::NewFromUnsigned(0x8642));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_POINT_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x8642));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_POINT_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8642));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_TWO_SIDE"), v8::Uint32::NewFromUnsigned(0x8643));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_TWO_SIDE_ARB"), v8::Uint32::NewFromUnsigned(0x8643));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_TWO_SIDE_NV"), v8::Uint32::NewFromUnsigned(0x8643));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_PARAMETER_NV"), v8::Uint32::NewFromUnsigned(0x8644));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATTRIB_ARRAY_POINTER_NV"), v8::Uint32::NewFromUnsigned(0x8645));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_POINTER"), v8::Uint32::NewFromUnsigned(0x8645));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB"), v8::Uint32::NewFromUnsigned(0x8645));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_TARGET_NV"), v8::Uint32::NewFromUnsigned(0x8646));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_RESIDENT_NV"), v8::Uint32::NewFromUnsigned(0x8647));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACK_MATRIX_NV"), v8::Uint32::NewFromUnsigned(0x8648));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACK_MATRIX_TRANSFORM_NV"), v8::Uint32::NewFromUnsigned(0x8649));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_BINDING_NV"), v8::Uint32::NewFromUnsigned(0x864A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_ERROR_POSITION_ARB"), v8::Uint32::NewFromUnsigned(0x864B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_ERROR_POSITION_NV"), v8::Uint32::NewFromUnsigned(0x864B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_RECTANGLE_NV"), v8::Uint32::NewFromUnsigned(0x864C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x864D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV"), v8::Uint32::NewFromUnsigned(0x864E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_CLAMP"), v8::Uint32::NewFromUnsigned(0x864F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_CLAMP_NV"), v8::Uint32::NewFromUnsigned(0x864F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY0_NV"), v8::Uint32::NewFromUnsigned(0x8650));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY1_NV"), v8::Uint32::NewFromUnsigned(0x8651));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY2_NV"), v8::Uint32::NewFromUnsigned(0x8652));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY3_NV"), v8::Uint32::NewFromUnsigned(0x8653));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY4_NV"), v8::Uint32::NewFromUnsigned(0x8654));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY5_NV"), v8::Uint32::NewFromUnsigned(0x8655));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY6_NV"), v8::Uint32::NewFromUnsigned(0x8656));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY7_NV"), v8::Uint32::NewFromUnsigned(0x8657));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY8_NV"), v8::Uint32::NewFromUnsigned(0x8658));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY9_NV"), v8::Uint32::NewFromUnsigned(0x8659));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY10_NV"), v8::Uint32::NewFromUnsigned(0x865A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY11_NV"), v8::Uint32::NewFromUnsigned(0x865B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY12_NV"), v8::Uint32::NewFromUnsigned(0x865C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY13_NV"), v8::Uint32::NewFromUnsigned(0x865D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY14_NV"), v8::Uint32::NewFromUnsigned(0x865E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY15_NV"), v8::Uint32::NewFromUnsigned(0x865F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB0_4_NV"), v8::Uint32::NewFromUnsigned(0x8660));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB1_4_NV"), v8::Uint32::NewFromUnsigned(0x8661));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB2_4_NV"), v8::Uint32::NewFromUnsigned(0x8662));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB3_4_NV"), v8::Uint32::NewFromUnsigned(0x8663));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB4_4_NV"), v8::Uint32::NewFromUnsigned(0x8664));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB5_4_NV"), v8::Uint32::NewFromUnsigned(0x8665));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB6_4_NV"), v8::Uint32::NewFromUnsigned(0x8666));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB7_4_NV"), v8::Uint32::NewFromUnsigned(0x8667));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB8_4_NV"), v8::Uint32::NewFromUnsigned(0x8668));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB9_4_NV"), v8::Uint32::NewFromUnsigned(0x8669));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB10_4_NV"), v8::Uint32::NewFromUnsigned(0x866A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB11_4_NV"), v8::Uint32::NewFromUnsigned(0x866B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB12_4_NV"), v8::Uint32::NewFromUnsigned(0x866C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB13_4_NV"), v8::Uint32::NewFromUnsigned(0x866D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB14_4_NV"), v8::Uint32::NewFromUnsigned(0x866E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP1_VERTEX_ATTRIB15_4_NV"), v8::Uint32::NewFromUnsigned(0x866F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB0_4_NV"), v8::Uint32::NewFromUnsigned(0x8670));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB1_4_NV"), v8::Uint32::NewFromUnsigned(0x8671));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB2_4_NV"), v8::Uint32::NewFromUnsigned(0x8672));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB3_4_NV"), v8::Uint32::NewFromUnsigned(0x8673));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB4_4_NV"), v8::Uint32::NewFromUnsigned(0x8674));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB5_4_NV"), v8::Uint32::NewFromUnsigned(0x8675));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB6_4_NV"), v8::Uint32::NewFromUnsigned(0x8676));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB7_4_NV"), v8::Uint32::NewFromUnsigned(0x8677));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x8677));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB8_4_NV"), v8::Uint32::NewFromUnsigned(0x8678));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB9_4_NV"), v8::Uint32::NewFromUnsigned(0x8679));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB10_4_NV"), v8::Uint32::NewFromUnsigned(0x867A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB11_4_NV"), v8::Uint32::NewFromUnsigned(0x867B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB12_4_NV"), v8::Uint32::NewFromUnsigned(0x867C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB13_4_NV"), v8::Uint32::NewFromUnsigned(0x867D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB14_4_NV"), v8::Uint32::NewFromUnsigned(0x867E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP2_VERTEX_ATTRIB15_4_NV"), v8::Uint32::NewFromUnsigned(0x867F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSED_IMAGE_SIZE"), v8::Uint32::NewFromUnsigned(0x86A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x86A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSED"), v8::Uint32::NewFromUnsigned(0x86A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPRESSED_ARB"), v8::Uint32::NewFromUnsigned(0x86A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_COMPRESSED_TEXTURE_FORMATS"), v8::Uint32::NewFromUnsigned(0x86A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB"), v8::Uint32::NewFromUnsigned(0x86A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_TEXTURE_FORMATS"), v8::Uint32::NewFromUnsigned(0x86A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_TEXTURE_FORMATS_ARB"), v8::Uint32::NewFromUnsigned(0x86A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_UNITS_ARB"), v8::Uint32::NewFromUnsigned(0x86A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_UNITS_OES"), v8::Uint32::NewFromUnsigned(0x86A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_VERTEX_UNITS_ARB"), v8::Uint32::NewFromUnsigned(0x86A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_SUM_UNITY_ARB"), v8::Uint32::NewFromUnsigned(0x86A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_BLEND_ARB"), v8::Uint32::NewFromUnsigned(0x86A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_WEIGHT_ARB"), v8::Uint32::NewFromUnsigned(0x86A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x86A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_TYPE_OES"), v8::Uint32::NewFromUnsigned(0x86A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_STRIDE_ARB"), v8::Uint32::NewFromUnsigned(0x86AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_STRIDE_OES"), v8::Uint32::NewFromUnsigned(0x86AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x86AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x86AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_POINTER_ARB"), v8::Uint32::NewFromUnsigned(0x86AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_POINTER_OES"), v8::Uint32::NewFromUnsigned(0x86AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_ARB"), v8::Uint32::NewFromUnsigned(0x86AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_OES"), v8::Uint32::NewFromUnsigned(0x86AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT3_RGB"), v8::Uint32::NewFromUnsigned(0x86AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT3_RGB_ARB"), v8::Uint32::NewFromUnsigned(0x86AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT3_RGBA"), v8::Uint32::NewFromUnsigned(0x86AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT3_RGBA_ARB"), v8::Uint32::NewFromUnsigned(0x86AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT3_RGBA_IMG"), v8::Uint32::NewFromUnsigned(0x86AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_FXT1_3DFX"), v8::Uint32::NewFromUnsigned(0x86B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_FXT1_3DFX"), v8::Uint32::NewFromUnsigned(0x86B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_3DFX"), v8::Uint32::NewFromUnsigned(0x86B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_BUFFERS_3DFX"), v8::Uint32::NewFromUnsigned(0x86B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLES_3DFX"), v8::Uint32::NewFromUnsigned(0x86B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_2D_NV"), v8::Uint32::NewFromUnsigned(0x86C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_TRIANGULAR_2D_NV"), v8::Uint32::NewFromUnsigned(0x86C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_TESSELLATION_NV"), v8::Uint32::NewFromUnsigned(0x86C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_ATTRIB_U_ORDER_NV"), v8::Uint32::NewFromUnsigned(0x86C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAP_ATTRIB_V_ORDER_NV"), v8::Uint32::NewFromUnsigned(0x86C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_FRACTIONAL_TESSELLATION_NV"), v8::Uint32::NewFromUnsigned(0x86C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB0_NV"), v8::Uint32::NewFromUnsigned(0x86C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB1_NV"), v8::Uint32::NewFromUnsigned(0x86C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB2_NV"), v8::Uint32::NewFromUnsigned(0x86C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB3_NV"), v8::Uint32::NewFromUnsigned(0x86C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB4_NV"), v8::Uint32::NewFromUnsigned(0x86CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB5_NV"), v8::Uint32::NewFromUnsigned(0x86CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB6_NV"), v8::Uint32::NewFromUnsigned(0x86CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB7_NV"), v8::Uint32::NewFromUnsigned(0x86CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB8_NV"), v8::Uint32::NewFromUnsigned(0x86CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB9_NV"), v8::Uint32::NewFromUnsigned(0x86CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB10_NV"), v8::Uint32::NewFromUnsigned(0x86D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB11_NV"), v8::Uint32::NewFromUnsigned(0x86D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB12_NV"), v8::Uint32::NewFromUnsigned(0x86D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB13_NV"), v8::Uint32::NewFromUnsigned(0x86D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB14_NV"), v8::Uint32::NewFromUnsigned(0x86D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EVAL_VERTEX_ATTRIB15_NV"), v8::Uint32::NewFromUnsigned(0x86D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_MAP_TESSELLATION_NV"), v8::Uint32::NewFromUnsigned(0x86D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_RATIONAL_EVAL_ORDER_NV"), v8::Uint32::NewFromUnsigned(0x86D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_PATCH_ATTRIBS_NV"), v8::Uint32::NewFromUnsigned(0x86D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV"), v8::Uint32::NewFromUnsigned(0x86D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_S8_S8_8_8_NV"), v8::Uint32::NewFromUnsigned(0x86DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_8_8_S8_S8_REV_NV"), v8::Uint32::NewFromUnsigned(0x86DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DSDT_MAG_INTENSITY_NV"), v8::Uint32::NewFromUnsigned(0x86DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_CONSISTENT_NV"), v8::Uint32::NewFromUnsigned(0x86DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SHADER_NV"), v8::Uint32::NewFromUnsigned(0x86DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_OPERATION_NV"), v8::Uint32::NewFromUnsigned(0x86DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CULL_MODES_NV"), v8::Uint32::NewFromUnsigned(0x86E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_MATRIX_NV"), v8::Uint32::NewFromUnsigned(0x86E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_2D_MATRIX_NV"), v8::Uint32::NewFromUnsigned(0x86E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x86E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_2D_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x86E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x86E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_2D_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x86E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PREVIOUS_TEXTURE_INPUT_NV"), v8::Uint32::NewFromUnsigned(0x86E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONST_EYE_NV"), v8::Uint32::NewFromUnsigned(0x86E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PASS_THROUGH_NV"), v8::Uint32::NewFromUnsigned(0x86E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CULL_FRAGMENT_NV"), v8::Uint32::NewFromUnsigned(0x86E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_TEXTURE_2D_NV"), v8::Uint32::NewFromUnsigned(0x86E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPENDENT_AR_TEXTURE_2D_NV"), v8::Uint32::NewFromUnsigned(0x86E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPENDENT_GB_TEXTURE_2D_NV"), v8::Uint32::NewFromUnsigned(0x86EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SURFACE_STATE_NV"), v8::Uint32::NewFromUnsigned(0x86EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_NV"), v8::Uint32::NewFromUnsigned(0x86EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_DEPTH_REPLACE_NV"), v8::Uint32::NewFromUnsigned(0x86ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_TEXTURE_2D_NV"), v8::Uint32::NewFromUnsigned(0x86EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_TEXTURE_3D_NV"), v8::Uint32::NewFromUnsigned(0x86EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV"), v8::Uint32::NewFromUnsigned(0x86F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV"), v8::Uint32::NewFromUnsigned(0x86F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV"), v8::Uint32::NewFromUnsigned(0x86F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV"), v8::Uint32::NewFromUnsigned(0x86F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HILO_NV"), v8::Uint32::NewFromUnsigned(0x86F4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DSDT_NV"), v8::Uint32::NewFromUnsigned(0x86F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DSDT_MAG_NV"), v8::Uint32::NewFromUnsigned(0x86F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DSDT_MAG_VIB_NV"), v8::Uint32::NewFromUnsigned(0x86F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HILO16_NV"), v8::Uint32::NewFromUnsigned(0x86F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_HILO_NV"), v8::Uint32::NewFromUnsigned(0x86F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_HILO16_NV"), v8::Uint32::NewFromUnsigned(0x86FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_RGBA_NV"), v8::Uint32::NewFromUnsigned(0x86FB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_RGBA8_NV"), v8::Uint32::NewFromUnsigned(0x86FC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SURFACE_REGISTERED_NV"), v8::Uint32::NewFromUnsigned(0x86FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_RGB_NV"), v8::Uint32::NewFromUnsigned(0x86FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_RGB8_NV"), v8::Uint32::NewFromUnsigned(0x86FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SURFACE_MAPPED_NV"), v8::Uint32::NewFromUnsigned(0x8700));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_LUMINANCE_NV"), v8::Uint32::NewFromUnsigned(0x8701));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_LUMINANCE8_NV"), v8::Uint32::NewFromUnsigned(0x8702));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_LUMINANCE_ALPHA_NV"), v8::Uint32::NewFromUnsigned(0x8703));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_LUMINANCE8_ALPHA8_NV"), v8::Uint32::NewFromUnsigned(0x8704));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_ALPHA_NV"), v8::Uint32::NewFromUnsigned(0x8705));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_ALPHA8_NV"), v8::Uint32::NewFromUnsigned(0x8706));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_INTENSITY_NV"), v8::Uint32::NewFromUnsigned(0x8707));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_INTENSITY8_NV"), v8::Uint32::NewFromUnsigned(0x8708));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DSDT8_NV"), v8::Uint32::NewFromUnsigned(0x8709));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DSDT8_MAG8_NV"), v8::Uint32::NewFromUnsigned(0x870A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DSDT8_MAG8_INTENSITY8_NV"), v8::Uint32::NewFromUnsigned(0x870B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_RGB_UNSIGNED_ALPHA_NV"), v8::Uint32::NewFromUnsigned(0x870C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV"), v8::Uint32::NewFromUnsigned(0x870D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HI_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x870E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LO_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x870F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DS_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x8710));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DT_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x8711));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAGNITUDE_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x8712));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIBRANCE_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x8713));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HI_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x8714));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LO_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x8715));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DS_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x8716));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DT_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x8717));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAGNITUDE_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x8718));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIBRANCE_BIAS_NV"), v8::Uint32::NewFromUnsigned(0x8719));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BORDER_VALUES_NV"), v8::Uint32::NewFromUnsigned(0x871A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_HI_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x871B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LO_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x871C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DS_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x871D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DT_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x871E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MAG_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x871F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW2_ARB"), v8::Uint32::NewFromUnsigned(0x8722));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW3_ARB"), v8::Uint32::NewFromUnsigned(0x8723));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW4_ARB"), v8::Uint32::NewFromUnsigned(0x8724));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW5_ARB"), v8::Uint32::NewFromUnsigned(0x8725));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW6_ARB"), v8::Uint32::NewFromUnsigned(0x8726));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW7_ARB"), v8::Uint32::NewFromUnsigned(0x8727));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW8_ARB"), v8::Uint32::NewFromUnsigned(0x8728));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW9_ARB"), v8::Uint32::NewFromUnsigned(0x8729));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW10_ARB"), v8::Uint32::NewFromUnsigned(0x872A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW11_ARB"), v8::Uint32::NewFromUnsigned(0x872B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW12_ARB"), v8::Uint32::NewFromUnsigned(0x872C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW13_ARB"), v8::Uint32::NewFromUnsigned(0x872D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW14_ARB"), v8::Uint32::NewFromUnsigned(0x872E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW15_ARB"), v8::Uint32::NewFromUnsigned(0x872F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW16_ARB"), v8::Uint32::NewFromUnsigned(0x8730));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW17_ARB"), v8::Uint32::NewFromUnsigned(0x8731));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW18_ARB"), v8::Uint32::NewFromUnsigned(0x8732));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW19_ARB"), v8::Uint32::NewFromUnsigned(0x8733));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW20_ARB"), v8::Uint32::NewFromUnsigned(0x8734));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW21_ARB"), v8::Uint32::NewFromUnsigned(0x8735));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW22_ARB"), v8::Uint32::NewFromUnsigned(0x8736));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW23_ARB"), v8::Uint32::NewFromUnsigned(0x8737));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW24_ARB"), v8::Uint32::NewFromUnsigned(0x8738));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW25_ARB"), v8::Uint32::NewFromUnsigned(0x8739));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW26_ARB"), v8::Uint32::NewFromUnsigned(0x873A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW27_ARB"), v8::Uint32::NewFromUnsigned(0x873B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW28_ARB"), v8::Uint32::NewFromUnsigned(0x873C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW29_ARB"), v8::Uint32::NewFromUnsigned(0x873D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW30_ARB"), v8::Uint32::NewFromUnsigned(0x873E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW31_ARB"), v8::Uint32::NewFromUnsigned(0x873F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT3_RGB_EXT"), v8::Uint32::NewFromUnsigned(0x8740));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Z400_BINARY_AMD"), v8::Uint32::NewFromUnsigned(0x8740));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT3_RGBA_EXT"), v8::Uint32::NewFromUnsigned(0x8741));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_BINARY_LENGTH_OES"), v8::Uint32::NewFromUnsigned(0x8741));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_BINARY_LENGTH"), v8::Uint32::NewFromUnsigned(0x8741));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRROR_CLAMP_ATI"), v8::Uint32::NewFromUnsigned(0x8742));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRROR_CLAMP_EXT"), v8::Uint32::NewFromUnsigned(0x8742));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRROR_CLAMP_TO_EDGE"), v8::Uint32::NewFromUnsigned(0x8743));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRROR_CLAMP_TO_EDGE_ATI"), v8::Uint32::NewFromUnsigned(0x8743));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRROR_CLAMP_TO_EDGE_EXT"), v8::Uint32::NewFromUnsigned(0x8743));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODULATE_ADD_ATI"), v8::Uint32::NewFromUnsigned(0x8744));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODULATE_SIGNED_ADD_ATI"), v8::Uint32::NewFromUnsigned(0x8745));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODULATE_SUBTRACT_ATI"), v8::Uint32::NewFromUnsigned(0x8746));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SET_AMD"), v8::Uint32::NewFromUnsigned(0x874A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REPLACE_VALUE_AMD"), v8::Uint32::NewFromUnsigned(0x874B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_OP_VALUE_AMD"), v8::Uint32::NewFromUnsigned(0x874C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_OP_VALUE_AMD"), v8::Uint32::NewFromUnsigned(0x874D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_LONG"), v8::Uint32::NewFromUnsigned(0x874E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OCCLUSION_QUERY_EVENT_MASK_AMD"), v8::Uint32::NewFromUnsigned(0x874F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL_MESA"), v8::Uint32::NewFromUnsigned(0x8750));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_24_8_MESA"), v8::Uint32::NewFromUnsigned(0x8751));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_8_24_REV_MESA"), v8::Uint32::NewFromUnsigned(0x8752));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_15_1_MESA"), v8::Uint32::NewFromUnsigned(0x8753));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_SHORT_1_15_REV_MESA"), v8::Uint32::NewFromUnsigned(0x8754));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_MASK_MESA"), v8::Uint32::NewFromUnsigned(0x8755));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRACE_NAME_MESA"), v8::Uint32::NewFromUnsigned(0x8756));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_YCBCR_MESA"), v8::Uint32::NewFromUnsigned(0x8757));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_INVERT_MESA"), v8::Uint32::NewFromUnsigned(0x8758));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_OBJECT_MESA"), v8::Uint32::NewFromUnsigned(0x8759));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_1D_STACK_MESAX"), v8::Uint32::NewFromUnsigned(0x8759));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_PRINT_MESA"), v8::Uint32::NewFromUnsigned(0x875A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D_STACK_MESAX"), v8::Uint32::NewFromUnsigned(0x875A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_ASSERT_MESA"), v8::Uint32::NewFromUnsigned(0x875B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_1D_STACK_MESAX"), v8::Uint32::NewFromUnsigned(0x875B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_2D_STACK_MESAX"), v8::Uint32::NewFromUnsigned(0x875C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_1D_STACK_BINDING_MESAX"), v8::Uint32::NewFromUnsigned(0x875D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D_STACK_BINDING_MESAX"), v8::Uint32::NewFromUnsigned(0x875E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATIC_ATI"), v8::Uint32::NewFromUnsigned(0x8760));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DYNAMIC_ATI"), v8::Uint32::NewFromUnsigned(0x8761));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRESERVE_ATI"), v8::Uint32::NewFromUnsigned(0x8762));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISCARD_ATI"), v8::Uint32::NewFromUnsigned(0x8763));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x8764));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x8764));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_BUFFER_SIZE_ATI"), v8::Uint32::NewFromUnsigned(0x8764));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_USAGE"), v8::Uint32::NewFromUnsigned(0x8765));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_USAGE_ARB"), v8::Uint32::NewFromUnsigned(0x8765));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_BUFFER_USAGE_ATI"), v8::Uint32::NewFromUnsigned(0x8765));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_OBJECT_BUFFER_ATI"), v8::Uint32::NewFromUnsigned(0x8766));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_OBJECT_OFFSET_ATI"), v8::Uint32::NewFromUnsigned(0x8767));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_ATI"), v8::Uint32::NewFromUnsigned(0x8768));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_TYPE_ATI"), v8::Uint32::NewFromUnsigned(0x8769));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_POINTER_ATI"), v8::Uint32::NewFromUnsigned(0x876A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_STREAMS_ATI"), v8::Uint32::NewFromUnsigned(0x876B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STREAM0_ATI"), v8::Uint32::NewFromUnsigned(0x876C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STREAM1_ATI"), v8::Uint32::NewFromUnsigned(0x876D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STREAM2_ATI"), v8::Uint32::NewFromUnsigned(0x876E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STREAM3_ATI"), v8::Uint32::NewFromUnsigned(0x876F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STREAM4_ATI"), v8::Uint32::NewFromUnsigned(0x8770));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STREAM5_ATI"), v8::Uint32::NewFromUnsigned(0x8771));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STREAM6_ATI"), v8::Uint32::NewFromUnsigned(0x8772));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_STREAM7_ATI"), v8::Uint32::NewFromUnsigned(0x8773));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SOURCE_ATI"), v8::Uint32::NewFromUnsigned(0x8774));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUMP_ROT_MATRIX_ATI"), v8::Uint32::NewFromUnsigned(0x8775));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUMP_ROT_MATRIX_SIZE_ATI"), v8::Uint32::NewFromUnsigned(0x8776));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUMP_NUM_TEX_UNITS_ATI"), v8::Uint32::NewFromUnsigned(0x8777));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUMP_TEX_UNITS_ATI"), v8::Uint32::NewFromUnsigned(0x8778));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DUDV_ATI"), v8::Uint32::NewFromUnsigned(0x8779));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DU8DV8_ATI"), v8::Uint32::NewFromUnsigned(0x877A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUMP_ENVMAP_ATI"), v8::Uint32::NewFromUnsigned(0x877B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUMP_TARGET_ATI"), v8::Uint32::NewFromUnsigned(0x877C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_EXT"), v8::Uint32::NewFromUnsigned(0x8780));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8781));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_INDEX_EXT"), v8::Uint32::NewFromUnsigned(0x8782));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_NEGATE_EXT"), v8::Uint32::NewFromUnsigned(0x8783));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_DOT3_EXT"), v8::Uint32::NewFromUnsigned(0x8784));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_DOT4_EXT"), v8::Uint32::NewFromUnsigned(0x8785));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_MUL_EXT"), v8::Uint32::NewFromUnsigned(0x8786));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_ADD_EXT"), v8::Uint32::NewFromUnsigned(0x8787));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_MADD_EXT"), v8::Uint32::NewFromUnsigned(0x8788));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_FRAC_EXT"), v8::Uint32::NewFromUnsigned(0x8789));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_MAX_EXT"), v8::Uint32::NewFromUnsigned(0x878A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_MIN_EXT"), v8::Uint32::NewFromUnsigned(0x878B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_SET_GE_EXT"), v8::Uint32::NewFromUnsigned(0x878C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_SET_LT_EXT"), v8::Uint32::NewFromUnsigned(0x878D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_CLAMP_EXT"), v8::Uint32::NewFromUnsigned(0x878E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_FLOOR_EXT"), v8::Uint32::NewFromUnsigned(0x878F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_ROUND_EXT"), v8::Uint32::NewFromUnsigned(0x8790));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_EXP_BASE_2_EXT"), v8::Uint32::NewFromUnsigned(0x8791));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_LOG_BASE_2_EXT"), v8::Uint32::NewFromUnsigned(0x8792));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_POWER_EXT"), v8::Uint32::NewFromUnsigned(0x8793));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_RECIP_EXT"), v8::Uint32::NewFromUnsigned(0x8794));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_RECIP_SQRT_EXT"), v8::Uint32::NewFromUnsigned(0x8795));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_SUB_EXT"), v8::Uint32::NewFromUnsigned(0x8796));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_CROSS_PRODUCT_EXT"), v8::Uint32::NewFromUnsigned(0x8797));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_MULTIPLY_MATRIX_EXT"), v8::Uint32::NewFromUnsigned(0x8798));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OP_MOV_EXT"), v8::Uint32::NewFromUnsigned(0x8799));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_VERTEX_EXT"), v8::Uint32::NewFromUnsigned(0x879A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_COLOR0_EXT"), v8::Uint32::NewFromUnsigned(0x879B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_COLOR1_EXT"), v8::Uint32::NewFromUnsigned(0x879C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD0_EXT"), v8::Uint32::NewFromUnsigned(0x879D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD1_EXT"), v8::Uint32::NewFromUnsigned(0x879E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD2_EXT"), v8::Uint32::NewFromUnsigned(0x879F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD3_EXT"), v8::Uint32::NewFromUnsigned(0x87A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD4_EXT"), v8::Uint32::NewFromUnsigned(0x87A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD5_EXT"), v8::Uint32::NewFromUnsigned(0x87A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD6_EXT"), v8::Uint32::NewFromUnsigned(0x87A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD7_EXT"), v8::Uint32::NewFromUnsigned(0x87A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD8_EXT"), v8::Uint32::NewFromUnsigned(0x87A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD9_EXT"), v8::Uint32::NewFromUnsigned(0x87A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD10_EXT"), v8::Uint32::NewFromUnsigned(0x87A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD11_EXT"), v8::Uint32::NewFromUnsigned(0x87A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD12_EXT"), v8::Uint32::NewFromUnsigned(0x87A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD13_EXT"), v8::Uint32::NewFromUnsigned(0x87AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD14_EXT"), v8::Uint32::NewFromUnsigned(0x87AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD15_EXT"), v8::Uint32::NewFromUnsigned(0x87AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD16_EXT"), v8::Uint32::NewFromUnsigned(0x87AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD17_EXT"), v8::Uint32::NewFromUnsigned(0x87AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD18_EXT"), v8::Uint32::NewFromUnsigned(0x87AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD19_EXT"), v8::Uint32::NewFromUnsigned(0x87B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD20_EXT"), v8::Uint32::NewFromUnsigned(0x87B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD21_EXT"), v8::Uint32::NewFromUnsigned(0x87B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD22_EXT"), v8::Uint32::NewFromUnsigned(0x87B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD23_EXT"), v8::Uint32::NewFromUnsigned(0x87B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD24_EXT"), v8::Uint32::NewFromUnsigned(0x87B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD25_EXT"), v8::Uint32::NewFromUnsigned(0x87B6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD26_EXT"), v8::Uint32::NewFromUnsigned(0x87B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD27_EXT"), v8::Uint32::NewFromUnsigned(0x87B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD28_EXT"), v8::Uint32::NewFromUnsigned(0x87B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD29_EXT"), v8::Uint32::NewFromUnsigned(0x87BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD30_EXT"), v8::Uint32::NewFromUnsigned(0x87BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_TEXTURE_COORD31_EXT"), v8::Uint32::NewFromUnsigned(0x87BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OUTPUT_FOG_EXT"), v8::Uint32::NewFromUnsigned(0x87BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCALAR_EXT"), v8::Uint32::NewFromUnsigned(0x87BE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VECTOR_EXT"), v8::Uint32::NewFromUnsigned(0x87BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_EXT"), v8::Uint32::NewFromUnsigned(0x87C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIANT_EXT"), v8::Uint32::NewFromUnsigned(0x87C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVARIANT_EXT"), v8::Uint32::NewFromUnsigned(0x87C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOCAL_CONSTANT_EXT"), v8::Uint32::NewFromUnsigned(0x87C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOCAL_EXT"), v8::Uint32::NewFromUnsigned(0x87C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT"), v8::Uint32::NewFromUnsigned(0x87C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_SHADER_VARIANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_SHADER_INVARIANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_SHADER_LOCALS_EXT"), v8::Uint32::NewFromUnsigned(0x87C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT"), v8::Uint32::NewFromUnsigned(0x87CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT"), v8::Uint32::NewFromUnsigned(0x87CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_INSTRUCTIONS_EXT"), v8::Uint32::NewFromUnsigned(0x87CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_VARIANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_INVARIANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT"), v8::Uint32::NewFromUnsigned(0x87D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_LOCALS_EXT"), v8::Uint32::NewFromUnsigned(0x87D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_OPTIMIZED_EXT"), v8::Uint32::NewFromUnsigned(0x87D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_X_EXT"), v8::Uint32::NewFromUnsigned(0x87D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Y_EXT"), v8::Uint32::NewFromUnsigned(0x87D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Z_EXT"), v8::Uint32::NewFromUnsigned(0x87D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_W_EXT"), v8::Uint32::NewFromUnsigned(0x87D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEGATIVE_X_EXT"), v8::Uint32::NewFromUnsigned(0x87D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEGATIVE_Y_EXT"), v8::Uint32::NewFromUnsigned(0x87DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEGATIVE_Z_EXT"), v8::Uint32::NewFromUnsigned(0x87DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEGATIVE_W_EXT"), v8::Uint32::NewFromUnsigned(0x87DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ZERO_EXT"), v8::Uint32::NewFromUnsigned(0x87DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_EXT"), v8::Uint32::NewFromUnsigned(0x87DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEGATIVE_ONE_EXT"), v8::Uint32::NewFromUnsigned(0x87DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMALIZED_RANGE_EXT"), v8::Uint32::NewFromUnsigned(0x87E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FULL_RANGE_EXT"), v8::Uint32::NewFromUnsigned(0x87E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_VERTEX_EXT"), v8::Uint32::NewFromUnsigned(0x87E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MVP_MATRIX_EXT"), v8::Uint32::NewFromUnsigned(0x87E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIANT_VALUE_EXT"), v8::Uint32::NewFromUnsigned(0x87E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIANT_DATATYPE_EXT"), v8::Uint32::NewFromUnsigned(0x87E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIANT_ARRAY_STRIDE_EXT"), v8::Uint32::NewFromUnsigned(0x87E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIANT_ARRAY_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x87E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIANT_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x87E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VARIANT_ARRAY_POINTER_EXT"), v8::Uint32::NewFromUnsigned(0x87E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVARIANT_VALUE_EXT"), v8::Uint32::NewFromUnsigned(0x87EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVARIANT_DATATYPE_EXT"), v8::Uint32::NewFromUnsigned(0x87EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOCAL_CONSTANT_VALUE_EXT"), v8::Uint32::NewFromUnsigned(0x87EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOCAL_CONSTANT_DATATYPE_EXT"), v8::Uint32::NewFromUnsigned(0x87ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD"), v8::Uint32::NewFromUnsigned(0x87EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PN_TRIANGLES_ATI"), v8::Uint32::NewFromUnsigned(0x87F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI"), v8::Uint32::NewFromUnsigned(0x87F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PN_TRIANGLES_POINT_MODE_ATI"), v8::Uint32::NewFromUnsigned(0x87F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PN_TRIANGLES_NORMAL_MODE_ATI"), v8::Uint32::NewFromUnsigned(0x87F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI"), v8::Uint32::NewFromUnsigned(0x87F4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI"), v8::Uint32::NewFromUnsigned(0x87F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI"), v8::Uint32::NewFromUnsigned(0x87F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI"), v8::Uint32::NewFromUnsigned(0x87F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI"), v8::Uint32::NewFromUnsigned(0x87F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_3DC_X_AMD"), v8::Uint32::NewFromUnsigned(0x87F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_3DC_XY_AMD"), v8::Uint32::NewFromUnsigned(0x87FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VBO_FREE_MEMORY_ATI"), v8::Uint32::NewFromUnsigned(0x87FB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FREE_MEMORY_ATI"), v8::Uint32::NewFromUnsigned(0x87FC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_FREE_MEMORY_ATI"), v8::Uint32::NewFromUnsigned(0x87FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_PROGRAM_BINARY_FORMATS"), v8::Uint32::NewFromUnsigned(0x87FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_PROGRAM_BINARY_FORMATS_OES"), v8::Uint32::NewFromUnsigned(0x87FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_BINARY_FORMATS"), v8::Uint32::NewFromUnsigned(0x87FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_BINARY_FORMATS_OES"), v8::Uint32::NewFromUnsigned(0x87FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_FUNC"), v8::Uint32::NewFromUnsigned(0x8800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_FUNC_ATI"), v8::Uint32::NewFromUnsigned(0x8800));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_FAIL"), v8::Uint32::NewFromUnsigned(0x8801));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_FAIL_ATI"), v8::Uint32::NewFromUnsigned(0x8801));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_PASS_DEPTH_FAIL"), v8::Uint32::NewFromUnsigned(0x8802));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI"), v8::Uint32::NewFromUnsigned(0x8802));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_PASS_DEPTH_PASS"), v8::Uint32::NewFromUnsigned(0x8803));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI"), v8::Uint32::NewFromUnsigned(0x8803));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_ARB"), v8::Uint32::NewFromUnsigned(0x8804));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_ALU_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x8805));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_TEX_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x8806));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_TEX_INDIRECTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x8807));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x8808));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x8809));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x880A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x880B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x880C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x880D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x880E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x880F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x8810));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA32F"), v8::Uint32::NewFromUnsigned(0x8814));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA32F_ARB"), v8::Uint32::NewFromUnsigned(0x8814));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA32F_EXT"), v8::Uint32::NewFromUnsigned(0x8814));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_FLOAT32_APPLE"), v8::Uint32::NewFromUnsigned(0x8814));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_FLOAT32_ATI"), v8::Uint32::NewFromUnsigned(0x8814));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB32F"), v8::Uint32::NewFromUnsigned(0x8815));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB32F_ARB"), v8::Uint32::NewFromUnsigned(0x8815));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB32F_EXT"), v8::Uint32::NewFromUnsigned(0x8815));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_FLOAT32_APPLE"), v8::Uint32::NewFromUnsigned(0x8815));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_FLOAT32_ATI"), v8::Uint32::NewFromUnsigned(0x8815));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA32F_ARB"), v8::Uint32::NewFromUnsigned(0x8816));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA32F_EXT"), v8::Uint32::NewFromUnsigned(0x8816));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_FLOAT32_APPLE"), v8::Uint32::NewFromUnsigned(0x8816));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_FLOAT32_ATI"), v8::Uint32::NewFromUnsigned(0x8816));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY32F_ARB"), v8::Uint32::NewFromUnsigned(0x8817));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY_FLOAT32_APPLE"), v8::Uint32::NewFromUnsigned(0x8817));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY_FLOAT32_ATI"), v8::Uint32::NewFromUnsigned(0x8817));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE32F_ARB"), v8::Uint32::NewFromUnsigned(0x8818));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE32F_EXT"), v8::Uint32::NewFromUnsigned(0x8818));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_FLOAT32_APPLE"), v8::Uint32::NewFromUnsigned(0x8818));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_FLOAT32_ATI"), v8::Uint32::NewFromUnsigned(0x8818));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA32F_ARB"), v8::Uint32::NewFromUnsigned(0x8819));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA32F_EXT"), v8::Uint32::NewFromUnsigned(0x8819));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA_FLOAT32_APPLE"), v8::Uint32::NewFromUnsigned(0x8819));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA_FLOAT32_ATI"), v8::Uint32::NewFromUnsigned(0x8819));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16F"), v8::Uint32::NewFromUnsigned(0x881A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16F_ARB"), v8::Uint32::NewFromUnsigned(0x881A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16F_EXT"), v8::Uint32::NewFromUnsigned(0x881A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_FLOAT16_APPLE"), v8::Uint32::NewFromUnsigned(0x881A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_FLOAT16_ATI"), v8::Uint32::NewFromUnsigned(0x881A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16F"), v8::Uint32::NewFromUnsigned(0x881B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16F_ARB"), v8::Uint32::NewFromUnsigned(0x881B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16F_EXT"), v8::Uint32::NewFromUnsigned(0x881B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_FLOAT16_APPLE"), v8::Uint32::NewFromUnsigned(0x881B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_FLOAT16_ATI"), v8::Uint32::NewFromUnsigned(0x881B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA16F_ARB"), v8::Uint32::NewFromUnsigned(0x881C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA16F_EXT"), v8::Uint32::NewFromUnsigned(0x881C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_FLOAT16_APPLE"), v8::Uint32::NewFromUnsigned(0x881C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_FLOAT16_ATI"), v8::Uint32::NewFromUnsigned(0x881C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY16F_ARB"), v8::Uint32::NewFromUnsigned(0x881D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY_FLOAT16_APPLE"), v8::Uint32::NewFromUnsigned(0x881D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY_FLOAT16_ATI"), v8::Uint32::NewFromUnsigned(0x881D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16F_ARB"), v8::Uint32::NewFromUnsigned(0x881E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16F_EXT"), v8::Uint32::NewFromUnsigned(0x881E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_FLOAT16_APPLE"), v8::Uint32::NewFromUnsigned(0x881E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_FLOAT16_ATI"), v8::Uint32::NewFromUnsigned(0x881E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA16F_ARB"), v8::Uint32::NewFromUnsigned(0x881F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA16F_EXT"), v8::Uint32::NewFromUnsigned(0x881F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA_FLOAT16_APPLE"), v8::Uint32::NewFromUnsigned(0x881F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA_FLOAT16_ATI"), v8::Uint32::NewFromUnsigned(0x881F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_FLOAT_MODE_ARB"), v8::Uint32::NewFromUnsigned(0x8820));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_FLOAT_MODE_ATI"), v8::Uint32::NewFromUnsigned(0x8820));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRITEONLY_RENDERING_QCOM"), v8::Uint32::NewFromUnsigned(0x8823));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DRAW_BUFFERS"), v8::Uint32::NewFromUnsigned(0x8824));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DRAW_BUFFERS_ARB"), v8::Uint32::NewFromUnsigned(0x8824));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DRAW_BUFFERS_ATI"), v8::Uint32::NewFromUnsigned(0x8824));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DRAW_BUFFERS_EXT"), v8::Uint32::NewFromUnsigned(0x8824));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DRAW_BUFFERS_NV"), v8::Uint32::NewFromUnsigned(0x8824));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER0"), v8::Uint32::NewFromUnsigned(0x8825));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER0_ARB"), v8::Uint32::NewFromUnsigned(0x8825));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER0_ATI"), v8::Uint32::NewFromUnsigned(0x8825));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER0_EXT"), v8::Uint32::NewFromUnsigned(0x8825));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER0_NV"), v8::Uint32::NewFromUnsigned(0x8825));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER1"), v8::Uint32::NewFromUnsigned(0x8826));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER1_ARB"), v8::Uint32::NewFromUnsigned(0x8826));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER1_ATI"), v8::Uint32::NewFromUnsigned(0x8826));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER1_EXT"), v8::Uint32::NewFromUnsigned(0x8826));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER1_NV"), v8::Uint32::NewFromUnsigned(0x8826));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER2"), v8::Uint32::NewFromUnsigned(0x8827));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER2_ARB"), v8::Uint32::NewFromUnsigned(0x8827));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER2_ATI"), v8::Uint32::NewFromUnsigned(0x8827));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER2_EXT"), v8::Uint32::NewFromUnsigned(0x8827));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER2_NV"), v8::Uint32::NewFromUnsigned(0x8827));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER3"), v8::Uint32::NewFromUnsigned(0x8828));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER3_ARB"), v8::Uint32::NewFromUnsigned(0x8828));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER3_ATI"), v8::Uint32::NewFromUnsigned(0x8828));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER3_EXT"), v8::Uint32::NewFromUnsigned(0x8828));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER3_NV"), v8::Uint32::NewFromUnsigned(0x8828));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER4"), v8::Uint32::NewFromUnsigned(0x8829));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER4_ARB"), v8::Uint32::NewFromUnsigned(0x8829));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER4_ATI"), v8::Uint32::NewFromUnsigned(0x8829));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER4_EXT"), v8::Uint32::NewFromUnsigned(0x8829));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER4_NV"), v8::Uint32::NewFromUnsigned(0x8829));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER5"), v8::Uint32::NewFromUnsigned(0x882A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER5_ARB"), v8::Uint32::NewFromUnsigned(0x882A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER5_ATI"), v8::Uint32::NewFromUnsigned(0x882A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER5_EXT"), v8::Uint32::NewFromUnsigned(0x882A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER5_NV"), v8::Uint32::NewFromUnsigned(0x882A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER6"), v8::Uint32::NewFromUnsigned(0x882B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER6_ARB"), v8::Uint32::NewFromUnsigned(0x882B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER6_ATI"), v8::Uint32::NewFromUnsigned(0x882B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER6_EXT"), v8::Uint32::NewFromUnsigned(0x882B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER6_NV"), v8::Uint32::NewFromUnsigned(0x882B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER7"), v8::Uint32::NewFromUnsigned(0x882C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER7_ARB"), v8::Uint32::NewFromUnsigned(0x882C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER7_ATI"), v8::Uint32::NewFromUnsigned(0x882C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER7_EXT"), v8::Uint32::NewFromUnsigned(0x882C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER7_NV"), v8::Uint32::NewFromUnsigned(0x882C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER8"), v8::Uint32::NewFromUnsigned(0x882D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER8_ARB"), v8::Uint32::NewFromUnsigned(0x882D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER8_ATI"), v8::Uint32::NewFromUnsigned(0x882D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER8_EXT"), v8::Uint32::NewFromUnsigned(0x882D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER8_NV"), v8::Uint32::NewFromUnsigned(0x882D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER9"), v8::Uint32::NewFromUnsigned(0x882E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER9_ARB"), v8::Uint32::NewFromUnsigned(0x882E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER9_ATI"), v8::Uint32::NewFromUnsigned(0x882E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER9_EXT"), v8::Uint32::NewFromUnsigned(0x882E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER9_NV"), v8::Uint32::NewFromUnsigned(0x882E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER10"), v8::Uint32::NewFromUnsigned(0x882F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER10_ARB"), v8::Uint32::NewFromUnsigned(0x882F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER10_ATI"), v8::Uint32::NewFromUnsigned(0x882F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER10_EXT"), v8::Uint32::NewFromUnsigned(0x882F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER10_NV"), v8::Uint32::NewFromUnsigned(0x882F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER11"), v8::Uint32::NewFromUnsigned(0x8830));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER11_ARB"), v8::Uint32::NewFromUnsigned(0x8830));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER11_ATI"), v8::Uint32::NewFromUnsigned(0x8830));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER11_EXT"), v8::Uint32::NewFromUnsigned(0x8830));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER11_NV"), v8::Uint32::NewFromUnsigned(0x8830));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER12"), v8::Uint32::NewFromUnsigned(0x8831));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER12_ARB"), v8::Uint32::NewFromUnsigned(0x8831));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER12_ATI"), v8::Uint32::NewFromUnsigned(0x8831));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER12_EXT"), v8::Uint32::NewFromUnsigned(0x8831));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER12_NV"), v8::Uint32::NewFromUnsigned(0x8831));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER13"), v8::Uint32::NewFromUnsigned(0x8832));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER13_ARB"), v8::Uint32::NewFromUnsigned(0x8832));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER13_ATI"), v8::Uint32::NewFromUnsigned(0x8832));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER13_EXT"), v8::Uint32::NewFromUnsigned(0x8832));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER13_NV"), v8::Uint32::NewFromUnsigned(0x8832));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER14"), v8::Uint32::NewFromUnsigned(0x8833));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER14_ARB"), v8::Uint32::NewFromUnsigned(0x8833));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER14_ATI"), v8::Uint32::NewFromUnsigned(0x8833));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER14_EXT"), v8::Uint32::NewFromUnsigned(0x8833));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER14_NV"), v8::Uint32::NewFromUnsigned(0x8833));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER15"), v8::Uint32::NewFromUnsigned(0x8834));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER15_ARB"), v8::Uint32::NewFromUnsigned(0x8834));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER15_ATI"), v8::Uint32::NewFromUnsigned(0x8834));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER15_EXT"), v8::Uint32::NewFromUnsigned(0x8834));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_BUFFER15_NV"), v8::Uint32::NewFromUnsigned(0x8834));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI"), v8::Uint32::NewFromUnsigned(0x8835));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI"), v8::Uint32::NewFromUnsigned(0x8837));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION_ALPHA"), v8::Uint32::NewFromUnsigned(0x883D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x883D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_EQUATION_ALPHA_OES"), v8::Uint32::NewFromUnsigned(0x883D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SUBSAMPLE_DISTANCE_AMD"), v8::Uint32::NewFromUnsigned(0x883F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_PALETTE_ARB"), v8::Uint32::NewFromUnsigned(0x8840));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_PALETTE_OES"), v8::Uint32::NewFromUnsigned(0x8840));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB"), v8::Uint32::NewFromUnsigned(0x8841));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PALETTE_MATRICES_ARB"), v8::Uint32::NewFromUnsigned(0x8842));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PALETTE_MATRICES_OES"), v8::Uint32::NewFromUnsigned(0x8842));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_PALETTE_MATRIX_ARB"), v8::Uint32::NewFromUnsigned(0x8843));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_PALETTE_MATRIX_OES"), v8::Uint32::NewFromUnsigned(0x8843));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_ARB"), v8::Uint32::NewFromUnsigned(0x8844));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_OES"), v8::Uint32::NewFromUnsigned(0x8844));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_MATRIX_INDEX_ARB"), v8::Uint32::NewFromUnsigned(0x8845));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x8846));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x8846));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8847));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_TYPE_OES"), v8::Uint32::NewFromUnsigned(0x8847));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_STRIDE_ARB"), v8::Uint32::NewFromUnsigned(0x8848));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_STRIDE_OES"), v8::Uint32::NewFromUnsigned(0x8848));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_POINTER_ARB"), v8::Uint32::NewFromUnsigned(0x8849));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_POINTER_OES"), v8::Uint32::NewFromUnsigned(0x8849));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEPTH_SIZE"), v8::Uint32::NewFromUnsigned(0x884A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEPTH_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x884A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_TEXTURE_MODE"), v8::Uint32::NewFromUnsigned(0x884B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_TEXTURE_MODE_ARB"), v8::Uint32::NewFromUnsigned(0x884B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_MODE"), v8::Uint32::NewFromUnsigned(0x884C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_MODE_ARB"), v8::Uint32::NewFromUnsigned(0x884C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_MODE_EXT"), v8::Uint32::NewFromUnsigned(0x884C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_FUNC"), v8::Uint32::NewFromUnsigned(0x884D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_FUNC_ARB"), v8::Uint32::NewFromUnsigned(0x884D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COMPARE_FUNC_EXT"), v8::Uint32::NewFromUnsigned(0x884D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPARE_R_TO_TEXTURE"), v8::Uint32::NewFromUnsigned(0x884E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPARE_R_TO_TEXTURE_ARB"), v8::Uint32::NewFromUnsigned(0x884E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT"), v8::Uint32::NewFromUnsigned(0x884E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPARE_REF_TO_TEXTURE"), v8::Uint32::NewFromUnsigned(0x884E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPARE_REF_TO_TEXTURE_EXT"), v8::Uint32::NewFromUnsigned(0x884E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_SEAMLESS"), v8::Uint32::NewFromUnsigned(0x884F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV"), v8::Uint32::NewFromUnsigned(0x8850));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x8851));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV"), v8::Uint32::NewFromUnsigned(0x8852));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV"), v8::Uint32::NewFromUnsigned(0x8853));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_HILO_TEXTURE_2D_NV"), v8::Uint32::NewFromUnsigned(0x8854));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV"), v8::Uint32::NewFromUnsigned(0x8855));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV"), v8::Uint32::NewFromUnsigned(0x8856));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV"), v8::Uint32::NewFromUnsigned(0x8857));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPENDENT_HILO_TEXTURE_2D_NV"), v8::Uint32::NewFromUnsigned(0x8858));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPENDENT_RGB_TEXTURE_3D_NV"), v8::Uint32::NewFromUnsigned(0x8859));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV"), v8::Uint32::NewFromUnsigned(0x885A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_PASS_THROUGH_NV"), v8::Uint32::NewFromUnsigned(0x885B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_TEXTURE_1D_NV"), v8::Uint32::NewFromUnsigned(0x885C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV"), v8::Uint32::NewFromUnsigned(0x885D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HILO8_NV"), v8::Uint32::NewFromUnsigned(0x885E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_HILO8_NV"), v8::Uint32::NewFromUnsigned(0x885F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FORCE_BLUE_TO_ONE_NV"), v8::Uint32::NewFromUnsigned(0x8860));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SPRITE"), v8::Uint32::NewFromUnsigned(0x8861));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SPRITE_ARB"), v8::Uint32::NewFromUnsigned(0x8861));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SPRITE_NV"), v8::Uint32::NewFromUnsigned(0x8861));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SPRITE_OES"), v8::Uint32::NewFromUnsigned(0x8861));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COORD_REPLACE"), v8::Uint32::NewFromUnsigned(0x8862));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COORD_REPLACE_ARB"), v8::Uint32::NewFromUnsigned(0x8862));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COORD_REPLACE_NV"), v8::Uint32::NewFromUnsigned(0x8862));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COORD_REPLACE_OES"), v8::Uint32::NewFromUnsigned(0x8862));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SPRITE_R_MODE_NV"), v8::Uint32::NewFromUnsigned(0x8863));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_COUNTER_BITS_NV"), v8::Uint32::NewFromUnsigned(0x8864));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_COUNTER_BITS"), v8::Uint32::NewFromUnsigned(0x8864));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_COUNTER_BITS_ARB"), v8::Uint32::NewFromUnsigned(0x8864));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_COUNTER_BITS_EXT"), v8::Uint32::NewFromUnsigned(0x8864));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_OCCLUSION_QUERY_ID_NV"), v8::Uint32::NewFromUnsigned(0x8865));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_QUERY"), v8::Uint32::NewFromUnsigned(0x8865));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_QUERY_ARB"), v8::Uint32::NewFromUnsigned(0x8865));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_QUERY_EXT"), v8::Uint32::NewFromUnsigned(0x8865));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_COUNT_NV"), v8::Uint32::NewFromUnsigned(0x8866));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_RESULT"), v8::Uint32::NewFromUnsigned(0x8866));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_RESULT_ARB"), v8::Uint32::NewFromUnsigned(0x8866));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_RESULT_EXT"), v8::Uint32::NewFromUnsigned(0x8866));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_COUNT_AVAILABLE_NV"), v8::Uint32::NewFromUnsigned(0x8867));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_RESULT_AVAILABLE"), v8::Uint32::NewFromUnsigned(0x8867));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_RESULT_AVAILABLE_ARB"), v8::Uint32::NewFromUnsigned(0x8867));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_RESULT_AVAILABLE_EXT"), v8::Uint32::NewFromUnsigned(0x8867));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV"), v8::Uint32::NewFromUnsigned(0x8868));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_ATTRIBS"), v8::Uint32::NewFromUnsigned(0x8869));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_ATTRIBS_ARB"), v8::Uint32::NewFromUnsigned(0x8869));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_NORMALIZED"), v8::Uint32::NewFromUnsigned(0x886A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB"), v8::Uint32::NewFromUnsigned(0x886A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_INPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x886C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x886C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x886D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x886D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL_TO_RGBA_NV"), v8::Uint32::NewFromUnsigned(0x886E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL_TO_BGRA_NV"), v8::Uint32::NewFromUnsigned(0x886F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_NV"), v8::Uint32::NewFromUnsigned(0x8870));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_COORDS"), v8::Uint32::NewFromUnsigned(0x8871));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_COORDS_ARB"), v8::Uint32::NewFromUnsigned(0x8871));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_COORDS_NV"), v8::Uint32::NewFromUnsigned(0x8871));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_IMAGE_UNITS"), v8::Uint32::NewFromUnsigned(0x8872));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_IMAGE_UNITS_ARB"), v8::Uint32::NewFromUnsigned(0x8872));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_IMAGE_UNITS_NV"), v8::Uint32::NewFromUnsigned(0x8872));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_BINDING_NV"), v8::Uint32::NewFromUnsigned(0x8873));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_ERROR_STRING_ARB"), v8::Uint32::NewFromUnsigned(0x8874));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_ERROR_STRING_NV"), v8::Uint32::NewFromUnsigned(0x8874));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_FORMAT_ASCII_ARB"), v8::Uint32::NewFromUnsigned(0x8875));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_FORMAT_ARB"), v8::Uint32::NewFromUnsigned(0x8876));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRITE_PIXEL_DATA_RANGE_NV"), v8::Uint32::NewFromUnsigned(0x8878));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_PIXEL_DATA_RANGE_NV"), v8::Uint32::NewFromUnsigned(0x8879));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x887A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_PIXEL_DATA_RANGE_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x887B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV"), v8::Uint32::NewFromUnsigned(0x887C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_PIXEL_DATA_RANGE_POINTER_NV"), v8::Uint32::NewFromUnsigned(0x887D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SHADER_INVOCATIONS"), v8::Uint32::NewFromUnsigned(0x887F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SHADER_INVOCATIONS_EXT"), v8::Uint32::NewFromUnsigned(0x887F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_R_NV"), v8::Uint32::NewFromUnsigned(0x8880));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RG_NV"), v8::Uint32::NewFromUnsigned(0x8881));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RGB_NV"), v8::Uint32::NewFromUnsigned(0x8882));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RGBA_NV"), v8::Uint32::NewFromUnsigned(0x8883));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_R16_NV"), v8::Uint32::NewFromUnsigned(0x8884));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_R32_NV"), v8::Uint32::NewFromUnsigned(0x8885));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RG16_NV"), v8::Uint32::NewFromUnsigned(0x8886));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RG32_NV"), v8::Uint32::NewFromUnsigned(0x8887));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RGB16_NV"), v8::Uint32::NewFromUnsigned(0x8888));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RGB32_NV"), v8::Uint32::NewFromUnsigned(0x8889));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RGBA16_NV"), v8::Uint32::NewFromUnsigned(0x888A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RGBA32_NV"), v8::Uint32::NewFromUnsigned(0x888B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FLOAT_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x888C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_CLEAR_COLOR_VALUE_NV"), v8::Uint32::NewFromUnsigned(0x888D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_RGBA_MODE_NV"), v8::Uint32::NewFromUnsigned(0x888E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_UNSIGNED_REMAP_MODE_NV"), v8::Uint32::NewFromUnsigned(0x888F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BOUNDS_TEST_EXT"), v8::Uint32::NewFromUnsigned(0x8890));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BOUNDS_EXT"), v8::Uint32::NewFromUnsigned(0x8891));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_BUFFER"), v8::Uint32::NewFromUnsigned(0x8892));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_BUFFER_ARB"), v8::Uint32::NewFromUnsigned(0x8892));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_BUFFER"), v8::Uint32::NewFromUnsigned(0x8893));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_BUFFER_ARB"), v8::Uint32::NewFromUnsigned(0x8893));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8894));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x8894));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8895));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x8895));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8896));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x8896));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8897));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x8897));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8898));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x8898));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8899));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x8899));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x889A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x889A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x889B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x889B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x889C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x889C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x889D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x889D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x889D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x889E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x889E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WEIGHT_ARRAY_BUFFER_BINDING_OES"), v8::Uint32::NewFromUnsigned(0x889E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x889F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x889F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x88A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x88A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x88A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB"), v8::Uint32::NewFromUnsigned(0x88A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_TEMPORARIES_ARB"), v8::Uint32::NewFromUnsigned(0x88A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEMPORARIES_ARB"), v8::Uint32::NewFromUnsigned(0x88A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_NATIVE_TEMPORARIES_ARB"), v8::Uint32::NewFromUnsigned(0x88A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB"), v8::Uint32::NewFromUnsigned(0x88A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_PARAMETERS_ARB"), v8::Uint32::NewFromUnsigned(0x88A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_PARAMETERS_ARB"), v8::Uint32::NewFromUnsigned(0x88A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_NATIVE_PARAMETERS_ARB"), v8::Uint32::NewFromUnsigned(0x88AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB"), v8::Uint32::NewFromUnsigned(0x88AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_ATTRIBS_ARB"), v8::Uint32::NewFromUnsigned(0x88AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_ATTRIBS_ARB"), v8::Uint32::NewFromUnsigned(0x88AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_NATIVE_ATTRIBS_ARB"), v8::Uint32::NewFromUnsigned(0x88AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB"), v8::Uint32::NewFromUnsigned(0x88AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_ADDRESS_REGISTERS_ARB"), v8::Uint32::NewFromUnsigned(0x88B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB"), v8::Uint32::NewFromUnsigned(0x88B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB"), v8::Uint32::NewFromUnsigned(0x88B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB"), v8::Uint32::NewFromUnsigned(0x88B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB"), v8::Uint32::NewFromUnsigned(0x88B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_ENV_PARAMETERS_ARB"), v8::Uint32::NewFromUnsigned(0x88B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB"), v8::Uint32::NewFromUnsigned(0x88B6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_CURRENT_MATRIX_ARB"), v8::Uint32::NewFromUnsigned(0x88B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_ONLY"), v8::Uint32::NewFromUnsigned(0x88B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_ONLY_ARB"), v8::Uint32::NewFromUnsigned(0x88B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRITE_ONLY"), v8::Uint32::NewFromUnsigned(0x88B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRITE_ONLY_ARB"), v8::Uint32::NewFromUnsigned(0x88B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRITE_ONLY_OES"), v8::Uint32::NewFromUnsigned(0x88B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_WRITE"), v8::Uint32::NewFromUnsigned(0x88BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_WRITE_ARB"), v8::Uint32::NewFromUnsigned(0x88BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_ACCESS"), v8::Uint32::NewFromUnsigned(0x88BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_ACCESS_ARB"), v8::Uint32::NewFromUnsigned(0x88BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_ACCESS_OES"), v8::Uint32::NewFromUnsigned(0x88BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_MAPPED"), v8::Uint32::NewFromUnsigned(0x88BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_MAPPED_ARB"), v8::Uint32::NewFromUnsigned(0x88BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_MAPPED_OES"), v8::Uint32::NewFromUnsigned(0x88BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_MAP_POINTER"), v8::Uint32::NewFromUnsigned(0x88BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_MAP_POINTER_ARB"), v8::Uint32::NewFromUnsigned(0x88BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_MAP_POINTER_OES"), v8::Uint32::NewFromUnsigned(0x88BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WRITE_DISCARD_NV"), v8::Uint32::NewFromUnsigned(0x88BE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TIME_ELAPSED"), v8::Uint32::NewFromUnsigned(0x88BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TIME_ELAPSED_EXT"), v8::Uint32::NewFromUnsigned(0x88BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX0_ARB"), v8::Uint32::NewFromUnsigned(0x88C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX1_ARB"), v8::Uint32::NewFromUnsigned(0x88C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX2_ARB"), v8::Uint32::NewFromUnsigned(0x88C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX3_ARB"), v8::Uint32::NewFromUnsigned(0x88C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX4_ARB"), v8::Uint32::NewFromUnsigned(0x88C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX5_ARB"), v8::Uint32::NewFromUnsigned(0x88C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX6_ARB"), v8::Uint32::NewFromUnsigned(0x88C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX7_ARB"), v8::Uint32::NewFromUnsigned(0x88C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX8_ARB"), v8::Uint32::NewFromUnsigned(0x88C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX9_ARB"), v8::Uint32::NewFromUnsigned(0x88C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX10_ARB"), v8::Uint32::NewFromUnsigned(0x88CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX11_ARB"), v8::Uint32::NewFromUnsigned(0x88CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX12_ARB"), v8::Uint32::NewFromUnsigned(0x88CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX13_ARB"), v8::Uint32::NewFromUnsigned(0x88CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX14_ARB"), v8::Uint32::NewFromUnsigned(0x88CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX15_ARB"), v8::Uint32::NewFromUnsigned(0x88CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX16_ARB"), v8::Uint32::NewFromUnsigned(0x88D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX17_ARB"), v8::Uint32::NewFromUnsigned(0x88D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX18_ARB"), v8::Uint32::NewFromUnsigned(0x88D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX19_ARB"), v8::Uint32::NewFromUnsigned(0x88D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX20_ARB"), v8::Uint32::NewFromUnsigned(0x88D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX21_ARB"), v8::Uint32::NewFromUnsigned(0x88D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX22_ARB"), v8::Uint32::NewFromUnsigned(0x88D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX23_ARB"), v8::Uint32::NewFromUnsigned(0x88D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX24_ARB"), v8::Uint32::NewFromUnsigned(0x88D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX25_ARB"), v8::Uint32::NewFromUnsigned(0x88D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX26_ARB"), v8::Uint32::NewFromUnsigned(0x88DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX27_ARB"), v8::Uint32::NewFromUnsigned(0x88DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX28_ARB"), v8::Uint32::NewFromUnsigned(0x88DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX29_ARB"), v8::Uint32::NewFromUnsigned(0x88DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX30_ARB"), v8::Uint32::NewFromUnsigned(0x88DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX31_ARB"), v8::Uint32::NewFromUnsigned(0x88DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STREAM_DRAW"), v8::Uint32::NewFromUnsigned(0x88E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STREAM_DRAW_ARB"), v8::Uint32::NewFromUnsigned(0x88E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STREAM_READ"), v8::Uint32::NewFromUnsigned(0x88E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STREAM_READ_ARB"), v8::Uint32::NewFromUnsigned(0x88E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STREAM_COPY"), v8::Uint32::NewFromUnsigned(0x88E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STREAM_COPY_ARB"), v8::Uint32::NewFromUnsigned(0x88E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATIC_DRAW"), v8::Uint32::NewFromUnsigned(0x88E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATIC_DRAW_ARB"), v8::Uint32::NewFromUnsigned(0x88E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATIC_READ"), v8::Uint32::NewFromUnsigned(0x88E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATIC_READ_ARB"), v8::Uint32::NewFromUnsigned(0x88E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATIC_COPY"), v8::Uint32::NewFromUnsigned(0x88E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATIC_COPY_ARB"), v8::Uint32::NewFromUnsigned(0x88E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DYNAMIC_DRAW"), v8::Uint32::NewFromUnsigned(0x88E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DYNAMIC_DRAW_ARB"), v8::Uint32::NewFromUnsigned(0x88E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DYNAMIC_READ"), v8::Uint32::NewFromUnsigned(0x88E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DYNAMIC_READ_ARB"), v8::Uint32::NewFromUnsigned(0x88E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DYNAMIC_COPY"), v8::Uint32::NewFromUnsigned(0x88EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DYNAMIC_COPY_ARB"), v8::Uint32::NewFromUnsigned(0x88EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_PACK_BUFFER"), v8::Uint32::NewFromUnsigned(0x88EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_PACK_BUFFER_ARB"), v8::Uint32::NewFromUnsigned(0x88EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_PACK_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x88EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_UNPACK_BUFFER"), v8::Uint32::NewFromUnsigned(0x88EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_UNPACK_BUFFER_ARB"), v8::Uint32::NewFromUnsigned(0x88EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_UNPACK_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x88EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_PACK_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x88ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_PACK_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x88ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_PACK_BUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x88ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ETC1_SRGB8_NV"), v8::Uint32::NewFromUnsigned(0x88EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_UNPACK_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x88EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_UNPACK_BUFFER_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x88EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PIXEL_UNPACK_BUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x88EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH24_STENCIL8"), v8::Uint32::NewFromUnsigned(0x88F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH24_STENCIL8_EXT"), v8::Uint32::NewFromUnsigned(0x88F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH24_STENCIL8_OES"), v8::Uint32::NewFromUnsigned(0x88F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_STENCIL_SIZE"), v8::Uint32::NewFromUnsigned(0x88F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_STENCIL_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x88F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_TAG_BITS_EXT"), v8::Uint32::NewFromUnsigned(0x88F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_CLEAR_TAG_VALUE_EXT"), v8::Uint32::NewFromUnsigned(0x88F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV"), v8::Uint32::NewFromUnsigned(0x88F4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_CALL_DEPTH_NV"), v8::Uint32::NewFromUnsigned(0x88F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_IF_DEPTH_NV"), v8::Uint32::NewFromUnsigned(0x88F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_LOOP_DEPTH_NV"), v8::Uint32::NewFromUnsigned(0x88F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_LOOP_COUNT_NV"), v8::Uint32::NewFromUnsigned(0x88F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC1_COLOR"), v8::Uint32::NewFromUnsigned(0x88F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_SRC1_COLOR"), v8::Uint32::NewFromUnsigned(0x88FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ONE_MINUS_SRC1_ALPHA"), v8::Uint32::NewFromUnsigned(0x88FB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DUAL_SOURCE_DRAW_BUFFERS"), v8::Uint32::NewFromUnsigned(0x88FC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_INTEGER"), v8::Uint32::NewFromUnsigned(0x88FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x88FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV"), v8::Uint32::NewFromUnsigned(0x88FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_DIVISOR"), v8::Uint32::NewFromUnsigned(0x88FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE"), v8::Uint32::NewFromUnsigned(0x88FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB"), v8::Uint32::NewFromUnsigned(0x88FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT"), v8::Uint32::NewFromUnsigned(0x88FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV"), v8::Uint32::NewFromUnsigned(0x88FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ARRAY_TEXTURE_LAYERS"), v8::Uint32::NewFromUnsigned(0x88FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ARRAY_TEXTURE_LAYERS_EXT"), v8::Uint32::NewFromUnsigned(0x88FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_PROGRAM_TEXEL_OFFSET"), v8::Uint32::NewFromUnsigned(0x8904));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_PROGRAM_TEXEL_OFFSET_EXT"), v8::Uint32::NewFromUnsigned(0x8904));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_PROGRAM_TEXEL_OFFSET_NV"), v8::Uint32::NewFromUnsigned(0x8904));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEXEL_OFFSET"), v8::Uint32::NewFromUnsigned(0x8905));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEXEL_OFFSET_EXT"), v8::Uint32::NewFromUnsigned(0x8905));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEXEL_OFFSET_NV"), v8::Uint32::NewFromUnsigned(0x8905));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_ATTRIB_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x8906));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_RESULT_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x8907));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x8908));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_RESULT_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x8909));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_TEST_TWO_SIDE_EXT"), v8::Uint32::NewFromUnsigned(0x8910));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_STENCIL_FACE_EXT"), v8::Uint32::NewFromUnsigned(0x8911));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIRROR_CLAMP_TO_BORDER_EXT"), v8::Uint32::NewFromUnsigned(0x8912));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLES_PASSED"), v8::Uint32::NewFromUnsigned(0x8914));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLES_PASSED_ARB"), v8::Uint32::NewFromUnsigned(0x8914));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_VERTICES_OUT"), v8::Uint32::NewFromUnsigned(0x8916));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_LINKED_VERTICES_OUT_EXT"), v8::Uint32::NewFromUnsigned(0x8916));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_INPUT_TYPE"), v8::Uint32::NewFromUnsigned(0x8917));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_LINKED_INPUT_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8917));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_OUTPUT_TYPE"), v8::Uint32::NewFromUnsigned(0x8918));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8918));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_BINDING"), v8::Uint32::NewFromUnsigned(0x8919));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_VERTEX_COLOR"), v8::Uint32::NewFromUnsigned(0x891A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_VERTEX_COLOR_ARB"), v8::Uint32::NewFromUnsigned(0x891A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_FRAGMENT_COLOR"), v8::Uint32::NewFromUnsigned(0x891B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_FRAGMENT_COLOR_ARB"), v8::Uint32::NewFromUnsigned(0x891B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_READ_COLOR"), v8::Uint32::NewFromUnsigned(0x891C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLAMP_READ_COLOR_ARB"), v8::Uint32::NewFromUnsigned(0x891C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIXED_ONLY"), v8::Uint32::NewFromUnsigned(0x891D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIXED_ONLY_ARB"), v8::Uint32::NewFromUnsigned(0x891D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_PROGRAM_NV"), v8::Uint32::NewFromUnsigned(0x891E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_PROGRAM_NV"), v8::Uint32::NewFromUnsigned(0x891F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_ATI"), v8::Uint32::NewFromUnsigned(0x8920));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_0_ATI"), v8::Uint32::NewFromUnsigned(0x8921));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_1_ATI"), v8::Uint32::NewFromUnsigned(0x8922));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_2_ATI"), v8::Uint32::NewFromUnsigned(0x8923));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_3_ATI"), v8::Uint32::NewFromUnsigned(0x8924));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_4_ATI"), v8::Uint32::NewFromUnsigned(0x8925));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_5_ATI"), v8::Uint32::NewFromUnsigned(0x8926));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_6_ATI"), v8::Uint32::NewFromUnsigned(0x8927));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_7_ATI"), v8::Uint32::NewFromUnsigned(0x8928));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_8_ATI"), v8::Uint32::NewFromUnsigned(0x8929));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_9_ATI"), v8::Uint32::NewFromUnsigned(0x892A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_10_ATI"), v8::Uint32::NewFromUnsigned(0x892B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_11_ATI"), v8::Uint32::NewFromUnsigned(0x892C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_12_ATI"), v8::Uint32::NewFromUnsigned(0x892D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_13_ATI"), v8::Uint32::NewFromUnsigned(0x892E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_14_ATI"), v8::Uint32::NewFromUnsigned(0x892F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_15_ATI"), v8::Uint32::NewFromUnsigned(0x8930));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_16_ATI"), v8::Uint32::NewFromUnsigned(0x8931));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_17_ATI"), v8::Uint32::NewFromUnsigned(0x8932));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_18_ATI"), v8::Uint32::NewFromUnsigned(0x8933));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_19_ATI"), v8::Uint32::NewFromUnsigned(0x8934));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_20_ATI"), v8::Uint32::NewFromUnsigned(0x8935));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_21_ATI"), v8::Uint32::NewFromUnsigned(0x8936));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_22_ATI"), v8::Uint32::NewFromUnsigned(0x8937));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_23_ATI"), v8::Uint32::NewFromUnsigned(0x8938));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_24_ATI"), v8::Uint32::NewFromUnsigned(0x8939));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_25_ATI"), v8::Uint32::NewFromUnsigned(0x893A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_26_ATI"), v8::Uint32::NewFromUnsigned(0x893B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_27_ATI"), v8::Uint32::NewFromUnsigned(0x893C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_28_ATI"), v8::Uint32::NewFromUnsigned(0x893D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_29_ATI"), v8::Uint32::NewFromUnsigned(0x893E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_30_ATI"), v8::Uint32::NewFromUnsigned(0x893F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REG_31_ATI"), v8::Uint32::NewFromUnsigned(0x8940));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_0_ATI"), v8::Uint32::NewFromUnsigned(0x8941));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_1_ATI"), v8::Uint32::NewFromUnsigned(0x8942));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_2_ATI"), v8::Uint32::NewFromUnsigned(0x8943));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_3_ATI"), v8::Uint32::NewFromUnsigned(0x8944));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_4_ATI"), v8::Uint32::NewFromUnsigned(0x8945));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_5_ATI"), v8::Uint32::NewFromUnsigned(0x8946));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_6_ATI"), v8::Uint32::NewFromUnsigned(0x8947));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_7_ATI"), v8::Uint32::NewFromUnsigned(0x8948));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_8_ATI"), v8::Uint32::NewFromUnsigned(0x8949));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_9_ATI"), v8::Uint32::NewFromUnsigned(0x894A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_10_ATI"), v8::Uint32::NewFromUnsigned(0x894B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_11_ATI"), v8::Uint32::NewFromUnsigned(0x894C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_12_ATI"), v8::Uint32::NewFromUnsigned(0x894D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_13_ATI"), v8::Uint32::NewFromUnsigned(0x894E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_14_ATI"), v8::Uint32::NewFromUnsigned(0x894F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_15_ATI"), v8::Uint32::NewFromUnsigned(0x8950));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_16_ATI"), v8::Uint32::NewFromUnsigned(0x8951));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_17_ATI"), v8::Uint32::NewFromUnsigned(0x8952));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_18_ATI"), v8::Uint32::NewFromUnsigned(0x8953));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_19_ATI"), v8::Uint32::NewFromUnsigned(0x8954));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_20_ATI"), v8::Uint32::NewFromUnsigned(0x8955));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_21_ATI"), v8::Uint32::NewFromUnsigned(0x8956));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_22_ATI"), v8::Uint32::NewFromUnsigned(0x8957));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_23_ATI"), v8::Uint32::NewFromUnsigned(0x8958));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_24_ATI"), v8::Uint32::NewFromUnsigned(0x8959));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_25_ATI"), v8::Uint32::NewFromUnsigned(0x895A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_26_ATI"), v8::Uint32::NewFromUnsigned(0x895B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_27_ATI"), v8::Uint32::NewFromUnsigned(0x895C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_28_ATI"), v8::Uint32::NewFromUnsigned(0x895D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_29_ATI"), v8::Uint32::NewFromUnsigned(0x895E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_30_ATI"), v8::Uint32::NewFromUnsigned(0x895F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CON_31_ATI"), v8::Uint32::NewFromUnsigned(0x8960));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MOV_ATI"), v8::Uint32::NewFromUnsigned(0x8961));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ADD_ATI"), v8::Uint32::NewFromUnsigned(0x8963));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MUL_ATI"), v8::Uint32::NewFromUnsigned(0x8964));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SUB_ATI"), v8::Uint32::NewFromUnsigned(0x8965));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT3_ATI"), v8::Uint32::NewFromUnsigned(0x8966));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT4_ATI"), v8::Uint32::NewFromUnsigned(0x8967));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAD_ATI"), v8::Uint32::NewFromUnsigned(0x8968));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LERP_ATI"), v8::Uint32::NewFromUnsigned(0x8969));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CND_ATI"), v8::Uint32::NewFromUnsigned(0x896A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CND0_ATI"), v8::Uint32::NewFromUnsigned(0x896B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOT2_ADD_ATI"), v8::Uint32::NewFromUnsigned(0x896C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_INTERPOLATOR_ATI"), v8::Uint32::NewFromUnsigned(0x896D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_FRAGMENT_REGISTERS_ATI"), v8::Uint32::NewFromUnsigned(0x896E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_FRAGMENT_CONSTANTS_ATI"), v8::Uint32::NewFromUnsigned(0x896F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_PASSES_ATI"), v8::Uint32::NewFromUnsigned(0x8970));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_INSTRUCTIONS_PER_PASS_ATI"), v8::Uint32::NewFromUnsigned(0x8971));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_INSTRUCTIONS_TOTAL_ATI"), v8::Uint32::NewFromUnsigned(0x8972));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI"), v8::Uint32::NewFromUnsigned(0x8973));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_LOOPBACK_COMPONENTS_ATI"), v8::Uint32::NewFromUnsigned(0x8974));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ALPHA_PAIRING_ATI"), v8::Uint32::NewFromUnsigned(0x8975));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SWIZZLE_STR_ATI"), v8::Uint32::NewFromUnsigned(0x8976));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SWIZZLE_STQ_ATI"), v8::Uint32::NewFromUnsigned(0x8977));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SWIZZLE_STR_DR_ATI"), v8::Uint32::NewFromUnsigned(0x8978));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SWIZZLE_STQ_DQ_ATI"), v8::Uint32::NewFromUnsigned(0x8979));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SWIZZLE_STRQ_ATI"), v8::Uint32::NewFromUnsigned(0x897A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SWIZZLE_STRQ_DQ_ATI"), v8::Uint32::NewFromUnsigned(0x897B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERLACE_OML"), v8::Uint32::NewFromUnsigned(0x8980));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERLACE_READ_OML"), v8::Uint32::NewFromUnsigned(0x8981));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FORMAT_SUBSAMPLE_24_24_OML"), v8::Uint32::NewFromUnsigned(0x8982));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FORMAT_SUBSAMPLE_244_244_OML"), v8::Uint32::NewFromUnsigned(0x8983));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_RESAMPLE_OML"), v8::Uint32::NewFromUnsigned(0x8984));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_RESAMPLE_OML"), v8::Uint32::NewFromUnsigned(0x8985));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESAMPLE_REPLICATE_OML"), v8::Uint32::NewFromUnsigned(0x8986));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESAMPLE_ZERO_FILL_OML"), v8::Uint32::NewFromUnsigned(0x8987));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESAMPLE_AVERAGE_OML"), v8::Uint32::NewFromUnsigned(0x8988));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RESAMPLE_DECIMATE_OML"), v8::Uint32::NewFromUnsigned(0x8989));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_ARRAY_TYPE_OES"), v8::Uint32::NewFromUnsigned(0x898A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_ARRAY_STRIDE_OES"), v8::Uint32::NewFromUnsigned(0x898B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_ARRAY_POINTER_OES"), v8::Uint32::NewFromUnsigned(0x898C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES"), v8::Uint32::NewFromUnsigned(0x898D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES"), v8::Uint32::NewFromUnsigned(0x898E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES"), v8::Uint32::NewFromUnsigned(0x898F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP1_APPLE"), v8::Uint32::NewFromUnsigned(0x8A00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP2_APPLE"), v8::Uint32::NewFromUnsigned(0x8A01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE"), v8::Uint32::NewFromUnsigned(0x8A02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE"), v8::Uint32::NewFromUnsigned(0x8A03));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE"), v8::Uint32::NewFromUnsigned(0x8A04));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE"), v8::Uint32::NewFromUnsigned(0x8A05));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE"), v8::Uint32::NewFromUnsigned(0x8A06));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE"), v8::Uint32::NewFromUnsigned(0x8A07));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE"), v8::Uint32::NewFromUnsigned(0x8A08));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE"), v8::Uint32::NewFromUnsigned(0x8A09));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_PIXELS_APPLE"), v8::Uint32::NewFromUnsigned(0x8A0A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FENCE_APPLE"), v8::Uint32::NewFromUnsigned(0x8A0B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_APPLE"), v8::Uint32::NewFromUnsigned(0x8A0C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_TYPE_APPLE"), v8::Uint32::NewFromUnsigned(0x8A0D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_POINTER_APPLE"), v8::Uint32::NewFromUnsigned(0x8A0E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_FLOAT_APPLE"), v8::Uint32::NewFromUnsigned(0x8A0F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BUFFER"), v8::Uint32::NewFromUnsigned(0x8A11));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_SERIALIZED_MODIFY_APPLE"), v8::Uint32::NewFromUnsigned(0x8A12));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_FLUSHING_UNMAP_APPLE"), v8::Uint32::NewFromUnsigned(0x8A13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AUX_DEPTH_STENCIL_APPLE"), v8::Uint32::NewFromUnsigned(0x8A14));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_ROW_BYTES_APPLE"), v8::Uint32::NewFromUnsigned(0x8A15));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_ROW_BYTES_APPLE"), v8::Uint32::NewFromUnsigned(0x8A16));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RELEASED_APPLE"), v8::Uint32::NewFromUnsigned(0x8A19));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VOLATILE_APPLE"), v8::Uint32::NewFromUnsigned(0x8A1A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RETAINED_APPLE"), v8::Uint32::NewFromUnsigned(0x8A1B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNDEFINED_APPLE"), v8::Uint32::NewFromUnsigned(0x8A1C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PURGEABLE_APPLE"), v8::Uint32::NewFromUnsigned(0x8A1D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_422_APPLE"), v8::Uint32::NewFromUnsigned(0x8A1F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8A28));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BUFFER_START"), v8::Uint32::NewFromUnsigned(0x8A29));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x8A2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_UNIFORM_BLOCKS"), v8::Uint32::NewFromUnsigned(0x8A2B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_UNIFORM_BLOCKS"), v8::Uint32::NewFromUnsigned(0x8A2C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT"), v8::Uint32::NewFromUnsigned(0x8A2C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_UNIFORM_BLOCKS"), v8::Uint32::NewFromUnsigned(0x8A2D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_UNIFORM_BLOCKS"), v8::Uint32::NewFromUnsigned(0x8A2E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_UNIFORM_BUFFER_BINDINGS"), v8::Uint32::NewFromUnsigned(0x8A2F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_UNIFORM_BLOCK_SIZE"), v8::Uint32::NewFromUnsigned(0x8A30));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8A31));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8A32));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8A32));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8A33));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT"), v8::Uint32::NewFromUnsigned(0x8A34));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH"), v8::Uint32::NewFromUnsigned(0x8A35));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_UNIFORM_BLOCKS"), v8::Uint32::NewFromUnsigned(0x8A36));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_TYPE"), v8::Uint32::NewFromUnsigned(0x8A37));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_SIZE"), v8::Uint32::NewFromUnsigned(0x8A38));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_NAME_LENGTH"), v8::Uint32::NewFromUnsigned(0x8A39));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_INDEX"), v8::Uint32::NewFromUnsigned(0x8A3A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_OFFSET"), v8::Uint32::NewFromUnsigned(0x8A3B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x8A3C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_MATRIX_STRIDE"), v8::Uint32::NewFromUnsigned(0x8A3D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_IS_ROW_MAJOR"), v8::Uint32::NewFromUnsigned(0x8A3E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_BINDING"), v8::Uint32::NewFromUnsigned(0x8A3F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_DATA_SIZE"), v8::Uint32::NewFromUnsigned(0x8A40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_NAME_LENGTH"), v8::Uint32::NewFromUnsigned(0x8A41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x8A42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"), v8::Uint32::NewFromUnsigned(0x8A43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"), v8::Uint32::NewFromUnsigned(0x8A44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER"), v8::Uint32::NewFromUnsigned(0x8A45));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"), v8::Uint32::NewFromUnsigned(0x8A46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SRGB_DECODE_EXT"), v8::Uint32::NewFromUnsigned(0x8A48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DECODE_EXT"), v8::Uint32::NewFromUnsigned(0x8A49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SKIP_DECODE_EXT"), v8::Uint32::NewFromUnsigned(0x8A4A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_PIPELINE_OBJECT_EXT"), v8::Uint32::NewFromUnsigned(0x8A4F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_RAW_422_APPLE"), v8::Uint32::NewFromUnsigned(0x8A51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT"), v8::Uint32::NewFromUnsigned(0x8A52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_OBJECT_APPLE"), v8::Uint32::NewFromUnsigned(0x8A53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT"), v8::Uint32::NewFromUnsigned(0x8A54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT"), v8::Uint32::NewFromUnsigned(0x8A55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT"), v8::Uint32::NewFromUnsigned(0x8A56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT"), v8::Uint32::NewFromUnsigned(0x8A57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER"), v8::Uint32::NewFromUnsigned(0x8B30));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_ARB"), v8::Uint32::NewFromUnsigned(0x8B30));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER"), v8::Uint32::NewFromUnsigned(0x8B31));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SHADER_ARB"), v8::Uint32::NewFromUnsigned(0x8B31));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_OBJECT_ARB"), v8::Uint32::NewFromUnsigned(0x8B40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_OBJECT_EXT"), v8::Uint32::NewFromUnsigned(0x8B40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_OBJECT_ARB"), v8::Uint32::NewFromUnsigned(0x8B48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_OBJECT_EXT"), v8::Uint32::NewFromUnsigned(0x8B48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8B49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB"), v8::Uint32::NewFromUnsigned(0x8B49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8B4A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB"), v8::Uint32::NewFromUnsigned(0x8B4A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VARYING_FLOATS"), v8::Uint32::NewFromUnsigned(0x8B4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VARYING_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8B4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VARYING_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8B4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VARYING_FLOATS_ARB"), v8::Uint32::NewFromUnsigned(0x8B4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS"), v8::Uint32::NewFromUnsigned(0x8B4C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB"), v8::Uint32::NewFromUnsigned(0x8B4C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS"), v8::Uint32::NewFromUnsigned(0x8B4D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB"), v8::Uint32::NewFromUnsigned(0x8B4D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8B4E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_TYPE"), v8::Uint32::NewFromUnsigned(0x8B4F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_SUBTYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8B4F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_VEC2"), v8::Uint32::NewFromUnsigned(0x8B50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_VEC2_ARB"), v8::Uint32::NewFromUnsigned(0x8B50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_VEC3"), v8::Uint32::NewFromUnsigned(0x8B51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_VEC3_ARB"), v8::Uint32::NewFromUnsigned(0x8B51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_VEC4"), v8::Uint32::NewFromUnsigned(0x8B52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_VEC4_ARB"), v8::Uint32::NewFromUnsigned(0x8B52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_VEC2"), v8::Uint32::NewFromUnsigned(0x8B53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_VEC2_ARB"), v8::Uint32::NewFromUnsigned(0x8B53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_VEC3"), v8::Uint32::NewFromUnsigned(0x8B54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_VEC3_ARB"), v8::Uint32::NewFromUnsigned(0x8B54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_VEC4"), v8::Uint32::NewFromUnsigned(0x8B55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_VEC4_ARB"), v8::Uint32::NewFromUnsigned(0x8B55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOOL"), v8::Uint32::NewFromUnsigned(0x8B56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOOL_ARB"), v8::Uint32::NewFromUnsigned(0x8B56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOOL_VEC2"), v8::Uint32::NewFromUnsigned(0x8B57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOOL_VEC2_ARB"), v8::Uint32::NewFromUnsigned(0x8B57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOOL_VEC3"), v8::Uint32::NewFromUnsigned(0x8B58));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOOL_VEC3_ARB"), v8::Uint32::NewFromUnsigned(0x8B58));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOOL_VEC4"), v8::Uint32::NewFromUnsigned(0x8B59));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOOL_VEC4_ARB"), v8::Uint32::NewFromUnsigned(0x8B59));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT2"), v8::Uint32::NewFromUnsigned(0x8B5A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT2_ARB"), v8::Uint32::NewFromUnsigned(0x8B5A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT3"), v8::Uint32::NewFromUnsigned(0x8B5B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT3_ARB"), v8::Uint32::NewFromUnsigned(0x8B5B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT4"), v8::Uint32::NewFromUnsigned(0x8B5C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT4_ARB"), v8::Uint32::NewFromUnsigned(0x8B5C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_1D"), v8::Uint32::NewFromUnsigned(0x8B5D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_1D_ARB"), v8::Uint32::NewFromUnsigned(0x8B5D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D"), v8::Uint32::NewFromUnsigned(0x8B5E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_ARB"), v8::Uint32::NewFromUnsigned(0x8B5E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_3D"), v8::Uint32::NewFromUnsigned(0x8B5F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_3D_ARB"), v8::Uint32::NewFromUnsigned(0x8B5F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_3D_OES"), v8::Uint32::NewFromUnsigned(0x8B5F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE"), v8::Uint32::NewFromUnsigned(0x8B60));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_ARB"), v8::Uint32::NewFromUnsigned(0x8B60));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_1D_SHADOW"), v8::Uint32::NewFromUnsigned(0x8B61));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_1D_SHADOW_ARB"), v8::Uint32::NewFromUnsigned(0x8B61));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_SHADOW"), v8::Uint32::NewFromUnsigned(0x8B62));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_SHADOW_ARB"), v8::Uint32::NewFromUnsigned(0x8B62));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_SHADOW_EXT"), v8::Uint32::NewFromUnsigned(0x8B62));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_RECT"), v8::Uint32::NewFromUnsigned(0x8B63));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_RECT_ARB"), v8::Uint32::NewFromUnsigned(0x8B63));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_RECT_SHADOW"), v8::Uint32::NewFromUnsigned(0x8B64));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_RECT_SHADOW_ARB"), v8::Uint32::NewFromUnsigned(0x8B64));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT2x3"), v8::Uint32::NewFromUnsigned(0x8B65));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT2x3_NV"), v8::Uint32::NewFromUnsigned(0x8B65));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT2x4"), v8::Uint32::NewFromUnsigned(0x8B66));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT2x4_NV"), v8::Uint32::NewFromUnsigned(0x8B66));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT3x2"), v8::Uint32::NewFromUnsigned(0x8B67));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT3x2_NV"), v8::Uint32::NewFromUnsigned(0x8B67));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT3x4"), v8::Uint32::NewFromUnsigned(0x8B68));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT3x4_NV"), v8::Uint32::NewFromUnsigned(0x8B68));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT4x2"), v8::Uint32::NewFromUnsigned(0x8B69));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT4x2_NV"), v8::Uint32::NewFromUnsigned(0x8B69));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT4x3"), v8::Uint32::NewFromUnsigned(0x8B6A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_MAT4x3_NV"), v8::Uint32::NewFromUnsigned(0x8B6A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DELETE_STATUS"), v8::Uint32::NewFromUnsigned(0x8B80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_DELETE_STATUS_ARB"), v8::Uint32::NewFromUnsigned(0x8B80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPILE_STATUS"), v8::Uint32::NewFromUnsigned(0x8B81));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_COMPILE_STATUS_ARB"), v8::Uint32::NewFromUnsigned(0x8B81));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINK_STATUS"), v8::Uint32::NewFromUnsigned(0x8B82));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_LINK_STATUS_ARB"), v8::Uint32::NewFromUnsigned(0x8B82));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VALIDATE_STATUS"), v8::Uint32::NewFromUnsigned(0x8B83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_VALIDATE_STATUS_ARB"), v8::Uint32::NewFromUnsigned(0x8B83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INFO_LOG_LENGTH"), v8::Uint32::NewFromUnsigned(0x8B84));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_INFO_LOG_LENGTH_ARB"), v8::Uint32::NewFromUnsigned(0x8B84));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATTACHED_SHADERS"), v8::Uint32::NewFromUnsigned(0x8B85));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_ATTACHED_OBJECTS_ARB"), v8::Uint32::NewFromUnsigned(0x8B85));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x8B86));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_ACTIVE_UNIFORMS_ARB"), v8::Uint32::NewFromUnsigned(0x8B86));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_UNIFORM_MAX_LENGTH"), v8::Uint32::NewFromUnsigned(0x8B87));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB"), v8::Uint32::NewFromUnsigned(0x8B87));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_SOURCE_LENGTH"), v8::Uint32::NewFromUnsigned(0x8B88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_SHADER_SOURCE_LENGTH_ARB"), v8::Uint32::NewFromUnsigned(0x8B88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_ATTRIBUTES"), v8::Uint32::NewFromUnsigned(0x8B89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_ACTIVE_ATTRIBUTES_ARB"), v8::Uint32::NewFromUnsigned(0x8B89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_ATTRIBUTE_MAX_LENGTH"), v8::Uint32::NewFromUnsigned(0x8B8A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB"), v8::Uint32::NewFromUnsigned(0x8B8A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_DERIVATIVE_HINT"), v8::Uint32::NewFromUnsigned(0x8B8B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB"), v8::Uint32::NewFromUnsigned(0x8B8B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES"), v8::Uint32::NewFromUnsigned(0x8B8B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADING_LANGUAGE_VERSION"), v8::Uint32::NewFromUnsigned(0x8B8C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADING_LANGUAGE_VERSION_ARB"), v8::Uint32::NewFromUnsigned(0x8B8C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_PROGRAM"), v8::Uint32::NewFromUnsigned(0x8B8D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_PROGRAM_EXT"), v8::Uint32::NewFromUnsigned(0x8B8D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE4_RGB8_OES"), v8::Uint32::NewFromUnsigned(0x8B90));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE4_RGBA8_OES"), v8::Uint32::NewFromUnsigned(0x8B91));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE4_R5_G6_B5_OES"), v8::Uint32::NewFromUnsigned(0x8B92));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE4_RGBA4_OES"), v8::Uint32::NewFromUnsigned(0x8B93));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE4_RGB5_A1_OES"), v8::Uint32::NewFromUnsigned(0x8B94));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE8_RGB8_OES"), v8::Uint32::NewFromUnsigned(0x8B95));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE8_RGBA8_OES"), v8::Uint32::NewFromUnsigned(0x8B96));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE8_R5_G6_B5_OES"), v8::Uint32::NewFromUnsigned(0x8B97));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE8_RGBA4_OES"), v8::Uint32::NewFromUnsigned(0x8B98));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PALETTE8_RGB5_A1_OES"), v8::Uint32::NewFromUnsigned(0x8B99));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMPLEMENTATION_COLOR_READ_TYPE"), v8::Uint32::NewFromUnsigned(0x8B9A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMPLEMENTATION_COLOR_READ_TYPE_OES"), v8::Uint32::NewFromUnsigned(0x8B9A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMPLEMENTATION_COLOR_READ_FORMAT"), v8::Uint32::NewFromUnsigned(0x8B9B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES"), v8::Uint32::NewFromUnsigned(0x8B9B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_ARRAY_OES"), v8::Uint32::NewFromUnsigned(0x8B9C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CROP_RECT_OES"), v8::Uint32::NewFromUnsigned(0x8B9D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES"), v8::Uint32::NewFromUnsigned(0x8B9E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES"), v8::Uint32::NewFromUnsigned(0x8B9F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_POSITION_MESA"), v8::Uint32::NewFromUnsigned(0x8BB0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_CALLBACK_MESA"), v8::Uint32::NewFromUnsigned(0x8BB1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA"), v8::Uint32::NewFromUnsigned(0x8BB2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA"), v8::Uint32::NewFromUnsigned(0x8BB3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_POSITION_MESA"), v8::Uint32::NewFromUnsigned(0x8BB4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_CALLBACK_MESA"), v8::Uint32::NewFromUnsigned(0x8BB5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA"), v8::Uint32::NewFromUnsigned(0x8BB6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA"), v8::Uint32::NewFromUnsigned(0x8BB7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COUNTER_TYPE_AMD"), v8::Uint32::NewFromUnsigned(0x8BC0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COUNTER_RANGE_AMD"), v8::Uint32::NewFromUnsigned(0x8BC1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT64_AMD"), v8::Uint32::NewFromUnsigned(0x8BC2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERCENTAGE_AMD"), v8::Uint32::NewFromUnsigned(0x8BC3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFMON_RESULT_AVAILABLE_AMD"), v8::Uint32::NewFromUnsigned(0x8BC4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFMON_RESULT_SIZE_AMD"), v8::Uint32::NewFromUnsigned(0x8BC5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFMON_RESULT_AMD"), v8::Uint32::NewFromUnsigned(0x8BC6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_WIDTH_QCOM"), v8::Uint32::NewFromUnsigned(0x8BD2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_HEIGHT_QCOM"), v8::Uint32::NewFromUnsigned(0x8BD3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEPTH_QCOM"), v8::Uint32::NewFromUnsigned(0x8BD4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_INTERNAL_FORMAT_QCOM"), v8::Uint32::NewFromUnsigned(0x8BD5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FORMAT_QCOM"), v8::Uint32::NewFromUnsigned(0x8BD6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_TYPE_QCOM"), v8::Uint32::NewFromUnsigned(0x8BD7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_IMAGE_VALID_QCOM"), v8::Uint32::NewFromUnsigned(0x8BD8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_NUM_LEVELS_QCOM"), v8::Uint32::NewFromUnsigned(0x8BD9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_TARGET_QCOM"), v8::Uint32::NewFromUnsigned(0x8BDA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_OBJECT_VALID_QCOM"), v8::Uint32::NewFromUnsigned(0x8BDB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATE_RESTORE"), v8::Uint32::NewFromUnsigned(0x8BDC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG"), v8::Uint32::NewFromUnsigned(0x8C00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG"), v8::Uint32::NewFromUnsigned(0x8C01));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"), v8::Uint32::NewFromUnsigned(0x8C02));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"), v8::Uint32::NewFromUnsigned(0x8C03));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MODULATE_COLOR_IMG"), v8::Uint32::NewFromUnsigned(0x8C04));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RECIP_ADD_SIGNED_ALPHA_IMG"), v8::Uint32::NewFromUnsigned(0x8C05));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ALPHA_MODULATE_IMG"), v8::Uint32::NewFromUnsigned(0x8C06));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FACTOR_ALPHA_MODULATE_IMG"), v8::Uint32::NewFromUnsigned(0x8C07));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_ALPHA_MODULATE_IMG"), v8::Uint32::NewFromUnsigned(0x8C08));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ADD_BLEND_IMG"), v8::Uint32::NewFromUnsigned(0x8C09));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SGX_BINARY_IMG"), v8::Uint32::NewFromUnsigned(0x8C0A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RED_TYPE"), v8::Uint32::NewFromUnsigned(0x8C10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RED_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8C10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GREEN_TYPE"), v8::Uint32::NewFromUnsigned(0x8C11));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GREEN_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8C11));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BLUE_TYPE"), v8::Uint32::NewFromUnsigned(0x8C12));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BLUE_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8C12));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ALPHA_TYPE"), v8::Uint32::NewFromUnsigned(0x8C13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_ALPHA_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8C13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LUMINANCE_TYPE"), v8::Uint32::NewFromUnsigned(0x8C14));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_LUMINANCE_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8C14));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_INTENSITY_TYPE"), v8::Uint32::NewFromUnsigned(0x8C15));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_INTENSITY_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8C15));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEPTH_TYPE"), v8::Uint32::NewFromUnsigned(0x8C16));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_DEPTH_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8C16));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_NORMALIZED"), v8::Uint32::NewFromUnsigned(0x8C17));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_NORMALIZED_ARB"), v8::Uint32::NewFromUnsigned(0x8C17));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_NORMALIZED_EXT"), v8::Uint32::NewFromUnsigned(0x8C17));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8C18));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8C18));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8C19));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8C19));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8C1A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8C1A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8C1B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8C1B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8C1C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8C1C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8C1D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8C1D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_PROGRAM_NV"), v8::Uint32::NewFromUnsigned(0x8C26));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_OUTPUT_VERTICES_NV"), v8::Uint32::NewFromUnsigned(0x8C27));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x8C28));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS"), v8::Uint32::NewFromUnsigned(0x8C29));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB"), v8::Uint32::NewFromUnsigned(0x8C29));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT"), v8::Uint32::NewFromUnsigned(0x8C29));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER"), v8::Uint32::NewFromUnsigned(0x8C2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_ARB"), v8::Uint32::NewFromUnsigned(0x8C2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8C2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8C2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8C2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x8C2B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_BUFFER_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x8C2B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TEXTURE_BUFFER_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8C2B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_BUFFER"), v8::Uint32::NewFromUnsigned(0x8C2C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_BUFFER_ARB"), v8::Uint32::NewFromUnsigned(0x8C2C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8C2C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_DATA_STORE_BINDING"), v8::Uint32::NewFromUnsigned(0x8C2D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB"), v8::Uint32::NewFromUnsigned(0x8C2D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8C2D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_FORMAT_ARB"), v8::Uint32::NewFromUnsigned(0x8C2E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_FORMAT_EXT"), v8::Uint32::NewFromUnsigned(0x8C2E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ANY_SAMPLES_PASSED"), v8::Uint32::NewFromUnsigned(0x8C2F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ANY_SAMPLES_PASSED_EXT"), v8::Uint32::NewFromUnsigned(0x8C2F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_SHADING"), v8::Uint32::NewFromUnsigned(0x8C36));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_SHADING_ARB"), v8::Uint32::NewFromUnsigned(0x8C36));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_SHADING_OES"), v8::Uint32::NewFromUnsigned(0x8C36));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_SAMPLE_SHADING_VALUE"), v8::Uint32::NewFromUnsigned(0x8C37));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_SAMPLE_SHADING_VALUE_ARB"), v8::Uint32::NewFromUnsigned(0x8C37));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_SAMPLE_SHADING_VALUE_OES"), v8::Uint32::NewFromUnsigned(0x8C37));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R11F_G11F_B10F"), v8::Uint32::NewFromUnsigned(0x8C3A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R11F_G11F_B10F_EXT"), v8::Uint32::NewFromUnsigned(0x8C3A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_10F_11F_11F_REV"), v8::Uint32::NewFromUnsigned(0x8C3B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_10F_11F_11F_REV_EXT"), v8::Uint32::NewFromUnsigned(0x8C3B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_SIGNED_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8C3C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB9_E5"), v8::Uint32::NewFromUnsigned(0x8C3D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB9_E5_EXT"), v8::Uint32::NewFromUnsigned(0x8C3D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_5_9_9_9_REV"), v8::Uint32::NewFromUnsigned(0x8C3E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_5_9_9_9_REV_EXT"), v8::Uint32::NewFromUnsigned(0x8C3E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SHARED_SIZE"), v8::Uint32::NewFromUnsigned(0x8C3F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SHARED_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8C3F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB"), v8::Uint32::NewFromUnsigned(0x8C40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB_EXT"), v8::Uint32::NewFromUnsigned(0x8C40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB8"), v8::Uint32::NewFromUnsigned(0x8C41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB8_EXT"), v8::Uint32::NewFromUnsigned(0x8C41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB8_NV"), v8::Uint32::NewFromUnsigned(0x8C41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB_ALPHA"), v8::Uint32::NewFromUnsigned(0x8C42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8C42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB8_ALPHA8"), v8::Uint32::NewFromUnsigned(0x8C43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRGB8_ALPHA8_EXT"), v8::Uint32::NewFromUnsigned(0x8C43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE_ALPHA"), v8::Uint32::NewFromUnsigned(0x8C44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8C44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE_ALPHA_NV"), v8::Uint32::NewFromUnsigned(0x8C44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE8_ALPHA8"), v8::Uint32::NewFromUnsigned(0x8C45));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE8_ALPHA8_EXT"), v8::Uint32::NewFromUnsigned(0x8C45));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE8_ALPHA8_NV"), v8::Uint32::NewFromUnsigned(0x8C45));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE"), v8::Uint32::NewFromUnsigned(0x8C46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE_EXT"), v8::Uint32::NewFromUnsigned(0x8C46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE_NV"), v8::Uint32::NewFromUnsigned(0x8C46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE8"), v8::Uint32::NewFromUnsigned(0x8C47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE8_EXT"), v8::Uint32::NewFromUnsigned(0x8C47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SLUMINANCE8_NV"), v8::Uint32::NewFromUnsigned(0x8C47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB"), v8::Uint32::NewFromUnsigned(0x8C48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_EXT"), v8::Uint32::NewFromUnsigned(0x8C48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA"), v8::Uint32::NewFromUnsigned(0x8C49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8C49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SLUMINANCE"), v8::Uint32::NewFromUnsigned(0x8C4A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SLUMINANCE_EXT"), v8::Uint32::NewFromUnsigned(0x8C4A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SLUMINANCE_ALPHA"), v8::Uint32::NewFromUnsigned(0x8C4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SLUMINANCE_ALPHA_EXT"), v8::Uint32::NewFromUnsigned(0x8C4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_S3TC_DXT1_EXT"), v8::Uint32::NewFromUnsigned(0x8C4C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_S3TC_DXT1_NV"), v8::Uint32::NewFromUnsigned(0x8C4C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"), v8::Uint32::NewFromUnsigned(0x8C4D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV"), v8::Uint32::NewFromUnsigned(0x8C4D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"), v8::Uint32::NewFromUnsigned(0x8C4E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV"), v8::Uint32::NewFromUnsigned(0x8C4E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"), v8::Uint32::NewFromUnsigned(0x8C4F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV"), v8::Uint32::NewFromUnsigned(0x8C4F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_LUMINANCE_LATC1_EXT"), v8::Uint32::NewFromUnsigned(0x8C70));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT"), v8::Uint32::NewFromUnsigned(0x8C71));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT"), v8::Uint32::NewFromUnsigned(0x8C72));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT"), v8::Uint32::NewFromUnsigned(0x8C73));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8C74));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8C75));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH"), v8::Uint32::NewFromUnsigned(0x8C76));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT"), v8::Uint32::NewFromUnsigned(0x8C76));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BACK_PRIMARY_COLOR_NV"), v8::Uint32::NewFromUnsigned(0x8C77));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BACK_SECONDARY_COLOR_NV"), v8::Uint32::NewFromUnsigned(0x8C78));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_NV"), v8::Uint32::NewFromUnsigned(0x8C79));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_DISTANCE_NV"), v8::Uint32::NewFromUnsigned(0x8C7A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ID_NV"), v8::Uint32::NewFromUnsigned(0x8C7B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVE_ID_NV"), v8::Uint32::NewFromUnsigned(0x8C7C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GENERIC_ATTRIB_NV"), v8::Uint32::NewFromUnsigned(0x8C7D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_ATTRIBS_NV"), v8::Uint32::NewFromUnsigned(0x8C7E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_MODE"), v8::Uint32::NewFromUnsigned(0x8C7F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT"), v8::Uint32::NewFromUnsigned(0x8C7F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV"), v8::Uint32::NewFromUnsigned(0x8C7F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8C80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8C80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x8C80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_VARYINGS_NV"), v8::Uint32::NewFromUnsigned(0x8C81));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_VARYING_MAX_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8C82));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_VARYINGS"), v8::Uint32::NewFromUnsigned(0x8C83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_VARYINGS_EXT"), v8::Uint32::NewFromUnsigned(0x8C83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_VARYINGS_NV"), v8::Uint32::NewFromUnsigned(0x8C83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_START"), v8::Uint32::NewFromUnsigned(0x8C84));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT"), v8::Uint32::NewFromUnsigned(0x8C84));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_START_NV"), v8::Uint32::NewFromUnsigned(0x8C84));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x8C85));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8C85));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x8C85));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_RECORD_NV"), v8::Uint32::NewFromUnsigned(0x8C86));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVES_GENERATED"), v8::Uint32::NewFromUnsigned(0x8C87));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVES_GENERATED_EXT"), v8::Uint32::NewFromUnsigned(0x8C87));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVES_GENERATED_NV"), v8::Uint32::NewFromUnsigned(0x8C87));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"), v8::Uint32::NewFromUnsigned(0x8C88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT"), v8::Uint32::NewFromUnsigned(0x8C88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV"), v8::Uint32::NewFromUnsigned(0x8C88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RASTERIZER_DISCARD"), v8::Uint32::NewFromUnsigned(0x8C89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RASTERIZER_DISCARD_EXT"), v8::Uint32::NewFromUnsigned(0x8C89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RASTERIZER_DISCARD_NV"), v8::Uint32::NewFromUnsigned(0x8C89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8C8A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8C8A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x8C8A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"), v8::Uint32::NewFromUnsigned(0x8C8B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT"), v8::Uint32::NewFromUnsigned(0x8C8B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV"), v8::Uint32::NewFromUnsigned(0x8C8B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERLEAVED_ATTRIBS"), v8::Uint32::NewFromUnsigned(0x8C8C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERLEAVED_ATTRIBS_EXT"), v8::Uint32::NewFromUnsigned(0x8C8C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTERLEAVED_ATTRIBS_NV"), v8::Uint32::NewFromUnsigned(0x8C8C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SEPARATE_ATTRIBS"), v8::Uint32::NewFromUnsigned(0x8C8D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SEPARATE_ATTRIBS_EXT"), v8::Uint32::NewFromUnsigned(0x8C8D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SEPARATE_ATTRIBS_NV"), v8::Uint32::NewFromUnsigned(0x8C8D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER"), v8::Uint32::NewFromUnsigned(0x8C8E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8C8E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8C8E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8C8F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8C8F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV"), v8::Uint32::NewFromUnsigned(0x8C8F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATC_RGB_AMD"), v8::Uint32::NewFromUnsigned(0x8C92));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATC_RGBA_EXPLICIT_ALPHA_AMD"), v8::Uint32::NewFromUnsigned(0x8C93));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_POINT_SPRITE_COORD_ORIGIN"), v8::Uint32::NewFromUnsigned(0x8CA0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOWER_LEFT"), v8::Uint32::NewFromUnsigned(0x8CA1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UPPER_LEFT"), v8::Uint32::NewFromUnsigned(0x8CA2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_REF"), v8::Uint32::NewFromUnsigned(0x8CA3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_VALUE_MASK"), v8::Uint32::NewFromUnsigned(0x8CA4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_BACK_WRITEMASK"), v8::Uint32::NewFromUnsigned(0x8CA5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_BINDING_ANGLE"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_BINDING_APPLE"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_BINDING_NV"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_BINDING_ANGLE"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_BINDING_OES"), v8::Uint32::NewFromUnsigned(0x8CA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8CA7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_BINDING_ANGLE"), v8::Uint32::NewFromUnsigned(0x8CA7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8CA7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_BINDING_OES"), v8::Uint32::NewFromUnsigned(0x8CA7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER"), v8::Uint32::NewFromUnsigned(0x8CA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_ANGLE"), v8::Uint32::NewFromUnsigned(0x8CA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_APPLE"), v8::Uint32::NewFromUnsigned(0x8CA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8CA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8CA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER"), v8::Uint32::NewFromUnsigned(0x8CA9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_ANGLE"), v8::Uint32::NewFromUnsigned(0x8CA9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_APPLE"), v8::Uint32::NewFromUnsigned(0x8CA9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8CA9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_FRAMEBUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8CA9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8CAA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_BINDING_ANGLE"), v8::Uint32::NewFromUnsigned(0x8CAA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_BINDING_APPLE"), v8::Uint32::NewFromUnsigned(0x8CAA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8CAA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_READ_FRAMEBUFFER_BINDING_NV"), v8::Uint32::NewFromUnsigned(0x8CAA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_COVERAGE_SAMPLES_NV"), v8::Uint32::NewFromUnsigned(0x8CAB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_SAMPLES"), v8::Uint32::NewFromUnsigned(0x8CAB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_SAMPLES_ANGLE"), v8::Uint32::NewFromUnsigned(0x8CAB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_SAMPLES_APPLE"), v8::Uint32::NewFromUnsigned(0x8CAB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_SAMPLES_EXT"), v8::Uint32::NewFromUnsigned(0x8CAB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_SAMPLES_NV"), v8::Uint32::NewFromUnsigned(0x8CAB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT32F"), v8::Uint32::NewFromUnsigned(0x8CAC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH32F_STENCIL8"), v8::Uint32::NewFromUnsigned(0x8CAD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"), v8::Uint32::NewFromUnsigned(0x8CD0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8CD0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES"), v8::Uint32::NewFromUnsigned(0x8CD0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"), v8::Uint32::NewFromUnsigned(0x8CD1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT"), v8::Uint32::NewFromUnsigned(0x8CD1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES"), v8::Uint32::NewFromUnsigned(0x8CD1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"), v8::Uint32::NewFromUnsigned(0x8CD2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT"), v8::Uint32::NewFromUnsigned(0x8CD2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES"), v8::Uint32::NewFromUnsigned(0x8CD2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"), v8::Uint32::NewFromUnsigned(0x8CD3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT"), v8::Uint32::NewFromUnsigned(0x8CD3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES"), v8::Uint32::NewFromUnsigned(0x8CD3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT"), v8::Uint32::NewFromUnsigned(0x8CD4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES"), v8::Uint32::NewFromUnsigned(0x8CD4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"), v8::Uint32::NewFromUnsigned(0x8CD4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT"), v8::Uint32::NewFromUnsigned(0x8CD4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_COMPLETE"), v8::Uint32::NewFromUnsigned(0x8CD5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_COMPLETE_EXT"), v8::Uint32::NewFromUnsigned(0x8CD5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_COMPLETE_OES"), v8::Uint32::NewFromUnsigned(0x8CD5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"), v8::Uint32::NewFromUnsigned(0x8CD6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT"), v8::Uint32::NewFromUnsigned(0x8CD6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES"), v8::Uint32::NewFromUnsigned(0x8CD6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"), v8::Uint32::NewFromUnsigned(0x8CD7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT"), v8::Uint32::NewFromUnsigned(0x8CD7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES"), v8::Uint32::NewFromUnsigned(0x8CD7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS"), v8::Uint32::NewFromUnsigned(0x8CD9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT"), v8::Uint32::NewFromUnsigned(0x8CD9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES"), v8::Uint32::NewFromUnsigned(0x8CD9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT"), v8::Uint32::NewFromUnsigned(0x8CDA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES"), v8::Uint32::NewFromUnsigned(0x8CDA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER"), v8::Uint32::NewFromUnsigned(0x8CDB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8CDB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES"), v8::Uint32::NewFromUnsigned(0x8CDB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER"), v8::Uint32::NewFromUnsigned(0x8CDC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8CDC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES"), v8::Uint32::NewFromUnsigned(0x8CDC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_UNSUPPORTED"), v8::Uint32::NewFromUnsigned(0x8CDD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_UNSUPPORTED_EXT"), v8::Uint32::NewFromUnsigned(0x8CDD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_UNSUPPORTED_OES"), v8::Uint32::NewFromUnsigned(0x8CDD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COLOR_ATTACHMENTS"), v8::Uint32::NewFromUnsigned(0x8CDF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COLOR_ATTACHMENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8CDF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COLOR_ATTACHMENTS_NV"), v8::Uint32::NewFromUnsigned(0x8CDF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT0"), v8::Uint32::NewFromUnsigned(0x8CE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT0_EXT"), v8::Uint32::NewFromUnsigned(0x8CE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT0_NV"), v8::Uint32::NewFromUnsigned(0x8CE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT0_OES"), v8::Uint32::NewFromUnsigned(0x8CE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT1"), v8::Uint32::NewFromUnsigned(0x8CE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT1_EXT"), v8::Uint32::NewFromUnsigned(0x8CE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT1_NV"), v8::Uint32::NewFromUnsigned(0x8CE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT2"), v8::Uint32::NewFromUnsigned(0x8CE2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT2_EXT"), v8::Uint32::NewFromUnsigned(0x8CE2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT2_NV"), v8::Uint32::NewFromUnsigned(0x8CE2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT3"), v8::Uint32::NewFromUnsigned(0x8CE3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT3_EXT"), v8::Uint32::NewFromUnsigned(0x8CE3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT3_NV"), v8::Uint32::NewFromUnsigned(0x8CE3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT4"), v8::Uint32::NewFromUnsigned(0x8CE4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT4_EXT"), v8::Uint32::NewFromUnsigned(0x8CE4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT4_NV"), v8::Uint32::NewFromUnsigned(0x8CE4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT5"), v8::Uint32::NewFromUnsigned(0x8CE5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT5_EXT"), v8::Uint32::NewFromUnsigned(0x8CE5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT5_NV"), v8::Uint32::NewFromUnsigned(0x8CE5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT6"), v8::Uint32::NewFromUnsigned(0x8CE6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT6_EXT"), v8::Uint32::NewFromUnsigned(0x8CE6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT6_NV"), v8::Uint32::NewFromUnsigned(0x8CE6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT7"), v8::Uint32::NewFromUnsigned(0x8CE7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT7_EXT"), v8::Uint32::NewFromUnsigned(0x8CE7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT7_NV"), v8::Uint32::NewFromUnsigned(0x8CE7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT8"), v8::Uint32::NewFromUnsigned(0x8CE8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT8_EXT"), v8::Uint32::NewFromUnsigned(0x8CE8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT8_NV"), v8::Uint32::NewFromUnsigned(0x8CE8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT9"), v8::Uint32::NewFromUnsigned(0x8CE9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT9_EXT"), v8::Uint32::NewFromUnsigned(0x8CE9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT9_NV"), v8::Uint32::NewFromUnsigned(0x8CE9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT10"), v8::Uint32::NewFromUnsigned(0x8CEA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT10_EXT"), v8::Uint32::NewFromUnsigned(0x8CEA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT10_NV"), v8::Uint32::NewFromUnsigned(0x8CEA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT11"), v8::Uint32::NewFromUnsigned(0x8CEB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT11_EXT"), v8::Uint32::NewFromUnsigned(0x8CEB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT11_NV"), v8::Uint32::NewFromUnsigned(0x8CEB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT12"), v8::Uint32::NewFromUnsigned(0x8CEC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT12_EXT"), v8::Uint32::NewFromUnsigned(0x8CEC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT12_NV"), v8::Uint32::NewFromUnsigned(0x8CEC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT13"), v8::Uint32::NewFromUnsigned(0x8CED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT13_EXT"), v8::Uint32::NewFromUnsigned(0x8CED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT13_NV"), v8::Uint32::NewFromUnsigned(0x8CED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT14"), v8::Uint32::NewFromUnsigned(0x8CEE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT14_EXT"), v8::Uint32::NewFromUnsigned(0x8CEE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT14_NV"), v8::Uint32::NewFromUnsigned(0x8CEE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT15"), v8::Uint32::NewFromUnsigned(0x8CEF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT15_EXT"), v8::Uint32::NewFromUnsigned(0x8CEF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT15_NV"), v8::Uint32::NewFromUnsigned(0x8CEF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_ATTACHMENT"), v8::Uint32::NewFromUnsigned(0x8D00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_ATTACHMENT_EXT"), v8::Uint32::NewFromUnsigned(0x8D00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_ATTACHMENT_OES"), v8::Uint32::NewFromUnsigned(0x8D00));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_ATTACHMENT"), v8::Uint32::NewFromUnsigned(0x8D20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_ATTACHMENT_EXT"), v8::Uint32::NewFromUnsigned(0x8D20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_ATTACHMENT_OES"), v8::Uint32::NewFromUnsigned(0x8D20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER"), v8::Uint32::NewFromUnsigned(0x8D40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8D40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_OES"), v8::Uint32::NewFromUnsigned(0x8D40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER"), v8::Uint32::NewFromUnsigned(0x8D41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8D41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_OES"), v8::Uint32::NewFromUnsigned(0x8D41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_WIDTH"), v8::Uint32::NewFromUnsigned(0x8D42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_WIDTH_EXT"), v8::Uint32::NewFromUnsigned(0x8D42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_WIDTH_OES"), v8::Uint32::NewFromUnsigned(0x8D42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_HEIGHT"), v8::Uint32::NewFromUnsigned(0x8D43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_HEIGHT_EXT"), v8::Uint32::NewFromUnsigned(0x8D43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_HEIGHT_OES"), v8::Uint32::NewFromUnsigned(0x8D43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_INTERNAL_FORMAT"), v8::Uint32::NewFromUnsigned(0x8D44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_INTERNAL_FORMAT_EXT"), v8::Uint32::NewFromUnsigned(0x8D44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_INTERNAL_FORMAT_OES"), v8::Uint32::NewFromUnsigned(0x8D44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX1"), v8::Uint32::NewFromUnsigned(0x8D46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX1_EXT"), v8::Uint32::NewFromUnsigned(0x8D46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX1_OES"), v8::Uint32::NewFromUnsigned(0x8D46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX4"), v8::Uint32::NewFromUnsigned(0x8D47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX4_EXT"), v8::Uint32::NewFromUnsigned(0x8D47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX4_OES"), v8::Uint32::NewFromUnsigned(0x8D47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX8"), v8::Uint32::NewFromUnsigned(0x8D48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX8_EXT"), v8::Uint32::NewFromUnsigned(0x8D48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX8_OES"), v8::Uint32::NewFromUnsigned(0x8D48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX16"), v8::Uint32::NewFromUnsigned(0x8D49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STENCIL_INDEX16_EXT"), v8::Uint32::NewFromUnsigned(0x8D49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_RED_SIZE"), v8::Uint32::NewFromUnsigned(0x8D50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_RED_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8D50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_RED_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x8D50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_GREEN_SIZE"), v8::Uint32::NewFromUnsigned(0x8D51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_GREEN_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8D51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_GREEN_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x8D51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_BLUE_SIZE"), v8::Uint32::NewFromUnsigned(0x8D52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_BLUE_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8D52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_BLUE_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x8D52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_ALPHA_SIZE"), v8::Uint32::NewFromUnsigned(0x8D53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_ALPHA_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8D53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_ALPHA_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x8D53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_DEPTH_SIZE"), v8::Uint32::NewFromUnsigned(0x8D54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_DEPTH_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8D54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_DEPTH_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x8D54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_STENCIL_SIZE"), v8::Uint32::NewFromUnsigned(0x8D55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_STENCIL_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8D55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_STENCIL_SIZE_OES"), v8::Uint32::NewFromUnsigned(0x8D55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x8D56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE"), v8::Uint32::NewFromUnsigned(0x8D56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE"), v8::Uint32::NewFromUnsigned(0x8D56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT"), v8::Uint32::NewFromUnsigned(0x8D56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV"), v8::Uint32::NewFromUnsigned(0x8D56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SAMPLES"), v8::Uint32::NewFromUnsigned(0x8D57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SAMPLES_ANGLE"), v8::Uint32::NewFromUnsigned(0x8D57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SAMPLES_APPLE"), v8::Uint32::NewFromUnsigned(0x8D57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SAMPLES_EXT"), v8::Uint32::NewFromUnsigned(0x8D57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SAMPLES_NV"), v8::Uint32::NewFromUnsigned(0x8D57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_GEN_STR_OES"), v8::Uint32::NewFromUnsigned(0x8D60));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HALF_FLOAT_OES"), v8::Uint32::NewFromUnsigned(0x8D61));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB565_OES"), v8::Uint32::NewFromUnsigned(0x8D62));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB565"), v8::Uint32::NewFromUnsigned(0x8D62));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ETC1_RGB8_OES"), v8::Uint32::NewFromUnsigned(0x8D64));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_EXTERNAL_OES"), v8::Uint32::NewFromUnsigned(0x8D65));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_EXTERNAL_OES"), v8::Uint32::NewFromUnsigned(0x8D66));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_EXTERNAL_OES"), v8::Uint32::NewFromUnsigned(0x8D67));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES"), v8::Uint32::NewFromUnsigned(0x8D68));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVE_RESTART_FIXED_INDEX"), v8::Uint32::NewFromUnsigned(0x8D69));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ANY_SAMPLES_PASSED_CONSERVATIVE"), v8::Uint32::NewFromUnsigned(0x8D6A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT"), v8::Uint32::NewFromUnsigned(0x8D6A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ELEMENT_INDEX"), v8::Uint32::NewFromUnsigned(0x8D6B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT"), v8::Uint32::NewFromUnsigned(0x8D6C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA32UI"), v8::Uint32::NewFromUnsigned(0x8D70));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA32UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D70));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB32UI"), v8::Uint32::NewFromUnsigned(0x8D71));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB32UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D71));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA32UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D72));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY32UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D73));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE32UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D74));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA32UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D75));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16UI"), v8::Uint32::NewFromUnsigned(0x8D76));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D76));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16UI"), v8::Uint32::NewFromUnsigned(0x8D77));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D77));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA16UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D78));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY16UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D79));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D7A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA16UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D7B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA8UI"), v8::Uint32::NewFromUnsigned(0x8D7C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA8UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D7C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB8UI"), v8::Uint32::NewFromUnsigned(0x8D7D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB8UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D7D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA8UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D7E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY8UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D7F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA8UI_EXT"), v8::Uint32::NewFromUnsigned(0x8D81));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA32I"), v8::Uint32::NewFromUnsigned(0x8D82));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA32I_EXT"), v8::Uint32::NewFromUnsigned(0x8D82));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB32I"), v8::Uint32::NewFromUnsigned(0x8D83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB32I_EXT"), v8::Uint32::NewFromUnsigned(0x8D83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA32I_EXT"), v8::Uint32::NewFromUnsigned(0x8D84));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY32I_EXT"), v8::Uint32::NewFromUnsigned(0x8D85));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE32I_EXT"), v8::Uint32::NewFromUnsigned(0x8D86));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA32I_EXT"), v8::Uint32::NewFromUnsigned(0x8D87));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16I"), v8::Uint32::NewFromUnsigned(0x8D88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16I_EXT"), v8::Uint32::NewFromUnsigned(0x8D88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16I"), v8::Uint32::NewFromUnsigned(0x8D89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16I_EXT"), v8::Uint32::NewFromUnsigned(0x8D89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA16I_EXT"), v8::Uint32::NewFromUnsigned(0x8D8A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY16I_EXT"), v8::Uint32::NewFromUnsigned(0x8D8B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16I_EXT"), v8::Uint32::NewFromUnsigned(0x8D8C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA16I_EXT"), v8::Uint32::NewFromUnsigned(0x8D8D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA8I"), v8::Uint32::NewFromUnsigned(0x8D8E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA8I_EXT"), v8::Uint32::NewFromUnsigned(0x8D8E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB8I"), v8::Uint32::NewFromUnsigned(0x8D8F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB8I_EXT"), v8::Uint32::NewFromUnsigned(0x8D8F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA8I_EXT"), v8::Uint32::NewFromUnsigned(0x8D90));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY8I_EXT"), v8::Uint32::NewFromUnsigned(0x8D91));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8I_EXT"), v8::Uint32::NewFromUnsigned(0x8D92));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA8I_EXT"), v8::Uint32::NewFromUnsigned(0x8D93));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_INTEGER"), v8::Uint32::NewFromUnsigned(0x8D94));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D94));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_INTEGER"), v8::Uint32::NewFromUnsigned(0x8D95));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GREEN_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D95));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_INTEGER"), v8::Uint32::NewFromUnsigned(0x8D96));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLUE_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D96));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_INTEGER"), v8::Uint32::NewFromUnsigned(0x8D97));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D97));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_INTEGER"), v8::Uint32::NewFromUnsigned(0x8D98));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D98));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_INTEGER"), v8::Uint32::NewFromUnsigned(0x8D99));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D99));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGR_INTEGER"), v8::Uint32::NewFromUnsigned(0x8D9A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGR_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D9A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGRA_INTEGER"), v8::Uint32::NewFromUnsigned(0x8D9B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGRA_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D9B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D9C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA_INTEGER_EXT"), v8::Uint32::NewFromUnsigned(0x8D9D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_INTEGER_MODE_EXT"), v8::Uint32::NewFromUnsigned(0x8D9E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_2_10_10_10_REV"), v8::Uint32::NewFromUnsigned(0x8D9F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV"), v8::Uint32::NewFromUnsigned(0x8DA0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x8DA1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8DA2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8DA3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8DA4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV"), v8::Uint32::NewFromUnsigned(0x8DA5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_GENERIC_RESULTS_NV"), v8::Uint32::NewFromUnsigned(0x8DA6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_LAYERED"), v8::Uint32::NewFromUnsigned(0x8DA7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB"), v8::Uint32::NewFromUnsigned(0x8DA7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT"), v8::Uint32::NewFromUnsigned(0x8DA7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS"), v8::Uint32::NewFromUnsigned(0x8DA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB"), v8::Uint32::NewFromUnsigned(0x8DA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT"), v8::Uint32::NewFromUnsigned(0x8DA8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB"), v8::Uint32::NewFromUnsigned(0x8DA9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT"), v8::Uint32::NewFromUnsigned(0x8DA9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAYER_NV"), v8::Uint32::NewFromUnsigned(0x8DAA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT32F_NV"), v8::Uint32::NewFromUnsigned(0x8DAB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH32F_STENCIL8_NV"), v8::Uint32::NewFromUnsigned(0x8DAC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_32_UNSIGNED_INT_24_8_REV"), v8::Uint32::NewFromUnsigned(0x8DAD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV"), v8::Uint32::NewFromUnsigned(0x8DAD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_INCLUDE_ARB"), v8::Uint32::NewFromUnsigned(0x8DAE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_BUFFER_FLOAT_MODE_NV"), v8::Uint32::NewFromUnsigned(0x8DAF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_SRGB"), v8::Uint32::NewFromUnsigned(0x8DB9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_SRGB_EXT"), v8::Uint32::NewFromUnsigned(0x8DB9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_SRGB_CAPABLE_EXT"), v8::Uint32::NewFromUnsigned(0x8DBA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RED_RGTC1"), v8::Uint32::NewFromUnsigned(0x8DBB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RED_RGTC1_EXT"), v8::Uint32::NewFromUnsigned(0x8DBB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_RED_RGTC1"), v8::Uint32::NewFromUnsigned(0x8DBC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_RED_RGTC1_EXT"), v8::Uint32::NewFromUnsigned(0x8DBC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RED_GREEN_RGTC2_EXT"), v8::Uint32::NewFromUnsigned(0x8DBD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RG_RGTC2"), v8::Uint32::NewFromUnsigned(0x8DBD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"), v8::Uint32::NewFromUnsigned(0x8DBE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_RG_RGTC2"), v8::Uint32::NewFromUnsigned(0x8DBE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8DC0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8DC0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8DC1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8DC1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_BUFFER"), v8::Uint32::NewFromUnsigned(0x8DC2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8DC2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_1D_ARRAY_SHADOW"), v8::Uint32::NewFromUnsigned(0x8DC3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_1D_ARRAY_SHADOW_EXT"), v8::Uint32::NewFromUnsigned(0x8DC3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_ARRAY_SHADOW"), v8::Uint32::NewFromUnsigned(0x8DC4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_ARRAY_SHADOW_EXT"), v8::Uint32::NewFromUnsigned(0x8DC4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_ARRAY_SHADOW_NV"), v8::Uint32::NewFromUnsigned(0x8DC4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_SHADOW"), v8::Uint32::NewFromUnsigned(0x8DC5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_SHADOW_EXT"), v8::Uint32::NewFromUnsigned(0x8DC5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_SHADOW_NV"), v8::Uint32::NewFromUnsigned(0x8DC5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_VEC2"), v8::Uint32::NewFromUnsigned(0x8DC6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_VEC2_EXT"), v8::Uint32::NewFromUnsigned(0x8DC6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_VEC3"), v8::Uint32::NewFromUnsigned(0x8DC7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_VEC3_EXT"), v8::Uint32::NewFromUnsigned(0x8DC7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_VEC4"), v8::Uint32::NewFromUnsigned(0x8DC8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_VEC4_EXT"), v8::Uint32::NewFromUnsigned(0x8DC8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_1D"), v8::Uint32::NewFromUnsigned(0x8DC9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_1D_EXT"), v8::Uint32::NewFromUnsigned(0x8DC9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D"), v8::Uint32::NewFromUnsigned(0x8DCA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D_EXT"), v8::Uint32::NewFromUnsigned(0x8DCA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_3D"), v8::Uint32::NewFromUnsigned(0x8DCB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_3D_EXT"), v8::Uint32::NewFromUnsigned(0x8DCB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_CUBE"), v8::Uint32::NewFromUnsigned(0x8DCC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_CUBE_EXT"), v8::Uint32::NewFromUnsigned(0x8DCC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D_RECT"), v8::Uint32::NewFromUnsigned(0x8DCD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D_RECT_EXT"), v8::Uint32::NewFromUnsigned(0x8DCD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8DCE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8DCE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8DCF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8DCF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_BUFFER"), v8::Uint32::NewFromUnsigned(0x8DD0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8DD0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_1D"), v8::Uint32::NewFromUnsigned(0x8DD1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_1D_EXT"), v8::Uint32::NewFromUnsigned(0x8DD1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D"), v8::Uint32::NewFromUnsigned(0x8DD2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D_EXT"), v8::Uint32::NewFromUnsigned(0x8DD2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_3D"), v8::Uint32::NewFromUnsigned(0x8DD3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_3D_EXT"), v8::Uint32::NewFromUnsigned(0x8DD3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_CUBE"), v8::Uint32::NewFromUnsigned(0x8DD4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_CUBE_EXT"), v8::Uint32::NewFromUnsigned(0x8DD4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D_RECT"), v8::Uint32::NewFromUnsigned(0x8DD5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT"), v8::Uint32::NewFromUnsigned(0x8DD5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8DD6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8DD6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x8DD7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x8DD7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_BUFFER"), v8::Uint32::NewFromUnsigned(0x8DD8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8DD8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SHADER"), v8::Uint32::NewFromUnsigned(0x8DD9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SHADER_ARB"), v8::Uint32::NewFromUnsigned(0x8DD9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SHADER_EXT"), v8::Uint32::NewFromUnsigned(0x8DD9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_VERTICES_OUT_ARB"), v8::Uint32::NewFromUnsigned(0x8DDA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_VERTICES_OUT_EXT"), v8::Uint32::NewFromUnsigned(0x8DDA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_INPUT_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8DDB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_INPUT_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8DDB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_OUTPUT_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8DDC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_OUTPUT_TYPE_EXT"), v8::Uint32::NewFromUnsigned(0x8DDC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB"), v8::Uint32::NewFromUnsigned(0x8DDD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8DDD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_VARYING_COMPONENTS_ARB"), v8::Uint32::NewFromUnsigned(0x8DDE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_VARYING_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8DDE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8DDF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB"), v8::Uint32::NewFromUnsigned(0x8DDF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8DDF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_OUTPUT_VERTICES"), v8::Uint32::NewFromUnsigned(0x8DE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB"), v8::Uint32::NewFromUnsigned(0x8DE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT"), v8::Uint32::NewFromUnsigned(0x8DE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8DE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB"), v8::Uint32::NewFromUnsigned(0x8DE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8DE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT"), v8::Uint32::NewFromUnsigned(0x8DE2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT"), v8::Uint32::NewFromUnsigned(0x8DE3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT"), v8::Uint32::NewFromUnsigned(0x8DE4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_SUBROUTINES"), v8::Uint32::NewFromUnsigned(0x8DE5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_SUBROUTINE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x8DE6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SUBROUTINES"), v8::Uint32::NewFromUnsigned(0x8DE7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS"), v8::Uint32::NewFromUnsigned(0x8DE8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NAMED_STRING_LENGTH_ARB"), v8::Uint32::NewFromUnsigned(0x8DE9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NAMED_STRING_TYPE_ARB"), v8::Uint32::NewFromUnsigned(0x8DEA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_BINDABLE_UNIFORM_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8DED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x8DEE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BUFFER_BINDING_EXT"), v8::Uint32::NewFromUnsigned(0x8DEF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOW_FLOAT"), v8::Uint32::NewFromUnsigned(0x8DF0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MEDIUM_FLOAT"), v8::Uint32::NewFromUnsigned(0x8DF1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HIGH_FLOAT"), v8::Uint32::NewFromUnsigned(0x8DF2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOW_INT"), v8::Uint32::NewFromUnsigned(0x8DF3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MEDIUM_INT"), v8::Uint32::NewFromUnsigned(0x8DF4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HIGH_INT"), v8::Uint32::NewFromUnsigned(0x8DF5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_10_10_10_2_OES"), v8::Uint32::NewFromUnsigned(0x8DF6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_10_10_10_2_OES"), v8::Uint32::NewFromUnsigned(0x8DF7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_BINARY_FORMATS"), v8::Uint32::NewFromUnsigned(0x8DF8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_SHADER_BINARY_FORMATS"), v8::Uint32::NewFromUnsigned(0x8DF9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_COMPILER"), v8::Uint32::NewFromUnsigned(0x8DFA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_UNIFORM_VECTORS"), v8::Uint32::NewFromUnsigned(0x8DFB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VARYING_VECTORS"), v8::Uint32::NewFromUnsigned(0x8DFC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_UNIFORM_VECTORS"), v8::Uint32::NewFromUnsigned(0x8DFD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_COLOR_SAMPLES_NV"), v8::Uint32::NewFromUnsigned(0x8E10));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV"), v8::Uint32::NewFromUnsigned(0x8E11));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTISAMPLE_COVERAGE_MODES_NV"), v8::Uint32::NewFromUnsigned(0x8E12));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_WAIT"), v8::Uint32::NewFromUnsigned(0x8E13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_WAIT_NV"), v8::Uint32::NewFromUnsigned(0x8E13));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_NO_WAIT"), v8::Uint32::NewFromUnsigned(0x8E14));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_NO_WAIT_NV"), v8::Uint32::NewFromUnsigned(0x8E14));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BY_REGION_WAIT"), v8::Uint32::NewFromUnsigned(0x8E15));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BY_REGION_WAIT_NV"), v8::Uint32::NewFromUnsigned(0x8E15));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BY_REGION_NO_WAIT"), v8::Uint32::NewFromUnsigned(0x8E16));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BY_REGION_NO_WAIT_NV"), v8::Uint32::NewFromUnsigned(0x8E16));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8E1E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8E1E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8E1F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8E1F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_SAMPLES_NV"), v8::Uint32::NewFromUnsigned(0x8E20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK"), v8::Uint32::NewFromUnsigned(0x8E22));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_NV"), v8::Uint32::NewFromUnsigned(0x8E22));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED"), v8::Uint32::NewFromUnsigned(0x8E23));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_PAUSED"), v8::Uint32::NewFromUnsigned(0x8E23));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV"), v8::Uint32::NewFromUnsigned(0x8E23));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE"), v8::Uint32::NewFromUnsigned(0x8E24));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_ACTIVE"), v8::Uint32::NewFromUnsigned(0x8E24));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV"), v8::Uint32::NewFromUnsigned(0x8E24));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BINDING"), v8::Uint32::NewFromUnsigned(0x8E25));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BINDING_NV"), v8::Uint32::NewFromUnsigned(0x8E25));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAME_NV"), v8::Uint32::NewFromUnsigned(0x8E26));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIELDS_NV"), v8::Uint32::NewFromUnsigned(0x8E27));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CURRENT_TIME_NV"), v8::Uint32::NewFromUnsigned(0x8E28));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TIMESTAMP"), v8::Uint32::NewFromUnsigned(0x8E28));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TIMESTAMP_EXT"), v8::Uint32::NewFromUnsigned(0x8E28));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_FILL_STREAMS_NV"), v8::Uint32::NewFromUnsigned(0x8E29));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRESENT_TIME_NV"), v8::Uint32::NewFromUnsigned(0x8E2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRESENT_DURATION_NV"), v8::Uint32::NewFromUnsigned(0x8E2B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_COMPONENT16_NONLINEAR_NV"), v8::Uint32::NewFromUnsigned(0x8E2C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_MATRIX_EXT"), v8::Uint32::NewFromUnsigned(0x8E2D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_PROGRAM_MATRIX_EXT"), v8::Uint32::NewFromUnsigned(0x8E2E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_MATRIX_STACK_DEPTH_EXT"), v8::Uint32::NewFromUnsigned(0x8E2F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_R"), v8::Uint32::NewFromUnsigned(0x8E42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_R_EXT"), v8::Uint32::NewFromUnsigned(0x8E42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_G"), v8::Uint32::NewFromUnsigned(0x8E43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_G_EXT"), v8::Uint32::NewFromUnsigned(0x8E43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_B"), v8::Uint32::NewFromUnsigned(0x8E44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_B_EXT"), v8::Uint32::NewFromUnsigned(0x8E44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_A"), v8::Uint32::NewFromUnsigned(0x8E45));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_A_EXT"), v8::Uint32::NewFromUnsigned(0x8E45));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_RGBA"), v8::Uint32::NewFromUnsigned(0x8E46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SWIZZLE_RGBA_EXT"), v8::Uint32::NewFromUnsigned(0x8E46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS"), v8::Uint32::NewFromUnsigned(0x8E47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_SUBROUTINE_MAX_LENGTH"), v8::Uint32::NewFromUnsigned(0x8E48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH"), v8::Uint32::NewFromUnsigned(0x8E49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_COMPATIBLE_SUBROUTINES"), v8::Uint32::NewFromUnsigned(0x8E4A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPATIBLE_SUBROUTINES"), v8::Uint32::NewFromUnsigned(0x8E4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION"), v8::Uint32::NewFromUnsigned(0x8E4C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT"), v8::Uint32::NewFromUnsigned(0x8E4C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIRST_VERTEX_CONVENTION"), v8::Uint32::NewFromUnsigned(0x8E4D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIRST_VERTEX_CONVENTION_EXT"), v8::Uint32::NewFromUnsigned(0x8E4D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAST_VERTEX_CONVENTION"), v8::Uint32::NewFromUnsigned(0x8E4E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAST_VERTEX_CONVENTION_EXT"), v8::Uint32::NewFromUnsigned(0x8E4E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROVOKING_VERTEX"), v8::Uint32::NewFromUnsigned(0x8E4F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROVOKING_VERTEX_EXT"), v8::Uint32::NewFromUnsigned(0x8E4F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_POSITION"), v8::Uint32::NewFromUnsigned(0x8E50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_POSITION_NV"), v8::Uint32::NewFromUnsigned(0x8E50));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK"), v8::Uint32::NewFromUnsigned(0x8E51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_NV"), v8::Uint32::NewFromUnsigned(0x8E51));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_VALUE"), v8::Uint32::NewFromUnsigned(0x8E52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLE_MASK_VALUE_NV"), v8::Uint32::NewFromUnsigned(0x8E52));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_RENDERBUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8E53));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV"), v8::Uint32::NewFromUnsigned(0x8E54));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_RENDERBUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8E55));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_RENDERBUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8E56));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_RENDERBUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8E57));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8E58));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SAMPLE_MASK_WORDS"), v8::Uint32::NewFromUnsigned(0x8E59));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SAMPLE_MASK_WORDS_NV"), v8::Uint32::NewFromUnsigned(0x8E59));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV"), v8::Uint32::NewFromUnsigned(0x8E5A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_SHADER_INVOCATIONS"), v8::Uint32::NewFromUnsigned(0x8E5A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT"), v8::Uint32::NewFromUnsigned(0x8E5A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_FRAGMENT_INTERPOLATION_OFFSET"), v8::Uint32::NewFromUnsigned(0x8E5B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES"), v8::Uint32::NewFromUnsigned(0x8E5B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV"), v8::Uint32::NewFromUnsigned(0x8E5B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_INTERPOLATION_OFFSET"), v8::Uint32::NewFromUnsigned(0x8E5C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES"), v8::Uint32::NewFromUnsigned(0x8E5C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV"), v8::Uint32::NewFromUnsigned(0x8E5C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_INTERPOLATION_OFFSET_BITS"), v8::Uint32::NewFromUnsigned(0x8E5D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES"), v8::Uint32::NewFromUnsigned(0x8E5D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV"), v8::Uint32::NewFromUnsigned(0x8E5D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET"), v8::Uint32::NewFromUnsigned(0x8E5E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB"), v8::Uint32::NewFromUnsigned(0x8E5E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV"), v8::Uint32::NewFromUnsigned(0x8E5E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET"), v8::Uint32::NewFromUnsigned(0x8E5F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB"), v8::Uint32::NewFromUnsigned(0x8E5F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV"), v8::Uint32::NewFromUnsigned(0x8E5F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TRANSFORM_FEEDBACK_BUFFERS"), v8::Uint32::NewFromUnsigned(0x8E70));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_STREAMS"), v8::Uint32::NewFromUnsigned(0x8E71));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATCH_VERTICES"), v8::Uint32::NewFromUnsigned(0x8E72));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATCH_VERTICES_EXT"), v8::Uint32::NewFromUnsigned(0x8E72));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATCH_DEFAULT_INNER_LEVEL"), v8::Uint32::NewFromUnsigned(0x8E73));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATCH_DEFAULT_INNER_LEVEL_EXT"), v8::Uint32::NewFromUnsigned(0x8E73));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATCH_DEFAULT_OUTER_LEVEL"), v8::Uint32::NewFromUnsigned(0x8E74));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATCH_DEFAULT_OUTER_LEVEL_EXT"), v8::Uint32::NewFromUnsigned(0x8E74));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_OUTPUT_VERTICES"), v8::Uint32::NewFromUnsigned(0x8E75));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_OUTPUT_VERTICES_EXT"), v8::Uint32::NewFromUnsigned(0x8E75));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_GEN_MODE"), v8::Uint32::NewFromUnsigned(0x8E76));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_GEN_MODE_EXT"), v8::Uint32::NewFromUnsigned(0x8E76));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_GEN_SPACING"), v8::Uint32::NewFromUnsigned(0x8E77));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_GEN_SPACING_EXT"), v8::Uint32::NewFromUnsigned(0x8E77));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_GEN_VERTEX_ORDER"), v8::Uint32::NewFromUnsigned(0x8E78));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_GEN_VERTEX_ORDER_EXT"), v8::Uint32::NewFromUnsigned(0x8E78));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_GEN_POINT_MODE"), v8::Uint32::NewFromUnsigned(0x8E79));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_GEN_POINT_MODE_EXT"), v8::Uint32::NewFromUnsigned(0x8E79));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ISOLINES"), v8::Uint32::NewFromUnsigned(0x8E7A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ISOLINES_EXT"), v8::Uint32::NewFromUnsigned(0x8E7A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRACTIONAL_ODD"), v8::Uint32::NewFromUnsigned(0x8E7B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRACTIONAL_ODD_EXT"), v8::Uint32::NewFromUnsigned(0x8E7B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRACTIONAL_EVEN"), v8::Uint32::NewFromUnsigned(0x8E7C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRACTIONAL_EVEN_EXT"), v8::Uint32::NewFromUnsigned(0x8E7C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PATCH_VERTICES"), v8::Uint32::NewFromUnsigned(0x8E7D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PATCH_VERTICES_EXT"), v8::Uint32::NewFromUnsigned(0x8E7D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_GEN_LEVEL"), v8::Uint32::NewFromUnsigned(0x8E7E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_GEN_LEVEL_EXT"), v8::Uint32::NewFromUnsigned(0x8E7E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8E7F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8E7F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8E80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8E80));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS"), v8::Uint32::NewFromUnsigned(0x8E81));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT"), v8::Uint32::NewFromUnsigned(0x8E81));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS"), v8::Uint32::NewFromUnsigned(0x8E82));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT"), v8::Uint32::NewFromUnsigned(0x8E82));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8E83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8E83));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_PATCH_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8E84));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_PATCH_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8E84));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8E85));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8E85));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x8E86));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x8E86));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_SHADER"), v8::Uint32::NewFromUnsigned(0x8E87));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_SHADER_EXT"), v8::Uint32::NewFromUnsigned(0x8E87));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_SHADER"), v8::Uint32::NewFromUnsigned(0x8E88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_SHADER_EXT"), v8::Uint32::NewFromUnsigned(0x8E88));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS"), v8::Uint32::NewFromUnsigned(0x8E89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT"), v8::Uint32::NewFromUnsigned(0x8E89));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS"), v8::Uint32::NewFromUnsigned(0x8E8A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT"), v8::Uint32::NewFromUnsigned(0x8E8A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_BPTC_UNORM"), v8::Uint32::NewFromUnsigned(0x8E8C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_BPTC_UNORM_ARB"), v8::Uint32::NewFromUnsigned(0x8E8C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM"), v8::Uint32::NewFromUnsigned(0x8E8D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB"), v8::Uint32::NewFromUnsigned(0x8E8D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT"), v8::Uint32::NewFromUnsigned(0x8E8E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB"), v8::Uint32::NewFromUnsigned(0x8E8E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT"), v8::Uint32::NewFromUnsigned(0x8E8F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB"), v8::Uint32::NewFromUnsigned(0x8E8F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_COMPONENT_NV"), v8::Uint32::NewFromUnsigned(0x8ED0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_COMPONENT4_NV"), v8::Uint32::NewFromUnsigned(0x8ED1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_ATTACHMENT_NV"), v8::Uint32::NewFromUnsigned(0x8ED2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_BUFFERS_NV"), v8::Uint32::NewFromUnsigned(0x8ED3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_SAMPLES_NV"), v8::Uint32::NewFromUnsigned(0x8ED4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_ALL_FRAGMENTS_NV"), v8::Uint32::NewFromUnsigned(0x8ED5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_EDGE_FRAGMENTS_NV"), v8::Uint32::NewFromUnsigned(0x8ED6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COVERAGE_AUTOMATIC_NV"), v8::Uint32::NewFromUnsigned(0x8ED7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_GPU_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F1D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV"), v8::Uint32::NewFromUnsigned(0x8F1E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_UNIFIED_NV"), v8::Uint32::NewFromUnsigned(0x8F1F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F20));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F21));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F22));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F23));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F24));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F25));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F26));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F27));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F28));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F29));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F2A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F2B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F2C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F2D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F2E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F2F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F30));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F31));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORD_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F32));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ELEMENT_ARRAY_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F33));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GPU_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F34));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SHADER_BUFFER_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F35));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY_READ_BUFFER"), v8::Uint32::NewFromUnsigned(0x8F36));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY_READ_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8F36));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY_READ_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8F36));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY_WRITE_BUFFER"), v8::Uint32::NewFromUnsigned(0x8F37));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY_WRITE_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x8F37));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COPY_WRITE_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8F37));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_IMAGE_UNITS"), v8::Uint32::NewFromUnsigned(0x8F38));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_IMAGE_UNITS_EXT"), v8::Uint32::NewFromUnsigned(0x8F38));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS"), v8::Uint32::NewFromUnsigned(0x8F39));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT"), v8::Uint32::NewFromUnsigned(0x8F39));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES"), v8::Uint32::NewFromUnsigned(0x8F39));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_NAME"), v8::Uint32::NewFromUnsigned(0x8F3A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_NAME_EXT"), v8::Uint32::NewFromUnsigned(0x8F3A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_LEVEL"), v8::Uint32::NewFromUnsigned(0x8F3B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_LEVEL_EXT"), v8::Uint32::NewFromUnsigned(0x8F3B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_LAYERED"), v8::Uint32::NewFromUnsigned(0x8F3C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_LAYERED_EXT"), v8::Uint32::NewFromUnsigned(0x8F3C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_LAYER"), v8::Uint32::NewFromUnsigned(0x8F3D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_LAYER_EXT"), v8::Uint32::NewFromUnsigned(0x8F3D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_ACCESS"), v8::Uint32::NewFromUnsigned(0x8F3E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_ACCESS_EXT"), v8::Uint32::NewFromUnsigned(0x8F3E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_INDIRECT_BUFFER"), v8::Uint32::NewFromUnsigned(0x8F3F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_INDIRECT_UNIFIED_NV"), v8::Uint32::NewFromUnsigned(0x8F40));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_INDIRECT_ADDRESS_NV"), v8::Uint32::NewFromUnsigned(0x8F41));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_INDIRECT_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x8F42));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DRAW_INDIRECT_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x8F43));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV"), v8::Uint32::NewFromUnsigned(0x8F44));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_SUBROUTINE_NUM_NV"), v8::Uint32::NewFromUnsigned(0x8F45));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT2"), v8::Uint32::NewFromUnsigned(0x8F46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT2_EXT"), v8::Uint32::NewFromUnsigned(0x8F46));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT3"), v8::Uint32::NewFromUnsigned(0x8F47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT3_EXT"), v8::Uint32::NewFromUnsigned(0x8F47));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT4"), v8::Uint32::NewFromUnsigned(0x8F48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT4_EXT"), v8::Uint32::NewFromUnsigned(0x8F48));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT2x3"), v8::Uint32::NewFromUnsigned(0x8F49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT2x3_EXT"), v8::Uint32::NewFromUnsigned(0x8F49));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT2x4"), v8::Uint32::NewFromUnsigned(0x8F4A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT2x4_EXT"), v8::Uint32::NewFromUnsigned(0x8F4A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT3x2"), v8::Uint32::NewFromUnsigned(0x8F4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT3x2_EXT"), v8::Uint32::NewFromUnsigned(0x8F4B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT3x4"), v8::Uint32::NewFromUnsigned(0x8F4C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT3x4_EXT"), v8::Uint32::NewFromUnsigned(0x8F4C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT4x2"), v8::Uint32::NewFromUnsigned(0x8F4D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT4x2_EXT"), v8::Uint32::NewFromUnsigned(0x8F4D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT4x3"), v8::Uint32::NewFromUnsigned(0x8F4E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_MAT4x3_EXT"), v8::Uint32::NewFromUnsigned(0x8F4E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_BINDING_BUFFER"), v8::Uint32::NewFromUnsigned(0x8F4F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MALI_SHADER_BINARY_ARM"), v8::Uint32::NewFromUnsigned(0x8F60));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MALI_PROGRAM_BINARY_ARM"), v8::Uint32::NewFromUnsigned(0x8F61));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8F63));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_PIXEL_LOCAL_STORAGE_EXT"), v8::Uint32::NewFromUnsigned(0x8F64));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FETCH_PER_SAMPLE_ARM"), v8::Uint32::NewFromUnsigned(0x8F65));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM"), v8::Uint32::NewFromUnsigned(0x8F66));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x8F67));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RED_SNORM"), v8::Uint32::NewFromUnsigned(0x8F90));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG_SNORM"), v8::Uint32::NewFromUnsigned(0x8F91));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB_SNORM"), v8::Uint32::NewFromUnsigned(0x8F92));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA_SNORM"), v8::Uint32::NewFromUnsigned(0x8F93));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R8_SNORM"), v8::Uint32::NewFromUnsigned(0x8F94));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG8_SNORM"), v8::Uint32::NewFromUnsigned(0x8F95));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB8_SNORM"), v8::Uint32::NewFromUnsigned(0x8F96));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA8_SNORM"), v8::Uint32::NewFromUnsigned(0x8F97));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_R16_SNORM"), v8::Uint32::NewFromUnsigned(0x8F98));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RG16_SNORM"), v8::Uint32::NewFromUnsigned(0x8F99));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB16_SNORM"), v8::Uint32::NewFromUnsigned(0x8F9A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGBA16_SNORM"), v8::Uint32::NewFromUnsigned(0x8F9B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNED_NORMALIZED"), v8::Uint32::NewFromUnsigned(0x8F9C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVE_RESTART"), v8::Uint32::NewFromUnsigned(0x8F9D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVE_RESTART_INDEX"), v8::Uint32::NewFromUnsigned(0x8F9E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB"), v8::Uint32::NewFromUnsigned(0x8F9F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFMON_GLOBAL_MODE_QCOM"), v8::Uint32::NewFromUnsigned(0x8FA0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BINNING_CONTROL_HINT_QCOM"), v8::Uint32::NewFromUnsigned(0x8FB0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CPU_OPTIMIZED_QCOM"), v8::Uint32::NewFromUnsigned(0x8FB1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GPU_OPTIMIZED_QCOM"), v8::Uint32::NewFromUnsigned(0x8FB2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM"), v8::Uint32::NewFromUnsigned(0x8FB3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GPU_DISJOINT_EXT"), v8::Uint32::NewFromUnsigned(0x8FBB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_BINARY_VIV"), v8::Uint32::NewFromUnsigned(0x8FC4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT8_NV"), v8::Uint32::NewFromUnsigned(0x8FE0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT8_VEC2_NV"), v8::Uint32::NewFromUnsigned(0x8FE1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT8_VEC3_NV"), v8::Uint32::NewFromUnsigned(0x8FE2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT8_VEC4_NV"), v8::Uint32::NewFromUnsigned(0x8FE3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT16_NV"), v8::Uint32::NewFromUnsigned(0x8FE4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT16_VEC2_NV"), v8::Uint32::NewFromUnsigned(0x8FE5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT16_VEC3_NV"), v8::Uint32::NewFromUnsigned(0x8FE6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT16_VEC4_NV"), v8::Uint32::NewFromUnsigned(0x8FE7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT64_VEC2_NV"), v8::Uint32::NewFromUnsigned(0x8FE9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT64_VEC3_NV"), v8::Uint32::NewFromUnsigned(0x8FEA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT64_VEC4_NV"), v8::Uint32::NewFromUnsigned(0x8FEB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT8_NV"), v8::Uint32::NewFromUnsigned(0x8FEC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT8_VEC2_NV"), v8::Uint32::NewFromUnsigned(0x8FED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT8_VEC3_NV"), v8::Uint32::NewFromUnsigned(0x8FEE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT8_VEC4_NV"), v8::Uint32::NewFromUnsigned(0x8FEF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT16_NV"), v8::Uint32::NewFromUnsigned(0x8FF0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT16_VEC2_NV"), v8::Uint32::NewFromUnsigned(0x8FF1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT16_VEC3_NV"), v8::Uint32::NewFromUnsigned(0x8FF2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT16_VEC4_NV"), v8::Uint32::NewFromUnsigned(0x8FF3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT64_VEC2_NV"), v8::Uint32::NewFromUnsigned(0x8FF5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT64_VEC3_NV"), v8::Uint32::NewFromUnsigned(0x8FF6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT64_VEC4_NV"), v8::Uint32::NewFromUnsigned(0x8FF7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT16_NV"), v8::Uint32::NewFromUnsigned(0x8FF8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT16_VEC2_NV"), v8::Uint32::NewFromUnsigned(0x8FF9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT16_VEC3_NV"), v8::Uint32::NewFromUnsigned(0x8FFA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FLOAT16_VEC4_NV"), v8::Uint32::NewFromUnsigned(0x8FFB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_VEC2"), v8::Uint32::NewFromUnsigned(0x8FFC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_VEC2_EXT"), v8::Uint32::NewFromUnsigned(0x8FFC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_VEC3"), v8::Uint32::NewFromUnsigned(0x8FFD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_VEC3_EXT"), v8::Uint32::NewFromUnsigned(0x8FFD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_VEC4"), v8::Uint32::NewFromUnsigned(0x8FFE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DOUBLE_VEC4_EXT"), v8::Uint32::NewFromUnsigned(0x8FFE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_BUFFER_AMD"), v8::Uint32::NewFromUnsigned(0x9001));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_BUFFER_AMD"), v8::Uint32::NewFromUnsigned(0x9002));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD"), v8::Uint32::NewFromUnsigned(0x9003));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESSELLATION_MODE_AMD"), v8::Uint32::NewFromUnsigned(0x9004));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESSELLATION_FACTOR_AMD"), v8::Uint32::NewFromUnsigned(0x9005));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISCRETE_AMD"), v8::Uint32::NewFromUnsigned(0x9006));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTINUOUS_AMD"), v8::Uint32::NewFromUnsigned(0x9007));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x9009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_ARRAY_ARB"), v8::Uint32::NewFromUnsigned(0x9009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_CUBE_MAP_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x9009));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x900A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB"), v8::Uint32::NewFromUnsigned(0x900A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x900A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x900B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB"), v8::Uint32::NewFromUnsigned(0x900B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x900C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_MAP_ARRAY_ARB"), v8::Uint32::NewFromUnsigned(0x900C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_MAP_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x900C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW"), v8::Uint32::NewFromUnsigned(0x900D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB"), v8::Uint32::NewFromUnsigned(0x900D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT"), v8::Uint32::NewFromUnsigned(0x900D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x900E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB"), v8::Uint32::NewFromUnsigned(0x900E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x900E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x900F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB"), v8::Uint32::NewFromUnsigned(0x900F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x900F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA_SNORM"), v8::Uint32::NewFromUnsigned(0x9010));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_SNORM"), v8::Uint32::NewFromUnsigned(0x9011));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE_ALPHA_SNORM"), v8::Uint32::NewFromUnsigned(0x9012));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY_SNORM"), v8::Uint32::NewFromUnsigned(0x9013));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA8_SNORM"), v8::Uint32::NewFromUnsigned(0x9014));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8_SNORM"), v8::Uint32::NewFromUnsigned(0x9015));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE8_ALPHA8_SNORM"), v8::Uint32::NewFromUnsigned(0x9016));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY8_SNORM"), v8::Uint32::NewFromUnsigned(0x9017));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALPHA16_SNORM"), v8::Uint32::NewFromUnsigned(0x9018));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16_SNORM"), v8::Uint32::NewFromUnsigned(0x9019));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LUMINANCE16_ALPHA16_SNORM"), v8::Uint32::NewFromUnsigned(0x901A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INTENSITY16_SNORM"), v8::Uint32::NewFromUnsigned(0x901B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FACTOR_MIN_AMD"), v8::Uint32::NewFromUnsigned(0x901C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FACTOR_MAX_AMD"), v8::Uint32::NewFromUnsigned(0x901D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_CLAMP_NEAR_AMD"), v8::Uint32::NewFromUnsigned(0x901E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_CLAMP_FAR_AMD"), v8::Uint32::NewFromUnsigned(0x901F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x9020));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_BUFFER_BINDING_NV"), v8::Uint32::NewFromUnsigned(0x9021));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIELD_UPPER_NV"), v8::Uint32::NewFromUnsigned(0x9022));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIELD_LOWER_NV"), v8::Uint32::NewFromUnsigned(0x9023));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_VIDEO_CAPTURE_STREAMS_NV"), v8::Uint32::NewFromUnsigned(0x9024));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV"), v8::Uint32::NewFromUnsigned(0x9025));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV"), v8::Uint32::NewFromUnsigned(0x9026));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LAST_VIDEO_CAPTURE_STATUS_NV"), v8::Uint32::NewFromUnsigned(0x9027));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_BUFFER_PITCH_NV"), v8::Uint32::NewFromUnsigned(0x9028));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_COLOR_CONVERSION_MATRIX_NV"), v8::Uint32::NewFromUnsigned(0x9029));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_COLOR_CONVERSION_MAX_NV"), v8::Uint32::NewFromUnsigned(0x902A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_COLOR_CONVERSION_MIN_NV"), v8::Uint32::NewFromUnsigned(0x902B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_COLOR_CONVERSION_OFFSET_NV"), v8::Uint32::NewFromUnsigned(0x902C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV"), v8::Uint32::NewFromUnsigned(0x902D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PARTIAL_SUCCESS_NV"), v8::Uint32::NewFromUnsigned(0x902E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SUCCESS_NV"), v8::Uint32::NewFromUnsigned(0x902F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FAILURE_NV"), v8::Uint32::NewFromUnsigned(0x9030));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_YCBYCR8_422_NV"), v8::Uint32::NewFromUnsigned(0x9031));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_YCBAYCR8A_4224_NV"), v8::Uint32::NewFromUnsigned(0x9032));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV"), v8::Uint32::NewFromUnsigned(0x9033));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV"), v8::Uint32::NewFromUnsigned(0x9034));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV"), v8::Uint32::NewFromUnsigned(0x9035));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV"), v8::Uint32::NewFromUnsigned(0x9036));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_Z4Y12Z4CB12Z4CR12_444_NV"), v8::Uint32::NewFromUnsigned(0x9037));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_CAPTURE_FRAME_WIDTH_NV"), v8::Uint32::NewFromUnsigned(0x9038));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV"), v8::Uint32::NewFromUnsigned(0x9039));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV"), v8::Uint32::NewFromUnsigned(0x903A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV"), v8::Uint32::NewFromUnsigned(0x903B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV"), v8::Uint32::NewFromUnsigned(0x903C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COVERAGE_SAMPLES_NV"), v8::Uint32::NewFromUnsigned(0x9045));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COLOR_SAMPLES_NV"), v8::Uint32::NewFromUnsigned(0x9046));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX"), v8::Uint32::NewFromUnsigned(0x9047));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX"), v8::Uint32::NewFromUnsigned(0x9048));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX"), v8::Uint32::NewFromUnsigned(0x9049));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX"), v8::Uint32::NewFromUnsigned(0x904A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX"), v8::Uint32::NewFromUnsigned(0x904B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_1D"), v8::Uint32::NewFromUnsigned(0x904C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_1D_EXT"), v8::Uint32::NewFromUnsigned(0x904C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D"), v8::Uint32::NewFromUnsigned(0x904D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_EXT"), v8::Uint32::NewFromUnsigned(0x904D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_3D"), v8::Uint32::NewFromUnsigned(0x904E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_3D_EXT"), v8::Uint32::NewFromUnsigned(0x904E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_RECT"), v8::Uint32::NewFromUnsigned(0x904F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_RECT_EXT"), v8::Uint32::NewFromUnsigned(0x904F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CUBE"), v8::Uint32::NewFromUnsigned(0x9050));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CUBE_EXT"), v8::Uint32::NewFromUnsigned(0x9050));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BUFFER"), v8::Uint32::NewFromUnsigned(0x9051));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x9051));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x9052));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x9052));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x9053));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x9053));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x9054));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_CUBE_MAP_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x9054));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x9055));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_MULTISAMPLE_EXT"), v8::Uint32::NewFromUnsigned(0x9055));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x9056));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x9056));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_1D"), v8::Uint32::NewFromUnsigned(0x9057));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_1D_EXT"), v8::Uint32::NewFromUnsigned(0x9057));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D"), v8::Uint32::NewFromUnsigned(0x9058));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_EXT"), v8::Uint32::NewFromUnsigned(0x9058));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_3D"), v8::Uint32::NewFromUnsigned(0x9059));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_3D_EXT"), v8::Uint32::NewFromUnsigned(0x9059));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_RECT"), v8::Uint32::NewFromUnsigned(0x905A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_RECT_EXT"), v8::Uint32::NewFromUnsigned(0x905A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_CUBE"), v8::Uint32::NewFromUnsigned(0x905B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_CUBE_EXT"), v8::Uint32::NewFromUnsigned(0x905B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_BUFFER"), v8::Uint32::NewFromUnsigned(0x905C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x905C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x905D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x905D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x905E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x905E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x905F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x905F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x9060));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_MULTISAMPLE_EXT"), v8::Uint32::NewFromUnsigned(0x9060));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x9061));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x9061));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_1D"), v8::Uint32::NewFromUnsigned(0x9062));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_1D_EXT"), v8::Uint32::NewFromUnsigned(0x9062));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D"), v8::Uint32::NewFromUnsigned(0x9063));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_EXT"), v8::Uint32::NewFromUnsigned(0x9063));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_3D"), v8::Uint32::NewFromUnsigned(0x9064));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_3D_EXT"), v8::Uint32::NewFromUnsigned(0x9064));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_RECT"), v8::Uint32::NewFromUnsigned(0x9065));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT"), v8::Uint32::NewFromUnsigned(0x9065));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_CUBE"), v8::Uint32::NewFromUnsigned(0x9066));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_CUBE_EXT"), v8::Uint32::NewFromUnsigned(0x9066));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_BUFFER"), v8::Uint32::NewFromUnsigned(0x9067));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_BUFFER_EXT"), v8::Uint32::NewFromUnsigned(0x9067));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_1D_ARRAY"), v8::Uint32::NewFromUnsigned(0x9068));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x9068));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_ARRAY"), v8::Uint32::NewFromUnsigned(0x9069));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x9069));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY"), v8::Uint32::NewFromUnsigned(0x906A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x906A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x906B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT"), v8::Uint32::NewFromUnsigned(0x906B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x906C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT"), v8::Uint32::NewFromUnsigned(0x906C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_IMAGE_SAMPLES"), v8::Uint32::NewFromUnsigned(0x906D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_IMAGE_SAMPLES_EXT"), v8::Uint32::NewFromUnsigned(0x906D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_FORMAT"), v8::Uint32::NewFromUnsigned(0x906E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_BINDING_FORMAT_EXT"), v8::Uint32::NewFromUnsigned(0x906E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RGB10_A2UI"), v8::Uint32::NewFromUnsigned(0x906F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_FORMAT_SVG_NV"), v8::Uint32::NewFromUnsigned(0x9070));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_FORMAT_PS_NV"), v8::Uint32::NewFromUnsigned(0x9071));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STANDARD_FONT_NAME_NV"), v8::Uint32::NewFromUnsigned(0x9072));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYSTEM_FONT_NAME_NV"), v8::Uint32::NewFromUnsigned(0x9073));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FILE_NAME_NV"), v8::Uint32::NewFromUnsigned(0x9074));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STROKE_WIDTH_NV"), v8::Uint32::NewFromUnsigned(0x9075));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_END_CAPS_NV"), v8::Uint32::NewFromUnsigned(0x9076));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_INITIAL_END_CAP_NV"), v8::Uint32::NewFromUnsigned(0x9077));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_TERMINAL_END_CAP_NV"), v8::Uint32::NewFromUnsigned(0x9078));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_JOIN_STYLE_NV"), v8::Uint32::NewFromUnsigned(0x9079));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_MITER_LIMIT_NV"), v8::Uint32::NewFromUnsigned(0x907A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_DASH_CAPS_NV"), v8::Uint32::NewFromUnsigned(0x907B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_INITIAL_DASH_CAP_NV"), v8::Uint32::NewFromUnsigned(0x907C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_TERMINAL_DASH_CAP_NV"), v8::Uint32::NewFromUnsigned(0x907D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_DASH_OFFSET_NV"), v8::Uint32::NewFromUnsigned(0x907E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_CLIENT_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x907F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_FILL_MODE_NV"), v8::Uint32::NewFromUnsigned(0x9080));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_FILL_MASK_NV"), v8::Uint32::NewFromUnsigned(0x9081));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_FILL_COVER_MODE_NV"), v8::Uint32::NewFromUnsigned(0x9082));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STROKE_COVER_MODE_NV"), v8::Uint32::NewFromUnsigned(0x9083));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STROKE_MASK_NV"), v8::Uint32::NewFromUnsigned(0x9084));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COUNT_UP_NV"), v8::Uint32::NewFromUnsigned(0x9088));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COUNT_DOWN_NV"), v8::Uint32::NewFromUnsigned(0x9089));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_OBJECT_BOUNDING_BOX_NV"), v8::Uint32::NewFromUnsigned(0x908A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONVEX_HULL_NV"), v8::Uint32::NewFromUnsigned(0x908B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOUNDING_BOX_NV"), v8::Uint32::NewFromUnsigned(0x908D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSLATE_X_NV"), v8::Uint32::NewFromUnsigned(0x908E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSLATE_Y_NV"), v8::Uint32::NewFromUnsigned(0x908F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSLATE_2D_NV"), v8::Uint32::NewFromUnsigned(0x9090));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSLATE_3D_NV"), v8::Uint32::NewFromUnsigned(0x9091));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AFFINE_2D_NV"), v8::Uint32::NewFromUnsigned(0x9092));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_AFFINE_3D_NV"), v8::Uint32::NewFromUnsigned(0x9094));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_AFFINE_2D_NV"), v8::Uint32::NewFromUnsigned(0x9096));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSPOSE_AFFINE_3D_NV"), v8::Uint32::NewFromUnsigned(0x9098));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UTF8_NV"), v8::Uint32::NewFromUnsigned(0x909A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UTF16_NV"), v8::Uint32::NewFromUnsigned(0x909B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV"), v8::Uint32::NewFromUnsigned(0x909C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_COMMAND_COUNT_NV"), v8::Uint32::NewFromUnsigned(0x909D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_COORD_COUNT_NV"), v8::Uint32::NewFromUnsigned(0x909E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_DASH_ARRAY_COUNT_NV"), v8::Uint32::NewFromUnsigned(0x909F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_COMPUTED_LENGTH_NV"), v8::Uint32::NewFromUnsigned(0x90A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_FILL_BOUNDING_BOX_NV"), v8::Uint32::NewFromUnsigned(0x90A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STROKE_BOUNDING_BOX_NV"), v8::Uint32::NewFromUnsigned(0x90A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SQUARE_NV"), v8::Uint32::NewFromUnsigned(0x90A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ROUND_NV"), v8::Uint32::NewFromUnsigned(0x90A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRIANGULAR_NV"), v8::Uint32::NewFromUnsigned(0x90A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BEVEL_NV"), v8::Uint32::NewFromUnsigned(0x90A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MITER_REVERT_NV"), v8::Uint32::NewFromUnsigned(0x90A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MITER_TRUNCATE_NV"), v8::Uint32::NewFromUnsigned(0x90A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SKIP_MISSING_GLYPH_NV"), v8::Uint32::NewFromUnsigned(0x90A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_USE_MISSING_GLYPH_NV"), v8::Uint32::NewFromUnsigned(0x90AA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_ERROR_POSITION_NV"), v8::Uint32::NewFromUnsigned(0x90AB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_FOG_GEN_MODE_NV"), v8::Uint32::NewFromUnsigned(0x90AC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACCUM_ADJACENT_PAIRS_NV"), v8::Uint32::NewFromUnsigned(0x90AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ADJACENT_PAIRS_NV"), v8::Uint32::NewFromUnsigned(0x90AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FIRST_TO_REST_NV"), v8::Uint32::NewFromUnsigned(0x90AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_GEN_MODE_NV"), v8::Uint32::NewFromUnsigned(0x90B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_GEN_COEFF_NV"), v8::Uint32::NewFromUnsigned(0x90B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_GEN_COLOR_FORMAT_NV"), v8::Uint32::NewFromUnsigned(0x90B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_GEN_COMPONENTS_NV"), v8::Uint32::NewFromUnsigned(0x90B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_DASH_OFFSET_RESET_NV"), v8::Uint32::NewFromUnsigned(0x90B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MOVE_TO_RESETS_NV"), v8::Uint32::NewFromUnsigned(0x90B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MOVE_TO_CONTINUES_NV"), v8::Uint32::NewFromUnsigned(0x90B6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STENCIL_FUNC_NV"), v8::Uint32::NewFromUnsigned(0x90B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STENCIL_REF_NV"), v8::Uint32::NewFromUnsigned(0x90B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STENCIL_VALUE_MASK_NV"), v8::Uint32::NewFromUnsigned(0x90B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCALED_RESOLVE_FASTEST_EXT"), v8::Uint32::NewFromUnsigned(0x90BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCALED_RESOLVE_NICEST_EXT"), v8::Uint32::NewFromUnsigned(0x90BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_MAP_BUFFER_ALIGNMENT"), v8::Uint32::NewFromUnsigned(0x90BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV"), v8::Uint32::NewFromUnsigned(0x90BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV"), v8::Uint32::NewFromUnsigned(0x90BE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PATH_COVER_DEPTH_FUNC_NV"), v8::Uint32::NewFromUnsigned(0x90BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_FORMAT_COMPATIBILITY_TYPE"), v8::Uint32::NewFromUnsigned(0x90C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE"), v8::Uint32::NewFromUnsigned(0x90C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS"), v8::Uint32::NewFromUnsigned(0x90C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_IMAGE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x90CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x90CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT"), v8::Uint32::NewFromUnsigned(0x90CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x90CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT"), v8::Uint32::NewFromUnsigned(0x90CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_IMAGE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x90CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT"), v8::Uint32::NewFromUnsigned(0x90CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_IMAGE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x90CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_IMAGE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x90CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV"), v8::Uint32::NewFromUnsigned(0x90D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV"), v8::Uint32::NewFromUnsigned(0x90D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_STORAGE_BUFFER"), v8::Uint32::NewFromUnsigned(0x90D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_STORAGE_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x90D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_STORAGE_BUFFER_START"), v8::Uint32::NewFromUnsigned(0x90D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_STORAGE_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x90D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS"), v8::Uint32::NewFromUnsigned(0x90D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS"), v8::Uint32::NewFromUnsigned(0x90D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT"), v8::Uint32::NewFromUnsigned(0x90D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS"), v8::Uint32::NewFromUnsigned(0x90D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT"), v8::Uint32::NewFromUnsigned(0x90D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS"), v8::Uint32::NewFromUnsigned(0x90D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT"), v8::Uint32::NewFromUnsigned(0x90D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS"), v8::Uint32::NewFromUnsigned(0x90DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS"), v8::Uint32::NewFromUnsigned(0x90DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS"), v8::Uint32::NewFromUnsigned(0x90DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS"), v8::Uint32::NewFromUnsigned(0x90DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SHADER_STORAGE_BLOCK_SIZE"), v8::Uint32::NewFromUnsigned(0x90DE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT"), v8::Uint32::NewFromUnsigned(0x90DF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_X11_FENCE_EXT"), v8::Uint32::NewFromUnsigned(0x90E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEPTH_STENCIL_TEXTURE_MODE"), v8::Uint32::NewFromUnsigned(0x90EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS"), v8::Uint32::NewFromUnsigned(0x90EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB"), v8::Uint32::NewFromUnsigned(0x90EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER"), v8::Uint32::NewFromUnsigned(0x90EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER"), v8::Uint32::NewFromUnsigned(0x90ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISPATCH_INDIRECT_BUFFER"), v8::Uint32::NewFromUnsigned(0x90EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISPATCH_INDIRECT_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x90EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ATTACHMENT_EXT"), v8::Uint32::NewFromUnsigned(0x90F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTIVIEW_EXT"), v8::Uint32::NewFromUnsigned(0x90F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_MULTIVIEW_BUFFERS_EXT"), v8::Uint32::NewFromUnsigned(0x90F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_ROBUST_ACCESS_EXT"), v8::Uint32::NewFromUnsigned(0x90F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPUTE_PROGRAM_NV"), v8::Uint32::NewFromUnsigned(0x90FB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV"), v8::Uint32::NewFromUnsigned(0x90FC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x9100));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x9101));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x9102));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES"), v8::Uint32::NewFromUnsigned(0x9102));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x9103));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x9104));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x9105));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES"), v8::Uint32::NewFromUnsigned(0x9105));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SAMPLES"), v8::Uint32::NewFromUnsigned(0x9106));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_FIXED_SAMPLE_LOCATIONS"), v8::Uint32::NewFromUnsigned(0x9107));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x9108));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x9109));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE"), v8::Uint32::NewFromUnsigned(0x910A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x910B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"), v8::Uint32::NewFromUnsigned(0x910B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x910C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"), v8::Uint32::NewFromUnsigned(0x910C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY"), v8::Uint32::NewFromUnsigned(0x910D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES"), v8::Uint32::NewFromUnsigned(0x910D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COLOR_TEXTURE_SAMPLES"), v8::Uint32::NewFromUnsigned(0x910E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEPTH_TEXTURE_SAMPLES"), v8::Uint32::NewFromUnsigned(0x910F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_INTEGER_SAMPLES"), v8::Uint32::NewFromUnsigned(0x9110));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SERVER_WAIT_TIMEOUT"), v8::Uint32::NewFromUnsigned(0x9111));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SERVER_WAIT_TIMEOUT_APPLE"), v8::Uint32::NewFromUnsigned(0x9111));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_TYPE"), v8::Uint32::NewFromUnsigned(0x9112));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OBJECT_TYPE_APPLE"), v8::Uint32::NewFromUnsigned(0x9112));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_CONDITION"), v8::Uint32::NewFromUnsigned(0x9113));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_CONDITION_APPLE"), v8::Uint32::NewFromUnsigned(0x9113));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_STATUS"), v8::Uint32::NewFromUnsigned(0x9114));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_STATUS_APPLE"), v8::Uint32::NewFromUnsigned(0x9114));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_FLAGS"), v8::Uint32::NewFromUnsigned(0x9115));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_FLAGS_APPLE"), v8::Uint32::NewFromUnsigned(0x9115));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_FENCE"), v8::Uint32::NewFromUnsigned(0x9116));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_FENCE_APPLE"), v8::Uint32::NewFromUnsigned(0x9116));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_GPU_COMMANDS_COMPLETE"), v8::Uint32::NewFromUnsigned(0x9117));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE"), v8::Uint32::NewFromUnsigned(0x9117));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNALED"), v8::Uint32::NewFromUnsigned(0x9118));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNALED_APPLE"), v8::Uint32::NewFromUnsigned(0x9118));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNALED"), v8::Uint32::NewFromUnsigned(0x9119));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SIGNALED_APPLE"), v8::Uint32::NewFromUnsigned(0x9119));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALREADY_SIGNALED"), v8::Uint32::NewFromUnsigned(0x911A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALREADY_SIGNALED_APPLE"), v8::Uint32::NewFromUnsigned(0x911A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TIMEOUT_EXPIRED"), v8::Uint32::NewFromUnsigned(0x911B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TIMEOUT_EXPIRED_APPLE"), v8::Uint32::NewFromUnsigned(0x911B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONDITION_SATISFIED"), v8::Uint32::NewFromUnsigned(0x911C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONDITION_SATISFIED_APPLE"), v8::Uint32::NewFromUnsigned(0x911C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WAIT_FAILED"), v8::Uint32::NewFromUnsigned(0x911D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WAIT_FAILED_APPLE"), v8::Uint32::NewFromUnsigned(0x911D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_ACCESS_FLAGS"), v8::Uint32::NewFromUnsigned(0x911F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_MAP_LENGTH"), v8::Uint32::NewFromUnsigned(0x9120));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_MAP_OFFSET"), v8::Uint32::NewFromUnsigned(0x9121));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_OUTPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x9122));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_INPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x9123));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x9123));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_OUTPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x9124));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT"), v8::Uint32::NewFromUnsigned(0x9124));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_INPUT_COMPONENTS"), v8::Uint32::NewFromUnsigned(0x9125));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_PROFILE_MASK"), v8::Uint32::NewFromUnsigned(0x9126));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_COMPRESSED_BLOCK_WIDTH"), v8::Uint32::NewFromUnsigned(0x9127));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_COMPRESSED_BLOCK_HEIGHT"), v8::Uint32::NewFromUnsigned(0x9128));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_COMPRESSED_BLOCK_DEPTH"), v8::Uint32::NewFromUnsigned(0x9129));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_COMPRESSED_BLOCK_SIZE"), v8::Uint32::NewFromUnsigned(0x912A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_COMPRESSED_BLOCK_WIDTH"), v8::Uint32::NewFromUnsigned(0x912B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_COMPRESSED_BLOCK_HEIGHT"), v8::Uint32::NewFromUnsigned(0x912C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_COMPRESSED_BLOCK_DEPTH"), v8::Uint32::NewFromUnsigned(0x912D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_COMPRESSED_BLOCK_SIZE"), v8::Uint32::NewFromUnsigned(0x912E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_IMMUTABLE_FORMAT"), v8::Uint32::NewFromUnsigned(0x912F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_IMMUTABLE_FORMAT_EXT"), v8::Uint32::NewFromUnsigned(0x912F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SGX_PROGRAM_BINARY_IMG"), v8::Uint32::NewFromUnsigned(0x9130));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RENDERBUFFER_SAMPLES_IMG"), v8::Uint32::NewFromUnsigned(0x9133));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG"), v8::Uint32::NewFromUnsigned(0x9134));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SAMPLES_IMG"), v8::Uint32::NewFromUnsigned(0x9135));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SAMPLES_IMG"), v8::Uint32::NewFromUnsigned(0x9136));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG"), v8::Uint32::NewFromUnsigned(0x9137));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG"), v8::Uint32::NewFromUnsigned(0x9138));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_MESSAGE_LENGTH"), v8::Uint32::NewFromUnsigned(0x9143));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_MESSAGE_LENGTH_AMD"), v8::Uint32::NewFromUnsigned(0x9143));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_MESSAGE_LENGTH_ARB"), v8::Uint32::NewFromUnsigned(0x9143));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_MESSAGE_LENGTH_KHR"), v8::Uint32::NewFromUnsigned(0x9143));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_LOGGED_MESSAGES"), v8::Uint32::NewFromUnsigned(0x9144));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_LOGGED_MESSAGES_AMD"), v8::Uint32::NewFromUnsigned(0x9144));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_LOGGED_MESSAGES_ARB"), v8::Uint32::NewFromUnsigned(0x9144));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_DEBUG_LOGGED_MESSAGES_KHR"), v8::Uint32::NewFromUnsigned(0x9144));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_LOGGED_MESSAGES"), v8::Uint32::NewFromUnsigned(0x9145));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_LOGGED_MESSAGES_AMD"), v8::Uint32::NewFromUnsigned(0x9145));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_LOGGED_MESSAGES_ARB"), v8::Uint32::NewFromUnsigned(0x9145));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_LOGGED_MESSAGES_KHR"), v8::Uint32::NewFromUnsigned(0x9145));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_HIGH"), v8::Uint32::NewFromUnsigned(0x9146));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_HIGH_AMD"), v8::Uint32::NewFromUnsigned(0x9146));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_HIGH_ARB"), v8::Uint32::NewFromUnsigned(0x9146));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_HIGH_KHR"), v8::Uint32::NewFromUnsigned(0x9146));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_MEDIUM"), v8::Uint32::NewFromUnsigned(0x9147));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_MEDIUM_AMD"), v8::Uint32::NewFromUnsigned(0x9147));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_MEDIUM_ARB"), v8::Uint32::NewFromUnsigned(0x9147));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_MEDIUM_KHR"), v8::Uint32::NewFromUnsigned(0x9147));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_LOW"), v8::Uint32::NewFromUnsigned(0x9148));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_LOW_AMD"), v8::Uint32::NewFromUnsigned(0x9148));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_LOW_ARB"), v8::Uint32::NewFromUnsigned(0x9148));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_SEVERITY_LOW_KHR"), v8::Uint32::NewFromUnsigned(0x9148));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CATEGORY_API_ERROR_AMD"), v8::Uint32::NewFromUnsigned(0x9149));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD"), v8::Uint32::NewFromUnsigned(0x914A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CATEGORY_DEPRECATION_AMD"), v8::Uint32::NewFromUnsigned(0x914B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD"), v8::Uint32::NewFromUnsigned(0x914C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CATEGORY_PERFORMANCE_AMD"), v8::Uint32::NewFromUnsigned(0x914D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD"), v8::Uint32::NewFromUnsigned(0x914E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CATEGORY_APPLICATION_AMD"), v8::Uint32::NewFromUnsigned(0x914F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_CATEGORY_OTHER_AMD"), v8::Uint32::NewFromUnsigned(0x9150));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_OBJECT_EXT"), v8::Uint32::NewFromUnsigned(0x9151));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DATA_BUFFER_AMD"), v8::Uint32::NewFromUnsigned(0x9151));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFORMANCE_MONITOR_AMD"), v8::Uint32::NewFromUnsigned(0x9152));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_OBJECT_AMD"), v8::Uint32::NewFromUnsigned(0x9153));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_OBJECT_EXT"), v8::Uint32::NewFromUnsigned(0x9153));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_OBJECT_AMD"), v8::Uint32::NewFromUnsigned(0x9154));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_OBJECT_EXT"), v8::Uint32::NewFromUnsigned(0x9154));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SAMPLER_OBJECT_AMD"), v8::Uint32::NewFromUnsigned(0x9155));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD"), v8::Uint32::NewFromUnsigned(0x9160));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BUFFER"), v8::Uint32::NewFromUnsigned(0x9192));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BUFFER_AMD"), v8::Uint32::NewFromUnsigned(0x9192));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x9193));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_BUFFER_BINDING_AMD"), v8::Uint32::NewFromUnsigned(0x9193));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_RESULT_NO_WAIT"), v8::Uint32::NewFromUnsigned(0x9194));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_QUERY_RESULT_NO_WAIT_AMD"), v8::Uint32::NewFromUnsigned(0x9194));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIRTUAL_PAGE_SIZE_X_ARB"), v8::Uint32::NewFromUnsigned(0x9195));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIRTUAL_PAGE_SIZE_X_AMD"), v8::Uint32::NewFromUnsigned(0x9195));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIRTUAL_PAGE_SIZE_Y_ARB"), v8::Uint32::NewFromUnsigned(0x9196));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIRTUAL_PAGE_SIZE_Y_AMD"), v8::Uint32::NewFromUnsigned(0x9196));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIRTUAL_PAGE_SIZE_Z_ARB"), v8::Uint32::NewFromUnsigned(0x9197));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIRTUAL_PAGE_SIZE_Z_AMD"), v8::Uint32::NewFromUnsigned(0x9197));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SPARSE_TEXTURE_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x9198));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SPARSE_TEXTURE_SIZE_AMD"), v8::Uint32::NewFromUnsigned(0x9198));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x9199));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD"), v8::Uint32::NewFromUnsigned(0x9199));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB"), v8::Uint32::NewFromUnsigned(0x919A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS"), v8::Uint32::NewFromUnsigned(0x919A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_SPARSE_LEVEL_ARB"), v8::Uint32::NewFromUnsigned(0x919B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_SPARSE_LEVEL_AMD"), v8::Uint32::NewFromUnsigned(0x919B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MIN_LOD_WARNING_AMD"), v8::Uint32::NewFromUnsigned(0x919C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_OFFSET"), v8::Uint32::NewFromUnsigned(0x919D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_OFFSET_EXT"), v8::Uint32::NewFromUnsigned(0x919D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x919E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_SIZE_EXT"), v8::Uint32::NewFromUnsigned(0x919E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT"), v8::Uint32::NewFromUnsigned(0x919F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT"), v8::Uint32::NewFromUnsigned(0x919F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STREAM_RASTERIZATION_AMD"), v8::Uint32::NewFromUnsigned(0x91A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ELEMENT_SWIZZLE_AMD"), v8::Uint32::NewFromUnsigned(0x91A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ID_SWIZZLE_AMD"), v8::Uint32::NewFromUnsigned(0x91A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_SPARSE_ARB"), v8::Uint32::NewFromUnsigned(0x91A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIRTUAL_PAGE_SIZE_INDEX_ARB"), v8::Uint32::NewFromUnsigned(0x91A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_VIRTUAL_PAGE_SIZES_ARB"), v8::Uint32::NewFromUnsigned(0x91A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB"), v8::Uint32::NewFromUnsigned(0x91A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPUTE_SHADER"), v8::Uint32::NewFromUnsigned(0x91B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_UNIFORM_BLOCKS"), v8::Uint32::NewFromUnsigned(0x91BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS"), v8::Uint32::NewFromUnsigned(0x91BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_IMAGE_UNIFORMS"), v8::Uint32::NewFromUnsigned(0x91BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_WORK_GROUP_COUNT"), v8::Uint32::NewFromUnsigned(0x91BE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_WORK_GROUP_SIZE"), v8::Uint32::NewFromUnsigned(0x91BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x91BF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_FLIP_Y_WEBGL"), v8::Uint32::NewFromUnsigned(0x9240));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL"), v8::Uint32::NewFromUnsigned(0x9241));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTEXT_LOST_WEBGL"), v8::Uint32::NewFromUnsigned(0x9242));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNPACK_COLORSPACE_CONVERSION_WEBGL"), v8::Uint32::NewFromUnsigned(0x9243));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BROWSER_DEFAULT_WEBGL"), v8::Uint32::NewFromUnsigned(0x9244));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_BINARY_DMP"), v8::Uint32::NewFromUnsigned(0x9250));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GCCSO_SHADER_BINARY_FJ"), v8::Uint32::NewFromUnsigned(0x9260));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_R11_EAC"), v8::Uint32::NewFromUnsigned(0x9270));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_R11_EAC_OES"), v8::Uint32::NewFromUnsigned(0x9270));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_R11_EAC"), v8::Uint32::NewFromUnsigned(0x9271));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_R11_EAC_OES"), v8::Uint32::NewFromUnsigned(0x9271));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RG11_EAC"), v8::Uint32::NewFromUnsigned(0x9272));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RG11_EAC_OES"), v8::Uint32::NewFromUnsigned(0x9272));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_RG11_EAC"), v8::Uint32::NewFromUnsigned(0x9273));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SIGNED_RG11_EAC_OES"), v8::Uint32::NewFromUnsigned(0x9273));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB8_ETC2"), v8::Uint32::NewFromUnsigned(0x9274));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB8_ETC2_OES"), v8::Uint32::NewFromUnsigned(0x9274));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ETC2"), v8::Uint32::NewFromUnsigned(0x9275));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ETC2_OES"), v8::Uint32::NewFromUnsigned(0x9275));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"), v8::Uint32::NewFromUnsigned(0x9276));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES"), v8::Uint32::NewFromUnsigned(0x9276));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"), v8::Uint32::NewFromUnsigned(0x9277));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES"), v8::Uint32::NewFromUnsigned(0x9277));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA8_ETC2_EAC"), v8::Uint32::NewFromUnsigned(0x9278));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA8_ETC2_EAC_OES"), v8::Uint32::NewFromUnsigned(0x9278));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"), v8::Uint32::NewFromUnsigned(0x9279));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES"), v8::Uint32::NewFromUnsigned(0x9279));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_PREMULTIPLIED_SRC_NV"), v8::Uint32::NewFromUnsigned(0x9280));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_OVERLAP_NV"), v8::Uint32::NewFromUnsigned(0x9281));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNCORRELATED_NV"), v8::Uint32::NewFromUnsigned(0x9282));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DISJOINT_NV"), v8::Uint32::NewFromUnsigned(0x9283));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONJOINT_NV"), v8::Uint32::NewFromUnsigned(0x9284));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_ADVANCED_COHERENT_KHR"), v8::Uint32::NewFromUnsigned(0x9285));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLEND_ADVANCED_COHERENT_NV"), v8::Uint32::NewFromUnsigned(0x9285));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC_NV"), v8::Uint32::NewFromUnsigned(0x9286));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DST_NV"), v8::Uint32::NewFromUnsigned(0x9287));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC_OVER_NV"), v8::Uint32::NewFromUnsigned(0x9288));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DST_OVER_NV"), v8::Uint32::NewFromUnsigned(0x9289));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC_IN_NV"), v8::Uint32::NewFromUnsigned(0x928A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DST_IN_NV"), v8::Uint32::NewFromUnsigned(0x928B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC_OUT_NV"), v8::Uint32::NewFromUnsigned(0x928C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DST_OUT_NV"), v8::Uint32::NewFromUnsigned(0x928D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SRC_ATOP_NV"), v8::Uint32::NewFromUnsigned(0x928E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DST_ATOP_NV"), v8::Uint32::NewFromUnsigned(0x928F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PLUS_NV"), v8::Uint32::NewFromUnsigned(0x9291));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PLUS_DARKER_NV"), v8::Uint32::NewFromUnsigned(0x9292));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTIPLY_KHR"), v8::Uint32::NewFromUnsigned(0x9294));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MULTIPLY_NV"), v8::Uint32::NewFromUnsigned(0x9294));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCREEN_KHR"), v8::Uint32::NewFromUnsigned(0x9295));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SCREEN_NV"), v8::Uint32::NewFromUnsigned(0x9295));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OVERLAY_KHR"), v8::Uint32::NewFromUnsigned(0x9296));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OVERLAY_NV"), v8::Uint32::NewFromUnsigned(0x9296));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DARKEN_KHR"), v8::Uint32::NewFromUnsigned(0x9297));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DARKEN_NV"), v8::Uint32::NewFromUnsigned(0x9297));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHTEN_KHR"), v8::Uint32::NewFromUnsigned(0x9298));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LIGHTEN_NV"), v8::Uint32::NewFromUnsigned(0x9298));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLORDODGE_KHR"), v8::Uint32::NewFromUnsigned(0x9299));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLORDODGE_NV"), v8::Uint32::NewFromUnsigned(0x9299));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLORBURN_KHR"), v8::Uint32::NewFromUnsigned(0x929A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLORBURN_NV"), v8::Uint32::NewFromUnsigned(0x929A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HARDLIGHT_KHR"), v8::Uint32::NewFromUnsigned(0x929B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HARDLIGHT_NV"), v8::Uint32::NewFromUnsigned(0x929B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOFTLIGHT_KHR"), v8::Uint32::NewFromUnsigned(0x929C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SOFTLIGHT_NV"), v8::Uint32::NewFromUnsigned(0x929C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DIFFERENCE_KHR"), v8::Uint32::NewFromUnsigned(0x929E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DIFFERENCE_NV"), v8::Uint32::NewFromUnsigned(0x929E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINUS_NV"), v8::Uint32::NewFromUnsigned(0x929F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EXCLUSION_KHR"), v8::Uint32::NewFromUnsigned(0x92A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EXCLUSION_NV"), v8::Uint32::NewFromUnsigned(0x92A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONTRAST_NV"), v8::Uint32::NewFromUnsigned(0x92A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVERT_RGB_NV"), v8::Uint32::NewFromUnsigned(0x92A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEARDODGE_NV"), v8::Uint32::NewFromUnsigned(0x92A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEARBURN_NV"), v8::Uint32::NewFromUnsigned(0x92A5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VIVIDLIGHT_NV"), v8::Uint32::NewFromUnsigned(0x92A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LINEARLIGHT_NV"), v8::Uint32::NewFromUnsigned(0x92A7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PINLIGHT_NV"), v8::Uint32::NewFromUnsigned(0x92A8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HARDMIX_NV"), v8::Uint32::NewFromUnsigned(0x92A9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HSL_HUE_KHR"), v8::Uint32::NewFromUnsigned(0x92AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HSL_HUE_NV"), v8::Uint32::NewFromUnsigned(0x92AD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HSL_SATURATION_KHR"), v8::Uint32::NewFromUnsigned(0x92AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HSL_SATURATION_NV"), v8::Uint32::NewFromUnsigned(0x92AE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HSL_COLOR_KHR"), v8::Uint32::NewFromUnsigned(0x92AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HSL_COLOR_NV"), v8::Uint32::NewFromUnsigned(0x92AF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HSL_LUMINOSITY_KHR"), v8::Uint32::NewFromUnsigned(0x92B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_HSL_LUMINOSITY_NV"), v8::Uint32::NewFromUnsigned(0x92B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PLUS_CLAMPED_NV"), v8::Uint32::NewFromUnsigned(0x92B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PLUS_CLAMPED_ALPHA_NV"), v8::Uint32::NewFromUnsigned(0x92B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MINUS_CLAMPED_NV"), v8::Uint32::NewFromUnsigned(0x92B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INVERT_OVG_NV"), v8::Uint32::NewFromUnsigned(0x92B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PRIMITIVE_BOUNDING_BOX_EXT"), v8::Uint32::NewFromUnsigned(0x92BE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER"), v8::Uint32::NewFromUnsigned(0x92C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x92C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_START"), v8::Uint32::NewFromUnsigned(0x92C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x92C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE"), v8::Uint32::NewFromUnsigned(0x92C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS"), v8::Uint32::NewFromUnsigned(0x92C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES"), v8::Uint32::NewFromUnsigned(0x92C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER"), v8::Uint32::NewFromUnsigned(0x92C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER"), v8::Uint32::NewFromUnsigned(0x92C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER"), v8::Uint32::NewFromUnsigned(0x92C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER"), v8::Uint32::NewFromUnsigned(0x92CA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER"), v8::Uint32::NewFromUnsigned(0x92CB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS"), v8::Uint32::NewFromUnsigned(0x92CC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS"), v8::Uint32::NewFromUnsigned(0x92CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT"), v8::Uint32::NewFromUnsigned(0x92CD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS"), v8::Uint32::NewFromUnsigned(0x92CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT"), v8::Uint32::NewFromUnsigned(0x92CE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS"), v8::Uint32::NewFromUnsigned(0x92CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT"), v8::Uint32::NewFromUnsigned(0x92CF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS"), v8::Uint32::NewFromUnsigned(0x92D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS"), v8::Uint32::NewFromUnsigned(0x92D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_ATOMIC_COUNTERS"), v8::Uint32::NewFromUnsigned(0x92D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS"), v8::Uint32::NewFromUnsigned(0x92D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT"), v8::Uint32::NewFromUnsigned(0x92D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS"), v8::Uint32::NewFromUnsigned(0x92D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT"), v8::Uint32::NewFromUnsigned(0x92D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_ATOMIC_COUNTERS"), v8::Uint32::NewFromUnsigned(0x92D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT"), v8::Uint32::NewFromUnsigned(0x92D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAGMENT_ATOMIC_COUNTERS"), v8::Uint32::NewFromUnsigned(0x92D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMBINED_ATOMIC_COUNTERS"), v8::Uint32::NewFromUnsigned(0x92D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE"), v8::Uint32::NewFromUnsigned(0x92D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_ATOMIC_COUNTER_BUFFERS"), v8::Uint32::NewFromUnsigned(0x92D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX"), v8::Uint32::NewFromUnsigned(0x92DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNSIGNED_INT_ATOMIC_COUNTER"), v8::Uint32::NewFromUnsigned(0x92DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS"), v8::Uint32::NewFromUnsigned(0x92DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_OUTPUT"), v8::Uint32::NewFromUnsigned(0x92E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_DEBUG_OUTPUT_KHR"), v8::Uint32::NewFromUnsigned(0x92E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM"), v8::Uint32::NewFromUnsigned(0x92E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_UNIFORM_BLOCK"), v8::Uint32::NewFromUnsigned(0x92E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_INPUT"), v8::Uint32::NewFromUnsigned(0x92E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_OUTPUT"), v8::Uint32::NewFromUnsigned(0x92E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_VARIABLE"), v8::Uint32::NewFromUnsigned(0x92E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SHADER_STORAGE_BLOCK"), v8::Uint32::NewFromUnsigned(0x92E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IS_PER_PATCH"), v8::Uint32::NewFromUnsigned(0x92E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IS_PER_PATCH_EXT"), v8::Uint32::NewFromUnsigned(0x92E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SUBROUTINE"), v8::Uint32::NewFromUnsigned(0x92E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_SUBROUTINE"), v8::Uint32::NewFromUnsigned(0x92E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_SUBROUTINE"), v8::Uint32::NewFromUnsigned(0x92EA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SUBROUTINE"), v8::Uint32::NewFromUnsigned(0x92EB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SUBROUTINE"), v8::Uint32::NewFromUnsigned(0x92EC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPUTE_SUBROUTINE"), v8::Uint32::NewFromUnsigned(0x92ED));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_SUBROUTINE_UNIFORM"), v8::Uint32::NewFromUnsigned(0x92EE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_CONTROL_SUBROUTINE_UNIFORM"), v8::Uint32::NewFromUnsigned(0x92EF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TESS_EVALUATION_SUBROUTINE_UNIFORM"), v8::Uint32::NewFromUnsigned(0x92F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_GEOMETRY_SUBROUTINE_UNIFORM"), v8::Uint32::NewFromUnsigned(0x92F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAGMENT_SUBROUTINE_UNIFORM"), v8::Uint32::NewFromUnsigned(0x92F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPUTE_SUBROUTINE_UNIFORM"), v8::Uint32::NewFromUnsigned(0x92F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_VARYING"), v8::Uint32::NewFromUnsigned(0x92F4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_RESOURCES"), v8::Uint32::NewFromUnsigned(0x92F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_NAME_LENGTH"), v8::Uint32::NewFromUnsigned(0x92F6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_NUM_ACTIVE_VARIABLES"), v8::Uint32::NewFromUnsigned(0x92F7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_NUM_COMPATIBLE_SUBROUTINES"), v8::Uint32::NewFromUnsigned(0x92F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NAME_LENGTH"), v8::Uint32::NewFromUnsigned(0x92F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TYPE"), v8::Uint32::NewFromUnsigned(0x92FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_SIZE"), v8::Uint32::NewFromUnsigned(0x92FB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_OFFSET"), v8::Uint32::NewFromUnsigned(0x92FC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BLOCK_INDEX"), v8::Uint32::NewFromUnsigned(0x92FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x92FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATRIX_STRIDE"), v8::Uint32::NewFromUnsigned(0x92FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_IS_ROW_MAJOR"), v8::Uint32::NewFromUnsigned(0x9300));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ATOMIC_COUNTER_BUFFER_INDEX"), v8::Uint32::NewFromUnsigned(0x9301));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_BINDING"), v8::Uint32::NewFromUnsigned(0x9302));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BUFFER_DATA_SIZE"), v8::Uint32::NewFromUnsigned(0x9303));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_ACTIVE_VARIABLES"), v8::Uint32::NewFromUnsigned(0x9304));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ACTIVE_VARIABLES"), v8::Uint32::NewFromUnsigned(0x9305));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_VERTEX_SHADER"), v8::Uint32::NewFromUnsigned(0x9306));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_TESS_CONTROL_SHADER"), v8::Uint32::NewFromUnsigned(0x9307));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT"), v8::Uint32::NewFromUnsigned(0x9307));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_TESS_EVALUATION_SHADER"), v8::Uint32::NewFromUnsigned(0x9308));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT"), v8::Uint32::NewFromUnsigned(0x9308));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_GEOMETRY_SHADER"), v8::Uint32::NewFromUnsigned(0x9309));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_GEOMETRY_SHADER_EXT"), v8::Uint32::NewFromUnsigned(0x9309));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_FRAGMENT_SHADER"), v8::Uint32::NewFromUnsigned(0x930A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_REFERENCED_BY_COMPUTE_SHADER"), v8::Uint32::NewFromUnsigned(0x930B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TOP_LEVEL_ARRAY_SIZE"), v8::Uint32::NewFromUnsigned(0x930C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TOP_LEVEL_ARRAY_STRIDE"), v8::Uint32::NewFromUnsigned(0x930D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOCATION"), v8::Uint32::NewFromUnsigned(0x930E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOCATION_INDEX"), v8::Uint32::NewFromUnsigned(0x930F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_DEFAULT_WIDTH"), v8::Uint32::NewFromUnsigned(0x9310));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_DEFAULT_HEIGHT"), v8::Uint32::NewFromUnsigned(0x9311));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_DEFAULT_LAYERS"), v8::Uint32::NewFromUnsigned(0x9312));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT"), v8::Uint32::NewFromUnsigned(0x9312));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_DEFAULT_SAMPLES"), v8::Uint32::NewFromUnsigned(0x9313));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS"), v8::Uint32::NewFromUnsigned(0x9314));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAMEBUFFER_WIDTH"), v8::Uint32::NewFromUnsigned(0x9315));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAMEBUFFER_HEIGHT"), v8::Uint32::NewFromUnsigned(0x9316));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAMEBUFFER_LAYERS"), v8::Uint32::NewFromUnsigned(0x9317));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAMEBUFFER_LAYERS_EXT"), v8::Uint32::NewFromUnsigned(0x9317));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_FRAMEBUFFER_SAMPLES"), v8::Uint32::NewFromUnsigned(0x9318));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WARP_SIZE_NV"), v8::Uint32::NewFromUnsigned(0x9339));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WARPS_PER_SM_NV"), v8::Uint32::NewFromUnsigned(0x933A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SM_COUNT_NV"), v8::Uint32::NewFromUnsigned(0x933B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB"), v8::Uint32::NewFromUnsigned(0x9344));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB"), v8::Uint32::NewFromUnsigned(0x9345));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_LOCATION_COMPONENT"), v8::Uint32::NewFromUnsigned(0x934A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_INDEX"), v8::Uint32::NewFromUnsigned(0x934B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE"), v8::Uint32::NewFromUnsigned(0x934C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLEAR_TEXTURE"), v8::Uint32::NewFromUnsigned(0x9365));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NUM_SAMPLE_COUNTS"), v8::Uint32::NewFromUnsigned(0x9380));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE"), v8::Uint32::NewFromUnsigned(0x93A0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BGRA8_EXT"), v8::Uint32::NewFromUnsigned(0x93A1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_USAGE_ANGLE"), v8::Uint32::NewFromUnsigned(0x93A2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FRAMEBUFFER_ATTACHMENT_ANGLE"), v8::Uint32::NewFromUnsigned(0x93A3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PACK_REVERSE_ROW_ORDER_ANGLE"), v8::Uint32::NewFromUnsigned(0x93A4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PROGRAM_BINARY_ANGLE"), v8::Uint32::NewFromUnsigned(0x93A6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_4x4_KHR"), v8::Uint32::NewFromUnsigned(0x93B0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_5x4_KHR"), v8::Uint32::NewFromUnsigned(0x93B1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_5x5_KHR"), v8::Uint32::NewFromUnsigned(0x93B2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_6x5_KHR"), v8::Uint32::NewFromUnsigned(0x93B3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_6x6_KHR"), v8::Uint32::NewFromUnsigned(0x93B4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_8x5_KHR"), v8::Uint32::NewFromUnsigned(0x93B5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_8x6_KHR"), v8::Uint32::NewFromUnsigned(0x93B6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_8x8_KHR"), v8::Uint32::NewFromUnsigned(0x93B7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_10x5_KHR"), v8::Uint32::NewFromUnsigned(0x93B8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_10x6_KHR"), v8::Uint32::NewFromUnsigned(0x93B9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_10x8_KHR"), v8::Uint32::NewFromUnsigned(0x93BA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_10x10_KHR"), v8::Uint32::NewFromUnsigned(0x93BB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_12x10_KHR"), v8::Uint32::NewFromUnsigned(0x93BC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_12x12_KHR"), v8::Uint32::NewFromUnsigned(0x93BD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_3x3x3_OES"), v8::Uint32::NewFromUnsigned(0x93C0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_4x3x3_OES"), v8::Uint32::NewFromUnsigned(0x93C1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_4x4x3_OES"), v8::Uint32::NewFromUnsigned(0x93C2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_4x4x4_OES"), v8::Uint32::NewFromUnsigned(0x93C3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_5x4x4_OES"), v8::Uint32::NewFromUnsigned(0x93C4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_5x5x4_OES"), v8::Uint32::NewFromUnsigned(0x93C5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_5x5x5_OES"), v8::Uint32::NewFromUnsigned(0x93C6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_6x5x5_OES"), v8::Uint32::NewFromUnsigned(0x93C7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_6x6x5_OES"), v8::Uint32::NewFromUnsigned(0x93C8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_RGBA_ASTC_6x6x6_OES"), v8::Uint32::NewFromUnsigned(0x93C9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"), v8::Uint32::NewFromUnsigned(0x93D0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"), v8::Uint32::NewFromUnsigned(0x93D1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"), v8::Uint32::NewFromUnsigned(0x93D2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"), v8::Uint32::NewFromUnsigned(0x93D3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"), v8::Uint32::NewFromUnsigned(0x93D4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"), v8::Uint32::NewFromUnsigned(0x93D5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"), v8::Uint32::NewFromUnsigned(0x93D6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"), v8::Uint32::NewFromUnsigned(0x93D7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"), v8::Uint32::NewFromUnsigned(0x93D8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"), v8::Uint32::NewFromUnsigned(0x93D9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"), v8::Uint32::NewFromUnsigned(0x93DA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"), v8::Uint32::NewFromUnsigned(0x93DB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"), v8::Uint32::NewFromUnsigned(0x93DC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"), v8::Uint32::NewFromUnsigned(0x93DD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES"), v8::Uint32::NewFromUnsigned(0x93E0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES"), v8::Uint32::NewFromUnsigned(0x93E1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES"), v8::Uint32::NewFromUnsigned(0x93E2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES"), v8::Uint32::NewFromUnsigned(0x93E3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES"), v8::Uint32::NewFromUnsigned(0x93E4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES"), v8::Uint32::NewFromUnsigned(0x93E5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES"), v8::Uint32::NewFromUnsigned(0x93E6));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES"), v8::Uint32::NewFromUnsigned(0x93E7));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES"), v8::Uint32::NewFromUnsigned(0x93E8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES"), v8::Uint32::NewFromUnsigned(0x93E9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG"), v8::Uint32::NewFromUnsigned(0x93F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG"), v8::Uint32::NewFromUnsigned(0x93F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_EVENT_INTEL"), v8::Uint32::NewFromUnsigned(0x94F0));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL"), v8::Uint32::NewFromUnsigned(0x94F1));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL"), v8::Uint32::NewFromUnsigned(0x94F2));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL"), v8::Uint32::NewFromUnsigned(0x94F3));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_RAW_INTEL"), v8::Uint32::NewFromUnsigned(0x94F4));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL"), v8::Uint32::NewFromUnsigned(0x94F5));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL"), v8::Uint32::NewFromUnsigned(0x94F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL"), v8::Uint32::NewFromUnsigned(0x94F9));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL"), v8::Uint32::NewFromUnsigned(0x94FA));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL"), v8::Uint32::NewFromUnsigned(0x94FB));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL"), v8::Uint32::NewFromUnsigned(0x94FC));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL"), v8::Uint32::NewFromUnsigned(0x94FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL"), v8::Uint32::NewFromUnsigned(0x94FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL"), v8::Uint32::NewFromUnsigned(0x94FF));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL"), v8::Uint32::NewFromUnsigned(0x9500));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RASTER_POSITION_UNCLIPPED_IBM"), v8::Uint32::NewFromUnsigned(0x19262));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CULL_VERTEX_IBM"), v8::Uint32::NewFromUnsigned(103050));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALL_STATIC_DATA_IBM"), v8::Uint32::NewFromUnsigned(103060));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STATIC_VERTEX_ARRAY_IBM"), v8::Uint32::NewFromUnsigned(103061));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_LIST_IBM"), v8::Uint32::NewFromUnsigned(103070));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_LIST_IBM"), v8::Uint32::NewFromUnsigned(103071));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_LIST_IBM"), v8::Uint32::NewFromUnsigned(103072));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_LIST_IBM"), v8::Uint32::NewFromUnsigned(103073));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_LIST_IBM"), v8::Uint32::NewFromUnsigned(103074));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_LIST_IBM"), v8::Uint32::NewFromUnsigned(103075));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_LIST_IBM"), v8::Uint32::NewFromUnsigned(103076));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_LIST_IBM"), v8::Uint32::NewFromUnsigned(103077));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_ARRAY_LIST_STRIDE_IBM"), v8::Uint32::NewFromUnsigned(103080));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NORMAL_ARRAY_LIST_STRIDE_IBM"), v8::Uint32::NewFromUnsigned(103081));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_COLOR_ARRAY_LIST_STRIDE_IBM"), v8::Uint32::NewFromUnsigned(103082));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_INDEX_ARRAY_LIST_STRIDE_IBM"), v8::Uint32::NewFromUnsigned(103083));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM"), v8::Uint32::NewFromUnsigned(103084));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM"), v8::Uint32::NewFromUnsigned(103085));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM"), v8::Uint32::NewFromUnsigned(103086));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM"), v8::Uint32::NewFromUnsigned(103087));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_PREFER_DOUBLEBUFFER_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A1F8));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CONSERVE_MEMORY_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A1FD));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_RECLAIM_MEMORY_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A1FE));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NATIVE_GRAPHICS_HANDLE_PGI"), v8::Uint32::NewFromUnsigned(0x1A202));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A203));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_NATIVE_GRAPHICS_END_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A204));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALWAYS_FAST_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A20C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALWAYS_SOFT_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A20D));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALLOW_DRAW_OBJ_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A20E));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALLOW_DRAW_WIN_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A20F));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALLOW_DRAW_FRG_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A210));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_ALLOW_DRAW_MEM_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A211));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STRICT_DEPTHFUNC_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A216));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STRICT_LIGHTING_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A217));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_STRICT_SCISSOR_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A218));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_FULL_STIPPLE_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A219));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_NEAR_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A220));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_CLIP_FAR_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A221));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_WIDE_LINE_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A222));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_BACK_NORMALS_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A223));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_DATA_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A22A));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_VERTEX_CONSISTENT_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A22B));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MATERIAL_SIDE_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A22C));
		tpl->PrototypeTemplate()->Set(v8::String::NewSymbol("GL_MAX_VERTEX_HINT_PGI"), v8::Uint32::NewFromUnsigned(0x1A22D));

		constructor = v8::Persistent<v8::Function>::New(tpl->GetFunction());
		retTpl = v8::Persistent<v8::ObjectTemplate>::New(v8::ObjectTemplate::New());
		retTpl->SetInternalFieldCount(1);

		target->Set(v8::String::NewSymbol("OpenGL"), constructor);

	}

	static v8::Handle<v8::Value> NewInstance(const v8::Arguments& args) {
		v8::HandleScope scope;

		const unsigned argc = 1;
		v8::Handle<v8::Value> argv[argc] = { args[0] };
		v8::Local<v8::Object> instance = constructor->NewInstance(argc, argv);

		return scope.Close(instance);
	}
private:
	class_OpenGL() {
		OutputDebugString(L"OpenGL()");
	}
	~class_OpenGL() {
		OutputDebugString(L"~OpenGL()");
	}
	static v8::Handle<v8::Value> New(const v8::Arguments& args) {
		v8::HandleScope scope;
		class_OpenGL* obj = new class_OpenGL();
		obj->Wrap(args.This());
		HMODULE modOpenGL32{nullptr};
		BOOL getModStatus = GetModuleHandleEx(GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT, L"OpenGL32", &modOpenGL32);
		if(!obj->methodp_glAccum) { obj->methodp_glAccum = (PFNGLACCUMPROC)wglGetProcAddress("glAccum"); }
		if(!obj->methodp_glAccum) { obj->methodp_glAccum = (PFNGLACCUMPROC)GetProcAddress(modOpenGL32, "glAccum"); }
		if(!obj->methodp_glAccum) { args.This()->Set(v8::String::NewSymbol("glAccum"), v8::Undefined()); }
		if(!obj->methodp_glAccumxOES) { obj->methodp_glAccumxOES = (PFNGLACCUMXOESPROC)wglGetProcAddress("glAccumxOES"); }
		if(!obj->methodp_glAccumxOES) { obj->methodp_glAccumxOES = (PFNGLACCUMXOESPROC)GetProcAddress(modOpenGL32, "glAccumxOES"); }
		if(!obj->methodp_glAccumxOES) { args.This()->Set(v8::String::NewSymbol("glAccumxOES"), v8::Undefined()); }
		if(!obj->methodp_glActiveProgramEXT) { obj->methodp_glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC)wglGetProcAddress("glActiveProgramEXT"); }
		if(!obj->methodp_glActiveProgramEXT) { obj->methodp_glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC)GetProcAddress(modOpenGL32, "glActiveProgramEXT"); }
		if(!obj->methodp_glActiveProgramEXT) { args.This()->Set(v8::String::NewSymbol("glActiveProgramEXT"), v8::Undefined()); }
		if(!obj->methodp_glActiveShaderProgram) { obj->methodp_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)wglGetProcAddress("glActiveShaderProgram"); }
		if(!obj->methodp_glActiveShaderProgram) { obj->methodp_glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)GetProcAddress(modOpenGL32, "glActiveShaderProgram"); }
		if(!obj->methodp_glActiveShaderProgram) { args.This()->Set(v8::String::NewSymbol("glActiveShaderProgram"), v8::Undefined()); }
		if(!obj->methodp_glActiveShaderProgramEXT) { obj->methodp_glActiveShaderProgramEXT = (PFNGLACTIVESHADERPROGRAMEXTPROC)wglGetProcAddress("glActiveShaderProgramEXT"); }
		if(!obj->methodp_glActiveShaderProgramEXT) { obj->methodp_glActiveShaderProgramEXT = (PFNGLACTIVESHADERPROGRAMEXTPROC)GetProcAddress(modOpenGL32, "glActiveShaderProgramEXT"); }
		if(!obj->methodp_glActiveShaderProgramEXT) { args.This()->Set(v8::String::NewSymbol("glActiveShaderProgramEXT"), v8::Undefined()); }
		if(!obj->methodp_glActiveStencilFaceEXT) { obj->methodp_glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)wglGetProcAddress("glActiveStencilFaceEXT"); }
		if(!obj->methodp_glActiveStencilFaceEXT) { obj->methodp_glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)GetProcAddress(modOpenGL32, "glActiveStencilFaceEXT"); }
		if(!obj->methodp_glActiveStencilFaceEXT) { args.This()->Set(v8::String::NewSymbol("glActiveStencilFaceEXT"), v8::Undefined()); }
		if(!obj->methodp_glActiveTexture) { obj->methodp_glActiveTexture = (PFNGLACTIVETEXTUREPROC)wglGetProcAddress("glActiveTexture"); }
		if(!obj->methodp_glActiveTexture) { obj->methodp_glActiveTexture = (PFNGLACTIVETEXTUREPROC)GetProcAddress(modOpenGL32, "glActiveTexture"); }
		if(!obj->methodp_glActiveTexture) { args.This()->Set(v8::String::NewSymbol("glActiveTexture"), v8::Undefined()); }
		if(!obj->methodp_glActiveTextureARB) { obj->methodp_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)wglGetProcAddress("glActiveTextureARB"); }
		if(!obj->methodp_glActiveTextureARB) { obj->methodp_glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)GetProcAddress(modOpenGL32, "glActiveTextureARB"); }
		if(!obj->methodp_glActiveTextureARB) { args.This()->Set(v8::String::NewSymbol("glActiveTextureARB"), v8::Undefined()); }
		if(!obj->methodp_glActiveVaryingNV) { obj->methodp_glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC)wglGetProcAddress("glActiveVaryingNV"); }
		if(!obj->methodp_glActiveVaryingNV) { obj->methodp_glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC)GetProcAddress(modOpenGL32, "glActiveVaryingNV"); }
		if(!obj->methodp_glActiveVaryingNV) { args.This()->Set(v8::String::NewSymbol("glActiveVaryingNV"), v8::Undefined()); }
		if(!obj->methodp_glAlphaFragmentOp1ATI) { obj->methodp_glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC)wglGetProcAddress("glAlphaFragmentOp1ATI"); }
		if(!obj->methodp_glAlphaFragmentOp1ATI) { obj->methodp_glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC)GetProcAddress(modOpenGL32, "glAlphaFragmentOp1ATI"); }
		if(!obj->methodp_glAlphaFragmentOp1ATI) { args.This()->Set(v8::String::NewSymbol("glAlphaFragmentOp1ATI"), v8::Undefined()); }
		if(!obj->methodp_glAlphaFragmentOp2ATI) { obj->methodp_glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC)wglGetProcAddress("glAlphaFragmentOp2ATI"); }
		if(!obj->methodp_glAlphaFragmentOp2ATI) { obj->methodp_glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC)GetProcAddress(modOpenGL32, "glAlphaFragmentOp2ATI"); }
		if(!obj->methodp_glAlphaFragmentOp2ATI) { args.This()->Set(v8::String::NewSymbol("glAlphaFragmentOp2ATI"), v8::Undefined()); }
		if(!obj->methodp_glAlphaFragmentOp3ATI) { obj->methodp_glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC)wglGetProcAddress("glAlphaFragmentOp3ATI"); }
		if(!obj->methodp_glAlphaFragmentOp3ATI) { obj->methodp_glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC)GetProcAddress(modOpenGL32, "glAlphaFragmentOp3ATI"); }
		if(!obj->methodp_glAlphaFragmentOp3ATI) { args.This()->Set(v8::String::NewSymbol("glAlphaFragmentOp3ATI"), v8::Undefined()); }
		if(!obj->methodp_glAlphaFunc) { obj->methodp_glAlphaFunc = (PFNGLALPHAFUNCPROC)wglGetProcAddress("glAlphaFunc"); }
		if(!obj->methodp_glAlphaFunc) { obj->methodp_glAlphaFunc = (PFNGLALPHAFUNCPROC)GetProcAddress(modOpenGL32, "glAlphaFunc"); }
		if(!obj->methodp_glAlphaFunc) { args.This()->Set(v8::String::NewSymbol("glAlphaFunc"), v8::Undefined()); }
		if(!obj->methodp_glAlphaFuncQCOM) { obj->methodp_glAlphaFuncQCOM = (PFNGLALPHAFUNCQCOMPROC)wglGetProcAddress("glAlphaFuncQCOM"); }
		if(!obj->methodp_glAlphaFuncQCOM) { obj->methodp_glAlphaFuncQCOM = (PFNGLALPHAFUNCQCOMPROC)GetProcAddress(modOpenGL32, "glAlphaFuncQCOM"); }
		if(!obj->methodp_glAlphaFuncQCOM) { args.This()->Set(v8::String::NewSymbol("glAlphaFuncQCOM"), v8::Undefined()); }
		if(!obj->methodp_glAlphaFuncx) { obj->methodp_glAlphaFuncx = (PFNGLALPHAFUNCXPROC)wglGetProcAddress("glAlphaFuncx"); }
		if(!obj->methodp_glAlphaFuncx) { obj->methodp_glAlphaFuncx = (PFNGLALPHAFUNCXPROC)GetProcAddress(modOpenGL32, "glAlphaFuncx"); }
		if(!obj->methodp_glAlphaFuncx) { args.This()->Set(v8::String::NewSymbol("glAlphaFuncx"), v8::Undefined()); }
		if(!obj->methodp_glAlphaFuncxOES) { obj->methodp_glAlphaFuncxOES = (PFNGLALPHAFUNCXOESPROC)wglGetProcAddress("glAlphaFuncxOES"); }
		if(!obj->methodp_glAlphaFuncxOES) { obj->methodp_glAlphaFuncxOES = (PFNGLALPHAFUNCXOESPROC)GetProcAddress(modOpenGL32, "glAlphaFuncxOES"); }
		if(!obj->methodp_glAlphaFuncxOES) { args.This()->Set(v8::String::NewSymbol("glAlphaFuncxOES"), v8::Undefined()); }
		if(!obj->methodp_glApplyTextureEXT) { obj->methodp_glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC)wglGetProcAddress("glApplyTextureEXT"); }
		if(!obj->methodp_glApplyTextureEXT) { obj->methodp_glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC)GetProcAddress(modOpenGL32, "glApplyTextureEXT"); }
		if(!obj->methodp_glApplyTextureEXT) { args.This()->Set(v8::String::NewSymbol("glApplyTextureEXT"), v8::Undefined()); }
		if(!obj->methodp_glAreProgramsResidentNV) { obj->methodp_glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)wglGetProcAddress("glAreProgramsResidentNV"); }
		if(!obj->methodp_glAreProgramsResidentNV) { obj->methodp_glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glAreProgramsResidentNV"); }
		if(!obj->methodp_glAreProgramsResidentNV) { args.This()->Set(v8::String::NewSymbol("glAreProgramsResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glAreTexturesResident) { obj->methodp_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC)wglGetProcAddress("glAreTexturesResident"); }
		if(!obj->methodp_glAreTexturesResident) { obj->methodp_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC)GetProcAddress(modOpenGL32, "glAreTexturesResident"); }
		if(!obj->methodp_glAreTexturesResident) { args.This()->Set(v8::String::NewSymbol("glAreTexturesResident"), v8::Undefined()); }
		if(!obj->methodp_glAreTexturesResidentEXT) { obj->methodp_glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)wglGetProcAddress("glAreTexturesResidentEXT"); }
		if(!obj->methodp_glAreTexturesResidentEXT) { obj->methodp_glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)GetProcAddress(modOpenGL32, "glAreTexturesResidentEXT"); }
		if(!obj->methodp_glAreTexturesResidentEXT) { args.This()->Set(v8::String::NewSymbol("glAreTexturesResidentEXT"), v8::Undefined()); }
		if(!obj->methodp_glArrayElement) { obj->methodp_glArrayElement = (PFNGLARRAYELEMENTPROC)wglGetProcAddress("glArrayElement"); }
		if(!obj->methodp_glArrayElement) { obj->methodp_glArrayElement = (PFNGLARRAYELEMENTPROC)GetProcAddress(modOpenGL32, "glArrayElement"); }
		if(!obj->methodp_glArrayElement) { args.This()->Set(v8::String::NewSymbol("glArrayElement"), v8::Undefined()); }
		if(!obj->methodp_glArrayElementEXT) { obj->methodp_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)wglGetProcAddress("glArrayElementEXT"); }
		if(!obj->methodp_glArrayElementEXT) { obj->methodp_glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)GetProcAddress(modOpenGL32, "glArrayElementEXT"); }
		if(!obj->methodp_glArrayElementEXT) { args.This()->Set(v8::String::NewSymbol("glArrayElementEXT"), v8::Undefined()); }
		if(!obj->methodp_glArrayObjectATI) { obj->methodp_glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC)wglGetProcAddress("glArrayObjectATI"); }
		if(!obj->methodp_glArrayObjectATI) { obj->methodp_glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC)GetProcAddress(modOpenGL32, "glArrayObjectATI"); }
		if(!obj->methodp_glArrayObjectATI) { args.This()->Set(v8::String::NewSymbol("glArrayObjectATI"), v8::Undefined()); }
		if(!obj->methodp_glAsyncMarkerSGIX) { obj->methodp_glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC)wglGetProcAddress("glAsyncMarkerSGIX"); }
		if(!obj->methodp_glAsyncMarkerSGIX) { obj->methodp_glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC)GetProcAddress(modOpenGL32, "glAsyncMarkerSGIX"); }
		if(!obj->methodp_glAsyncMarkerSGIX) { args.This()->Set(v8::String::NewSymbol("glAsyncMarkerSGIX"), v8::Undefined()); }
		if(!obj->methodp_glAttachObjectARB) { obj->methodp_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)wglGetProcAddress("glAttachObjectARB"); }
		if(!obj->methodp_glAttachObjectARB) { obj->methodp_glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)GetProcAddress(modOpenGL32, "glAttachObjectARB"); }
		if(!obj->methodp_glAttachObjectARB) { args.This()->Set(v8::String::NewSymbol("glAttachObjectARB"), v8::Undefined()); }
		if(!obj->methodp_glAttachShader) { obj->methodp_glAttachShader = (PFNGLATTACHSHADERPROC)wglGetProcAddress("glAttachShader"); }
		if(!obj->methodp_glAttachShader) { obj->methodp_glAttachShader = (PFNGLATTACHSHADERPROC)GetProcAddress(modOpenGL32, "glAttachShader"); }
		if(!obj->methodp_glAttachShader) { args.This()->Set(v8::String::NewSymbol("glAttachShader"), v8::Undefined()); }
		if(!obj->methodp_glBegin) { obj->methodp_glBegin = (PFNGLBEGINPROC)wglGetProcAddress("glBegin"); }
		if(!obj->methodp_glBegin) { obj->methodp_glBegin = (PFNGLBEGINPROC)GetProcAddress(modOpenGL32, "glBegin"); }
		if(!obj->methodp_glBegin) { args.This()->Set(v8::String::NewSymbol("glBegin"), v8::Undefined()); }
		if(!obj->methodp_glBeginConditionalRender) { obj->methodp_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)wglGetProcAddress("glBeginConditionalRender"); }
		if(!obj->methodp_glBeginConditionalRender) { obj->methodp_glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)GetProcAddress(modOpenGL32, "glBeginConditionalRender"); }
		if(!obj->methodp_glBeginConditionalRender) { args.This()->Set(v8::String::NewSymbol("glBeginConditionalRender"), v8::Undefined()); }
		if(!obj->methodp_glBeginConditionalRenderNV) { obj->methodp_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)wglGetProcAddress("glBeginConditionalRenderNV"); }
		if(!obj->methodp_glBeginConditionalRenderNV) { obj->methodp_glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)GetProcAddress(modOpenGL32, "glBeginConditionalRenderNV"); }
		if(!obj->methodp_glBeginConditionalRenderNV) { args.This()->Set(v8::String::NewSymbol("glBeginConditionalRenderNV"), v8::Undefined()); }
		if(!obj->methodp_glBeginConditionalRenderNVX) { obj->methodp_glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC)wglGetProcAddress("glBeginConditionalRenderNVX"); }
		if(!obj->methodp_glBeginConditionalRenderNVX) { obj->methodp_glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC)GetProcAddress(modOpenGL32, "glBeginConditionalRenderNVX"); }
		if(!obj->methodp_glBeginConditionalRenderNVX) { args.This()->Set(v8::String::NewSymbol("glBeginConditionalRenderNVX"), v8::Undefined()); }
		if(!obj->methodp_glBeginFragmentShaderATI) { obj->methodp_glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC)wglGetProcAddress("glBeginFragmentShaderATI"); }
		if(!obj->methodp_glBeginFragmentShaderATI) { obj->methodp_glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC)GetProcAddress(modOpenGL32, "glBeginFragmentShaderATI"); }
		if(!obj->methodp_glBeginFragmentShaderATI) { args.This()->Set(v8::String::NewSymbol("glBeginFragmentShaderATI"), v8::Undefined()); }
		if(!obj->methodp_glBeginOcclusionQueryNV) { obj->methodp_glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC)wglGetProcAddress("glBeginOcclusionQueryNV"); }
		if(!obj->methodp_glBeginOcclusionQueryNV) { obj->methodp_glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC)GetProcAddress(modOpenGL32, "glBeginOcclusionQueryNV"); }
		if(!obj->methodp_glBeginOcclusionQueryNV) { args.This()->Set(v8::String::NewSymbol("glBeginOcclusionQueryNV"), v8::Undefined()); }
		if(!obj->methodp_glBeginPerfMonitorAMD) { obj->methodp_glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC)wglGetProcAddress("glBeginPerfMonitorAMD"); }
		if(!obj->methodp_glBeginPerfMonitorAMD) { obj->methodp_glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC)GetProcAddress(modOpenGL32, "glBeginPerfMonitorAMD"); }
		if(!obj->methodp_glBeginPerfMonitorAMD) { args.This()->Set(v8::String::NewSymbol("glBeginPerfMonitorAMD"), v8::Undefined()); }
		if(!obj->methodp_glBeginPerfQueryINTEL) { obj->methodp_glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC)wglGetProcAddress("glBeginPerfQueryINTEL"); }
		if(!obj->methodp_glBeginPerfQueryINTEL) { obj->methodp_glBeginPerfQueryINTEL = (PFNGLBEGINPERFQUERYINTELPROC)GetProcAddress(modOpenGL32, "glBeginPerfQueryINTEL"); }
		if(!obj->methodp_glBeginPerfQueryINTEL) { args.This()->Set(v8::String::NewSymbol("glBeginPerfQueryINTEL"), v8::Undefined()); }
		if(!obj->methodp_glBeginQuery) { obj->methodp_glBeginQuery = (PFNGLBEGINQUERYPROC)wglGetProcAddress("glBeginQuery"); }
		if(!obj->methodp_glBeginQuery) { obj->methodp_glBeginQuery = (PFNGLBEGINQUERYPROC)GetProcAddress(modOpenGL32, "glBeginQuery"); }
		if(!obj->methodp_glBeginQuery) { args.This()->Set(v8::String::NewSymbol("glBeginQuery"), v8::Undefined()); }
		if(!obj->methodp_glBeginQueryARB) { obj->methodp_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)wglGetProcAddress("glBeginQueryARB"); }
		if(!obj->methodp_glBeginQueryARB) { obj->methodp_glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)GetProcAddress(modOpenGL32, "glBeginQueryARB"); }
		if(!obj->methodp_glBeginQueryARB) { args.This()->Set(v8::String::NewSymbol("glBeginQueryARB"), v8::Undefined()); }
		if(!obj->methodp_glBeginQueryEXT) { obj->methodp_glBeginQueryEXT = (PFNGLBEGINQUERYEXTPROC)wglGetProcAddress("glBeginQueryEXT"); }
		if(!obj->methodp_glBeginQueryEXT) { obj->methodp_glBeginQueryEXT = (PFNGLBEGINQUERYEXTPROC)GetProcAddress(modOpenGL32, "glBeginQueryEXT"); }
		if(!obj->methodp_glBeginQueryEXT) { args.This()->Set(v8::String::NewSymbol("glBeginQueryEXT"), v8::Undefined()); }
		if(!obj->methodp_glBeginQueryIndexed) { obj->methodp_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)wglGetProcAddress("glBeginQueryIndexed"); }
		if(!obj->methodp_glBeginQueryIndexed) { obj->methodp_glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)GetProcAddress(modOpenGL32, "glBeginQueryIndexed"); }
		if(!obj->methodp_glBeginQueryIndexed) { args.This()->Set(v8::String::NewSymbol("glBeginQueryIndexed"), v8::Undefined()); }
		if(!obj->methodp_glBeginTransformFeedback) { obj->methodp_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)wglGetProcAddress("glBeginTransformFeedback"); }
		if(!obj->methodp_glBeginTransformFeedback) { obj->methodp_glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)GetProcAddress(modOpenGL32, "glBeginTransformFeedback"); }
		if(!obj->methodp_glBeginTransformFeedback) { args.This()->Set(v8::String::NewSymbol("glBeginTransformFeedback"), v8::Undefined()); }
		if(!obj->methodp_glBeginTransformFeedbackEXT) { obj->methodp_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)wglGetProcAddress("glBeginTransformFeedbackEXT"); }
		if(!obj->methodp_glBeginTransformFeedbackEXT) { obj->methodp_glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)GetProcAddress(modOpenGL32, "glBeginTransformFeedbackEXT"); }
		if(!obj->methodp_glBeginTransformFeedbackEXT) { args.This()->Set(v8::String::NewSymbol("glBeginTransformFeedbackEXT"), v8::Undefined()); }
		if(!obj->methodp_glBeginTransformFeedbackNV) { obj->methodp_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)wglGetProcAddress("glBeginTransformFeedbackNV"); }
		if(!obj->methodp_glBeginTransformFeedbackNV) { obj->methodp_glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)GetProcAddress(modOpenGL32, "glBeginTransformFeedbackNV"); }
		if(!obj->methodp_glBeginTransformFeedbackNV) { args.This()->Set(v8::String::NewSymbol("glBeginTransformFeedbackNV"), v8::Undefined()); }
		if(!obj->methodp_glBeginVertexShaderEXT) { obj->methodp_glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC)wglGetProcAddress("glBeginVertexShaderEXT"); }
		if(!obj->methodp_glBeginVertexShaderEXT) { obj->methodp_glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC)GetProcAddress(modOpenGL32, "glBeginVertexShaderEXT"); }
		if(!obj->methodp_glBeginVertexShaderEXT) { args.This()->Set(v8::String::NewSymbol("glBeginVertexShaderEXT"), v8::Undefined()); }
		if(!obj->methodp_glBeginVideoCaptureNV) { obj->methodp_glBeginVideoCaptureNV = (PFNGLBEGINVIDEOCAPTURENVPROC)wglGetProcAddress("glBeginVideoCaptureNV"); }
		if(!obj->methodp_glBeginVideoCaptureNV) { obj->methodp_glBeginVideoCaptureNV = (PFNGLBEGINVIDEOCAPTURENVPROC)GetProcAddress(modOpenGL32, "glBeginVideoCaptureNV"); }
		if(!obj->methodp_glBeginVideoCaptureNV) { args.This()->Set(v8::String::NewSymbol("glBeginVideoCaptureNV"), v8::Undefined()); }
		if(!obj->methodp_glBindAttribLocation) { obj->methodp_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)wglGetProcAddress("glBindAttribLocation"); }
		if(!obj->methodp_glBindAttribLocation) { obj->methodp_glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)GetProcAddress(modOpenGL32, "glBindAttribLocation"); }
		if(!obj->methodp_glBindAttribLocation) { args.This()->Set(v8::String::NewSymbol("glBindAttribLocation"), v8::Undefined()); }
		if(!obj->methodp_glBindAttribLocationARB) { obj->methodp_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)wglGetProcAddress("glBindAttribLocationARB"); }
		if(!obj->methodp_glBindAttribLocationARB) { obj->methodp_glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)GetProcAddress(modOpenGL32, "glBindAttribLocationARB"); }
		if(!obj->methodp_glBindAttribLocationARB) { args.This()->Set(v8::String::NewSymbol("glBindAttribLocationARB"), v8::Undefined()); }
		if(!obj->methodp_glBindBuffer) { obj->methodp_glBindBuffer = (PFNGLBINDBUFFERPROC)wglGetProcAddress("glBindBuffer"); }
		if(!obj->methodp_glBindBuffer) { obj->methodp_glBindBuffer = (PFNGLBINDBUFFERPROC)GetProcAddress(modOpenGL32, "glBindBuffer"); }
		if(!obj->methodp_glBindBuffer) { args.This()->Set(v8::String::NewSymbol("glBindBuffer"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferARB) { obj->methodp_glBindBufferARB = (PFNGLBINDBUFFERARBPROC)wglGetProcAddress("glBindBufferARB"); }
		if(!obj->methodp_glBindBufferARB) { obj->methodp_glBindBufferARB = (PFNGLBINDBUFFERARBPROC)GetProcAddress(modOpenGL32, "glBindBufferARB"); }
		if(!obj->methodp_glBindBufferARB) { args.This()->Set(v8::String::NewSymbol("glBindBufferARB"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferBase) { obj->methodp_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)wglGetProcAddress("glBindBufferBase"); }
		if(!obj->methodp_glBindBufferBase) { obj->methodp_glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)GetProcAddress(modOpenGL32, "glBindBufferBase"); }
		if(!obj->methodp_glBindBufferBase) { args.This()->Set(v8::String::NewSymbol("glBindBufferBase"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferBaseEXT) { obj->methodp_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)wglGetProcAddress("glBindBufferBaseEXT"); }
		if(!obj->methodp_glBindBufferBaseEXT) { obj->methodp_glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)GetProcAddress(modOpenGL32, "glBindBufferBaseEXT"); }
		if(!obj->methodp_glBindBufferBaseEXT) { args.This()->Set(v8::String::NewSymbol("glBindBufferBaseEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferBaseNV) { obj->methodp_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)wglGetProcAddress("glBindBufferBaseNV"); }
		if(!obj->methodp_glBindBufferBaseNV) { obj->methodp_glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)GetProcAddress(modOpenGL32, "glBindBufferBaseNV"); }
		if(!obj->methodp_glBindBufferBaseNV) { args.This()->Set(v8::String::NewSymbol("glBindBufferBaseNV"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferOffsetEXT) { obj->methodp_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)wglGetProcAddress("glBindBufferOffsetEXT"); }
		if(!obj->methodp_glBindBufferOffsetEXT) { obj->methodp_glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)GetProcAddress(modOpenGL32, "glBindBufferOffsetEXT"); }
		if(!obj->methodp_glBindBufferOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glBindBufferOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferOffsetNV) { obj->methodp_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)wglGetProcAddress("glBindBufferOffsetNV"); }
		if(!obj->methodp_glBindBufferOffsetNV) { obj->methodp_glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)GetProcAddress(modOpenGL32, "glBindBufferOffsetNV"); }
		if(!obj->methodp_glBindBufferOffsetNV) { args.This()->Set(v8::String::NewSymbol("glBindBufferOffsetNV"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferRange) { obj->methodp_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)wglGetProcAddress("glBindBufferRange"); }
		if(!obj->methodp_glBindBufferRange) { obj->methodp_glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)GetProcAddress(modOpenGL32, "glBindBufferRange"); }
		if(!obj->methodp_glBindBufferRange) { args.This()->Set(v8::String::NewSymbol("glBindBufferRange"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferRangeEXT) { obj->methodp_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)wglGetProcAddress("glBindBufferRangeEXT"); }
		if(!obj->methodp_glBindBufferRangeEXT) { obj->methodp_glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)GetProcAddress(modOpenGL32, "glBindBufferRangeEXT"); }
		if(!obj->methodp_glBindBufferRangeEXT) { args.This()->Set(v8::String::NewSymbol("glBindBufferRangeEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindBufferRangeNV) { obj->methodp_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)wglGetProcAddress("glBindBufferRangeNV"); }
		if(!obj->methodp_glBindBufferRangeNV) { obj->methodp_glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)GetProcAddress(modOpenGL32, "glBindBufferRangeNV"); }
		if(!obj->methodp_glBindBufferRangeNV) { args.This()->Set(v8::String::NewSymbol("glBindBufferRangeNV"), v8::Undefined()); }
		if(!obj->methodp_glBindBuffersBase) { obj->methodp_glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC)wglGetProcAddress("glBindBuffersBase"); }
		if(!obj->methodp_glBindBuffersBase) { obj->methodp_glBindBuffersBase = (PFNGLBINDBUFFERSBASEPROC)GetProcAddress(modOpenGL32, "glBindBuffersBase"); }
		if(!obj->methodp_glBindBuffersBase) { args.This()->Set(v8::String::NewSymbol("glBindBuffersBase"), v8::Undefined()); }
		if(!obj->methodp_glBindBuffersRange) { obj->methodp_glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC)wglGetProcAddress("glBindBuffersRange"); }
		if(!obj->methodp_glBindBuffersRange) { obj->methodp_glBindBuffersRange = (PFNGLBINDBUFFERSRANGEPROC)GetProcAddress(modOpenGL32, "glBindBuffersRange"); }
		if(!obj->methodp_glBindBuffersRange) { args.This()->Set(v8::String::NewSymbol("glBindBuffersRange"), v8::Undefined()); }
		if(!obj->methodp_glBindFragDataLocation) { obj->methodp_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)wglGetProcAddress("glBindFragDataLocation"); }
		if(!obj->methodp_glBindFragDataLocation) { obj->methodp_glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)GetProcAddress(modOpenGL32, "glBindFragDataLocation"); }
		if(!obj->methodp_glBindFragDataLocation) { args.This()->Set(v8::String::NewSymbol("glBindFragDataLocation"), v8::Undefined()); }
		if(!obj->methodp_glBindFragDataLocationEXT) { obj->methodp_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)wglGetProcAddress("glBindFragDataLocationEXT"); }
		if(!obj->methodp_glBindFragDataLocationEXT) { obj->methodp_glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)GetProcAddress(modOpenGL32, "glBindFragDataLocationEXT"); }
		if(!obj->methodp_glBindFragDataLocationEXT) { args.This()->Set(v8::String::NewSymbol("glBindFragDataLocationEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindFragDataLocationIndexed) { obj->methodp_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)wglGetProcAddress("glBindFragDataLocationIndexed"); }
		if(!obj->methodp_glBindFragDataLocationIndexed) { obj->methodp_glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)GetProcAddress(modOpenGL32, "glBindFragDataLocationIndexed"); }
		if(!obj->methodp_glBindFragDataLocationIndexed) { args.This()->Set(v8::String::NewSymbol("glBindFragDataLocationIndexed"), v8::Undefined()); }
		if(!obj->methodp_glBindFragmentShaderATI) { obj->methodp_glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC)wglGetProcAddress("glBindFragmentShaderATI"); }
		if(!obj->methodp_glBindFragmentShaderATI) { obj->methodp_glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC)GetProcAddress(modOpenGL32, "glBindFragmentShaderATI"); }
		if(!obj->methodp_glBindFragmentShaderATI) { args.This()->Set(v8::String::NewSymbol("glBindFragmentShaderATI"), v8::Undefined()); }
		if(!obj->methodp_glBindFramebuffer) { obj->methodp_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)wglGetProcAddress("glBindFramebuffer"); }
		if(!obj->methodp_glBindFramebuffer) { obj->methodp_glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)GetProcAddress(modOpenGL32, "glBindFramebuffer"); }
		if(!obj->methodp_glBindFramebuffer) { args.This()->Set(v8::String::NewSymbol("glBindFramebuffer"), v8::Undefined()); }
		if(!obj->methodp_glBindFramebufferEXT) { obj->methodp_glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)wglGetProcAddress("glBindFramebufferEXT"); }
		if(!obj->methodp_glBindFramebufferEXT) { obj->methodp_glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glBindFramebufferEXT"); }
		if(!obj->methodp_glBindFramebufferEXT) { args.This()->Set(v8::String::NewSymbol("glBindFramebufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindFramebufferOES) { obj->methodp_glBindFramebufferOES = (PFNGLBINDFRAMEBUFFEROESPROC)wglGetProcAddress("glBindFramebufferOES"); }
		if(!obj->methodp_glBindFramebufferOES) { obj->methodp_glBindFramebufferOES = (PFNGLBINDFRAMEBUFFEROESPROC)GetProcAddress(modOpenGL32, "glBindFramebufferOES"); }
		if(!obj->methodp_glBindFramebufferOES) { args.This()->Set(v8::String::NewSymbol("glBindFramebufferOES"), v8::Undefined()); }
		if(!obj->methodp_glBindImageTexture) { obj->methodp_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)wglGetProcAddress("glBindImageTexture"); }
		if(!obj->methodp_glBindImageTexture) { obj->methodp_glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)GetProcAddress(modOpenGL32, "glBindImageTexture"); }
		if(!obj->methodp_glBindImageTexture) { args.This()->Set(v8::String::NewSymbol("glBindImageTexture"), v8::Undefined()); }
		if(!obj->methodp_glBindImageTextureEXT) { obj->methodp_glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC)wglGetProcAddress("glBindImageTextureEXT"); }
		if(!obj->methodp_glBindImageTextureEXT) { obj->methodp_glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC)GetProcAddress(modOpenGL32, "glBindImageTextureEXT"); }
		if(!obj->methodp_glBindImageTextureEXT) { args.This()->Set(v8::String::NewSymbol("glBindImageTextureEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindImageTextures) { obj->methodp_glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC)wglGetProcAddress("glBindImageTextures"); }
		if(!obj->methodp_glBindImageTextures) { obj->methodp_glBindImageTextures = (PFNGLBINDIMAGETEXTURESPROC)GetProcAddress(modOpenGL32, "glBindImageTextures"); }
		if(!obj->methodp_glBindImageTextures) { args.This()->Set(v8::String::NewSymbol("glBindImageTextures"), v8::Undefined()); }
		if(!obj->methodp_glBindLightParameterEXT) { obj->methodp_glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC)wglGetProcAddress("glBindLightParameterEXT"); }
		if(!obj->methodp_glBindLightParameterEXT) { obj->methodp_glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC)GetProcAddress(modOpenGL32, "glBindLightParameterEXT"); }
		if(!obj->methodp_glBindLightParameterEXT) { args.This()->Set(v8::String::NewSymbol("glBindLightParameterEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindMaterialParameterEXT) { obj->methodp_glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC)wglGetProcAddress("glBindMaterialParameterEXT"); }
		if(!obj->methodp_glBindMaterialParameterEXT) { obj->methodp_glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC)GetProcAddress(modOpenGL32, "glBindMaterialParameterEXT"); }
		if(!obj->methodp_glBindMaterialParameterEXT) { args.This()->Set(v8::String::NewSymbol("glBindMaterialParameterEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindMultiTextureEXT) { obj->methodp_glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC)wglGetProcAddress("glBindMultiTextureEXT"); }
		if(!obj->methodp_glBindMultiTextureEXT) { obj->methodp_glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC)GetProcAddress(modOpenGL32, "glBindMultiTextureEXT"); }
		if(!obj->methodp_glBindMultiTextureEXT) { args.This()->Set(v8::String::NewSymbol("glBindMultiTextureEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindParameterEXT) { obj->methodp_glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC)wglGetProcAddress("glBindParameterEXT"); }
		if(!obj->methodp_glBindParameterEXT) { obj->methodp_glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC)GetProcAddress(modOpenGL32, "glBindParameterEXT"); }
		if(!obj->methodp_glBindParameterEXT) { args.This()->Set(v8::String::NewSymbol("glBindParameterEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindProgramARB) { obj->methodp_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)wglGetProcAddress("glBindProgramARB"); }
		if(!obj->methodp_glBindProgramARB) { obj->methodp_glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)GetProcAddress(modOpenGL32, "glBindProgramARB"); }
		if(!obj->methodp_glBindProgramARB) { args.This()->Set(v8::String::NewSymbol("glBindProgramARB"), v8::Undefined()); }
		if(!obj->methodp_glBindProgramNV) { obj->methodp_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)wglGetProcAddress("glBindProgramNV"); }
		if(!obj->methodp_glBindProgramNV) { obj->methodp_glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)GetProcAddress(modOpenGL32, "glBindProgramNV"); }
		if(!obj->methodp_glBindProgramNV) { args.This()->Set(v8::String::NewSymbol("glBindProgramNV"), v8::Undefined()); }
		if(!obj->methodp_glBindProgramPipeline) { obj->methodp_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)wglGetProcAddress("glBindProgramPipeline"); }
		if(!obj->methodp_glBindProgramPipeline) { obj->methodp_glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)GetProcAddress(modOpenGL32, "glBindProgramPipeline"); }
		if(!obj->methodp_glBindProgramPipeline) { args.This()->Set(v8::String::NewSymbol("glBindProgramPipeline"), v8::Undefined()); }
		if(!obj->methodp_glBindProgramPipelineEXT) { obj->methodp_glBindProgramPipelineEXT = (PFNGLBINDPROGRAMPIPELINEEXTPROC)wglGetProcAddress("glBindProgramPipelineEXT"); }
		if(!obj->methodp_glBindProgramPipelineEXT) { obj->methodp_glBindProgramPipelineEXT = (PFNGLBINDPROGRAMPIPELINEEXTPROC)GetProcAddress(modOpenGL32, "glBindProgramPipelineEXT"); }
		if(!obj->methodp_glBindProgramPipelineEXT) { args.This()->Set(v8::String::NewSymbol("glBindProgramPipelineEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindRenderbuffer) { obj->methodp_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)wglGetProcAddress("glBindRenderbuffer"); }
		if(!obj->methodp_glBindRenderbuffer) { obj->methodp_glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)GetProcAddress(modOpenGL32, "glBindRenderbuffer"); }
		if(!obj->methodp_glBindRenderbuffer) { args.This()->Set(v8::String::NewSymbol("glBindRenderbuffer"), v8::Undefined()); }
		if(!obj->methodp_glBindRenderbufferEXT) { obj->methodp_glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)wglGetProcAddress("glBindRenderbufferEXT"); }
		if(!obj->methodp_glBindRenderbufferEXT) { obj->methodp_glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glBindRenderbufferEXT"); }
		if(!obj->methodp_glBindRenderbufferEXT) { args.This()->Set(v8::String::NewSymbol("glBindRenderbufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindRenderbufferOES) { obj->methodp_glBindRenderbufferOES = (PFNGLBINDRENDERBUFFEROESPROC)wglGetProcAddress("glBindRenderbufferOES"); }
		if(!obj->methodp_glBindRenderbufferOES) { obj->methodp_glBindRenderbufferOES = (PFNGLBINDRENDERBUFFEROESPROC)GetProcAddress(modOpenGL32, "glBindRenderbufferOES"); }
		if(!obj->methodp_glBindRenderbufferOES) { args.This()->Set(v8::String::NewSymbol("glBindRenderbufferOES"), v8::Undefined()); }
		if(!obj->methodp_glBindSampler) { obj->methodp_glBindSampler = (PFNGLBINDSAMPLERPROC)wglGetProcAddress("glBindSampler"); }
		if(!obj->methodp_glBindSampler) { obj->methodp_glBindSampler = (PFNGLBINDSAMPLERPROC)GetProcAddress(modOpenGL32, "glBindSampler"); }
		if(!obj->methodp_glBindSampler) { args.This()->Set(v8::String::NewSymbol("glBindSampler"), v8::Undefined()); }
		if(!obj->methodp_glBindSamplers) { obj->methodp_glBindSamplers = (PFNGLBINDSAMPLERSPROC)wglGetProcAddress("glBindSamplers"); }
		if(!obj->methodp_glBindSamplers) { obj->methodp_glBindSamplers = (PFNGLBINDSAMPLERSPROC)GetProcAddress(modOpenGL32, "glBindSamplers"); }
		if(!obj->methodp_glBindSamplers) { args.This()->Set(v8::String::NewSymbol("glBindSamplers"), v8::Undefined()); }
		if(!obj->methodp_glBindTexGenParameterEXT) { obj->methodp_glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC)wglGetProcAddress("glBindTexGenParameterEXT"); }
		if(!obj->methodp_glBindTexGenParameterEXT) { obj->methodp_glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC)GetProcAddress(modOpenGL32, "glBindTexGenParameterEXT"); }
		if(!obj->methodp_glBindTexGenParameterEXT) { args.This()->Set(v8::String::NewSymbol("glBindTexGenParameterEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindTexture) { obj->methodp_glBindTexture = (PFNGLBINDTEXTUREPROC)wglGetProcAddress("glBindTexture"); }
		if(!obj->methodp_glBindTexture) { obj->methodp_glBindTexture = (PFNGLBINDTEXTUREPROC)GetProcAddress(modOpenGL32, "glBindTexture"); }
		if(!obj->methodp_glBindTexture) { args.This()->Set(v8::String::NewSymbol("glBindTexture"), v8::Undefined()); }
		if(!obj->methodp_glBindTextureEXT) { obj->methodp_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)wglGetProcAddress("glBindTextureEXT"); }
		if(!obj->methodp_glBindTextureEXT) { obj->methodp_glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)GetProcAddress(modOpenGL32, "glBindTextureEXT"); }
		if(!obj->methodp_glBindTextureEXT) { args.This()->Set(v8::String::NewSymbol("glBindTextureEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindTextureUnitParameterEXT) { obj->methodp_glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)wglGetProcAddress("glBindTextureUnitParameterEXT"); }
		if(!obj->methodp_glBindTextureUnitParameterEXT) { obj->methodp_glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)GetProcAddress(modOpenGL32, "glBindTextureUnitParameterEXT"); }
		if(!obj->methodp_glBindTextureUnitParameterEXT) { args.This()->Set(v8::String::NewSymbol("glBindTextureUnitParameterEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindTextures) { obj->methodp_glBindTextures = (PFNGLBINDTEXTURESPROC)wglGetProcAddress("glBindTextures"); }
		if(!obj->methodp_glBindTextures) { obj->methodp_glBindTextures = (PFNGLBINDTEXTURESPROC)GetProcAddress(modOpenGL32, "glBindTextures"); }
		if(!obj->methodp_glBindTextures) { args.This()->Set(v8::String::NewSymbol("glBindTextures"), v8::Undefined()); }
		if(!obj->methodp_glBindTransformFeedback) { obj->methodp_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)wglGetProcAddress("glBindTransformFeedback"); }
		if(!obj->methodp_glBindTransformFeedback) { obj->methodp_glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)GetProcAddress(modOpenGL32, "glBindTransformFeedback"); }
		if(!obj->methodp_glBindTransformFeedback) { args.This()->Set(v8::String::NewSymbol("glBindTransformFeedback"), v8::Undefined()); }
		if(!obj->methodp_glBindTransformFeedbackNV) { obj->methodp_glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC)wglGetProcAddress("glBindTransformFeedbackNV"); }
		if(!obj->methodp_glBindTransformFeedbackNV) { obj->methodp_glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC)GetProcAddress(modOpenGL32, "glBindTransformFeedbackNV"); }
		if(!obj->methodp_glBindTransformFeedbackNV) { args.This()->Set(v8::String::NewSymbol("glBindTransformFeedbackNV"), v8::Undefined()); }
		if(!obj->methodp_glBindVertexArray) { obj->methodp_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)wglGetProcAddress("glBindVertexArray"); }
		if(!obj->methodp_glBindVertexArray) { obj->methodp_glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)GetProcAddress(modOpenGL32, "glBindVertexArray"); }
		if(!obj->methodp_glBindVertexArray) { args.This()->Set(v8::String::NewSymbol("glBindVertexArray"), v8::Undefined()); }
		if(!obj->methodp_glBindVertexArrayAPPLE) { obj->methodp_glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC)wglGetProcAddress("glBindVertexArrayAPPLE"); }
		if(!obj->methodp_glBindVertexArrayAPPLE) { obj->methodp_glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC)GetProcAddress(modOpenGL32, "glBindVertexArrayAPPLE"); }
		if(!obj->methodp_glBindVertexArrayAPPLE) { args.This()->Set(v8::String::NewSymbol("glBindVertexArrayAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glBindVertexArrayOES) { obj->methodp_glBindVertexArrayOES = (PFNGLBINDVERTEXARRAYOESPROC)wglGetProcAddress("glBindVertexArrayOES"); }
		if(!obj->methodp_glBindVertexArrayOES) { obj->methodp_glBindVertexArrayOES = (PFNGLBINDVERTEXARRAYOESPROC)GetProcAddress(modOpenGL32, "glBindVertexArrayOES"); }
		if(!obj->methodp_glBindVertexArrayOES) { args.This()->Set(v8::String::NewSymbol("glBindVertexArrayOES"), v8::Undefined()); }
		if(!obj->methodp_glBindVertexBuffer) { obj->methodp_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)wglGetProcAddress("glBindVertexBuffer"); }
		if(!obj->methodp_glBindVertexBuffer) { obj->methodp_glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)GetProcAddress(modOpenGL32, "glBindVertexBuffer"); }
		if(!obj->methodp_glBindVertexBuffer) { args.This()->Set(v8::String::NewSymbol("glBindVertexBuffer"), v8::Undefined()); }
		if(!obj->methodp_glBindVertexBuffers) { obj->methodp_glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC)wglGetProcAddress("glBindVertexBuffers"); }
		if(!obj->methodp_glBindVertexBuffers) { obj->methodp_glBindVertexBuffers = (PFNGLBINDVERTEXBUFFERSPROC)GetProcAddress(modOpenGL32, "glBindVertexBuffers"); }
		if(!obj->methodp_glBindVertexBuffers) { args.This()->Set(v8::String::NewSymbol("glBindVertexBuffers"), v8::Undefined()); }
		if(!obj->methodp_glBindVertexShaderEXT) { obj->methodp_glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC)wglGetProcAddress("glBindVertexShaderEXT"); }
		if(!obj->methodp_glBindVertexShaderEXT) { obj->methodp_glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC)GetProcAddress(modOpenGL32, "glBindVertexShaderEXT"); }
		if(!obj->methodp_glBindVertexShaderEXT) { args.This()->Set(v8::String::NewSymbol("glBindVertexShaderEXT"), v8::Undefined()); }
		if(!obj->methodp_glBindVideoCaptureStreamBufferNV) { obj->methodp_glBindVideoCaptureStreamBufferNV = (PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)wglGetProcAddress("glBindVideoCaptureStreamBufferNV"); }
		if(!obj->methodp_glBindVideoCaptureStreamBufferNV) { obj->methodp_glBindVideoCaptureStreamBufferNV = (PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)GetProcAddress(modOpenGL32, "glBindVideoCaptureStreamBufferNV"); }
		if(!obj->methodp_glBindVideoCaptureStreamBufferNV) { args.This()->Set(v8::String::NewSymbol("glBindVideoCaptureStreamBufferNV"), v8::Undefined()); }
		if(!obj->methodp_glBindVideoCaptureStreamTextureNV) { obj->methodp_glBindVideoCaptureStreamTextureNV = (PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)wglGetProcAddress("glBindVideoCaptureStreamTextureNV"); }
		if(!obj->methodp_glBindVideoCaptureStreamTextureNV) { obj->methodp_glBindVideoCaptureStreamTextureNV = (PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)GetProcAddress(modOpenGL32, "glBindVideoCaptureStreamTextureNV"); }
		if(!obj->methodp_glBindVideoCaptureStreamTextureNV) { args.This()->Set(v8::String::NewSymbol("glBindVideoCaptureStreamTextureNV"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3bEXT) { obj->methodp_glBinormal3bEXT = (PFNGLBINORMAL3BEXTPROC)wglGetProcAddress("glBinormal3bEXT"); }
		if(!obj->methodp_glBinormal3bEXT) { obj->methodp_glBinormal3bEXT = (PFNGLBINORMAL3BEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3bEXT"); }
		if(!obj->methodp_glBinormal3bEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3bEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3bvEXT) { obj->methodp_glBinormal3bvEXT = (PFNGLBINORMAL3BVEXTPROC)wglGetProcAddress("glBinormal3bvEXT"); }
		if(!obj->methodp_glBinormal3bvEXT) { obj->methodp_glBinormal3bvEXT = (PFNGLBINORMAL3BVEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3bvEXT"); }
		if(!obj->methodp_glBinormal3bvEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3bvEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3dEXT) { obj->methodp_glBinormal3dEXT = (PFNGLBINORMAL3DEXTPROC)wglGetProcAddress("glBinormal3dEXT"); }
		if(!obj->methodp_glBinormal3dEXT) { obj->methodp_glBinormal3dEXT = (PFNGLBINORMAL3DEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3dEXT"); }
		if(!obj->methodp_glBinormal3dEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3dEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3dvEXT) { obj->methodp_glBinormal3dvEXT = (PFNGLBINORMAL3DVEXTPROC)wglGetProcAddress("glBinormal3dvEXT"); }
		if(!obj->methodp_glBinormal3dvEXT) { obj->methodp_glBinormal3dvEXT = (PFNGLBINORMAL3DVEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3dvEXT"); }
		if(!obj->methodp_glBinormal3dvEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3fEXT) { obj->methodp_glBinormal3fEXT = (PFNGLBINORMAL3FEXTPROC)wglGetProcAddress("glBinormal3fEXT"); }
		if(!obj->methodp_glBinormal3fEXT) { obj->methodp_glBinormal3fEXT = (PFNGLBINORMAL3FEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3fEXT"); }
		if(!obj->methodp_glBinormal3fEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3fEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3fvEXT) { obj->methodp_glBinormal3fvEXT = (PFNGLBINORMAL3FVEXTPROC)wglGetProcAddress("glBinormal3fvEXT"); }
		if(!obj->methodp_glBinormal3fvEXT) { obj->methodp_glBinormal3fvEXT = (PFNGLBINORMAL3FVEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3fvEXT"); }
		if(!obj->methodp_glBinormal3fvEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3iEXT) { obj->methodp_glBinormal3iEXT = (PFNGLBINORMAL3IEXTPROC)wglGetProcAddress("glBinormal3iEXT"); }
		if(!obj->methodp_glBinormal3iEXT) { obj->methodp_glBinormal3iEXT = (PFNGLBINORMAL3IEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3iEXT"); }
		if(!obj->methodp_glBinormal3iEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3iEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3ivEXT) { obj->methodp_glBinormal3ivEXT = (PFNGLBINORMAL3IVEXTPROC)wglGetProcAddress("glBinormal3ivEXT"); }
		if(!obj->methodp_glBinormal3ivEXT) { obj->methodp_glBinormal3ivEXT = (PFNGLBINORMAL3IVEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3ivEXT"); }
		if(!obj->methodp_glBinormal3ivEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3sEXT) { obj->methodp_glBinormal3sEXT = (PFNGLBINORMAL3SEXTPROC)wglGetProcAddress("glBinormal3sEXT"); }
		if(!obj->methodp_glBinormal3sEXT) { obj->methodp_glBinormal3sEXT = (PFNGLBINORMAL3SEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3sEXT"); }
		if(!obj->methodp_glBinormal3sEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3sEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormal3svEXT) { obj->methodp_glBinormal3svEXT = (PFNGLBINORMAL3SVEXTPROC)wglGetProcAddress("glBinormal3svEXT"); }
		if(!obj->methodp_glBinormal3svEXT) { obj->methodp_glBinormal3svEXT = (PFNGLBINORMAL3SVEXTPROC)GetProcAddress(modOpenGL32, "glBinormal3svEXT"); }
		if(!obj->methodp_glBinormal3svEXT) { args.This()->Set(v8::String::NewSymbol("glBinormal3svEXT"), v8::Undefined()); }
		if(!obj->methodp_glBinormalPointerEXT) { obj->methodp_glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC)wglGetProcAddress("glBinormalPointerEXT"); }
		if(!obj->methodp_glBinormalPointerEXT) { obj->methodp_glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glBinormalPointerEXT"); }
		if(!obj->methodp_glBinormalPointerEXT) { args.This()->Set(v8::String::NewSymbol("glBinormalPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glBitmap) { obj->methodp_glBitmap = (PFNGLBITMAPPROC)wglGetProcAddress("glBitmap"); }
		if(!obj->methodp_glBitmap) { obj->methodp_glBitmap = (PFNGLBITMAPPROC)GetProcAddress(modOpenGL32, "glBitmap"); }
		if(!obj->methodp_glBitmap) { args.This()->Set(v8::String::NewSymbol("glBitmap"), v8::Undefined()); }
		if(!obj->methodp_glBitmapxOES) { obj->methodp_glBitmapxOES = (PFNGLBITMAPXOESPROC)wglGetProcAddress("glBitmapxOES"); }
		if(!obj->methodp_glBitmapxOES) { obj->methodp_glBitmapxOES = (PFNGLBITMAPXOESPROC)GetProcAddress(modOpenGL32, "glBitmapxOES"); }
		if(!obj->methodp_glBitmapxOES) { args.This()->Set(v8::String::NewSymbol("glBitmapxOES"), v8::Undefined()); }
		if(!obj->methodp_glBlendBarrierNV) { obj->methodp_glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC)wglGetProcAddress("glBlendBarrierNV"); }
		if(!obj->methodp_glBlendBarrierNV) { obj->methodp_glBlendBarrierNV = (PFNGLBLENDBARRIERNVPROC)GetProcAddress(modOpenGL32, "glBlendBarrierNV"); }
		if(!obj->methodp_glBlendBarrierNV) { args.This()->Set(v8::String::NewSymbol("glBlendBarrierNV"), v8::Undefined()); }
		if(!obj->methodp_glBlendBarrierKHR) { obj->methodp_glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC)wglGetProcAddress("glBlendBarrierKHR"); }
		if(!obj->methodp_glBlendBarrierKHR) { obj->methodp_glBlendBarrierKHR = (PFNGLBLENDBARRIERKHRPROC)GetProcAddress(modOpenGL32, "glBlendBarrierKHR"); }
		if(!obj->methodp_glBlendBarrierKHR) { args.This()->Set(v8::String::NewSymbol("glBlendBarrierKHR"), v8::Undefined()); }
		if(!obj->methodp_glBlendColor) { obj->methodp_glBlendColor = (PFNGLBLENDCOLORPROC)wglGetProcAddress("glBlendColor"); }
		if(!obj->methodp_glBlendColor) { obj->methodp_glBlendColor = (PFNGLBLENDCOLORPROC)GetProcAddress(modOpenGL32, "glBlendColor"); }
		if(!obj->methodp_glBlendColor) { args.This()->Set(v8::String::NewSymbol("glBlendColor"), v8::Undefined()); }
		if(!obj->methodp_glBlendColorEXT) { obj->methodp_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)wglGetProcAddress("glBlendColorEXT"); }
		if(!obj->methodp_glBlendColorEXT) { obj->methodp_glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)GetProcAddress(modOpenGL32, "glBlendColorEXT"); }
		if(!obj->methodp_glBlendColorEXT) { args.This()->Set(v8::String::NewSymbol("glBlendColorEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlendColorxOES) { obj->methodp_glBlendColorxOES = (PFNGLBLENDCOLORXOESPROC)wglGetProcAddress("glBlendColorxOES"); }
		if(!obj->methodp_glBlendColorxOES) { obj->methodp_glBlendColorxOES = (PFNGLBLENDCOLORXOESPROC)GetProcAddress(modOpenGL32, "glBlendColorxOES"); }
		if(!obj->methodp_glBlendColorxOES) { args.This()->Set(v8::String::NewSymbol("glBlendColorxOES"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquation) { obj->methodp_glBlendEquation = (PFNGLBLENDEQUATIONPROC)wglGetProcAddress("glBlendEquation"); }
		if(!obj->methodp_glBlendEquation) { obj->methodp_glBlendEquation = (PFNGLBLENDEQUATIONPROC)GetProcAddress(modOpenGL32, "glBlendEquation"); }
		if(!obj->methodp_glBlendEquation) { args.This()->Set(v8::String::NewSymbol("glBlendEquation"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationEXT) { obj->methodp_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)wglGetProcAddress("glBlendEquationEXT"); }
		if(!obj->methodp_glBlendEquationEXT) { obj->methodp_glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)GetProcAddress(modOpenGL32, "glBlendEquationEXT"); }
		if(!obj->methodp_glBlendEquationEXT) { args.This()->Set(v8::String::NewSymbol("glBlendEquationEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationIndexedAMD) { obj->methodp_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)wglGetProcAddress("glBlendEquationIndexedAMD"); }
		if(!obj->methodp_glBlendEquationIndexedAMD) { obj->methodp_glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)GetProcAddress(modOpenGL32, "glBlendEquationIndexedAMD"); }
		if(!obj->methodp_glBlendEquationIndexedAMD) { args.This()->Set(v8::String::NewSymbol("glBlendEquationIndexedAMD"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationOES) { obj->methodp_glBlendEquationOES = (PFNGLBLENDEQUATIONOESPROC)wglGetProcAddress("glBlendEquationOES"); }
		if(!obj->methodp_glBlendEquationOES) { obj->methodp_glBlendEquationOES = (PFNGLBLENDEQUATIONOESPROC)GetProcAddress(modOpenGL32, "glBlendEquationOES"); }
		if(!obj->methodp_glBlendEquationOES) { args.This()->Set(v8::String::NewSymbol("glBlendEquationOES"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationSeparate) { obj->methodp_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)wglGetProcAddress("glBlendEquationSeparate"); }
		if(!obj->methodp_glBlendEquationSeparate) { obj->methodp_glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)GetProcAddress(modOpenGL32, "glBlendEquationSeparate"); }
		if(!obj->methodp_glBlendEquationSeparate) { args.This()->Set(v8::String::NewSymbol("glBlendEquationSeparate"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationSeparateEXT) { obj->methodp_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)wglGetProcAddress("glBlendEquationSeparateEXT"); }
		if(!obj->methodp_glBlendEquationSeparateEXT) { obj->methodp_glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)GetProcAddress(modOpenGL32, "glBlendEquationSeparateEXT"); }
		if(!obj->methodp_glBlendEquationSeparateEXT) { args.This()->Set(v8::String::NewSymbol("glBlendEquationSeparateEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationSeparateIndexedAMD) { obj->methodp_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)wglGetProcAddress("glBlendEquationSeparateIndexedAMD"); }
		if(!obj->methodp_glBlendEquationSeparateIndexedAMD) { obj->methodp_glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)GetProcAddress(modOpenGL32, "glBlendEquationSeparateIndexedAMD"); }
		if(!obj->methodp_glBlendEquationSeparateIndexedAMD) { args.This()->Set(v8::String::NewSymbol("glBlendEquationSeparateIndexedAMD"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationSeparateOES) { obj->methodp_glBlendEquationSeparateOES = (PFNGLBLENDEQUATIONSEPARATEOESPROC)wglGetProcAddress("glBlendEquationSeparateOES"); }
		if(!obj->methodp_glBlendEquationSeparateOES) { obj->methodp_glBlendEquationSeparateOES = (PFNGLBLENDEQUATIONSEPARATEOESPROC)GetProcAddress(modOpenGL32, "glBlendEquationSeparateOES"); }
		if(!obj->methodp_glBlendEquationSeparateOES) { args.This()->Set(v8::String::NewSymbol("glBlendEquationSeparateOES"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationSeparatei) { obj->methodp_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)wglGetProcAddress("glBlendEquationSeparatei"); }
		if(!obj->methodp_glBlendEquationSeparatei) { obj->methodp_glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)GetProcAddress(modOpenGL32, "glBlendEquationSeparatei"); }
		if(!obj->methodp_glBlendEquationSeparatei) { args.This()->Set(v8::String::NewSymbol("glBlendEquationSeparatei"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationSeparateiARB) { obj->methodp_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)wglGetProcAddress("glBlendEquationSeparateiARB"); }
		if(!obj->methodp_glBlendEquationSeparateiARB) { obj->methodp_glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)GetProcAddress(modOpenGL32, "glBlendEquationSeparateiARB"); }
		if(!obj->methodp_glBlendEquationSeparateiARB) { args.This()->Set(v8::String::NewSymbol("glBlendEquationSeparateiARB"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationSeparateiEXT) { obj->methodp_glBlendEquationSeparateiEXT = (PFNGLBLENDEQUATIONSEPARATEIEXTPROC)wglGetProcAddress("glBlendEquationSeparateiEXT"); }
		if(!obj->methodp_glBlendEquationSeparateiEXT) { obj->methodp_glBlendEquationSeparateiEXT = (PFNGLBLENDEQUATIONSEPARATEIEXTPROC)GetProcAddress(modOpenGL32, "glBlendEquationSeparateiEXT"); }
		if(!obj->methodp_glBlendEquationSeparateiEXT) { args.This()->Set(v8::String::NewSymbol("glBlendEquationSeparateiEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationi) { obj->methodp_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)wglGetProcAddress("glBlendEquationi"); }
		if(!obj->methodp_glBlendEquationi) { obj->methodp_glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)GetProcAddress(modOpenGL32, "glBlendEquationi"); }
		if(!obj->methodp_glBlendEquationi) { args.This()->Set(v8::String::NewSymbol("glBlendEquationi"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationiEXT) { obj->methodp_glBlendEquationiEXT = (PFNGLBLENDEQUATIONIEXTPROC)wglGetProcAddress("glBlendEquationiEXT"); }
		if(!obj->methodp_glBlendEquationiEXT) { obj->methodp_glBlendEquationiEXT = (PFNGLBLENDEQUATIONIEXTPROC)GetProcAddress(modOpenGL32, "glBlendEquationiEXT"); }
		if(!obj->methodp_glBlendEquationiEXT) { args.This()->Set(v8::String::NewSymbol("glBlendEquationiEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlendEquationiARB) { obj->methodp_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)wglGetProcAddress("glBlendEquationiARB"); }
		if(!obj->methodp_glBlendEquationiARB) { obj->methodp_glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)GetProcAddress(modOpenGL32, "glBlendEquationiARB"); }
		if(!obj->methodp_glBlendEquationiARB) { args.This()->Set(v8::String::NewSymbol("glBlendEquationiARB"), v8::Undefined()); }
		if(!obj->methodp_glBlendFunc) { obj->methodp_glBlendFunc = (PFNGLBLENDFUNCPROC)wglGetProcAddress("glBlendFunc"); }
		if(!obj->methodp_glBlendFunc) { obj->methodp_glBlendFunc = (PFNGLBLENDFUNCPROC)GetProcAddress(modOpenGL32, "glBlendFunc"); }
		if(!obj->methodp_glBlendFunc) { args.This()->Set(v8::String::NewSymbol("glBlendFunc"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncIndexedAMD) { obj->methodp_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)wglGetProcAddress("glBlendFuncIndexedAMD"); }
		if(!obj->methodp_glBlendFuncIndexedAMD) { obj->methodp_glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)GetProcAddress(modOpenGL32, "glBlendFuncIndexedAMD"); }
		if(!obj->methodp_glBlendFuncIndexedAMD) { args.This()->Set(v8::String::NewSymbol("glBlendFuncIndexedAMD"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncSeparate) { obj->methodp_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)wglGetProcAddress("glBlendFuncSeparate"); }
		if(!obj->methodp_glBlendFuncSeparate) { obj->methodp_glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)GetProcAddress(modOpenGL32, "glBlendFuncSeparate"); }
		if(!obj->methodp_glBlendFuncSeparate) { args.This()->Set(v8::String::NewSymbol("glBlendFuncSeparate"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncSeparateEXT) { obj->methodp_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)wglGetProcAddress("glBlendFuncSeparateEXT"); }
		if(!obj->methodp_glBlendFuncSeparateEXT) { obj->methodp_glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)GetProcAddress(modOpenGL32, "glBlendFuncSeparateEXT"); }
		if(!obj->methodp_glBlendFuncSeparateEXT) { args.This()->Set(v8::String::NewSymbol("glBlendFuncSeparateEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncSeparateINGR) { obj->methodp_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)wglGetProcAddress("glBlendFuncSeparateINGR"); }
		if(!obj->methodp_glBlendFuncSeparateINGR) { obj->methodp_glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)GetProcAddress(modOpenGL32, "glBlendFuncSeparateINGR"); }
		if(!obj->methodp_glBlendFuncSeparateINGR) { args.This()->Set(v8::String::NewSymbol("glBlendFuncSeparateINGR"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncSeparateIndexedAMD) { obj->methodp_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)wglGetProcAddress("glBlendFuncSeparateIndexedAMD"); }
		if(!obj->methodp_glBlendFuncSeparateIndexedAMD) { obj->methodp_glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)GetProcAddress(modOpenGL32, "glBlendFuncSeparateIndexedAMD"); }
		if(!obj->methodp_glBlendFuncSeparateIndexedAMD) { args.This()->Set(v8::String::NewSymbol("glBlendFuncSeparateIndexedAMD"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncSeparateOES) { obj->methodp_glBlendFuncSeparateOES = (PFNGLBLENDFUNCSEPARATEOESPROC)wglGetProcAddress("glBlendFuncSeparateOES"); }
		if(!obj->methodp_glBlendFuncSeparateOES) { obj->methodp_glBlendFuncSeparateOES = (PFNGLBLENDFUNCSEPARATEOESPROC)GetProcAddress(modOpenGL32, "glBlendFuncSeparateOES"); }
		if(!obj->methodp_glBlendFuncSeparateOES) { args.This()->Set(v8::String::NewSymbol("glBlendFuncSeparateOES"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncSeparatei) { obj->methodp_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)wglGetProcAddress("glBlendFuncSeparatei"); }
		if(!obj->methodp_glBlendFuncSeparatei) { obj->methodp_glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)GetProcAddress(modOpenGL32, "glBlendFuncSeparatei"); }
		if(!obj->methodp_glBlendFuncSeparatei) { args.This()->Set(v8::String::NewSymbol("glBlendFuncSeparatei"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncSeparateiARB) { obj->methodp_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)wglGetProcAddress("glBlendFuncSeparateiARB"); }
		if(!obj->methodp_glBlendFuncSeparateiARB) { obj->methodp_glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)GetProcAddress(modOpenGL32, "glBlendFuncSeparateiARB"); }
		if(!obj->methodp_glBlendFuncSeparateiARB) { args.This()->Set(v8::String::NewSymbol("glBlendFuncSeparateiARB"), v8::Undefined()); }
		if(!obj->methodp_glBlendFuncSeparateiEXT) { obj->methodp_glBlendFuncSeparateiEXT = (PFNGLBLENDFUNCSEPARATEIEXTPROC)wglGetProcAddress("glBlendFuncSeparateiEXT"); }
		if(!obj->methodp_glBlendFuncSeparateiEXT) { obj->methodp_glBlendFuncSeparateiEXT = (PFNGLBLENDFUNCSEPARATEIEXTPROC)GetProcAddress(modOpenGL32, "glBlendFuncSeparateiEXT"); }
		if(!obj->methodp_glBlendFuncSeparateiEXT) { args.This()->Set(v8::String::NewSymbol("glBlendFuncSeparateiEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlendFunci) { obj->methodp_glBlendFunci = (PFNGLBLENDFUNCIPROC)wglGetProcAddress("glBlendFunci"); }
		if(!obj->methodp_glBlendFunci) { obj->methodp_glBlendFunci = (PFNGLBLENDFUNCIPROC)GetProcAddress(modOpenGL32, "glBlendFunci"); }
		if(!obj->methodp_glBlendFunci) { args.This()->Set(v8::String::NewSymbol("glBlendFunci"), v8::Undefined()); }
		if(!obj->methodp_glBlendFunciARB) { obj->methodp_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)wglGetProcAddress("glBlendFunciARB"); }
		if(!obj->methodp_glBlendFunciARB) { obj->methodp_glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)GetProcAddress(modOpenGL32, "glBlendFunciARB"); }
		if(!obj->methodp_glBlendFunciARB) { args.This()->Set(v8::String::NewSymbol("glBlendFunciARB"), v8::Undefined()); }
		if(!obj->methodp_glBlendFunciEXT) { obj->methodp_glBlendFunciEXT = (PFNGLBLENDFUNCIEXTPROC)wglGetProcAddress("glBlendFunciEXT"); }
		if(!obj->methodp_glBlendFunciEXT) { obj->methodp_glBlendFunciEXT = (PFNGLBLENDFUNCIEXTPROC)GetProcAddress(modOpenGL32, "glBlendFunciEXT"); }
		if(!obj->methodp_glBlendFunciEXT) { args.This()->Set(v8::String::NewSymbol("glBlendFunciEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlendParameteriNV) { obj->methodp_glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC)wglGetProcAddress("glBlendParameteriNV"); }
		if(!obj->methodp_glBlendParameteriNV) { obj->methodp_glBlendParameteriNV = (PFNGLBLENDPARAMETERINVPROC)GetProcAddress(modOpenGL32, "glBlendParameteriNV"); }
		if(!obj->methodp_glBlendParameteriNV) { args.This()->Set(v8::String::NewSymbol("glBlendParameteriNV"), v8::Undefined()); }
		if(!obj->methodp_glBlitFramebuffer) { obj->methodp_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)wglGetProcAddress("glBlitFramebuffer"); }
		if(!obj->methodp_glBlitFramebuffer) { obj->methodp_glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)GetProcAddress(modOpenGL32, "glBlitFramebuffer"); }
		if(!obj->methodp_glBlitFramebuffer) { args.This()->Set(v8::String::NewSymbol("glBlitFramebuffer"), v8::Undefined()); }
		if(!obj->methodp_glBlitFramebufferANGLE) { obj->methodp_glBlitFramebufferANGLE = (PFNGLBLITFRAMEBUFFERANGLEPROC)wglGetProcAddress("glBlitFramebufferANGLE"); }
		if(!obj->methodp_glBlitFramebufferANGLE) { obj->methodp_glBlitFramebufferANGLE = (PFNGLBLITFRAMEBUFFERANGLEPROC)GetProcAddress(modOpenGL32, "glBlitFramebufferANGLE"); }
		if(!obj->methodp_glBlitFramebufferANGLE) { args.This()->Set(v8::String::NewSymbol("glBlitFramebufferANGLE"), v8::Undefined()); }
		if(!obj->methodp_glBlitFramebufferEXT) { obj->methodp_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)wglGetProcAddress("glBlitFramebufferEXT"); }
		if(!obj->methodp_glBlitFramebufferEXT) { obj->methodp_glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glBlitFramebufferEXT"); }
		if(!obj->methodp_glBlitFramebufferEXT) { args.This()->Set(v8::String::NewSymbol("glBlitFramebufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glBlitFramebufferNV) { obj->methodp_glBlitFramebufferNV = (PFNGLBLITFRAMEBUFFERNVPROC)wglGetProcAddress("glBlitFramebufferNV"); }
		if(!obj->methodp_glBlitFramebufferNV) { obj->methodp_glBlitFramebufferNV = (PFNGLBLITFRAMEBUFFERNVPROC)GetProcAddress(modOpenGL32, "glBlitFramebufferNV"); }
		if(!obj->methodp_glBlitFramebufferNV) { args.This()->Set(v8::String::NewSymbol("glBlitFramebufferNV"), v8::Undefined()); }
		if(!obj->methodp_glBufferAddressRangeNV) { obj->methodp_glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC)wglGetProcAddress("glBufferAddressRangeNV"); }
		if(!obj->methodp_glBufferAddressRangeNV) { obj->methodp_glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC)GetProcAddress(modOpenGL32, "glBufferAddressRangeNV"); }
		if(!obj->methodp_glBufferAddressRangeNV) { args.This()->Set(v8::String::NewSymbol("glBufferAddressRangeNV"), v8::Undefined()); }
		if(!obj->methodp_glBufferData) { obj->methodp_glBufferData = (PFNGLBUFFERDATAPROC)wglGetProcAddress("glBufferData"); }
		if(!obj->methodp_glBufferData) { obj->methodp_glBufferData = (PFNGLBUFFERDATAPROC)GetProcAddress(modOpenGL32, "glBufferData"); }
		if(!obj->methodp_glBufferData) { args.This()->Set(v8::String::NewSymbol("glBufferData"), v8::Undefined()); }
		if(!obj->methodp_glBufferDataARB) { obj->methodp_glBufferDataARB = (PFNGLBUFFERDATAARBPROC)wglGetProcAddress("glBufferDataARB"); }
		if(!obj->methodp_glBufferDataARB) { obj->methodp_glBufferDataARB = (PFNGLBUFFERDATAARBPROC)GetProcAddress(modOpenGL32, "glBufferDataARB"); }
		if(!obj->methodp_glBufferDataARB) { args.This()->Set(v8::String::NewSymbol("glBufferDataARB"), v8::Undefined()); }
		if(!obj->methodp_glBufferParameteriAPPLE) { obj->methodp_glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC)wglGetProcAddress("glBufferParameteriAPPLE"); }
		if(!obj->methodp_glBufferParameteriAPPLE) { obj->methodp_glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC)GetProcAddress(modOpenGL32, "glBufferParameteriAPPLE"); }
		if(!obj->methodp_glBufferParameteriAPPLE) { args.This()->Set(v8::String::NewSymbol("glBufferParameteriAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glBufferStorage) { obj->methodp_glBufferStorage = (PFNGLBUFFERSTORAGEPROC)wglGetProcAddress("glBufferStorage"); }
		if(!obj->methodp_glBufferStorage) { obj->methodp_glBufferStorage = (PFNGLBUFFERSTORAGEPROC)GetProcAddress(modOpenGL32, "glBufferStorage"); }
		if(!obj->methodp_glBufferStorage) { args.This()->Set(v8::String::NewSymbol("glBufferStorage"), v8::Undefined()); }
		if(!obj->methodp_glBufferSubData) { obj->methodp_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)wglGetProcAddress("glBufferSubData"); }
		if(!obj->methodp_glBufferSubData) { obj->methodp_glBufferSubData = (PFNGLBUFFERSUBDATAPROC)GetProcAddress(modOpenGL32, "glBufferSubData"); }
		if(!obj->methodp_glBufferSubData) { args.This()->Set(v8::String::NewSymbol("glBufferSubData"), v8::Undefined()); }
		if(!obj->methodp_glBufferSubDataARB) { obj->methodp_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)wglGetProcAddress("glBufferSubDataARB"); }
		if(!obj->methodp_glBufferSubDataARB) { obj->methodp_glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)GetProcAddress(modOpenGL32, "glBufferSubDataARB"); }
		if(!obj->methodp_glBufferSubDataARB) { args.This()->Set(v8::String::NewSymbol("glBufferSubDataARB"), v8::Undefined()); }
		if(!obj->methodp_glCallList) { obj->methodp_glCallList = (PFNGLCALLLISTPROC)wglGetProcAddress("glCallList"); }
		if(!obj->methodp_glCallList) { obj->methodp_glCallList = (PFNGLCALLLISTPROC)GetProcAddress(modOpenGL32, "glCallList"); }
		if(!obj->methodp_glCallList) { args.This()->Set(v8::String::NewSymbol("glCallList"), v8::Undefined()); }
		if(!obj->methodp_glCallLists) { obj->methodp_glCallLists = (PFNGLCALLLISTSPROC)wglGetProcAddress("glCallLists"); }
		if(!obj->methodp_glCallLists) { obj->methodp_glCallLists = (PFNGLCALLLISTSPROC)GetProcAddress(modOpenGL32, "glCallLists"); }
		if(!obj->methodp_glCallLists) { args.This()->Set(v8::String::NewSymbol("glCallLists"), v8::Undefined()); }
		if(!obj->methodp_glCheckFramebufferStatus) { obj->methodp_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)wglGetProcAddress("glCheckFramebufferStatus"); }
		if(!obj->methodp_glCheckFramebufferStatus) { obj->methodp_glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)GetProcAddress(modOpenGL32, "glCheckFramebufferStatus"); }
		if(!obj->methodp_glCheckFramebufferStatus) { args.This()->Set(v8::String::NewSymbol("glCheckFramebufferStatus"), v8::Undefined()); }
		if(!obj->methodp_glCheckFramebufferStatusEXT) { obj->methodp_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)wglGetProcAddress("glCheckFramebufferStatusEXT"); }
		if(!obj->methodp_glCheckFramebufferStatusEXT) { obj->methodp_glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)GetProcAddress(modOpenGL32, "glCheckFramebufferStatusEXT"); }
		if(!obj->methodp_glCheckFramebufferStatusEXT) { args.This()->Set(v8::String::NewSymbol("glCheckFramebufferStatusEXT"), v8::Undefined()); }
		if(!obj->methodp_glCheckFramebufferStatusOES) { obj->methodp_glCheckFramebufferStatusOES = (PFNGLCHECKFRAMEBUFFERSTATUSOESPROC)wglGetProcAddress("glCheckFramebufferStatusOES"); }
		if(!obj->methodp_glCheckFramebufferStatusOES) { obj->methodp_glCheckFramebufferStatusOES = (PFNGLCHECKFRAMEBUFFERSTATUSOESPROC)GetProcAddress(modOpenGL32, "glCheckFramebufferStatusOES"); }
		if(!obj->methodp_glCheckFramebufferStatusOES) { args.This()->Set(v8::String::NewSymbol("glCheckFramebufferStatusOES"), v8::Undefined()); }
		if(!obj->methodp_glCheckNamedFramebufferStatusEXT) { obj->methodp_glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)wglGetProcAddress("glCheckNamedFramebufferStatusEXT"); }
		if(!obj->methodp_glCheckNamedFramebufferStatusEXT) { obj->methodp_glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)GetProcAddress(modOpenGL32, "glCheckNamedFramebufferStatusEXT"); }
		if(!obj->methodp_glCheckNamedFramebufferStatusEXT) { args.This()->Set(v8::String::NewSymbol("glCheckNamedFramebufferStatusEXT"), v8::Undefined()); }
		if(!obj->methodp_glClampColor) { obj->methodp_glClampColor = (PFNGLCLAMPCOLORPROC)wglGetProcAddress("glClampColor"); }
		if(!obj->methodp_glClampColor) { obj->methodp_glClampColor = (PFNGLCLAMPCOLORPROC)GetProcAddress(modOpenGL32, "glClampColor"); }
		if(!obj->methodp_glClampColor) { args.This()->Set(v8::String::NewSymbol("glClampColor"), v8::Undefined()); }
		if(!obj->methodp_glClampColorARB) { obj->methodp_glClampColorARB = (PFNGLCLAMPCOLORARBPROC)wglGetProcAddress("glClampColorARB"); }
		if(!obj->methodp_glClampColorARB) { obj->methodp_glClampColorARB = (PFNGLCLAMPCOLORARBPROC)GetProcAddress(modOpenGL32, "glClampColorARB"); }
		if(!obj->methodp_glClampColorARB) { args.This()->Set(v8::String::NewSymbol("glClampColorARB"), v8::Undefined()); }
		if(!obj->methodp_glClear) { obj->methodp_glClear = (PFNGLCLEARPROC)wglGetProcAddress("glClear"); }
		if(!obj->methodp_glClear) { obj->methodp_glClear = (PFNGLCLEARPROC)GetProcAddress(modOpenGL32, "glClear"); }
		if(!obj->methodp_glClear) { args.This()->Set(v8::String::NewSymbol("glClear"), v8::Undefined()); }
		if(!obj->methodp_glClearAccum) { obj->methodp_glClearAccum = (PFNGLCLEARACCUMPROC)wglGetProcAddress("glClearAccum"); }
		if(!obj->methodp_glClearAccum) { obj->methodp_glClearAccum = (PFNGLCLEARACCUMPROC)GetProcAddress(modOpenGL32, "glClearAccum"); }
		if(!obj->methodp_glClearAccum) { args.This()->Set(v8::String::NewSymbol("glClearAccum"), v8::Undefined()); }
		if(!obj->methodp_glClearAccumxOES) { obj->methodp_glClearAccumxOES = (PFNGLCLEARACCUMXOESPROC)wglGetProcAddress("glClearAccumxOES"); }
		if(!obj->methodp_glClearAccumxOES) { obj->methodp_glClearAccumxOES = (PFNGLCLEARACCUMXOESPROC)GetProcAddress(modOpenGL32, "glClearAccumxOES"); }
		if(!obj->methodp_glClearAccumxOES) { args.This()->Set(v8::String::NewSymbol("glClearAccumxOES"), v8::Undefined()); }
		if(!obj->methodp_glClearBufferData) { obj->methodp_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)wglGetProcAddress("glClearBufferData"); }
		if(!obj->methodp_glClearBufferData) { obj->methodp_glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)GetProcAddress(modOpenGL32, "glClearBufferData"); }
		if(!obj->methodp_glClearBufferData) { args.This()->Set(v8::String::NewSymbol("glClearBufferData"), v8::Undefined()); }
		if(!obj->methodp_glClearBufferSubData) { obj->methodp_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)wglGetProcAddress("glClearBufferSubData"); }
		if(!obj->methodp_glClearBufferSubData) { obj->methodp_glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)GetProcAddress(modOpenGL32, "glClearBufferSubData"); }
		if(!obj->methodp_glClearBufferSubData) { args.This()->Set(v8::String::NewSymbol("glClearBufferSubData"), v8::Undefined()); }
		if(!obj->methodp_glClearBufferfi) { obj->methodp_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)wglGetProcAddress("glClearBufferfi"); }
		if(!obj->methodp_glClearBufferfi) { obj->methodp_glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)GetProcAddress(modOpenGL32, "glClearBufferfi"); }
		if(!obj->methodp_glClearBufferfi) { args.This()->Set(v8::String::NewSymbol("glClearBufferfi"), v8::Undefined()); }
		if(!obj->methodp_glClearBufferfv) { obj->methodp_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)wglGetProcAddress("glClearBufferfv"); }
		if(!obj->methodp_glClearBufferfv) { obj->methodp_glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)GetProcAddress(modOpenGL32, "glClearBufferfv"); }
		if(!obj->methodp_glClearBufferfv) { args.This()->Set(v8::String::NewSymbol("glClearBufferfv"), v8::Undefined()); }
		if(!obj->methodp_glClearBufferiv) { obj->methodp_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)wglGetProcAddress("glClearBufferiv"); }
		if(!obj->methodp_glClearBufferiv) { obj->methodp_glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)GetProcAddress(modOpenGL32, "glClearBufferiv"); }
		if(!obj->methodp_glClearBufferiv) { args.This()->Set(v8::String::NewSymbol("glClearBufferiv"), v8::Undefined()); }
		if(!obj->methodp_glClearBufferuiv) { obj->methodp_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)wglGetProcAddress("glClearBufferuiv"); }
		if(!obj->methodp_glClearBufferuiv) { obj->methodp_glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)GetProcAddress(modOpenGL32, "glClearBufferuiv"); }
		if(!obj->methodp_glClearBufferuiv) { args.This()->Set(v8::String::NewSymbol("glClearBufferuiv"), v8::Undefined()); }
		if(!obj->methodp_glClearColor) { obj->methodp_glClearColor = (PFNGLCLEARCOLORPROC)wglGetProcAddress("glClearColor"); }
		if(!obj->methodp_glClearColor) { obj->methodp_glClearColor = (PFNGLCLEARCOLORPROC)GetProcAddress(modOpenGL32, "glClearColor"); }
		if(!obj->methodp_glClearColor) { args.This()->Set(v8::String::NewSymbol("glClearColor"), v8::Undefined()); }
		if(!obj->methodp_glClearColorIiEXT) { obj->methodp_glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC)wglGetProcAddress("glClearColorIiEXT"); }
		if(!obj->methodp_glClearColorIiEXT) { obj->methodp_glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC)GetProcAddress(modOpenGL32, "glClearColorIiEXT"); }
		if(!obj->methodp_glClearColorIiEXT) { args.This()->Set(v8::String::NewSymbol("glClearColorIiEXT"), v8::Undefined()); }
		if(!obj->methodp_glClearColorIuiEXT) { obj->methodp_glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC)wglGetProcAddress("glClearColorIuiEXT"); }
		if(!obj->methodp_glClearColorIuiEXT) { obj->methodp_glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC)GetProcAddress(modOpenGL32, "glClearColorIuiEXT"); }
		if(!obj->methodp_glClearColorIuiEXT) { args.This()->Set(v8::String::NewSymbol("glClearColorIuiEXT"), v8::Undefined()); }
		if(!obj->methodp_glClearColorx) { obj->methodp_glClearColorx = (PFNGLCLEARCOLORXPROC)wglGetProcAddress("glClearColorx"); }
		if(!obj->methodp_glClearColorx) { obj->methodp_glClearColorx = (PFNGLCLEARCOLORXPROC)GetProcAddress(modOpenGL32, "glClearColorx"); }
		if(!obj->methodp_glClearColorx) { args.This()->Set(v8::String::NewSymbol("glClearColorx"), v8::Undefined()); }
		if(!obj->methodp_glClearColorxOES) { obj->methodp_glClearColorxOES = (PFNGLCLEARCOLORXOESPROC)wglGetProcAddress("glClearColorxOES"); }
		if(!obj->methodp_glClearColorxOES) { obj->methodp_glClearColorxOES = (PFNGLCLEARCOLORXOESPROC)GetProcAddress(modOpenGL32, "glClearColorxOES"); }
		if(!obj->methodp_glClearColorxOES) { args.This()->Set(v8::String::NewSymbol("glClearColorxOES"), v8::Undefined()); }
		if(!obj->methodp_glClearDepth) { obj->methodp_glClearDepth = (PFNGLCLEARDEPTHPROC)wglGetProcAddress("glClearDepth"); }
		if(!obj->methodp_glClearDepth) { obj->methodp_glClearDepth = (PFNGLCLEARDEPTHPROC)GetProcAddress(modOpenGL32, "glClearDepth"); }
		if(!obj->methodp_glClearDepth) { args.This()->Set(v8::String::NewSymbol("glClearDepth"), v8::Undefined()); }
		if(!obj->methodp_glClearDepthdNV) { obj->methodp_glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC)wglGetProcAddress("glClearDepthdNV"); }
		if(!obj->methodp_glClearDepthdNV) { obj->methodp_glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC)GetProcAddress(modOpenGL32, "glClearDepthdNV"); }
		if(!obj->methodp_glClearDepthdNV) { args.This()->Set(v8::String::NewSymbol("glClearDepthdNV"), v8::Undefined()); }
		if(!obj->methodp_glClearDepthf) { obj->methodp_glClearDepthf = (PFNGLCLEARDEPTHFPROC)wglGetProcAddress("glClearDepthf"); }
		if(!obj->methodp_glClearDepthf) { obj->methodp_glClearDepthf = (PFNGLCLEARDEPTHFPROC)GetProcAddress(modOpenGL32, "glClearDepthf"); }
		if(!obj->methodp_glClearDepthf) { args.This()->Set(v8::String::NewSymbol("glClearDepthf"), v8::Undefined()); }
		if(!obj->methodp_glClearDepthfOES) { obj->methodp_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)wglGetProcAddress("glClearDepthfOES"); }
		if(!obj->methodp_glClearDepthfOES) { obj->methodp_glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)GetProcAddress(modOpenGL32, "glClearDepthfOES"); }
		if(!obj->methodp_glClearDepthfOES) { args.This()->Set(v8::String::NewSymbol("glClearDepthfOES"), v8::Undefined()); }
		if(!obj->methodp_glClearDepthx) { obj->methodp_glClearDepthx = (PFNGLCLEARDEPTHXPROC)wglGetProcAddress("glClearDepthx"); }
		if(!obj->methodp_glClearDepthx) { obj->methodp_glClearDepthx = (PFNGLCLEARDEPTHXPROC)GetProcAddress(modOpenGL32, "glClearDepthx"); }
		if(!obj->methodp_glClearDepthx) { args.This()->Set(v8::String::NewSymbol("glClearDepthx"), v8::Undefined()); }
		if(!obj->methodp_glClearDepthxOES) { obj->methodp_glClearDepthxOES = (PFNGLCLEARDEPTHXOESPROC)wglGetProcAddress("glClearDepthxOES"); }
		if(!obj->methodp_glClearDepthxOES) { obj->methodp_glClearDepthxOES = (PFNGLCLEARDEPTHXOESPROC)GetProcAddress(modOpenGL32, "glClearDepthxOES"); }
		if(!obj->methodp_glClearDepthxOES) { args.This()->Set(v8::String::NewSymbol("glClearDepthxOES"), v8::Undefined()); }
		if(!obj->methodp_glClearIndex) { obj->methodp_glClearIndex = (PFNGLCLEARINDEXPROC)wglGetProcAddress("glClearIndex"); }
		if(!obj->methodp_glClearIndex) { obj->methodp_glClearIndex = (PFNGLCLEARINDEXPROC)GetProcAddress(modOpenGL32, "glClearIndex"); }
		if(!obj->methodp_glClearIndex) { args.This()->Set(v8::String::NewSymbol("glClearIndex"), v8::Undefined()); }
		if(!obj->methodp_glClearNamedBufferDataEXT) { obj->methodp_glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)wglGetProcAddress("glClearNamedBufferDataEXT"); }
		if(!obj->methodp_glClearNamedBufferDataEXT) { obj->methodp_glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)GetProcAddress(modOpenGL32, "glClearNamedBufferDataEXT"); }
		if(!obj->methodp_glClearNamedBufferDataEXT) { args.This()->Set(v8::String::NewSymbol("glClearNamedBufferDataEXT"), v8::Undefined()); }
		if(!obj->methodp_glClearNamedBufferSubDataEXT) { obj->methodp_glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)wglGetProcAddress("glClearNamedBufferSubDataEXT"); }
		if(!obj->methodp_glClearNamedBufferSubDataEXT) { obj->methodp_glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)GetProcAddress(modOpenGL32, "glClearNamedBufferSubDataEXT"); }
		if(!obj->methodp_glClearNamedBufferSubDataEXT) { args.This()->Set(v8::String::NewSymbol("glClearNamedBufferSubDataEXT"), v8::Undefined()); }
		if(!obj->methodp_glClearStencil) { obj->methodp_glClearStencil = (PFNGLCLEARSTENCILPROC)wglGetProcAddress("glClearStencil"); }
		if(!obj->methodp_glClearStencil) { obj->methodp_glClearStencil = (PFNGLCLEARSTENCILPROC)GetProcAddress(modOpenGL32, "glClearStencil"); }
		if(!obj->methodp_glClearStencil) { args.This()->Set(v8::String::NewSymbol("glClearStencil"), v8::Undefined()); }
		if(!obj->methodp_glClearTexImage) { obj->methodp_glClearTexImage = (PFNGLCLEARTEXIMAGEPROC)wglGetProcAddress("glClearTexImage"); }
		if(!obj->methodp_glClearTexImage) { obj->methodp_glClearTexImage = (PFNGLCLEARTEXIMAGEPROC)GetProcAddress(modOpenGL32, "glClearTexImage"); }
		if(!obj->methodp_glClearTexImage) { args.This()->Set(v8::String::NewSymbol("glClearTexImage"), v8::Undefined()); }
		if(!obj->methodp_glClearTexSubImage) { obj->methodp_glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC)wglGetProcAddress("glClearTexSubImage"); }
		if(!obj->methodp_glClearTexSubImage) { obj->methodp_glClearTexSubImage = (PFNGLCLEARTEXSUBIMAGEPROC)GetProcAddress(modOpenGL32, "glClearTexSubImage"); }
		if(!obj->methodp_glClearTexSubImage) { args.This()->Set(v8::String::NewSymbol("glClearTexSubImage"), v8::Undefined()); }
		if(!obj->methodp_glClientActiveTexture) { obj->methodp_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)wglGetProcAddress("glClientActiveTexture"); }
		if(!obj->methodp_glClientActiveTexture) { obj->methodp_glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)GetProcAddress(modOpenGL32, "glClientActiveTexture"); }
		if(!obj->methodp_glClientActiveTexture) { args.This()->Set(v8::String::NewSymbol("glClientActiveTexture"), v8::Undefined()); }
		if(!obj->methodp_glClientActiveTextureARB) { obj->methodp_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)wglGetProcAddress("glClientActiveTextureARB"); }
		if(!obj->methodp_glClientActiveTextureARB) { obj->methodp_glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)GetProcAddress(modOpenGL32, "glClientActiveTextureARB"); }
		if(!obj->methodp_glClientActiveTextureARB) { args.This()->Set(v8::String::NewSymbol("glClientActiveTextureARB"), v8::Undefined()); }
		if(!obj->methodp_glClientActiveVertexStreamATI) { obj->methodp_glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)wglGetProcAddress("glClientActiveVertexStreamATI"); }
		if(!obj->methodp_glClientActiveVertexStreamATI) { obj->methodp_glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)GetProcAddress(modOpenGL32, "glClientActiveVertexStreamATI"); }
		if(!obj->methodp_glClientActiveVertexStreamATI) { args.This()->Set(v8::String::NewSymbol("glClientActiveVertexStreamATI"), v8::Undefined()); }
		if(!obj->methodp_glClientAttribDefaultEXT) { obj->methodp_glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC)wglGetProcAddress("glClientAttribDefaultEXT"); }
		if(!obj->methodp_glClientAttribDefaultEXT) { obj->methodp_glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC)GetProcAddress(modOpenGL32, "glClientAttribDefaultEXT"); }
		if(!obj->methodp_glClientAttribDefaultEXT) { args.This()->Set(v8::String::NewSymbol("glClientAttribDefaultEXT"), v8::Undefined()); }
		if(!obj->methodp_glClientWaitSync) { obj->methodp_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)wglGetProcAddress("glClientWaitSync"); }
		if(!obj->methodp_glClientWaitSync) { obj->methodp_glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)GetProcAddress(modOpenGL32, "glClientWaitSync"); }
		if(!obj->methodp_glClientWaitSync) { args.This()->Set(v8::String::NewSymbol("glClientWaitSync"), v8::Undefined()); }
		if(!obj->methodp_glClientWaitSyncAPPLE) { obj->methodp_glClientWaitSyncAPPLE = (PFNGLCLIENTWAITSYNCAPPLEPROC)wglGetProcAddress("glClientWaitSyncAPPLE"); }
		if(!obj->methodp_glClientWaitSyncAPPLE) { obj->methodp_glClientWaitSyncAPPLE = (PFNGLCLIENTWAITSYNCAPPLEPROC)GetProcAddress(modOpenGL32, "glClientWaitSyncAPPLE"); }
		if(!obj->methodp_glClientWaitSyncAPPLE) { args.This()->Set(v8::String::NewSymbol("glClientWaitSyncAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glClipPlane) { obj->methodp_glClipPlane = (PFNGLCLIPPLANEPROC)wglGetProcAddress("glClipPlane"); }
		if(!obj->methodp_glClipPlane) { obj->methodp_glClipPlane = (PFNGLCLIPPLANEPROC)GetProcAddress(modOpenGL32, "glClipPlane"); }
		if(!obj->methodp_glClipPlane) { args.This()->Set(v8::String::NewSymbol("glClipPlane"), v8::Undefined()); }
		if(!obj->methodp_glClipPlanef) { obj->methodp_glClipPlanef = (PFNGLCLIPPLANEFPROC)wglGetProcAddress("glClipPlanef"); }
		if(!obj->methodp_glClipPlanef) { obj->methodp_glClipPlanef = (PFNGLCLIPPLANEFPROC)GetProcAddress(modOpenGL32, "glClipPlanef"); }
		if(!obj->methodp_glClipPlanef) { args.This()->Set(v8::String::NewSymbol("glClipPlanef"), v8::Undefined()); }
		if(!obj->methodp_glClipPlanefIMG) { obj->methodp_glClipPlanefIMG = (PFNGLCLIPPLANEFIMGPROC)wglGetProcAddress("glClipPlanefIMG"); }
		if(!obj->methodp_glClipPlanefIMG) { obj->methodp_glClipPlanefIMG = (PFNGLCLIPPLANEFIMGPROC)GetProcAddress(modOpenGL32, "glClipPlanefIMG"); }
		if(!obj->methodp_glClipPlanefIMG) { args.This()->Set(v8::String::NewSymbol("glClipPlanefIMG"), v8::Undefined()); }
		if(!obj->methodp_glClipPlanefOES) { obj->methodp_glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC)wglGetProcAddress("glClipPlanefOES"); }
		if(!obj->methodp_glClipPlanefOES) { obj->methodp_glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC)GetProcAddress(modOpenGL32, "glClipPlanefOES"); }
		if(!obj->methodp_glClipPlanefOES) { args.This()->Set(v8::String::NewSymbol("glClipPlanefOES"), v8::Undefined()); }
		if(!obj->methodp_glClipPlanex) { obj->methodp_glClipPlanex = (PFNGLCLIPPLANEXPROC)wglGetProcAddress("glClipPlanex"); }
		if(!obj->methodp_glClipPlanex) { obj->methodp_glClipPlanex = (PFNGLCLIPPLANEXPROC)GetProcAddress(modOpenGL32, "glClipPlanex"); }
		if(!obj->methodp_glClipPlanex) { args.This()->Set(v8::String::NewSymbol("glClipPlanex"), v8::Undefined()); }
		if(!obj->methodp_glClipPlanexIMG) { obj->methodp_glClipPlanexIMG = (PFNGLCLIPPLANEXIMGPROC)wglGetProcAddress("glClipPlanexIMG"); }
		if(!obj->methodp_glClipPlanexIMG) { obj->methodp_glClipPlanexIMG = (PFNGLCLIPPLANEXIMGPROC)GetProcAddress(modOpenGL32, "glClipPlanexIMG"); }
		if(!obj->methodp_glClipPlanexIMG) { args.This()->Set(v8::String::NewSymbol("glClipPlanexIMG"), v8::Undefined()); }
		if(!obj->methodp_glClipPlanexOES) { obj->methodp_glClipPlanexOES = (PFNGLCLIPPLANEXOESPROC)wglGetProcAddress("glClipPlanexOES"); }
		if(!obj->methodp_glClipPlanexOES) { obj->methodp_glClipPlanexOES = (PFNGLCLIPPLANEXOESPROC)GetProcAddress(modOpenGL32, "glClipPlanexOES"); }
		if(!obj->methodp_glClipPlanexOES) { args.This()->Set(v8::String::NewSymbol("glClipPlanexOES"), v8::Undefined()); }
		if(!obj->methodp_glColor3b) { obj->methodp_glColor3b = (PFNGLCOLOR3BPROC)wglGetProcAddress("glColor3b"); }
		if(!obj->methodp_glColor3b) { obj->methodp_glColor3b = (PFNGLCOLOR3BPROC)GetProcAddress(modOpenGL32, "glColor3b"); }
		if(!obj->methodp_glColor3b) { args.This()->Set(v8::String::NewSymbol("glColor3b"), v8::Undefined()); }
		if(!obj->methodp_glColor3bv) { obj->methodp_glColor3bv = (PFNGLCOLOR3BVPROC)wglGetProcAddress("glColor3bv"); }
		if(!obj->methodp_glColor3bv) { obj->methodp_glColor3bv = (PFNGLCOLOR3BVPROC)GetProcAddress(modOpenGL32, "glColor3bv"); }
		if(!obj->methodp_glColor3bv) { args.This()->Set(v8::String::NewSymbol("glColor3bv"), v8::Undefined()); }
		if(!obj->methodp_glColor3d) { obj->methodp_glColor3d = (PFNGLCOLOR3DPROC)wglGetProcAddress("glColor3d"); }
		if(!obj->methodp_glColor3d) { obj->methodp_glColor3d = (PFNGLCOLOR3DPROC)GetProcAddress(modOpenGL32, "glColor3d"); }
		if(!obj->methodp_glColor3d) { args.This()->Set(v8::String::NewSymbol("glColor3d"), v8::Undefined()); }
		if(!obj->methodp_glColor3dv) { obj->methodp_glColor3dv = (PFNGLCOLOR3DVPROC)wglGetProcAddress("glColor3dv"); }
		if(!obj->methodp_glColor3dv) { obj->methodp_glColor3dv = (PFNGLCOLOR3DVPROC)GetProcAddress(modOpenGL32, "glColor3dv"); }
		if(!obj->methodp_glColor3dv) { args.This()->Set(v8::String::NewSymbol("glColor3dv"), v8::Undefined()); }
		if(!obj->methodp_glColor3f) { obj->methodp_glColor3f = (PFNGLCOLOR3FPROC)wglGetProcAddress("glColor3f"); }
		if(!obj->methodp_glColor3f) { obj->methodp_glColor3f = (PFNGLCOLOR3FPROC)GetProcAddress(modOpenGL32, "glColor3f"); }
		if(!obj->methodp_glColor3f) { args.This()->Set(v8::String::NewSymbol("glColor3f"), v8::Undefined()); }
		if(!obj->methodp_glColor3fVertex3fSUN) { obj->methodp_glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC)wglGetProcAddress("glColor3fVertex3fSUN"); }
		if(!obj->methodp_glColor3fVertex3fSUN) { obj->methodp_glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glColor3fVertex3fSUN"); }
		if(!obj->methodp_glColor3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glColor3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glColor3fVertex3fvSUN) { obj->methodp_glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC)wglGetProcAddress("glColor3fVertex3fvSUN"); }
		if(!obj->methodp_glColor3fVertex3fvSUN) { obj->methodp_glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glColor3fVertex3fvSUN"); }
		if(!obj->methodp_glColor3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glColor3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glColor3fv) { obj->methodp_glColor3fv = (PFNGLCOLOR3FVPROC)wglGetProcAddress("glColor3fv"); }
		if(!obj->methodp_glColor3fv) { obj->methodp_glColor3fv = (PFNGLCOLOR3FVPROC)GetProcAddress(modOpenGL32, "glColor3fv"); }
		if(!obj->methodp_glColor3fv) { args.This()->Set(v8::String::NewSymbol("glColor3fv"), v8::Undefined()); }
		if(!obj->methodp_glColor3hNV) { obj->methodp_glColor3hNV = (PFNGLCOLOR3HNVPROC)wglGetProcAddress("glColor3hNV"); }
		if(!obj->methodp_glColor3hNV) { obj->methodp_glColor3hNV = (PFNGLCOLOR3HNVPROC)GetProcAddress(modOpenGL32, "glColor3hNV"); }
		if(!obj->methodp_glColor3hNV) { args.This()->Set(v8::String::NewSymbol("glColor3hNV"), v8::Undefined()); }
		if(!obj->methodp_glColor3hvNV) { obj->methodp_glColor3hvNV = (PFNGLCOLOR3HVNVPROC)wglGetProcAddress("glColor3hvNV"); }
		if(!obj->methodp_glColor3hvNV) { obj->methodp_glColor3hvNV = (PFNGLCOLOR3HVNVPROC)GetProcAddress(modOpenGL32, "glColor3hvNV"); }
		if(!obj->methodp_glColor3hvNV) { args.This()->Set(v8::String::NewSymbol("glColor3hvNV"), v8::Undefined()); }
		if(!obj->methodp_glColor3i) { obj->methodp_glColor3i = (PFNGLCOLOR3IPROC)wglGetProcAddress("glColor3i"); }
		if(!obj->methodp_glColor3i) { obj->methodp_glColor3i = (PFNGLCOLOR3IPROC)GetProcAddress(modOpenGL32, "glColor3i"); }
		if(!obj->methodp_glColor3i) { args.This()->Set(v8::String::NewSymbol("glColor3i"), v8::Undefined()); }
		if(!obj->methodp_glColor3iv) { obj->methodp_glColor3iv = (PFNGLCOLOR3IVPROC)wglGetProcAddress("glColor3iv"); }
		if(!obj->methodp_glColor3iv) { obj->methodp_glColor3iv = (PFNGLCOLOR3IVPROC)GetProcAddress(modOpenGL32, "glColor3iv"); }
		if(!obj->methodp_glColor3iv) { args.This()->Set(v8::String::NewSymbol("glColor3iv"), v8::Undefined()); }
		if(!obj->methodp_glColor3s) { obj->methodp_glColor3s = (PFNGLCOLOR3SPROC)wglGetProcAddress("glColor3s"); }
		if(!obj->methodp_glColor3s) { obj->methodp_glColor3s = (PFNGLCOLOR3SPROC)GetProcAddress(modOpenGL32, "glColor3s"); }
		if(!obj->methodp_glColor3s) { args.This()->Set(v8::String::NewSymbol("glColor3s"), v8::Undefined()); }
		if(!obj->methodp_glColor3sv) { obj->methodp_glColor3sv = (PFNGLCOLOR3SVPROC)wglGetProcAddress("glColor3sv"); }
		if(!obj->methodp_glColor3sv) { obj->methodp_glColor3sv = (PFNGLCOLOR3SVPROC)GetProcAddress(modOpenGL32, "glColor3sv"); }
		if(!obj->methodp_glColor3sv) { args.This()->Set(v8::String::NewSymbol("glColor3sv"), v8::Undefined()); }
		if(!obj->methodp_glColor3ub) { obj->methodp_glColor3ub = (PFNGLCOLOR3UBPROC)wglGetProcAddress("glColor3ub"); }
		if(!obj->methodp_glColor3ub) { obj->methodp_glColor3ub = (PFNGLCOLOR3UBPROC)GetProcAddress(modOpenGL32, "glColor3ub"); }
		if(!obj->methodp_glColor3ub) { args.This()->Set(v8::String::NewSymbol("glColor3ub"), v8::Undefined()); }
		if(!obj->methodp_glColor3ubv) { obj->methodp_glColor3ubv = (PFNGLCOLOR3UBVPROC)wglGetProcAddress("glColor3ubv"); }
		if(!obj->methodp_glColor3ubv) { obj->methodp_glColor3ubv = (PFNGLCOLOR3UBVPROC)GetProcAddress(modOpenGL32, "glColor3ubv"); }
		if(!obj->methodp_glColor3ubv) { args.This()->Set(v8::String::NewSymbol("glColor3ubv"), v8::Undefined()); }
		if(!obj->methodp_glColor3ui) { obj->methodp_glColor3ui = (PFNGLCOLOR3UIPROC)wglGetProcAddress("glColor3ui"); }
		if(!obj->methodp_glColor3ui) { obj->methodp_glColor3ui = (PFNGLCOLOR3UIPROC)GetProcAddress(modOpenGL32, "glColor3ui"); }
		if(!obj->methodp_glColor3ui) { args.This()->Set(v8::String::NewSymbol("glColor3ui"), v8::Undefined()); }
		if(!obj->methodp_glColor3uiv) { obj->methodp_glColor3uiv = (PFNGLCOLOR3UIVPROC)wglGetProcAddress("glColor3uiv"); }
		if(!obj->methodp_glColor3uiv) { obj->methodp_glColor3uiv = (PFNGLCOLOR3UIVPROC)GetProcAddress(modOpenGL32, "glColor3uiv"); }
		if(!obj->methodp_glColor3uiv) { args.This()->Set(v8::String::NewSymbol("glColor3uiv"), v8::Undefined()); }
		if(!obj->methodp_glColor3us) { obj->methodp_glColor3us = (PFNGLCOLOR3USPROC)wglGetProcAddress("glColor3us"); }
		if(!obj->methodp_glColor3us) { obj->methodp_glColor3us = (PFNGLCOLOR3USPROC)GetProcAddress(modOpenGL32, "glColor3us"); }
		if(!obj->methodp_glColor3us) { args.This()->Set(v8::String::NewSymbol("glColor3us"), v8::Undefined()); }
		if(!obj->methodp_glColor3usv) { obj->methodp_glColor3usv = (PFNGLCOLOR3USVPROC)wglGetProcAddress("glColor3usv"); }
		if(!obj->methodp_glColor3usv) { obj->methodp_glColor3usv = (PFNGLCOLOR3USVPROC)GetProcAddress(modOpenGL32, "glColor3usv"); }
		if(!obj->methodp_glColor3usv) { args.This()->Set(v8::String::NewSymbol("glColor3usv"), v8::Undefined()); }
		if(!obj->methodp_glColor3xOES) { obj->methodp_glColor3xOES = (PFNGLCOLOR3XOESPROC)wglGetProcAddress("glColor3xOES"); }
		if(!obj->methodp_glColor3xOES) { obj->methodp_glColor3xOES = (PFNGLCOLOR3XOESPROC)GetProcAddress(modOpenGL32, "glColor3xOES"); }
		if(!obj->methodp_glColor3xOES) { args.This()->Set(v8::String::NewSymbol("glColor3xOES"), v8::Undefined()); }
		if(!obj->methodp_glColor3xvOES) { obj->methodp_glColor3xvOES = (PFNGLCOLOR3XVOESPROC)wglGetProcAddress("glColor3xvOES"); }
		if(!obj->methodp_glColor3xvOES) { obj->methodp_glColor3xvOES = (PFNGLCOLOR3XVOESPROC)GetProcAddress(modOpenGL32, "glColor3xvOES"); }
		if(!obj->methodp_glColor3xvOES) { args.This()->Set(v8::String::NewSymbol("glColor3xvOES"), v8::Undefined()); }
		if(!obj->methodp_glColor4b) { obj->methodp_glColor4b = (PFNGLCOLOR4BPROC)wglGetProcAddress("glColor4b"); }
		if(!obj->methodp_glColor4b) { obj->methodp_glColor4b = (PFNGLCOLOR4BPROC)GetProcAddress(modOpenGL32, "glColor4b"); }
		if(!obj->methodp_glColor4b) { args.This()->Set(v8::String::NewSymbol("glColor4b"), v8::Undefined()); }
		if(!obj->methodp_glColor4bv) { obj->methodp_glColor4bv = (PFNGLCOLOR4BVPROC)wglGetProcAddress("glColor4bv"); }
		if(!obj->methodp_glColor4bv) { obj->methodp_glColor4bv = (PFNGLCOLOR4BVPROC)GetProcAddress(modOpenGL32, "glColor4bv"); }
		if(!obj->methodp_glColor4bv) { args.This()->Set(v8::String::NewSymbol("glColor4bv"), v8::Undefined()); }
		if(!obj->methodp_glColor4d) { obj->methodp_glColor4d = (PFNGLCOLOR4DPROC)wglGetProcAddress("glColor4d"); }
		if(!obj->methodp_glColor4d) { obj->methodp_glColor4d = (PFNGLCOLOR4DPROC)GetProcAddress(modOpenGL32, "glColor4d"); }
		if(!obj->methodp_glColor4d) { args.This()->Set(v8::String::NewSymbol("glColor4d"), v8::Undefined()); }
		if(!obj->methodp_glColor4dv) { obj->methodp_glColor4dv = (PFNGLCOLOR4DVPROC)wglGetProcAddress("glColor4dv"); }
		if(!obj->methodp_glColor4dv) { obj->methodp_glColor4dv = (PFNGLCOLOR4DVPROC)GetProcAddress(modOpenGL32, "glColor4dv"); }
		if(!obj->methodp_glColor4dv) { args.This()->Set(v8::String::NewSymbol("glColor4dv"), v8::Undefined()); }
		if(!obj->methodp_glColor4f) { obj->methodp_glColor4f = (PFNGLCOLOR4FPROC)wglGetProcAddress("glColor4f"); }
		if(!obj->methodp_glColor4f) { obj->methodp_glColor4f = (PFNGLCOLOR4FPROC)GetProcAddress(modOpenGL32, "glColor4f"); }
		if(!obj->methodp_glColor4f) { args.This()->Set(v8::String::NewSymbol("glColor4f"), v8::Undefined()); }
		if(!obj->methodp_glColor4fNormal3fVertex3fSUN) { obj->methodp_glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)wglGetProcAddress("glColor4fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glColor4fNormal3fVertex3fSUN) { obj->methodp_glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glColor4fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glColor4fNormal3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glColor4fNormal3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glColor4fNormal3fVertex3fvSUN) { obj->methodp_glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)wglGetProcAddress("glColor4fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glColor4fNormal3fVertex3fvSUN) { obj->methodp_glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glColor4fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glColor4fNormal3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glColor4fNormal3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glColor4fv) { obj->methodp_glColor4fv = (PFNGLCOLOR4FVPROC)wglGetProcAddress("glColor4fv"); }
		if(!obj->methodp_glColor4fv) { obj->methodp_glColor4fv = (PFNGLCOLOR4FVPROC)GetProcAddress(modOpenGL32, "glColor4fv"); }
		if(!obj->methodp_glColor4fv) { args.This()->Set(v8::String::NewSymbol("glColor4fv"), v8::Undefined()); }
		if(!obj->methodp_glColor4hNV) { obj->methodp_glColor4hNV = (PFNGLCOLOR4HNVPROC)wglGetProcAddress("glColor4hNV"); }
		if(!obj->methodp_glColor4hNV) { obj->methodp_glColor4hNV = (PFNGLCOLOR4HNVPROC)GetProcAddress(modOpenGL32, "glColor4hNV"); }
		if(!obj->methodp_glColor4hNV) { args.This()->Set(v8::String::NewSymbol("glColor4hNV"), v8::Undefined()); }
		if(!obj->methodp_glColor4hvNV) { obj->methodp_glColor4hvNV = (PFNGLCOLOR4HVNVPROC)wglGetProcAddress("glColor4hvNV"); }
		if(!obj->methodp_glColor4hvNV) { obj->methodp_glColor4hvNV = (PFNGLCOLOR4HVNVPROC)GetProcAddress(modOpenGL32, "glColor4hvNV"); }
		if(!obj->methodp_glColor4hvNV) { args.This()->Set(v8::String::NewSymbol("glColor4hvNV"), v8::Undefined()); }
		if(!obj->methodp_glColor4i) { obj->methodp_glColor4i = (PFNGLCOLOR4IPROC)wglGetProcAddress("glColor4i"); }
		if(!obj->methodp_glColor4i) { obj->methodp_glColor4i = (PFNGLCOLOR4IPROC)GetProcAddress(modOpenGL32, "glColor4i"); }
		if(!obj->methodp_glColor4i) { args.This()->Set(v8::String::NewSymbol("glColor4i"), v8::Undefined()); }
		if(!obj->methodp_glColor4iv) { obj->methodp_glColor4iv = (PFNGLCOLOR4IVPROC)wglGetProcAddress("glColor4iv"); }
		if(!obj->methodp_glColor4iv) { obj->methodp_glColor4iv = (PFNGLCOLOR4IVPROC)GetProcAddress(modOpenGL32, "glColor4iv"); }
		if(!obj->methodp_glColor4iv) { args.This()->Set(v8::String::NewSymbol("glColor4iv"), v8::Undefined()); }
		if(!obj->methodp_glColor4s) { obj->methodp_glColor4s = (PFNGLCOLOR4SPROC)wglGetProcAddress("glColor4s"); }
		if(!obj->methodp_glColor4s) { obj->methodp_glColor4s = (PFNGLCOLOR4SPROC)GetProcAddress(modOpenGL32, "glColor4s"); }
		if(!obj->methodp_glColor4s) { args.This()->Set(v8::String::NewSymbol("glColor4s"), v8::Undefined()); }
		if(!obj->methodp_glColor4sv) { obj->methodp_glColor4sv = (PFNGLCOLOR4SVPROC)wglGetProcAddress("glColor4sv"); }
		if(!obj->methodp_glColor4sv) { obj->methodp_glColor4sv = (PFNGLCOLOR4SVPROC)GetProcAddress(modOpenGL32, "glColor4sv"); }
		if(!obj->methodp_glColor4sv) { args.This()->Set(v8::String::NewSymbol("glColor4sv"), v8::Undefined()); }
		if(!obj->methodp_glColor4ub) { obj->methodp_glColor4ub = (PFNGLCOLOR4UBPROC)wglGetProcAddress("glColor4ub"); }
		if(!obj->methodp_glColor4ub) { obj->methodp_glColor4ub = (PFNGLCOLOR4UBPROC)GetProcAddress(modOpenGL32, "glColor4ub"); }
		if(!obj->methodp_glColor4ub) { args.This()->Set(v8::String::NewSymbol("glColor4ub"), v8::Undefined()); }
		if(!obj->methodp_glColor4ubVertex2fSUN) { obj->methodp_glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC)wglGetProcAddress("glColor4ubVertex2fSUN"); }
		if(!obj->methodp_glColor4ubVertex2fSUN) { obj->methodp_glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC)GetProcAddress(modOpenGL32, "glColor4ubVertex2fSUN"); }
		if(!obj->methodp_glColor4ubVertex2fSUN) { args.This()->Set(v8::String::NewSymbol("glColor4ubVertex2fSUN"), v8::Undefined()); }
		if(!obj->methodp_glColor4ubVertex2fvSUN) { obj->methodp_glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)wglGetProcAddress("glColor4ubVertex2fvSUN"); }
		if(!obj->methodp_glColor4ubVertex2fvSUN) { obj->methodp_glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)GetProcAddress(modOpenGL32, "glColor4ubVertex2fvSUN"); }
		if(!obj->methodp_glColor4ubVertex2fvSUN) { args.This()->Set(v8::String::NewSymbol("glColor4ubVertex2fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glColor4ubVertex3fSUN) { obj->methodp_glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC)wglGetProcAddress("glColor4ubVertex3fSUN"); }
		if(!obj->methodp_glColor4ubVertex3fSUN) { obj->methodp_glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glColor4ubVertex3fSUN"); }
		if(!obj->methodp_glColor4ubVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glColor4ubVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glColor4ubVertex3fvSUN) { obj->methodp_glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)wglGetProcAddress("glColor4ubVertex3fvSUN"); }
		if(!obj->methodp_glColor4ubVertex3fvSUN) { obj->methodp_glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glColor4ubVertex3fvSUN"); }
		if(!obj->methodp_glColor4ubVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glColor4ubVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glColor4ubv) { obj->methodp_glColor4ubv = (PFNGLCOLOR4UBVPROC)wglGetProcAddress("glColor4ubv"); }
		if(!obj->methodp_glColor4ubv) { obj->methodp_glColor4ubv = (PFNGLCOLOR4UBVPROC)GetProcAddress(modOpenGL32, "glColor4ubv"); }
		if(!obj->methodp_glColor4ubv) { args.This()->Set(v8::String::NewSymbol("glColor4ubv"), v8::Undefined()); }
		if(!obj->methodp_glColor4ui) { obj->methodp_glColor4ui = (PFNGLCOLOR4UIPROC)wglGetProcAddress("glColor4ui"); }
		if(!obj->methodp_glColor4ui) { obj->methodp_glColor4ui = (PFNGLCOLOR4UIPROC)GetProcAddress(modOpenGL32, "glColor4ui"); }
		if(!obj->methodp_glColor4ui) { args.This()->Set(v8::String::NewSymbol("glColor4ui"), v8::Undefined()); }
		if(!obj->methodp_glColor4uiv) { obj->methodp_glColor4uiv = (PFNGLCOLOR4UIVPROC)wglGetProcAddress("glColor4uiv"); }
		if(!obj->methodp_glColor4uiv) { obj->methodp_glColor4uiv = (PFNGLCOLOR4UIVPROC)GetProcAddress(modOpenGL32, "glColor4uiv"); }
		if(!obj->methodp_glColor4uiv) { args.This()->Set(v8::String::NewSymbol("glColor4uiv"), v8::Undefined()); }
		if(!obj->methodp_glColor4us) { obj->methodp_glColor4us = (PFNGLCOLOR4USPROC)wglGetProcAddress("glColor4us"); }
		if(!obj->methodp_glColor4us) { obj->methodp_glColor4us = (PFNGLCOLOR4USPROC)GetProcAddress(modOpenGL32, "glColor4us"); }
		if(!obj->methodp_glColor4us) { args.This()->Set(v8::String::NewSymbol("glColor4us"), v8::Undefined()); }
		if(!obj->methodp_glColor4usv) { obj->methodp_glColor4usv = (PFNGLCOLOR4USVPROC)wglGetProcAddress("glColor4usv"); }
		if(!obj->methodp_glColor4usv) { obj->methodp_glColor4usv = (PFNGLCOLOR4USVPROC)GetProcAddress(modOpenGL32, "glColor4usv"); }
		if(!obj->methodp_glColor4usv) { args.This()->Set(v8::String::NewSymbol("glColor4usv"), v8::Undefined()); }
		if(!obj->methodp_glColor4x) { obj->methodp_glColor4x = (PFNGLCOLOR4XPROC)wglGetProcAddress("glColor4x"); }
		if(!obj->methodp_glColor4x) { obj->methodp_glColor4x = (PFNGLCOLOR4XPROC)GetProcAddress(modOpenGL32, "glColor4x"); }
		if(!obj->methodp_glColor4x) { args.This()->Set(v8::String::NewSymbol("glColor4x"), v8::Undefined()); }
		if(!obj->methodp_glColor4xOES) { obj->methodp_glColor4xOES = (PFNGLCOLOR4XOESPROC)wglGetProcAddress("glColor4xOES"); }
		if(!obj->methodp_glColor4xOES) { obj->methodp_glColor4xOES = (PFNGLCOLOR4XOESPROC)GetProcAddress(modOpenGL32, "glColor4xOES"); }
		if(!obj->methodp_glColor4xOES) { args.This()->Set(v8::String::NewSymbol("glColor4xOES"), v8::Undefined()); }
		if(!obj->methodp_glColor4xvOES) { obj->methodp_glColor4xvOES = (PFNGLCOLOR4XVOESPROC)wglGetProcAddress("glColor4xvOES"); }
		if(!obj->methodp_glColor4xvOES) { obj->methodp_glColor4xvOES = (PFNGLCOLOR4XVOESPROC)GetProcAddress(modOpenGL32, "glColor4xvOES"); }
		if(!obj->methodp_glColor4xvOES) { args.This()->Set(v8::String::NewSymbol("glColor4xvOES"), v8::Undefined()); }
		if(!obj->methodp_glColorFormatNV) { obj->methodp_glColorFormatNV = (PFNGLCOLORFORMATNVPROC)wglGetProcAddress("glColorFormatNV"); }
		if(!obj->methodp_glColorFormatNV) { obj->methodp_glColorFormatNV = (PFNGLCOLORFORMATNVPROC)GetProcAddress(modOpenGL32, "glColorFormatNV"); }
		if(!obj->methodp_glColorFormatNV) { args.This()->Set(v8::String::NewSymbol("glColorFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glColorFragmentOp1ATI) { obj->methodp_glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC)wglGetProcAddress("glColorFragmentOp1ATI"); }
		if(!obj->methodp_glColorFragmentOp1ATI) { obj->methodp_glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC)GetProcAddress(modOpenGL32, "glColorFragmentOp1ATI"); }
		if(!obj->methodp_glColorFragmentOp1ATI) { args.This()->Set(v8::String::NewSymbol("glColorFragmentOp1ATI"), v8::Undefined()); }
		if(!obj->methodp_glColorFragmentOp2ATI) { obj->methodp_glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC)wglGetProcAddress("glColorFragmentOp2ATI"); }
		if(!obj->methodp_glColorFragmentOp2ATI) { obj->methodp_glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC)GetProcAddress(modOpenGL32, "glColorFragmentOp2ATI"); }
		if(!obj->methodp_glColorFragmentOp2ATI) { args.This()->Set(v8::String::NewSymbol("glColorFragmentOp2ATI"), v8::Undefined()); }
		if(!obj->methodp_glColorFragmentOp3ATI) { obj->methodp_glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC)wglGetProcAddress("glColorFragmentOp3ATI"); }
		if(!obj->methodp_glColorFragmentOp3ATI) { obj->methodp_glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC)GetProcAddress(modOpenGL32, "glColorFragmentOp3ATI"); }
		if(!obj->methodp_glColorFragmentOp3ATI) { args.This()->Set(v8::String::NewSymbol("glColorFragmentOp3ATI"), v8::Undefined()); }
		if(!obj->methodp_glColorMask) { obj->methodp_glColorMask = (PFNGLCOLORMASKPROC)wglGetProcAddress("glColorMask"); }
		if(!obj->methodp_glColorMask) { obj->methodp_glColorMask = (PFNGLCOLORMASKPROC)GetProcAddress(modOpenGL32, "glColorMask"); }
		if(!obj->methodp_glColorMask) { args.This()->Set(v8::String::NewSymbol("glColorMask"), v8::Undefined()); }
		if(!obj->methodp_glColorMaskIndexedEXT) { obj->methodp_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)wglGetProcAddress("glColorMaskIndexedEXT"); }
		if(!obj->methodp_glColorMaskIndexedEXT) { obj->methodp_glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)GetProcAddress(modOpenGL32, "glColorMaskIndexedEXT"); }
		if(!obj->methodp_glColorMaskIndexedEXT) { args.This()->Set(v8::String::NewSymbol("glColorMaskIndexedEXT"), v8::Undefined()); }
		if(!obj->methodp_glColorMaski) { obj->methodp_glColorMaski = (PFNGLCOLORMASKIPROC)wglGetProcAddress("glColorMaski"); }
		if(!obj->methodp_glColorMaski) { obj->methodp_glColorMaski = (PFNGLCOLORMASKIPROC)GetProcAddress(modOpenGL32, "glColorMaski"); }
		if(!obj->methodp_glColorMaski) { args.This()->Set(v8::String::NewSymbol("glColorMaski"), v8::Undefined()); }
		if(!obj->methodp_glColorMaskiEXT) { obj->methodp_glColorMaskiEXT = (PFNGLCOLORMASKIEXTPROC)wglGetProcAddress("glColorMaskiEXT"); }
		if(!obj->methodp_glColorMaskiEXT) { obj->methodp_glColorMaskiEXT = (PFNGLCOLORMASKIEXTPROC)GetProcAddress(modOpenGL32, "glColorMaskiEXT"); }
		if(!obj->methodp_glColorMaskiEXT) { args.This()->Set(v8::String::NewSymbol("glColorMaskiEXT"), v8::Undefined()); }
		if(!obj->methodp_glColorMaterial) { obj->methodp_glColorMaterial = (PFNGLCOLORMATERIALPROC)wglGetProcAddress("glColorMaterial"); }
		if(!obj->methodp_glColorMaterial) { obj->methodp_glColorMaterial = (PFNGLCOLORMATERIALPROC)GetProcAddress(modOpenGL32, "glColorMaterial"); }
		if(!obj->methodp_glColorMaterial) { args.This()->Set(v8::String::NewSymbol("glColorMaterial"), v8::Undefined()); }
		if(!obj->methodp_glColorP3ui) { obj->methodp_glColorP3ui = (PFNGLCOLORP3UIPROC)wglGetProcAddress("glColorP3ui"); }
		if(!obj->methodp_glColorP3ui) { obj->methodp_glColorP3ui = (PFNGLCOLORP3UIPROC)GetProcAddress(modOpenGL32, "glColorP3ui"); }
		if(!obj->methodp_glColorP3ui) { args.This()->Set(v8::String::NewSymbol("glColorP3ui"), v8::Undefined()); }
		if(!obj->methodp_glColorP3uiv) { obj->methodp_glColorP3uiv = (PFNGLCOLORP3UIVPROC)wglGetProcAddress("glColorP3uiv"); }
		if(!obj->methodp_glColorP3uiv) { obj->methodp_glColorP3uiv = (PFNGLCOLORP3UIVPROC)GetProcAddress(modOpenGL32, "glColorP3uiv"); }
		if(!obj->methodp_glColorP3uiv) { args.This()->Set(v8::String::NewSymbol("glColorP3uiv"), v8::Undefined()); }
		if(!obj->methodp_glColorP4ui) { obj->methodp_glColorP4ui = (PFNGLCOLORP4UIPROC)wglGetProcAddress("glColorP4ui"); }
		if(!obj->methodp_glColorP4ui) { obj->methodp_glColorP4ui = (PFNGLCOLORP4UIPROC)GetProcAddress(modOpenGL32, "glColorP4ui"); }
		if(!obj->methodp_glColorP4ui) { args.This()->Set(v8::String::NewSymbol("glColorP4ui"), v8::Undefined()); }
		if(!obj->methodp_glColorP4uiv) { obj->methodp_glColorP4uiv = (PFNGLCOLORP4UIVPROC)wglGetProcAddress("glColorP4uiv"); }
		if(!obj->methodp_glColorP4uiv) { obj->methodp_glColorP4uiv = (PFNGLCOLORP4UIVPROC)GetProcAddress(modOpenGL32, "glColorP4uiv"); }
		if(!obj->methodp_glColorP4uiv) { args.This()->Set(v8::String::NewSymbol("glColorP4uiv"), v8::Undefined()); }
		if(!obj->methodp_glColorPointer) { obj->methodp_glColorPointer = (PFNGLCOLORPOINTERPROC)wglGetProcAddress("glColorPointer"); }
		if(!obj->methodp_glColorPointer) { obj->methodp_glColorPointer = (PFNGLCOLORPOINTERPROC)GetProcAddress(modOpenGL32, "glColorPointer"); }
		if(!obj->methodp_glColorPointer) { args.This()->Set(v8::String::NewSymbol("glColorPointer"), v8::Undefined()); }
		if(!obj->methodp_glColorPointerEXT) { obj->methodp_glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)wglGetProcAddress("glColorPointerEXT"); }
		if(!obj->methodp_glColorPointerEXT) { obj->methodp_glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glColorPointerEXT"); }
		if(!obj->methodp_glColorPointerEXT) { args.This()->Set(v8::String::NewSymbol("glColorPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glColorPointerListIBM) { obj->methodp_glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC)wglGetProcAddress("glColorPointerListIBM"); }
		if(!obj->methodp_glColorPointerListIBM) { obj->methodp_glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC)GetProcAddress(modOpenGL32, "glColorPointerListIBM"); }
		if(!obj->methodp_glColorPointerListIBM) { args.This()->Set(v8::String::NewSymbol("glColorPointerListIBM"), v8::Undefined()); }
		if(!obj->methodp_glColorPointervINTEL) { obj->methodp_glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC)wglGetProcAddress("glColorPointervINTEL"); }
		if(!obj->methodp_glColorPointervINTEL) { obj->methodp_glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC)GetProcAddress(modOpenGL32, "glColorPointervINTEL"); }
		if(!obj->methodp_glColorPointervINTEL) { args.This()->Set(v8::String::NewSymbol("glColorPointervINTEL"), v8::Undefined()); }
		if(!obj->methodp_glColorSubTable) { obj->methodp_glColorSubTable = (PFNGLCOLORSUBTABLEPROC)wglGetProcAddress("glColorSubTable"); }
		if(!obj->methodp_glColorSubTable) { obj->methodp_glColorSubTable = (PFNGLCOLORSUBTABLEPROC)GetProcAddress(modOpenGL32, "glColorSubTable"); }
		if(!obj->methodp_glColorSubTable) { args.This()->Set(v8::String::NewSymbol("glColorSubTable"), v8::Undefined()); }
		if(!obj->methodp_glColorSubTableEXT) { obj->methodp_glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)wglGetProcAddress("glColorSubTableEXT"); }
		if(!obj->methodp_glColorSubTableEXT) { obj->methodp_glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)GetProcAddress(modOpenGL32, "glColorSubTableEXT"); }
		if(!obj->methodp_glColorSubTableEXT) { args.This()->Set(v8::String::NewSymbol("glColorSubTableEXT"), v8::Undefined()); }
		if(!obj->methodp_glColorTable) { obj->methodp_glColorTable = (PFNGLCOLORTABLEPROC)wglGetProcAddress("glColorTable"); }
		if(!obj->methodp_glColorTable) { obj->methodp_glColorTable = (PFNGLCOLORTABLEPROC)GetProcAddress(modOpenGL32, "glColorTable"); }
		if(!obj->methodp_glColorTable) { args.This()->Set(v8::String::NewSymbol("glColorTable"), v8::Undefined()); }
		if(!obj->methodp_glColorTableEXT) { obj->methodp_glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)wglGetProcAddress("glColorTableEXT"); }
		if(!obj->methodp_glColorTableEXT) { obj->methodp_glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)GetProcAddress(modOpenGL32, "glColorTableEXT"); }
		if(!obj->methodp_glColorTableEXT) { args.This()->Set(v8::String::NewSymbol("glColorTableEXT"), v8::Undefined()); }
		if(!obj->methodp_glColorTableParameterfv) { obj->methodp_glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)wglGetProcAddress("glColorTableParameterfv"); }
		if(!obj->methodp_glColorTableParameterfv) { obj->methodp_glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glColorTableParameterfv"); }
		if(!obj->methodp_glColorTableParameterfv) { args.This()->Set(v8::String::NewSymbol("glColorTableParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glColorTableParameterfvSGI) { obj->methodp_glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)wglGetProcAddress("glColorTableParameterfvSGI"); }
		if(!obj->methodp_glColorTableParameterfvSGI) { obj->methodp_glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)GetProcAddress(modOpenGL32, "glColorTableParameterfvSGI"); }
		if(!obj->methodp_glColorTableParameterfvSGI) { args.This()->Set(v8::String::NewSymbol("glColorTableParameterfvSGI"), v8::Undefined()); }
		if(!obj->methodp_glColorTableParameteriv) { obj->methodp_glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)wglGetProcAddress("glColorTableParameteriv"); }
		if(!obj->methodp_glColorTableParameteriv) { obj->methodp_glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glColorTableParameteriv"); }
		if(!obj->methodp_glColorTableParameteriv) { args.This()->Set(v8::String::NewSymbol("glColorTableParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glColorTableParameterivSGI) { obj->methodp_glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)wglGetProcAddress("glColorTableParameterivSGI"); }
		if(!obj->methodp_glColorTableParameterivSGI) { obj->methodp_glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)GetProcAddress(modOpenGL32, "glColorTableParameterivSGI"); }
		if(!obj->methodp_glColorTableParameterivSGI) { args.This()->Set(v8::String::NewSymbol("glColorTableParameterivSGI"), v8::Undefined()); }
		if(!obj->methodp_glColorTableSGI) { obj->methodp_glColorTableSGI = (PFNGLCOLORTABLESGIPROC)wglGetProcAddress("glColorTableSGI"); }
		if(!obj->methodp_glColorTableSGI) { obj->methodp_glColorTableSGI = (PFNGLCOLORTABLESGIPROC)GetProcAddress(modOpenGL32, "glColorTableSGI"); }
		if(!obj->methodp_glColorTableSGI) { args.This()->Set(v8::String::NewSymbol("glColorTableSGI"), v8::Undefined()); }
		if(!obj->methodp_glCombinerInputNV) { obj->methodp_glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)wglGetProcAddress("glCombinerInputNV"); }
		if(!obj->methodp_glCombinerInputNV) { obj->methodp_glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)GetProcAddress(modOpenGL32, "glCombinerInputNV"); }
		if(!obj->methodp_glCombinerInputNV) { args.This()->Set(v8::String::NewSymbol("glCombinerInputNV"), v8::Undefined()); }
		if(!obj->methodp_glCombinerOutputNV) { obj->methodp_glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)wglGetProcAddress("glCombinerOutputNV"); }
		if(!obj->methodp_glCombinerOutputNV) { obj->methodp_glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)GetProcAddress(modOpenGL32, "glCombinerOutputNV"); }
		if(!obj->methodp_glCombinerOutputNV) { args.This()->Set(v8::String::NewSymbol("glCombinerOutputNV"), v8::Undefined()); }
		if(!obj->methodp_glCombinerParameterfNV) { obj->methodp_glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)wglGetProcAddress("glCombinerParameterfNV"); }
		if(!obj->methodp_glCombinerParameterfNV) { obj->methodp_glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)GetProcAddress(modOpenGL32, "glCombinerParameterfNV"); }
		if(!obj->methodp_glCombinerParameterfNV) { args.This()->Set(v8::String::NewSymbol("glCombinerParameterfNV"), v8::Undefined()); }
		if(!obj->methodp_glCombinerParameterfvNV) { obj->methodp_glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)wglGetProcAddress("glCombinerParameterfvNV"); }
		if(!obj->methodp_glCombinerParameterfvNV) { obj->methodp_glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glCombinerParameterfvNV"); }
		if(!obj->methodp_glCombinerParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glCombinerParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glCombinerParameteriNV) { obj->methodp_glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)wglGetProcAddress("glCombinerParameteriNV"); }
		if(!obj->methodp_glCombinerParameteriNV) { obj->methodp_glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)GetProcAddress(modOpenGL32, "glCombinerParameteriNV"); }
		if(!obj->methodp_glCombinerParameteriNV) { args.This()->Set(v8::String::NewSymbol("glCombinerParameteriNV"), v8::Undefined()); }
		if(!obj->methodp_glCombinerParameterivNV) { obj->methodp_glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)wglGetProcAddress("glCombinerParameterivNV"); }
		if(!obj->methodp_glCombinerParameterivNV) { obj->methodp_glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glCombinerParameterivNV"); }
		if(!obj->methodp_glCombinerParameterivNV) { args.This()->Set(v8::String::NewSymbol("glCombinerParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glCombinerStageParameterfvNV) { obj->methodp_glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)wglGetProcAddress("glCombinerStageParameterfvNV"); }
		if(!obj->methodp_glCombinerStageParameterfvNV) { obj->methodp_glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glCombinerStageParameterfvNV"); }
		if(!obj->methodp_glCombinerStageParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glCombinerStageParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glCompileShader) { obj->methodp_glCompileShader = (PFNGLCOMPILESHADERPROC)wglGetProcAddress("glCompileShader"); }
		if(!obj->methodp_glCompileShader) { obj->methodp_glCompileShader = (PFNGLCOMPILESHADERPROC)GetProcAddress(modOpenGL32, "glCompileShader"); }
		if(!obj->methodp_glCompileShader) { args.This()->Set(v8::String::NewSymbol("glCompileShader"), v8::Undefined()); }
		if(!obj->methodp_glCompileShaderARB) { obj->methodp_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)wglGetProcAddress("glCompileShaderARB"); }
		if(!obj->methodp_glCompileShaderARB) { obj->methodp_glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)GetProcAddress(modOpenGL32, "glCompileShaderARB"); }
		if(!obj->methodp_glCompileShaderARB) { args.This()->Set(v8::String::NewSymbol("glCompileShaderARB"), v8::Undefined()); }
		if(!obj->methodp_glCompileShaderIncludeARB) { obj->methodp_glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC)wglGetProcAddress("glCompileShaderIncludeARB"); }
		if(!obj->methodp_glCompileShaderIncludeARB) { obj->methodp_glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC)GetProcAddress(modOpenGL32, "glCompileShaderIncludeARB"); }
		if(!obj->methodp_glCompileShaderIncludeARB) { args.This()->Set(v8::String::NewSymbol("glCompileShaderIncludeARB"), v8::Undefined()); }
		if(!obj->methodp_glCompressedMultiTexImage1DEXT) { obj->methodp_glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)wglGetProcAddress("glCompressedMultiTexImage1DEXT"); }
		if(!obj->methodp_glCompressedMultiTexImage1DEXT) { obj->methodp_glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedMultiTexImage1DEXT"); }
		if(!obj->methodp_glCompressedMultiTexImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedMultiTexImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedMultiTexImage2DEXT) { obj->methodp_glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)wglGetProcAddress("glCompressedMultiTexImage2DEXT"); }
		if(!obj->methodp_glCompressedMultiTexImage2DEXT) { obj->methodp_glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedMultiTexImage2DEXT"); }
		if(!obj->methodp_glCompressedMultiTexImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedMultiTexImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedMultiTexImage3DEXT) { obj->methodp_glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)wglGetProcAddress("glCompressedMultiTexImage3DEXT"); }
		if(!obj->methodp_glCompressedMultiTexImage3DEXT) { obj->methodp_glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedMultiTexImage3DEXT"); }
		if(!obj->methodp_glCompressedMultiTexImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedMultiTexImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedMultiTexSubImage1DEXT) { obj->methodp_glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)wglGetProcAddress("glCompressedMultiTexSubImage1DEXT"); }
		if(!obj->methodp_glCompressedMultiTexSubImage1DEXT) { obj->methodp_glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedMultiTexSubImage1DEXT"); }
		if(!obj->methodp_glCompressedMultiTexSubImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedMultiTexSubImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedMultiTexSubImage2DEXT) { obj->methodp_glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)wglGetProcAddress("glCompressedMultiTexSubImage2DEXT"); }
		if(!obj->methodp_glCompressedMultiTexSubImage2DEXT) { obj->methodp_glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedMultiTexSubImage2DEXT"); }
		if(!obj->methodp_glCompressedMultiTexSubImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedMultiTexSubImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedMultiTexSubImage3DEXT) { obj->methodp_glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)wglGetProcAddress("glCompressedMultiTexSubImage3DEXT"); }
		if(!obj->methodp_glCompressedMultiTexSubImage3DEXT) { obj->methodp_glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedMultiTexSubImage3DEXT"); }
		if(!obj->methodp_glCompressedMultiTexSubImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedMultiTexSubImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexImage1D) { obj->methodp_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)wglGetProcAddress("glCompressedTexImage1D"); }
		if(!obj->methodp_glCompressedTexImage1D) { obj->methodp_glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)GetProcAddress(modOpenGL32, "glCompressedTexImage1D"); }
		if(!obj->methodp_glCompressedTexImage1D) { args.This()->Set(v8::String::NewSymbol("glCompressedTexImage1D"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexImage1DARB) { obj->methodp_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)wglGetProcAddress("glCompressedTexImage1DARB"); }
		if(!obj->methodp_glCompressedTexImage1DARB) { obj->methodp_glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)GetProcAddress(modOpenGL32, "glCompressedTexImage1DARB"); }
		if(!obj->methodp_glCompressedTexImage1DARB) { args.This()->Set(v8::String::NewSymbol("glCompressedTexImage1DARB"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexImage2D) { obj->methodp_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)wglGetProcAddress("glCompressedTexImage2D"); }
		if(!obj->methodp_glCompressedTexImage2D) { obj->methodp_glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)GetProcAddress(modOpenGL32, "glCompressedTexImage2D"); }
		if(!obj->methodp_glCompressedTexImage2D) { args.This()->Set(v8::String::NewSymbol("glCompressedTexImage2D"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexImage2DARB) { obj->methodp_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)wglGetProcAddress("glCompressedTexImage2DARB"); }
		if(!obj->methodp_glCompressedTexImage2DARB) { obj->methodp_glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)GetProcAddress(modOpenGL32, "glCompressedTexImage2DARB"); }
		if(!obj->methodp_glCompressedTexImage2DARB) { args.This()->Set(v8::String::NewSymbol("glCompressedTexImage2DARB"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexImage3D) { obj->methodp_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)wglGetProcAddress("glCompressedTexImage3D"); }
		if(!obj->methodp_glCompressedTexImage3D) { obj->methodp_glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)GetProcAddress(modOpenGL32, "glCompressedTexImage3D"); }
		if(!obj->methodp_glCompressedTexImage3D) { args.This()->Set(v8::String::NewSymbol("glCompressedTexImage3D"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexImage3DARB) { obj->methodp_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)wglGetProcAddress("glCompressedTexImage3DARB"); }
		if(!obj->methodp_glCompressedTexImage3DARB) { obj->methodp_glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)GetProcAddress(modOpenGL32, "glCompressedTexImage3DARB"); }
		if(!obj->methodp_glCompressedTexImage3DARB) { args.This()->Set(v8::String::NewSymbol("glCompressedTexImage3DARB"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexImage3DOES) { obj->methodp_glCompressedTexImage3DOES = (PFNGLCOMPRESSEDTEXIMAGE3DOESPROC)wglGetProcAddress("glCompressedTexImage3DOES"); }
		if(!obj->methodp_glCompressedTexImage3DOES) { obj->methodp_glCompressedTexImage3DOES = (PFNGLCOMPRESSEDTEXIMAGE3DOESPROC)GetProcAddress(modOpenGL32, "glCompressedTexImage3DOES"); }
		if(!obj->methodp_glCompressedTexImage3DOES) { args.This()->Set(v8::String::NewSymbol("glCompressedTexImage3DOES"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexSubImage1D) { obj->methodp_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)wglGetProcAddress("glCompressedTexSubImage1D"); }
		if(!obj->methodp_glCompressedTexSubImage1D) { obj->methodp_glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)GetProcAddress(modOpenGL32, "glCompressedTexSubImage1D"); }
		if(!obj->methodp_glCompressedTexSubImage1D) { args.This()->Set(v8::String::NewSymbol("glCompressedTexSubImage1D"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexSubImage1DARB) { obj->methodp_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)wglGetProcAddress("glCompressedTexSubImage1DARB"); }
		if(!obj->methodp_glCompressedTexSubImage1DARB) { obj->methodp_glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)GetProcAddress(modOpenGL32, "glCompressedTexSubImage1DARB"); }
		if(!obj->methodp_glCompressedTexSubImage1DARB) { args.This()->Set(v8::String::NewSymbol("glCompressedTexSubImage1DARB"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexSubImage2D) { obj->methodp_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)wglGetProcAddress("glCompressedTexSubImage2D"); }
		if(!obj->methodp_glCompressedTexSubImage2D) { obj->methodp_glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)GetProcAddress(modOpenGL32, "glCompressedTexSubImage2D"); }
		if(!obj->methodp_glCompressedTexSubImage2D) { args.This()->Set(v8::String::NewSymbol("glCompressedTexSubImage2D"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexSubImage2DARB) { obj->methodp_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)wglGetProcAddress("glCompressedTexSubImage2DARB"); }
		if(!obj->methodp_glCompressedTexSubImage2DARB) { obj->methodp_glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)GetProcAddress(modOpenGL32, "glCompressedTexSubImage2DARB"); }
		if(!obj->methodp_glCompressedTexSubImage2DARB) { args.This()->Set(v8::String::NewSymbol("glCompressedTexSubImage2DARB"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexSubImage3D) { obj->methodp_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)wglGetProcAddress("glCompressedTexSubImage3D"); }
		if(!obj->methodp_glCompressedTexSubImage3D) { obj->methodp_glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)GetProcAddress(modOpenGL32, "glCompressedTexSubImage3D"); }
		if(!obj->methodp_glCompressedTexSubImage3D) { args.This()->Set(v8::String::NewSymbol("glCompressedTexSubImage3D"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexSubImage3DARB) { obj->methodp_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)wglGetProcAddress("glCompressedTexSubImage3DARB"); }
		if(!obj->methodp_glCompressedTexSubImage3DARB) { obj->methodp_glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)GetProcAddress(modOpenGL32, "glCompressedTexSubImage3DARB"); }
		if(!obj->methodp_glCompressedTexSubImage3DARB) { args.This()->Set(v8::String::NewSymbol("glCompressedTexSubImage3DARB"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTexSubImage3DOES) { obj->methodp_glCompressedTexSubImage3DOES = (PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC)wglGetProcAddress("glCompressedTexSubImage3DOES"); }
		if(!obj->methodp_glCompressedTexSubImage3DOES) { obj->methodp_glCompressedTexSubImage3DOES = (PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC)GetProcAddress(modOpenGL32, "glCompressedTexSubImage3DOES"); }
		if(!obj->methodp_glCompressedTexSubImage3DOES) { args.This()->Set(v8::String::NewSymbol("glCompressedTexSubImage3DOES"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTextureImage1DEXT) { obj->methodp_glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)wglGetProcAddress("glCompressedTextureImage1DEXT"); }
		if(!obj->methodp_glCompressedTextureImage1DEXT) { obj->methodp_glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedTextureImage1DEXT"); }
		if(!obj->methodp_glCompressedTextureImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedTextureImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTextureImage2DEXT) { obj->methodp_glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)wglGetProcAddress("glCompressedTextureImage2DEXT"); }
		if(!obj->methodp_glCompressedTextureImage2DEXT) { obj->methodp_glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedTextureImage2DEXT"); }
		if(!obj->methodp_glCompressedTextureImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedTextureImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTextureImage3DEXT) { obj->methodp_glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)wglGetProcAddress("glCompressedTextureImage3DEXT"); }
		if(!obj->methodp_glCompressedTextureImage3DEXT) { obj->methodp_glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedTextureImage3DEXT"); }
		if(!obj->methodp_glCompressedTextureImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedTextureImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTextureSubImage1DEXT) { obj->methodp_glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)wglGetProcAddress("glCompressedTextureSubImage1DEXT"); }
		if(!obj->methodp_glCompressedTextureSubImage1DEXT) { obj->methodp_glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedTextureSubImage1DEXT"); }
		if(!obj->methodp_glCompressedTextureSubImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedTextureSubImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTextureSubImage2DEXT) { obj->methodp_glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)wglGetProcAddress("glCompressedTextureSubImage2DEXT"); }
		if(!obj->methodp_glCompressedTextureSubImage2DEXT) { obj->methodp_glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedTextureSubImage2DEXT"); }
		if(!obj->methodp_glCompressedTextureSubImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedTextureSubImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCompressedTextureSubImage3DEXT) { obj->methodp_glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)wglGetProcAddress("glCompressedTextureSubImage3DEXT"); }
		if(!obj->methodp_glCompressedTextureSubImage3DEXT) { obj->methodp_glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glCompressedTextureSubImage3DEXT"); }
		if(!obj->methodp_glCompressedTextureSubImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glCompressedTextureSubImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionFilter1D) { obj->methodp_glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)wglGetProcAddress("glConvolutionFilter1D"); }
		if(!obj->methodp_glConvolutionFilter1D) { obj->methodp_glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)GetProcAddress(modOpenGL32, "glConvolutionFilter1D"); }
		if(!obj->methodp_glConvolutionFilter1D) { args.This()->Set(v8::String::NewSymbol("glConvolutionFilter1D"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionFilter1DEXT) { obj->methodp_glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)wglGetProcAddress("glConvolutionFilter1DEXT"); }
		if(!obj->methodp_glConvolutionFilter1DEXT) { obj->methodp_glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)GetProcAddress(modOpenGL32, "glConvolutionFilter1DEXT"); }
		if(!obj->methodp_glConvolutionFilter1DEXT) { args.This()->Set(v8::String::NewSymbol("glConvolutionFilter1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionFilter2D) { obj->methodp_glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)wglGetProcAddress("glConvolutionFilter2D"); }
		if(!obj->methodp_glConvolutionFilter2D) { obj->methodp_glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)GetProcAddress(modOpenGL32, "glConvolutionFilter2D"); }
		if(!obj->methodp_glConvolutionFilter2D) { args.This()->Set(v8::String::NewSymbol("glConvolutionFilter2D"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionFilter2DEXT) { obj->methodp_glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)wglGetProcAddress("glConvolutionFilter2DEXT"); }
		if(!obj->methodp_glConvolutionFilter2DEXT) { obj->methodp_glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)GetProcAddress(modOpenGL32, "glConvolutionFilter2DEXT"); }
		if(!obj->methodp_glConvolutionFilter2DEXT) { args.This()->Set(v8::String::NewSymbol("glConvolutionFilter2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameterf) { obj->methodp_glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)wglGetProcAddress("glConvolutionParameterf"); }
		if(!obj->methodp_glConvolutionParameterf) { obj->methodp_glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)GetProcAddress(modOpenGL32, "glConvolutionParameterf"); }
		if(!obj->methodp_glConvolutionParameterf) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameterf"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameterfEXT) { obj->methodp_glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)wglGetProcAddress("glConvolutionParameterfEXT"); }
		if(!obj->methodp_glConvolutionParameterfEXT) { obj->methodp_glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)GetProcAddress(modOpenGL32, "glConvolutionParameterfEXT"); }
		if(!obj->methodp_glConvolutionParameterfEXT) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameterfEXT"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameterfv) { obj->methodp_glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)wglGetProcAddress("glConvolutionParameterfv"); }
		if(!obj->methodp_glConvolutionParameterfv) { obj->methodp_glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glConvolutionParameterfv"); }
		if(!obj->methodp_glConvolutionParameterfv) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameterfvEXT) { obj->methodp_glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)wglGetProcAddress("glConvolutionParameterfvEXT"); }
		if(!obj->methodp_glConvolutionParameterfvEXT) { obj->methodp_glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glConvolutionParameterfvEXT"); }
		if(!obj->methodp_glConvolutionParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameteri) { obj->methodp_glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)wglGetProcAddress("glConvolutionParameteri"); }
		if(!obj->methodp_glConvolutionParameteri) { obj->methodp_glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)GetProcAddress(modOpenGL32, "glConvolutionParameteri"); }
		if(!obj->methodp_glConvolutionParameteri) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameteri"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameteriEXT) { obj->methodp_glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)wglGetProcAddress("glConvolutionParameteriEXT"); }
		if(!obj->methodp_glConvolutionParameteriEXT) { obj->methodp_glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)GetProcAddress(modOpenGL32, "glConvolutionParameteriEXT"); }
		if(!obj->methodp_glConvolutionParameteriEXT) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameteriEXT"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameteriv) { obj->methodp_glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)wglGetProcAddress("glConvolutionParameteriv"); }
		if(!obj->methodp_glConvolutionParameteriv) { obj->methodp_glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glConvolutionParameteriv"); }
		if(!obj->methodp_glConvolutionParameteriv) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameterivEXT) { obj->methodp_glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)wglGetProcAddress("glConvolutionParameterivEXT"); }
		if(!obj->methodp_glConvolutionParameterivEXT) { obj->methodp_glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glConvolutionParameterivEXT"); }
		if(!obj->methodp_glConvolutionParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameterxOES) { obj->methodp_glConvolutionParameterxOES = (PFNGLCONVOLUTIONPARAMETERXOESPROC)wglGetProcAddress("glConvolutionParameterxOES"); }
		if(!obj->methodp_glConvolutionParameterxOES) { obj->methodp_glConvolutionParameterxOES = (PFNGLCONVOLUTIONPARAMETERXOESPROC)GetProcAddress(modOpenGL32, "glConvolutionParameterxOES"); }
		if(!obj->methodp_glConvolutionParameterxOES) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameterxOES"), v8::Undefined()); }
		if(!obj->methodp_glConvolutionParameterxvOES) { obj->methodp_glConvolutionParameterxvOES = (PFNGLCONVOLUTIONPARAMETERXVOESPROC)wglGetProcAddress("glConvolutionParameterxvOES"); }
		if(!obj->methodp_glConvolutionParameterxvOES) { obj->methodp_glConvolutionParameterxvOES = (PFNGLCONVOLUTIONPARAMETERXVOESPROC)GetProcAddress(modOpenGL32, "glConvolutionParameterxvOES"); }
		if(!obj->methodp_glConvolutionParameterxvOES) { args.This()->Set(v8::String::NewSymbol("glConvolutionParameterxvOES"), v8::Undefined()); }
		if(!obj->methodp_glCopyBufferSubData) { obj->methodp_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)wglGetProcAddress("glCopyBufferSubData"); }
		if(!obj->methodp_glCopyBufferSubData) { obj->methodp_glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)GetProcAddress(modOpenGL32, "glCopyBufferSubData"); }
		if(!obj->methodp_glCopyBufferSubData) { args.This()->Set(v8::String::NewSymbol("glCopyBufferSubData"), v8::Undefined()); }
		if(!obj->methodp_glCopyBufferSubDataNV) { obj->methodp_glCopyBufferSubDataNV = (PFNGLCOPYBUFFERSUBDATANVPROC)wglGetProcAddress("glCopyBufferSubDataNV"); }
		if(!obj->methodp_glCopyBufferSubDataNV) { obj->methodp_glCopyBufferSubDataNV = (PFNGLCOPYBUFFERSUBDATANVPROC)GetProcAddress(modOpenGL32, "glCopyBufferSubDataNV"); }
		if(!obj->methodp_glCopyBufferSubDataNV) { args.This()->Set(v8::String::NewSymbol("glCopyBufferSubDataNV"), v8::Undefined()); }
		if(!obj->methodp_glCopyColorSubTable) { obj->methodp_glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)wglGetProcAddress("glCopyColorSubTable"); }
		if(!obj->methodp_glCopyColorSubTable) { obj->methodp_glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)GetProcAddress(modOpenGL32, "glCopyColorSubTable"); }
		if(!obj->methodp_glCopyColorSubTable) { args.This()->Set(v8::String::NewSymbol("glCopyColorSubTable"), v8::Undefined()); }
		if(!obj->methodp_glCopyColorSubTableEXT) { obj->methodp_glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)wglGetProcAddress("glCopyColorSubTableEXT"); }
		if(!obj->methodp_glCopyColorSubTableEXT) { obj->methodp_glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)GetProcAddress(modOpenGL32, "glCopyColorSubTableEXT"); }
		if(!obj->methodp_glCopyColorSubTableEXT) { args.This()->Set(v8::String::NewSymbol("glCopyColorSubTableEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyColorTable) { obj->methodp_glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)wglGetProcAddress("glCopyColorTable"); }
		if(!obj->methodp_glCopyColorTable) { obj->methodp_glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)GetProcAddress(modOpenGL32, "glCopyColorTable"); }
		if(!obj->methodp_glCopyColorTable) { args.This()->Set(v8::String::NewSymbol("glCopyColorTable"), v8::Undefined()); }
		if(!obj->methodp_glCopyColorTableSGI) { obj->methodp_glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)wglGetProcAddress("glCopyColorTableSGI"); }
		if(!obj->methodp_glCopyColorTableSGI) { obj->methodp_glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)GetProcAddress(modOpenGL32, "glCopyColorTableSGI"); }
		if(!obj->methodp_glCopyColorTableSGI) { args.This()->Set(v8::String::NewSymbol("glCopyColorTableSGI"), v8::Undefined()); }
		if(!obj->methodp_glCopyConvolutionFilter1D) { obj->methodp_glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)wglGetProcAddress("glCopyConvolutionFilter1D"); }
		if(!obj->methodp_glCopyConvolutionFilter1D) { obj->methodp_glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)GetProcAddress(modOpenGL32, "glCopyConvolutionFilter1D"); }
		if(!obj->methodp_glCopyConvolutionFilter1D) { args.This()->Set(v8::String::NewSymbol("glCopyConvolutionFilter1D"), v8::Undefined()); }
		if(!obj->methodp_glCopyConvolutionFilter1DEXT) { obj->methodp_glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)wglGetProcAddress("glCopyConvolutionFilter1DEXT"); }
		if(!obj->methodp_glCopyConvolutionFilter1DEXT) { obj->methodp_glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)GetProcAddress(modOpenGL32, "glCopyConvolutionFilter1DEXT"); }
		if(!obj->methodp_glCopyConvolutionFilter1DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyConvolutionFilter1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyConvolutionFilter2D) { obj->methodp_glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)wglGetProcAddress("glCopyConvolutionFilter2D"); }
		if(!obj->methodp_glCopyConvolutionFilter2D) { obj->methodp_glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)GetProcAddress(modOpenGL32, "glCopyConvolutionFilter2D"); }
		if(!obj->methodp_glCopyConvolutionFilter2D) { args.This()->Set(v8::String::NewSymbol("glCopyConvolutionFilter2D"), v8::Undefined()); }
		if(!obj->methodp_glCopyConvolutionFilter2DEXT) { obj->methodp_glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)wglGetProcAddress("glCopyConvolutionFilter2DEXT"); }
		if(!obj->methodp_glCopyConvolutionFilter2DEXT) { obj->methodp_glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)GetProcAddress(modOpenGL32, "glCopyConvolutionFilter2DEXT"); }
		if(!obj->methodp_glCopyConvolutionFilter2DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyConvolutionFilter2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyImageSubData) { obj->methodp_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)wglGetProcAddress("glCopyImageSubData"); }
		if(!obj->methodp_glCopyImageSubData) { obj->methodp_glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)GetProcAddress(modOpenGL32, "glCopyImageSubData"); }
		if(!obj->methodp_glCopyImageSubData) { args.This()->Set(v8::String::NewSymbol("glCopyImageSubData"), v8::Undefined()); }
		if(!obj->methodp_glCopyImageSubDataEXT) { obj->methodp_glCopyImageSubDataEXT = (PFNGLCOPYIMAGESUBDATAEXTPROC)wglGetProcAddress("glCopyImageSubDataEXT"); }
		if(!obj->methodp_glCopyImageSubDataEXT) { obj->methodp_glCopyImageSubDataEXT = (PFNGLCOPYIMAGESUBDATAEXTPROC)GetProcAddress(modOpenGL32, "glCopyImageSubDataEXT"); }
		if(!obj->methodp_glCopyImageSubDataEXT) { args.This()->Set(v8::String::NewSymbol("glCopyImageSubDataEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyImageSubDataNV) { obj->methodp_glCopyImageSubDataNV = (PFNGLCOPYIMAGESUBDATANVPROC)wglGetProcAddress("glCopyImageSubDataNV"); }
		if(!obj->methodp_glCopyImageSubDataNV) { obj->methodp_glCopyImageSubDataNV = (PFNGLCOPYIMAGESUBDATANVPROC)GetProcAddress(modOpenGL32, "glCopyImageSubDataNV"); }
		if(!obj->methodp_glCopyImageSubDataNV) { args.This()->Set(v8::String::NewSymbol("glCopyImageSubDataNV"), v8::Undefined()); }
		if(!obj->methodp_glCopyMultiTexImage1DEXT) { obj->methodp_glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC)wglGetProcAddress("glCopyMultiTexImage1DEXT"); }
		if(!obj->methodp_glCopyMultiTexImage1DEXT) { obj->methodp_glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCopyMultiTexImage1DEXT"); }
		if(!obj->methodp_glCopyMultiTexImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyMultiTexImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyMultiTexImage2DEXT) { obj->methodp_glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC)wglGetProcAddress("glCopyMultiTexImage2DEXT"); }
		if(!obj->methodp_glCopyMultiTexImage2DEXT) { obj->methodp_glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCopyMultiTexImage2DEXT"); }
		if(!obj->methodp_glCopyMultiTexImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyMultiTexImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyMultiTexSubImage1DEXT) { obj->methodp_glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)wglGetProcAddress("glCopyMultiTexSubImage1DEXT"); }
		if(!obj->methodp_glCopyMultiTexSubImage1DEXT) { obj->methodp_glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCopyMultiTexSubImage1DEXT"); }
		if(!obj->methodp_glCopyMultiTexSubImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyMultiTexSubImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyMultiTexSubImage2DEXT) { obj->methodp_glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)wglGetProcAddress("glCopyMultiTexSubImage2DEXT"); }
		if(!obj->methodp_glCopyMultiTexSubImage2DEXT) { obj->methodp_glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCopyMultiTexSubImage2DEXT"); }
		if(!obj->methodp_glCopyMultiTexSubImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyMultiTexSubImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyMultiTexSubImage3DEXT) { obj->methodp_glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)wglGetProcAddress("glCopyMultiTexSubImage3DEXT"); }
		if(!obj->methodp_glCopyMultiTexSubImage3DEXT) { obj->methodp_glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glCopyMultiTexSubImage3DEXT"); }
		if(!obj->methodp_glCopyMultiTexSubImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyMultiTexSubImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyPathNV) { obj->methodp_glCopyPathNV = (PFNGLCOPYPATHNVPROC)wglGetProcAddress("glCopyPathNV"); }
		if(!obj->methodp_glCopyPathNV) { obj->methodp_glCopyPathNV = (PFNGLCOPYPATHNVPROC)GetProcAddress(modOpenGL32, "glCopyPathNV"); }
		if(!obj->methodp_glCopyPathNV) { args.This()->Set(v8::String::NewSymbol("glCopyPathNV"), v8::Undefined()); }
		if(!obj->methodp_glCopyPixels) { obj->methodp_glCopyPixels = (PFNGLCOPYPIXELSPROC)wglGetProcAddress("glCopyPixels"); }
		if(!obj->methodp_glCopyPixels) { obj->methodp_glCopyPixels = (PFNGLCOPYPIXELSPROC)GetProcAddress(modOpenGL32, "glCopyPixels"); }
		if(!obj->methodp_glCopyPixels) { args.This()->Set(v8::String::NewSymbol("glCopyPixels"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexImage1D) { obj->methodp_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)wglGetProcAddress("glCopyTexImage1D"); }
		if(!obj->methodp_glCopyTexImage1D) { obj->methodp_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC)GetProcAddress(modOpenGL32, "glCopyTexImage1D"); }
		if(!obj->methodp_glCopyTexImage1D) { args.This()->Set(v8::String::NewSymbol("glCopyTexImage1D"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexImage1DEXT) { obj->methodp_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)wglGetProcAddress("glCopyTexImage1DEXT"); }
		if(!obj->methodp_glCopyTexImage1DEXT) { obj->methodp_glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTexImage1DEXT"); }
		if(!obj->methodp_glCopyTexImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTexImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexImage2D) { obj->methodp_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)wglGetProcAddress("glCopyTexImage2D"); }
		if(!obj->methodp_glCopyTexImage2D) { obj->methodp_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC)GetProcAddress(modOpenGL32, "glCopyTexImage2D"); }
		if(!obj->methodp_glCopyTexImage2D) { args.This()->Set(v8::String::NewSymbol("glCopyTexImage2D"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexImage2DEXT) { obj->methodp_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)wglGetProcAddress("glCopyTexImage2DEXT"); }
		if(!obj->methodp_glCopyTexImage2DEXT) { obj->methodp_glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTexImage2DEXT"); }
		if(!obj->methodp_glCopyTexImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTexImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexSubImage1D) { obj->methodp_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)wglGetProcAddress("glCopyTexSubImage1D"); }
		if(!obj->methodp_glCopyTexSubImage1D) { obj->methodp_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC)GetProcAddress(modOpenGL32, "glCopyTexSubImage1D"); }
		if(!obj->methodp_glCopyTexSubImage1D) { args.This()->Set(v8::String::NewSymbol("glCopyTexSubImage1D"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexSubImage1DEXT) { obj->methodp_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)wglGetProcAddress("glCopyTexSubImage1DEXT"); }
		if(!obj->methodp_glCopyTexSubImage1DEXT) { obj->methodp_glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTexSubImage1DEXT"); }
		if(!obj->methodp_glCopyTexSubImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTexSubImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexSubImage2D) { obj->methodp_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)wglGetProcAddress("glCopyTexSubImage2D"); }
		if(!obj->methodp_glCopyTexSubImage2D) { obj->methodp_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC)GetProcAddress(modOpenGL32, "glCopyTexSubImage2D"); }
		if(!obj->methodp_glCopyTexSubImage2D) { args.This()->Set(v8::String::NewSymbol("glCopyTexSubImage2D"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexSubImage2DEXT) { obj->methodp_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)wglGetProcAddress("glCopyTexSubImage2DEXT"); }
		if(!obj->methodp_glCopyTexSubImage2DEXT) { obj->methodp_glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTexSubImage2DEXT"); }
		if(!obj->methodp_glCopyTexSubImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTexSubImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexSubImage3D) { obj->methodp_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)wglGetProcAddress("glCopyTexSubImage3D"); }
		if(!obj->methodp_glCopyTexSubImage3D) { obj->methodp_glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)GetProcAddress(modOpenGL32, "glCopyTexSubImage3D"); }
		if(!obj->methodp_glCopyTexSubImage3D) { args.This()->Set(v8::String::NewSymbol("glCopyTexSubImage3D"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexSubImage3DEXT) { obj->methodp_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)wglGetProcAddress("glCopyTexSubImage3DEXT"); }
		if(!obj->methodp_glCopyTexSubImage3DEXT) { obj->methodp_glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTexSubImage3DEXT"); }
		if(!obj->methodp_glCopyTexSubImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTexSubImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTexSubImage3DOES) { obj->methodp_glCopyTexSubImage3DOES = (PFNGLCOPYTEXSUBIMAGE3DOESPROC)wglGetProcAddress("glCopyTexSubImage3DOES"); }
		if(!obj->methodp_glCopyTexSubImage3DOES) { obj->methodp_glCopyTexSubImage3DOES = (PFNGLCOPYTEXSUBIMAGE3DOESPROC)GetProcAddress(modOpenGL32, "glCopyTexSubImage3DOES"); }
		if(!obj->methodp_glCopyTexSubImage3DOES) { args.This()->Set(v8::String::NewSymbol("glCopyTexSubImage3DOES"), v8::Undefined()); }
		if(!obj->methodp_glCopyTextureImage1DEXT) { obj->methodp_glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC)wglGetProcAddress("glCopyTextureImage1DEXT"); }
		if(!obj->methodp_glCopyTextureImage1DEXT) { obj->methodp_glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTextureImage1DEXT"); }
		if(!obj->methodp_glCopyTextureImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTextureImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTextureImage2DEXT) { obj->methodp_glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC)wglGetProcAddress("glCopyTextureImage2DEXT"); }
		if(!obj->methodp_glCopyTextureImage2DEXT) { obj->methodp_glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTextureImage2DEXT"); }
		if(!obj->methodp_glCopyTextureImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTextureImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTextureLevelsAPPLE) { obj->methodp_glCopyTextureLevelsAPPLE = (PFNGLCOPYTEXTURELEVELSAPPLEPROC)wglGetProcAddress("glCopyTextureLevelsAPPLE"); }
		if(!obj->methodp_glCopyTextureLevelsAPPLE) { obj->methodp_glCopyTextureLevelsAPPLE = (PFNGLCOPYTEXTURELEVELSAPPLEPROC)GetProcAddress(modOpenGL32, "glCopyTextureLevelsAPPLE"); }
		if(!obj->methodp_glCopyTextureLevelsAPPLE) { args.This()->Set(v8::String::NewSymbol("glCopyTextureLevelsAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glCopyTextureSubImage1DEXT) { obj->methodp_glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)wglGetProcAddress("glCopyTextureSubImage1DEXT"); }
		if(!obj->methodp_glCopyTextureSubImage1DEXT) { obj->methodp_glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTextureSubImage1DEXT"); }
		if(!obj->methodp_glCopyTextureSubImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTextureSubImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTextureSubImage2DEXT) { obj->methodp_glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)wglGetProcAddress("glCopyTextureSubImage2DEXT"); }
		if(!obj->methodp_glCopyTextureSubImage2DEXT) { obj->methodp_glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTextureSubImage2DEXT"); }
		if(!obj->methodp_glCopyTextureSubImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTextureSubImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCopyTextureSubImage3DEXT) { obj->methodp_glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)wglGetProcAddress("glCopyTextureSubImage3DEXT"); }
		if(!obj->methodp_glCopyTextureSubImage3DEXT) { obj->methodp_glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glCopyTextureSubImage3DEXT"); }
		if(!obj->methodp_glCopyTextureSubImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glCopyTextureSubImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glCoverFillPathInstancedNV) { obj->methodp_glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC)wglGetProcAddress("glCoverFillPathInstancedNV"); }
		if(!obj->methodp_glCoverFillPathInstancedNV) { obj->methodp_glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC)GetProcAddress(modOpenGL32, "glCoverFillPathInstancedNV"); }
		if(!obj->methodp_glCoverFillPathInstancedNV) { args.This()->Set(v8::String::NewSymbol("glCoverFillPathInstancedNV"), v8::Undefined()); }
		if(!obj->methodp_glCoverFillPathNV) { obj->methodp_glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC)wglGetProcAddress("glCoverFillPathNV"); }
		if(!obj->methodp_glCoverFillPathNV) { obj->methodp_glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC)GetProcAddress(modOpenGL32, "glCoverFillPathNV"); }
		if(!obj->methodp_glCoverFillPathNV) { args.This()->Set(v8::String::NewSymbol("glCoverFillPathNV"), v8::Undefined()); }
		if(!obj->methodp_glCoverStrokePathInstancedNV) { obj->methodp_glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)wglGetProcAddress("glCoverStrokePathInstancedNV"); }
		if(!obj->methodp_glCoverStrokePathInstancedNV) { obj->methodp_glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)GetProcAddress(modOpenGL32, "glCoverStrokePathInstancedNV"); }
		if(!obj->methodp_glCoverStrokePathInstancedNV) { args.This()->Set(v8::String::NewSymbol("glCoverStrokePathInstancedNV"), v8::Undefined()); }
		if(!obj->methodp_glCoverStrokePathNV) { obj->methodp_glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC)wglGetProcAddress("glCoverStrokePathNV"); }
		if(!obj->methodp_glCoverStrokePathNV) { obj->methodp_glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC)GetProcAddress(modOpenGL32, "glCoverStrokePathNV"); }
		if(!obj->methodp_glCoverStrokePathNV) { args.This()->Set(v8::String::NewSymbol("glCoverStrokePathNV"), v8::Undefined()); }
		if(!obj->methodp_glCoverageMaskNV) { obj->methodp_glCoverageMaskNV = (PFNGLCOVERAGEMASKNVPROC)wglGetProcAddress("glCoverageMaskNV"); }
		if(!obj->methodp_glCoverageMaskNV) { obj->methodp_glCoverageMaskNV = (PFNGLCOVERAGEMASKNVPROC)GetProcAddress(modOpenGL32, "glCoverageMaskNV"); }
		if(!obj->methodp_glCoverageMaskNV) { args.This()->Set(v8::String::NewSymbol("glCoverageMaskNV"), v8::Undefined()); }
		if(!obj->methodp_glCoverageOperationNV) { obj->methodp_glCoverageOperationNV = (PFNGLCOVERAGEOPERATIONNVPROC)wglGetProcAddress("glCoverageOperationNV"); }
		if(!obj->methodp_glCoverageOperationNV) { obj->methodp_glCoverageOperationNV = (PFNGLCOVERAGEOPERATIONNVPROC)GetProcAddress(modOpenGL32, "glCoverageOperationNV"); }
		if(!obj->methodp_glCoverageOperationNV) { args.This()->Set(v8::String::NewSymbol("glCoverageOperationNV"), v8::Undefined()); }
		if(!obj->methodp_glCreatePerfQueryINTEL) { obj->methodp_glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC)wglGetProcAddress("glCreatePerfQueryINTEL"); }
		if(!obj->methodp_glCreatePerfQueryINTEL) { obj->methodp_glCreatePerfQueryINTEL = (PFNGLCREATEPERFQUERYINTELPROC)GetProcAddress(modOpenGL32, "glCreatePerfQueryINTEL"); }
		if(!obj->methodp_glCreatePerfQueryINTEL) { args.This()->Set(v8::String::NewSymbol("glCreatePerfQueryINTEL"), v8::Undefined()); }
		if(!obj->methodp_glCreateProgram) { obj->methodp_glCreateProgram = (PFNGLCREATEPROGRAMPROC)wglGetProcAddress("glCreateProgram"); }
		if(!obj->methodp_glCreateProgram) { obj->methodp_glCreateProgram = (PFNGLCREATEPROGRAMPROC)GetProcAddress(modOpenGL32, "glCreateProgram"); }
		if(!obj->methodp_glCreateProgram) { args.This()->Set(v8::String::NewSymbol("glCreateProgram"), v8::Undefined()); }
		if(!obj->methodp_glCreateProgramObjectARB) { obj->methodp_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)wglGetProcAddress("glCreateProgramObjectARB"); }
		if(!obj->methodp_glCreateProgramObjectARB) { obj->methodp_glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)GetProcAddress(modOpenGL32, "glCreateProgramObjectARB"); }
		if(!obj->methodp_glCreateProgramObjectARB) { args.This()->Set(v8::String::NewSymbol("glCreateProgramObjectARB"), v8::Undefined()); }
		if(!obj->methodp_glCreateShader) { obj->methodp_glCreateShader = (PFNGLCREATESHADERPROC)wglGetProcAddress("glCreateShader"); }
		if(!obj->methodp_glCreateShader) { obj->methodp_glCreateShader = (PFNGLCREATESHADERPROC)GetProcAddress(modOpenGL32, "glCreateShader"); }
		if(!obj->methodp_glCreateShader) { args.This()->Set(v8::String::NewSymbol("glCreateShader"), v8::Undefined()); }
		if(!obj->methodp_glCreateShaderObjectARB) { obj->methodp_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)wglGetProcAddress("glCreateShaderObjectARB"); }
		if(!obj->methodp_glCreateShaderObjectARB) { obj->methodp_glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)GetProcAddress(modOpenGL32, "glCreateShaderObjectARB"); }
		if(!obj->methodp_glCreateShaderObjectARB) { args.This()->Set(v8::String::NewSymbol("glCreateShaderObjectARB"), v8::Undefined()); }
		if(!obj->methodp_glCreateShaderProgramEXT) { obj->methodp_glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC)wglGetProcAddress("glCreateShaderProgramEXT"); }
		if(!obj->methodp_glCreateShaderProgramEXT) { obj->methodp_glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC)GetProcAddress(modOpenGL32, "glCreateShaderProgramEXT"); }
		if(!obj->methodp_glCreateShaderProgramEXT) { args.This()->Set(v8::String::NewSymbol("glCreateShaderProgramEXT"), v8::Undefined()); }
		if(!obj->methodp_glCreateShaderProgramv) { obj->methodp_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)wglGetProcAddress("glCreateShaderProgramv"); }
		if(!obj->methodp_glCreateShaderProgramv) { obj->methodp_glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)GetProcAddress(modOpenGL32, "glCreateShaderProgramv"); }
		if(!obj->methodp_glCreateShaderProgramv) { args.This()->Set(v8::String::NewSymbol("glCreateShaderProgramv"), v8::Undefined()); }
		if(!obj->methodp_glCreateShaderProgramvEXT) { obj->methodp_glCreateShaderProgramvEXT = (PFNGLCREATESHADERPROGRAMVEXTPROC)wglGetProcAddress("glCreateShaderProgramvEXT"); }
		if(!obj->methodp_glCreateShaderProgramvEXT) { obj->methodp_glCreateShaderProgramvEXT = (PFNGLCREATESHADERPROGRAMVEXTPROC)GetProcAddress(modOpenGL32, "glCreateShaderProgramvEXT"); }
		if(!obj->methodp_glCreateShaderProgramvEXT) { args.This()->Set(v8::String::NewSymbol("glCreateShaderProgramvEXT"), v8::Undefined()); }
		if(!obj->methodp_glCreateSyncFromCLeventARB) { obj->methodp_glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC)wglGetProcAddress("glCreateSyncFromCLeventARB"); }
		if(!obj->methodp_glCreateSyncFromCLeventARB) { obj->methodp_glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC)GetProcAddress(modOpenGL32, "glCreateSyncFromCLeventARB"); }
		if(!obj->methodp_glCreateSyncFromCLeventARB) { args.This()->Set(v8::String::NewSymbol("glCreateSyncFromCLeventARB"), v8::Undefined()); }
		if(!obj->methodp_glCullFace) { obj->methodp_glCullFace = (PFNGLCULLFACEPROC)wglGetProcAddress("glCullFace"); }
		if(!obj->methodp_glCullFace) { obj->methodp_glCullFace = (PFNGLCULLFACEPROC)GetProcAddress(modOpenGL32, "glCullFace"); }
		if(!obj->methodp_glCullFace) { args.This()->Set(v8::String::NewSymbol("glCullFace"), v8::Undefined()); }
		if(!obj->methodp_glCullParameterdvEXT) { obj->methodp_glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC)wglGetProcAddress("glCullParameterdvEXT"); }
		if(!obj->methodp_glCullParameterdvEXT) { obj->methodp_glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC)GetProcAddress(modOpenGL32, "glCullParameterdvEXT"); }
		if(!obj->methodp_glCullParameterdvEXT) { args.This()->Set(v8::String::NewSymbol("glCullParameterdvEXT"), v8::Undefined()); }
		if(!obj->methodp_glCullParameterfvEXT) { obj->methodp_glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC)wglGetProcAddress("glCullParameterfvEXT"); }
		if(!obj->methodp_glCullParameterfvEXT) { obj->methodp_glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glCullParameterfvEXT"); }
		if(!obj->methodp_glCullParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glCullParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glCurrentPaletteMatrixARB) { obj->methodp_glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC)wglGetProcAddress("glCurrentPaletteMatrixARB"); }
		if(!obj->methodp_glCurrentPaletteMatrixARB) { obj->methodp_glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC)GetProcAddress(modOpenGL32, "glCurrentPaletteMatrixARB"); }
		if(!obj->methodp_glCurrentPaletteMatrixARB) { args.This()->Set(v8::String::NewSymbol("glCurrentPaletteMatrixARB"), v8::Undefined()); }
		if(!obj->methodp_glCurrentPaletteMatrixOES) { obj->methodp_glCurrentPaletteMatrixOES = (PFNGLCURRENTPALETTEMATRIXOESPROC)wglGetProcAddress("glCurrentPaletteMatrixOES"); }
		if(!obj->methodp_glCurrentPaletteMatrixOES) { obj->methodp_glCurrentPaletteMatrixOES = (PFNGLCURRENTPALETTEMATRIXOESPROC)GetProcAddress(modOpenGL32, "glCurrentPaletteMatrixOES"); }
		if(!obj->methodp_glCurrentPaletteMatrixOES) { args.This()->Set(v8::String::NewSymbol("glCurrentPaletteMatrixOES"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageCallback) { obj->methodp_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)wglGetProcAddress("glDebugMessageCallback"); }
		if(!obj->methodp_glDebugMessageCallback) { obj->methodp_glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)GetProcAddress(modOpenGL32, "glDebugMessageCallback"); }
		if(!obj->methodp_glDebugMessageCallback) { args.This()->Set(v8::String::NewSymbol("glDebugMessageCallback"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageCallbackAMD) { obj->methodp_glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC)wglGetProcAddress("glDebugMessageCallbackAMD"); }
		if(!obj->methodp_glDebugMessageCallbackAMD) { obj->methodp_glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC)GetProcAddress(modOpenGL32, "glDebugMessageCallbackAMD"); }
		if(!obj->methodp_glDebugMessageCallbackAMD) { args.This()->Set(v8::String::NewSymbol("glDebugMessageCallbackAMD"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageCallbackARB) { obj->methodp_glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC)wglGetProcAddress("glDebugMessageCallbackARB"); }
		if(!obj->methodp_glDebugMessageCallbackARB) { obj->methodp_glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC)GetProcAddress(modOpenGL32, "glDebugMessageCallbackARB"); }
		if(!obj->methodp_glDebugMessageCallbackARB) { args.This()->Set(v8::String::NewSymbol("glDebugMessageCallbackARB"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageCallbackKHR) { obj->methodp_glDebugMessageCallbackKHR = (PFNGLDEBUGMESSAGECALLBACKKHRPROC)wglGetProcAddress("glDebugMessageCallbackKHR"); }
		if(!obj->methodp_glDebugMessageCallbackKHR) { obj->methodp_glDebugMessageCallbackKHR = (PFNGLDEBUGMESSAGECALLBACKKHRPROC)GetProcAddress(modOpenGL32, "glDebugMessageCallbackKHR"); }
		if(!obj->methodp_glDebugMessageCallbackKHR) { args.This()->Set(v8::String::NewSymbol("glDebugMessageCallbackKHR"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageControl) { obj->methodp_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)wglGetProcAddress("glDebugMessageControl"); }
		if(!obj->methodp_glDebugMessageControl) { obj->methodp_glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)GetProcAddress(modOpenGL32, "glDebugMessageControl"); }
		if(!obj->methodp_glDebugMessageControl) { args.This()->Set(v8::String::NewSymbol("glDebugMessageControl"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageControlARB) { obj->methodp_glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC)wglGetProcAddress("glDebugMessageControlARB"); }
		if(!obj->methodp_glDebugMessageControlARB) { obj->methodp_glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC)GetProcAddress(modOpenGL32, "glDebugMessageControlARB"); }
		if(!obj->methodp_glDebugMessageControlARB) { args.This()->Set(v8::String::NewSymbol("glDebugMessageControlARB"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageControlKHR) { obj->methodp_glDebugMessageControlKHR = (PFNGLDEBUGMESSAGECONTROLKHRPROC)wglGetProcAddress("glDebugMessageControlKHR"); }
		if(!obj->methodp_glDebugMessageControlKHR) { obj->methodp_glDebugMessageControlKHR = (PFNGLDEBUGMESSAGECONTROLKHRPROC)GetProcAddress(modOpenGL32, "glDebugMessageControlKHR"); }
		if(!obj->methodp_glDebugMessageControlKHR) { args.This()->Set(v8::String::NewSymbol("glDebugMessageControlKHR"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageEnableAMD) { obj->methodp_glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC)wglGetProcAddress("glDebugMessageEnableAMD"); }
		if(!obj->methodp_glDebugMessageEnableAMD) { obj->methodp_glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC)GetProcAddress(modOpenGL32, "glDebugMessageEnableAMD"); }
		if(!obj->methodp_glDebugMessageEnableAMD) { args.This()->Set(v8::String::NewSymbol("glDebugMessageEnableAMD"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageInsert) { obj->methodp_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)wglGetProcAddress("glDebugMessageInsert"); }
		if(!obj->methodp_glDebugMessageInsert) { obj->methodp_glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)GetProcAddress(modOpenGL32, "glDebugMessageInsert"); }
		if(!obj->methodp_glDebugMessageInsert) { args.This()->Set(v8::String::NewSymbol("glDebugMessageInsert"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageInsertAMD) { obj->methodp_glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC)wglGetProcAddress("glDebugMessageInsertAMD"); }
		if(!obj->methodp_glDebugMessageInsertAMD) { obj->methodp_glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC)GetProcAddress(modOpenGL32, "glDebugMessageInsertAMD"); }
		if(!obj->methodp_glDebugMessageInsertAMD) { args.This()->Set(v8::String::NewSymbol("glDebugMessageInsertAMD"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageInsertARB) { obj->methodp_glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC)wglGetProcAddress("glDebugMessageInsertARB"); }
		if(!obj->methodp_glDebugMessageInsertARB) { obj->methodp_glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC)GetProcAddress(modOpenGL32, "glDebugMessageInsertARB"); }
		if(!obj->methodp_glDebugMessageInsertARB) { args.This()->Set(v8::String::NewSymbol("glDebugMessageInsertARB"), v8::Undefined()); }
		if(!obj->methodp_glDebugMessageInsertKHR) { obj->methodp_glDebugMessageInsertKHR = (PFNGLDEBUGMESSAGEINSERTKHRPROC)wglGetProcAddress("glDebugMessageInsertKHR"); }
		if(!obj->methodp_glDebugMessageInsertKHR) { obj->methodp_glDebugMessageInsertKHR = (PFNGLDEBUGMESSAGEINSERTKHRPROC)GetProcAddress(modOpenGL32, "glDebugMessageInsertKHR"); }
		if(!obj->methodp_glDebugMessageInsertKHR) { args.This()->Set(v8::String::NewSymbol("glDebugMessageInsertKHR"), v8::Undefined()); }
		if(!obj->methodp_glDeformSGIX) { obj->methodp_glDeformSGIX = (PFNGLDEFORMSGIXPROC)wglGetProcAddress("glDeformSGIX"); }
		if(!obj->methodp_glDeformSGIX) { obj->methodp_glDeformSGIX = (PFNGLDEFORMSGIXPROC)GetProcAddress(modOpenGL32, "glDeformSGIX"); }
		if(!obj->methodp_glDeformSGIX) { args.This()->Set(v8::String::NewSymbol("glDeformSGIX"), v8::Undefined()); }
		if(!obj->methodp_glDeformationMap3dSGIX) { obj->methodp_glDeformationMap3dSGIX = (PFNGLDEFORMATIONMAP3DSGIXPROC)wglGetProcAddress("glDeformationMap3dSGIX"); }
		if(!obj->methodp_glDeformationMap3dSGIX) { obj->methodp_glDeformationMap3dSGIX = (PFNGLDEFORMATIONMAP3DSGIXPROC)GetProcAddress(modOpenGL32, "glDeformationMap3dSGIX"); }
		if(!obj->methodp_glDeformationMap3dSGIX) { args.This()->Set(v8::String::NewSymbol("glDeformationMap3dSGIX"), v8::Undefined()); }
		if(!obj->methodp_glDeformationMap3fSGIX) { obj->methodp_glDeformationMap3fSGIX = (PFNGLDEFORMATIONMAP3FSGIXPROC)wglGetProcAddress("glDeformationMap3fSGIX"); }
		if(!obj->methodp_glDeformationMap3fSGIX) { obj->methodp_glDeformationMap3fSGIX = (PFNGLDEFORMATIONMAP3FSGIXPROC)GetProcAddress(modOpenGL32, "glDeformationMap3fSGIX"); }
		if(!obj->methodp_glDeformationMap3fSGIX) { args.This()->Set(v8::String::NewSymbol("glDeformationMap3fSGIX"), v8::Undefined()); }
		if(!obj->methodp_glDeleteAsyncMarkersSGIX) { obj->methodp_glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC)wglGetProcAddress("glDeleteAsyncMarkersSGIX"); }
		if(!obj->methodp_glDeleteAsyncMarkersSGIX) { obj->methodp_glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC)GetProcAddress(modOpenGL32, "glDeleteAsyncMarkersSGIX"); }
		if(!obj->methodp_glDeleteAsyncMarkersSGIX) { args.This()->Set(v8::String::NewSymbol("glDeleteAsyncMarkersSGIX"), v8::Undefined()); }
		if(!obj->methodp_glDeleteBuffers) { obj->methodp_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)wglGetProcAddress("glDeleteBuffers"); }
		if(!obj->methodp_glDeleteBuffers) { obj->methodp_glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)GetProcAddress(modOpenGL32, "glDeleteBuffers"); }
		if(!obj->methodp_glDeleteBuffers) { args.This()->Set(v8::String::NewSymbol("glDeleteBuffers"), v8::Undefined()); }
		if(!obj->methodp_glDeleteBuffersARB) { obj->methodp_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)wglGetProcAddress("glDeleteBuffersARB"); }
		if(!obj->methodp_glDeleteBuffersARB) { obj->methodp_glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)GetProcAddress(modOpenGL32, "glDeleteBuffersARB"); }
		if(!obj->methodp_glDeleteBuffersARB) { args.This()->Set(v8::String::NewSymbol("glDeleteBuffersARB"), v8::Undefined()); }
		if(!obj->methodp_glDeleteFencesAPPLE) { obj->methodp_glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC)wglGetProcAddress("glDeleteFencesAPPLE"); }
		if(!obj->methodp_glDeleteFencesAPPLE) { obj->methodp_glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC)GetProcAddress(modOpenGL32, "glDeleteFencesAPPLE"); }
		if(!obj->methodp_glDeleteFencesAPPLE) { args.This()->Set(v8::String::NewSymbol("glDeleteFencesAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glDeleteFencesNV) { obj->methodp_glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)wglGetProcAddress("glDeleteFencesNV"); }
		if(!obj->methodp_glDeleteFencesNV) { obj->methodp_glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)GetProcAddress(modOpenGL32, "glDeleteFencesNV"); }
		if(!obj->methodp_glDeleteFencesNV) { args.This()->Set(v8::String::NewSymbol("glDeleteFencesNV"), v8::Undefined()); }
		if(!obj->methodp_glDeleteFragmentShaderATI) { obj->methodp_glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC)wglGetProcAddress("glDeleteFragmentShaderATI"); }
		if(!obj->methodp_glDeleteFragmentShaderATI) { obj->methodp_glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC)GetProcAddress(modOpenGL32, "glDeleteFragmentShaderATI"); }
		if(!obj->methodp_glDeleteFragmentShaderATI) { args.This()->Set(v8::String::NewSymbol("glDeleteFragmentShaderATI"), v8::Undefined()); }
		if(!obj->methodp_glDeleteFramebuffers) { obj->methodp_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)wglGetProcAddress("glDeleteFramebuffers"); }
		if(!obj->methodp_glDeleteFramebuffers) { obj->methodp_glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)GetProcAddress(modOpenGL32, "glDeleteFramebuffers"); }
		if(!obj->methodp_glDeleteFramebuffers) { args.This()->Set(v8::String::NewSymbol("glDeleteFramebuffers"), v8::Undefined()); }
		if(!obj->methodp_glDeleteFramebuffersEXT) { obj->methodp_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)wglGetProcAddress("glDeleteFramebuffersEXT"); }
		if(!obj->methodp_glDeleteFramebuffersEXT) { obj->methodp_glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)GetProcAddress(modOpenGL32, "glDeleteFramebuffersEXT"); }
		if(!obj->methodp_glDeleteFramebuffersEXT) { args.This()->Set(v8::String::NewSymbol("glDeleteFramebuffersEXT"), v8::Undefined()); }
		if(!obj->methodp_glDeleteFramebuffersOES) { obj->methodp_glDeleteFramebuffersOES = (PFNGLDELETEFRAMEBUFFERSOESPROC)wglGetProcAddress("glDeleteFramebuffersOES"); }
		if(!obj->methodp_glDeleteFramebuffersOES) { obj->methodp_glDeleteFramebuffersOES = (PFNGLDELETEFRAMEBUFFERSOESPROC)GetProcAddress(modOpenGL32, "glDeleteFramebuffersOES"); }
		if(!obj->methodp_glDeleteFramebuffersOES) { args.This()->Set(v8::String::NewSymbol("glDeleteFramebuffersOES"), v8::Undefined()); }
		if(!obj->methodp_glDeleteLists) { obj->methodp_glDeleteLists = (PFNGLDELETELISTSPROC)wglGetProcAddress("glDeleteLists"); }
		if(!obj->methodp_glDeleteLists) { obj->methodp_glDeleteLists = (PFNGLDELETELISTSPROC)GetProcAddress(modOpenGL32, "glDeleteLists"); }
		if(!obj->methodp_glDeleteLists) { args.This()->Set(v8::String::NewSymbol("glDeleteLists"), v8::Undefined()); }
		if(!obj->methodp_glDeleteNamedStringARB) { obj->methodp_glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC)wglGetProcAddress("glDeleteNamedStringARB"); }
		if(!obj->methodp_glDeleteNamedStringARB) { obj->methodp_glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC)GetProcAddress(modOpenGL32, "glDeleteNamedStringARB"); }
		if(!obj->methodp_glDeleteNamedStringARB) { args.This()->Set(v8::String::NewSymbol("glDeleteNamedStringARB"), v8::Undefined()); }
		if(!obj->methodp_glDeleteNamesAMD) { obj->methodp_glDeleteNamesAMD = (PFNGLDELETENAMESAMDPROC)wglGetProcAddress("glDeleteNamesAMD"); }
		if(!obj->methodp_glDeleteNamesAMD) { obj->methodp_glDeleteNamesAMD = (PFNGLDELETENAMESAMDPROC)GetProcAddress(modOpenGL32, "glDeleteNamesAMD"); }
		if(!obj->methodp_glDeleteNamesAMD) { args.This()->Set(v8::String::NewSymbol("glDeleteNamesAMD"), v8::Undefined()); }
		if(!obj->methodp_glDeleteObjectARB) { obj->methodp_glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC)wglGetProcAddress("glDeleteObjectARB"); }
		if(!obj->methodp_glDeleteObjectARB) { obj->methodp_glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC)GetProcAddress(modOpenGL32, "glDeleteObjectARB"); }
		if(!obj->methodp_glDeleteObjectARB) { args.This()->Set(v8::String::NewSymbol("glDeleteObjectARB"), v8::Undefined()); }
		if(!obj->methodp_glDeleteOcclusionQueriesNV) { obj->methodp_glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)wglGetProcAddress("glDeleteOcclusionQueriesNV"); }
		if(!obj->methodp_glDeleteOcclusionQueriesNV) { obj->methodp_glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)GetProcAddress(modOpenGL32, "glDeleteOcclusionQueriesNV"); }
		if(!obj->methodp_glDeleteOcclusionQueriesNV) { args.This()->Set(v8::String::NewSymbol("glDeleteOcclusionQueriesNV"), v8::Undefined()); }
		if(!obj->methodp_glDeletePathsNV) { obj->methodp_glDeletePathsNV = (PFNGLDELETEPATHSNVPROC)wglGetProcAddress("glDeletePathsNV"); }
		if(!obj->methodp_glDeletePathsNV) { obj->methodp_glDeletePathsNV = (PFNGLDELETEPATHSNVPROC)GetProcAddress(modOpenGL32, "glDeletePathsNV"); }
		if(!obj->methodp_glDeletePathsNV) { args.This()->Set(v8::String::NewSymbol("glDeletePathsNV"), v8::Undefined()); }
		if(!obj->methodp_glDeletePerfMonitorsAMD) { obj->methodp_glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC)wglGetProcAddress("glDeletePerfMonitorsAMD"); }
		if(!obj->methodp_glDeletePerfMonitorsAMD) { obj->methodp_glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC)GetProcAddress(modOpenGL32, "glDeletePerfMonitorsAMD"); }
		if(!obj->methodp_glDeletePerfMonitorsAMD) { args.This()->Set(v8::String::NewSymbol("glDeletePerfMonitorsAMD"), v8::Undefined()); }
		if(!obj->methodp_glDeletePerfQueryINTEL) { obj->methodp_glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC)wglGetProcAddress("glDeletePerfQueryINTEL"); }
		if(!obj->methodp_glDeletePerfQueryINTEL) { obj->methodp_glDeletePerfQueryINTEL = (PFNGLDELETEPERFQUERYINTELPROC)GetProcAddress(modOpenGL32, "glDeletePerfQueryINTEL"); }
		if(!obj->methodp_glDeletePerfQueryINTEL) { args.This()->Set(v8::String::NewSymbol("glDeletePerfQueryINTEL"), v8::Undefined()); }
		if(!obj->methodp_glDeleteProgram) { obj->methodp_glDeleteProgram = (PFNGLDELETEPROGRAMPROC)wglGetProcAddress("glDeleteProgram"); }
		if(!obj->methodp_glDeleteProgram) { obj->methodp_glDeleteProgram = (PFNGLDELETEPROGRAMPROC)GetProcAddress(modOpenGL32, "glDeleteProgram"); }
		if(!obj->methodp_glDeleteProgram) { args.This()->Set(v8::String::NewSymbol("glDeleteProgram"), v8::Undefined()); }
		if(!obj->methodp_glDeleteProgramPipelines) { obj->methodp_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)wglGetProcAddress("glDeleteProgramPipelines"); }
		if(!obj->methodp_glDeleteProgramPipelines) { obj->methodp_glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)GetProcAddress(modOpenGL32, "glDeleteProgramPipelines"); }
		if(!obj->methodp_glDeleteProgramPipelines) { args.This()->Set(v8::String::NewSymbol("glDeleteProgramPipelines"), v8::Undefined()); }
		if(!obj->methodp_glDeleteProgramPipelinesEXT) { obj->methodp_glDeleteProgramPipelinesEXT = (PFNGLDELETEPROGRAMPIPELINESEXTPROC)wglGetProcAddress("glDeleteProgramPipelinesEXT"); }
		if(!obj->methodp_glDeleteProgramPipelinesEXT) { obj->methodp_glDeleteProgramPipelinesEXT = (PFNGLDELETEPROGRAMPIPELINESEXTPROC)GetProcAddress(modOpenGL32, "glDeleteProgramPipelinesEXT"); }
		if(!obj->methodp_glDeleteProgramPipelinesEXT) { args.This()->Set(v8::String::NewSymbol("glDeleteProgramPipelinesEXT"), v8::Undefined()); }
		if(!obj->methodp_glDeleteProgramsARB) { obj->methodp_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)wglGetProcAddress("glDeleteProgramsARB"); }
		if(!obj->methodp_glDeleteProgramsARB) { obj->methodp_glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)GetProcAddress(modOpenGL32, "glDeleteProgramsARB"); }
		if(!obj->methodp_glDeleteProgramsARB) { args.This()->Set(v8::String::NewSymbol("glDeleteProgramsARB"), v8::Undefined()); }
		if(!obj->methodp_glDeleteProgramsNV) { obj->methodp_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)wglGetProcAddress("glDeleteProgramsNV"); }
		if(!obj->methodp_glDeleteProgramsNV) { obj->methodp_glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)GetProcAddress(modOpenGL32, "glDeleteProgramsNV"); }
		if(!obj->methodp_glDeleteProgramsNV) { args.This()->Set(v8::String::NewSymbol("glDeleteProgramsNV"), v8::Undefined()); }
		if(!obj->methodp_glDeleteQueries) { obj->methodp_glDeleteQueries = (PFNGLDELETEQUERIESPROC)wglGetProcAddress("glDeleteQueries"); }
		if(!obj->methodp_glDeleteQueries) { obj->methodp_glDeleteQueries = (PFNGLDELETEQUERIESPROC)GetProcAddress(modOpenGL32, "glDeleteQueries"); }
		if(!obj->methodp_glDeleteQueries) { args.This()->Set(v8::String::NewSymbol("glDeleteQueries"), v8::Undefined()); }
		if(!obj->methodp_glDeleteQueriesARB) { obj->methodp_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)wglGetProcAddress("glDeleteQueriesARB"); }
		if(!obj->methodp_glDeleteQueriesARB) { obj->methodp_glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)GetProcAddress(modOpenGL32, "glDeleteQueriesARB"); }
		if(!obj->methodp_glDeleteQueriesARB) { args.This()->Set(v8::String::NewSymbol("glDeleteQueriesARB"), v8::Undefined()); }
		if(!obj->methodp_glDeleteQueriesEXT) { obj->methodp_glDeleteQueriesEXT = (PFNGLDELETEQUERIESEXTPROC)wglGetProcAddress("glDeleteQueriesEXT"); }
		if(!obj->methodp_glDeleteQueriesEXT) { obj->methodp_glDeleteQueriesEXT = (PFNGLDELETEQUERIESEXTPROC)GetProcAddress(modOpenGL32, "glDeleteQueriesEXT"); }
		if(!obj->methodp_glDeleteQueriesEXT) { args.This()->Set(v8::String::NewSymbol("glDeleteQueriesEXT"), v8::Undefined()); }
		if(!obj->methodp_glDeleteRenderbuffers) { obj->methodp_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)wglGetProcAddress("glDeleteRenderbuffers"); }
		if(!obj->methodp_glDeleteRenderbuffers) { obj->methodp_glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)GetProcAddress(modOpenGL32, "glDeleteRenderbuffers"); }
		if(!obj->methodp_glDeleteRenderbuffers) { args.This()->Set(v8::String::NewSymbol("glDeleteRenderbuffers"), v8::Undefined()); }
		if(!obj->methodp_glDeleteRenderbuffersEXT) { obj->methodp_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)wglGetProcAddress("glDeleteRenderbuffersEXT"); }
		if(!obj->methodp_glDeleteRenderbuffersEXT) { obj->methodp_glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)GetProcAddress(modOpenGL32, "glDeleteRenderbuffersEXT"); }
		if(!obj->methodp_glDeleteRenderbuffersEXT) { args.This()->Set(v8::String::NewSymbol("glDeleteRenderbuffersEXT"), v8::Undefined()); }
		if(!obj->methodp_glDeleteRenderbuffersOES) { obj->methodp_glDeleteRenderbuffersOES = (PFNGLDELETERENDERBUFFERSOESPROC)wglGetProcAddress("glDeleteRenderbuffersOES"); }
		if(!obj->methodp_glDeleteRenderbuffersOES) { obj->methodp_glDeleteRenderbuffersOES = (PFNGLDELETERENDERBUFFERSOESPROC)GetProcAddress(modOpenGL32, "glDeleteRenderbuffersOES"); }
		if(!obj->methodp_glDeleteRenderbuffersOES) { args.This()->Set(v8::String::NewSymbol("glDeleteRenderbuffersOES"), v8::Undefined()); }
		if(!obj->methodp_glDeleteSamplers) { obj->methodp_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)wglGetProcAddress("glDeleteSamplers"); }
		if(!obj->methodp_glDeleteSamplers) { obj->methodp_glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)GetProcAddress(modOpenGL32, "glDeleteSamplers"); }
		if(!obj->methodp_glDeleteSamplers) { args.This()->Set(v8::String::NewSymbol("glDeleteSamplers"), v8::Undefined()); }
		if(!obj->methodp_glDeleteShader) { obj->methodp_glDeleteShader = (PFNGLDELETESHADERPROC)wglGetProcAddress("glDeleteShader"); }
		if(!obj->methodp_glDeleteShader) { obj->methodp_glDeleteShader = (PFNGLDELETESHADERPROC)GetProcAddress(modOpenGL32, "glDeleteShader"); }
		if(!obj->methodp_glDeleteShader) { args.This()->Set(v8::String::NewSymbol("glDeleteShader"), v8::Undefined()); }
		if(!obj->methodp_glDeleteSync) { obj->methodp_glDeleteSync = (PFNGLDELETESYNCPROC)wglGetProcAddress("glDeleteSync"); }
		if(!obj->methodp_glDeleteSync) { obj->methodp_glDeleteSync = (PFNGLDELETESYNCPROC)GetProcAddress(modOpenGL32, "glDeleteSync"); }
		if(!obj->methodp_glDeleteSync) { args.This()->Set(v8::String::NewSymbol("glDeleteSync"), v8::Undefined()); }
		if(!obj->methodp_glDeleteSyncAPPLE) { obj->methodp_glDeleteSyncAPPLE = (PFNGLDELETESYNCAPPLEPROC)wglGetProcAddress("glDeleteSyncAPPLE"); }
		if(!obj->methodp_glDeleteSyncAPPLE) { obj->methodp_glDeleteSyncAPPLE = (PFNGLDELETESYNCAPPLEPROC)GetProcAddress(modOpenGL32, "glDeleteSyncAPPLE"); }
		if(!obj->methodp_glDeleteSyncAPPLE) { args.This()->Set(v8::String::NewSymbol("glDeleteSyncAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glDeleteTextures) { obj->methodp_glDeleteTextures = (PFNGLDELETETEXTURESPROC)wglGetProcAddress("glDeleteTextures"); }
		if(!obj->methodp_glDeleteTextures) { obj->methodp_glDeleteTextures = (PFNGLDELETETEXTURESPROC)GetProcAddress(modOpenGL32, "glDeleteTextures"); }
		if(!obj->methodp_glDeleteTextures) { args.This()->Set(v8::String::NewSymbol("glDeleteTextures"), v8::Undefined()); }
		if(!obj->methodp_glDeleteTexturesEXT) { obj->methodp_glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)wglGetProcAddress("glDeleteTexturesEXT"); }
		if(!obj->methodp_glDeleteTexturesEXT) { obj->methodp_glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)GetProcAddress(modOpenGL32, "glDeleteTexturesEXT"); }
		if(!obj->methodp_glDeleteTexturesEXT) { args.This()->Set(v8::String::NewSymbol("glDeleteTexturesEXT"), v8::Undefined()); }
		if(!obj->methodp_glDeleteTransformFeedbacks) { obj->methodp_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)wglGetProcAddress("glDeleteTransformFeedbacks"); }
		if(!obj->methodp_glDeleteTransformFeedbacks) { obj->methodp_glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)GetProcAddress(modOpenGL32, "glDeleteTransformFeedbacks"); }
		if(!obj->methodp_glDeleteTransformFeedbacks) { args.This()->Set(v8::String::NewSymbol("glDeleteTransformFeedbacks"), v8::Undefined()); }
		if(!obj->methodp_glDeleteTransformFeedbacksNV) { obj->methodp_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC)wglGetProcAddress("glDeleteTransformFeedbacksNV"); }
		if(!obj->methodp_glDeleteTransformFeedbacksNV) { obj->methodp_glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC)GetProcAddress(modOpenGL32, "glDeleteTransformFeedbacksNV"); }
		if(!obj->methodp_glDeleteTransformFeedbacksNV) { args.This()->Set(v8::String::NewSymbol("glDeleteTransformFeedbacksNV"), v8::Undefined()); }
		if(!obj->methodp_glDeleteVertexArrays) { obj->methodp_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)wglGetProcAddress("glDeleteVertexArrays"); }
		if(!obj->methodp_glDeleteVertexArrays) { obj->methodp_glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)GetProcAddress(modOpenGL32, "glDeleteVertexArrays"); }
		if(!obj->methodp_glDeleteVertexArrays) { args.This()->Set(v8::String::NewSymbol("glDeleteVertexArrays"), v8::Undefined()); }
		if(!obj->methodp_glDeleteVertexArraysAPPLE) { obj->methodp_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)wglGetProcAddress("glDeleteVertexArraysAPPLE"); }
		if(!obj->methodp_glDeleteVertexArraysAPPLE) { obj->methodp_glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)GetProcAddress(modOpenGL32, "glDeleteVertexArraysAPPLE"); }
		if(!obj->methodp_glDeleteVertexArraysAPPLE) { args.This()->Set(v8::String::NewSymbol("glDeleteVertexArraysAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glDeleteVertexArraysOES) { obj->methodp_glDeleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC)wglGetProcAddress("glDeleteVertexArraysOES"); }
		if(!obj->methodp_glDeleteVertexArraysOES) { obj->methodp_glDeleteVertexArraysOES = (PFNGLDELETEVERTEXARRAYSOESPROC)GetProcAddress(modOpenGL32, "glDeleteVertexArraysOES"); }
		if(!obj->methodp_glDeleteVertexArraysOES) { args.This()->Set(v8::String::NewSymbol("glDeleteVertexArraysOES"), v8::Undefined()); }
		if(!obj->methodp_glDeleteVertexShaderEXT) { obj->methodp_glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC)wglGetProcAddress("glDeleteVertexShaderEXT"); }
		if(!obj->methodp_glDeleteVertexShaderEXT) { obj->methodp_glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC)GetProcAddress(modOpenGL32, "glDeleteVertexShaderEXT"); }
		if(!obj->methodp_glDeleteVertexShaderEXT) { args.This()->Set(v8::String::NewSymbol("glDeleteVertexShaderEXT"), v8::Undefined()); }
		if(!obj->methodp_glDepthBoundsEXT) { obj->methodp_glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC)wglGetProcAddress("glDepthBoundsEXT"); }
		if(!obj->methodp_glDepthBoundsEXT) { obj->methodp_glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC)GetProcAddress(modOpenGL32, "glDepthBoundsEXT"); }
		if(!obj->methodp_glDepthBoundsEXT) { args.This()->Set(v8::String::NewSymbol("glDepthBoundsEXT"), v8::Undefined()); }
		if(!obj->methodp_glDepthBoundsdNV) { obj->methodp_glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC)wglGetProcAddress("glDepthBoundsdNV"); }
		if(!obj->methodp_glDepthBoundsdNV) { obj->methodp_glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC)GetProcAddress(modOpenGL32, "glDepthBoundsdNV"); }
		if(!obj->methodp_glDepthBoundsdNV) { args.This()->Set(v8::String::NewSymbol("glDepthBoundsdNV"), v8::Undefined()); }
		if(!obj->methodp_glDepthFunc) { obj->methodp_glDepthFunc = (PFNGLDEPTHFUNCPROC)wglGetProcAddress("glDepthFunc"); }
		if(!obj->methodp_glDepthFunc) { obj->methodp_glDepthFunc = (PFNGLDEPTHFUNCPROC)GetProcAddress(modOpenGL32, "glDepthFunc"); }
		if(!obj->methodp_glDepthFunc) { args.This()->Set(v8::String::NewSymbol("glDepthFunc"), v8::Undefined()); }
		if(!obj->methodp_glDepthMask) { obj->methodp_glDepthMask = (PFNGLDEPTHMASKPROC)wglGetProcAddress("glDepthMask"); }
		if(!obj->methodp_glDepthMask) { obj->methodp_glDepthMask = (PFNGLDEPTHMASKPROC)GetProcAddress(modOpenGL32, "glDepthMask"); }
		if(!obj->methodp_glDepthMask) { args.This()->Set(v8::String::NewSymbol("glDepthMask"), v8::Undefined()); }
		if(!obj->methodp_glDepthRange) { obj->methodp_glDepthRange = (PFNGLDEPTHRANGEPROC)wglGetProcAddress("glDepthRange"); }
		if(!obj->methodp_glDepthRange) { obj->methodp_glDepthRange = (PFNGLDEPTHRANGEPROC)GetProcAddress(modOpenGL32, "glDepthRange"); }
		if(!obj->methodp_glDepthRange) { args.This()->Set(v8::String::NewSymbol("glDepthRange"), v8::Undefined()); }
		if(!obj->methodp_glDepthRangeArrayv) { obj->methodp_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)wglGetProcAddress("glDepthRangeArrayv"); }
		if(!obj->methodp_glDepthRangeArrayv) { obj->methodp_glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)GetProcAddress(modOpenGL32, "glDepthRangeArrayv"); }
		if(!obj->methodp_glDepthRangeArrayv) { args.This()->Set(v8::String::NewSymbol("glDepthRangeArrayv"), v8::Undefined()); }
		if(!obj->methodp_glDepthRangeIndexed) { obj->methodp_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)wglGetProcAddress("glDepthRangeIndexed"); }
		if(!obj->methodp_glDepthRangeIndexed) { obj->methodp_glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)GetProcAddress(modOpenGL32, "glDepthRangeIndexed"); }
		if(!obj->methodp_glDepthRangeIndexed) { args.This()->Set(v8::String::NewSymbol("glDepthRangeIndexed"), v8::Undefined()); }
		if(!obj->methodp_glDepthRangedNV) { obj->methodp_glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC)wglGetProcAddress("glDepthRangedNV"); }
		if(!obj->methodp_glDepthRangedNV) { obj->methodp_glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC)GetProcAddress(modOpenGL32, "glDepthRangedNV"); }
		if(!obj->methodp_glDepthRangedNV) { args.This()->Set(v8::String::NewSymbol("glDepthRangedNV"), v8::Undefined()); }
		if(!obj->methodp_glDepthRangef) { obj->methodp_glDepthRangef = (PFNGLDEPTHRANGEFPROC)wglGetProcAddress("glDepthRangef"); }
		if(!obj->methodp_glDepthRangef) { obj->methodp_glDepthRangef = (PFNGLDEPTHRANGEFPROC)GetProcAddress(modOpenGL32, "glDepthRangef"); }
		if(!obj->methodp_glDepthRangef) { args.This()->Set(v8::String::NewSymbol("glDepthRangef"), v8::Undefined()); }
		if(!obj->methodp_glDepthRangefOES) { obj->methodp_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)wglGetProcAddress("glDepthRangefOES"); }
		if(!obj->methodp_glDepthRangefOES) { obj->methodp_glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)GetProcAddress(modOpenGL32, "glDepthRangefOES"); }
		if(!obj->methodp_glDepthRangefOES) { args.This()->Set(v8::String::NewSymbol("glDepthRangefOES"), v8::Undefined()); }
		if(!obj->methodp_glDepthRangex) { obj->methodp_glDepthRangex = (PFNGLDEPTHRANGEXPROC)wglGetProcAddress("glDepthRangex"); }
		if(!obj->methodp_glDepthRangex) { obj->methodp_glDepthRangex = (PFNGLDEPTHRANGEXPROC)GetProcAddress(modOpenGL32, "glDepthRangex"); }
		if(!obj->methodp_glDepthRangex) { args.This()->Set(v8::String::NewSymbol("glDepthRangex"), v8::Undefined()); }
		if(!obj->methodp_glDepthRangexOES) { obj->methodp_glDepthRangexOES = (PFNGLDEPTHRANGEXOESPROC)wglGetProcAddress("glDepthRangexOES"); }
		if(!obj->methodp_glDepthRangexOES) { obj->methodp_glDepthRangexOES = (PFNGLDEPTHRANGEXOESPROC)GetProcAddress(modOpenGL32, "glDepthRangexOES"); }
		if(!obj->methodp_glDepthRangexOES) { args.This()->Set(v8::String::NewSymbol("glDepthRangexOES"), v8::Undefined()); }
		if(!obj->methodp_glDetachObjectARB) { obj->methodp_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)wglGetProcAddress("glDetachObjectARB"); }
		if(!obj->methodp_glDetachObjectARB) { obj->methodp_glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)GetProcAddress(modOpenGL32, "glDetachObjectARB"); }
		if(!obj->methodp_glDetachObjectARB) { args.This()->Set(v8::String::NewSymbol("glDetachObjectARB"), v8::Undefined()); }
		if(!obj->methodp_glDetachShader) { obj->methodp_glDetachShader = (PFNGLDETACHSHADERPROC)wglGetProcAddress("glDetachShader"); }
		if(!obj->methodp_glDetachShader) { obj->methodp_glDetachShader = (PFNGLDETACHSHADERPROC)GetProcAddress(modOpenGL32, "glDetachShader"); }
		if(!obj->methodp_glDetachShader) { args.This()->Set(v8::String::NewSymbol("glDetachShader"), v8::Undefined()); }
		if(!obj->methodp_glDetailTexFuncSGIS) { obj->methodp_glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC)wglGetProcAddress("glDetailTexFuncSGIS"); }
		if(!obj->methodp_glDetailTexFuncSGIS) { obj->methodp_glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC)GetProcAddress(modOpenGL32, "glDetailTexFuncSGIS"); }
		if(!obj->methodp_glDetailTexFuncSGIS) { args.This()->Set(v8::String::NewSymbol("glDetailTexFuncSGIS"), v8::Undefined()); }
		if(!obj->methodp_glDisable) { obj->methodp_glDisable = (PFNGLDISABLEPROC)wglGetProcAddress("glDisable"); }
		if(!obj->methodp_glDisable) { obj->methodp_glDisable = (PFNGLDISABLEPROC)GetProcAddress(modOpenGL32, "glDisable"); }
		if(!obj->methodp_glDisable) { args.This()->Set(v8::String::NewSymbol("glDisable"), v8::Undefined()); }
		if(!obj->methodp_glDisableClientState) { obj->methodp_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC)wglGetProcAddress("glDisableClientState"); }
		if(!obj->methodp_glDisableClientState) { obj->methodp_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC)GetProcAddress(modOpenGL32, "glDisableClientState"); }
		if(!obj->methodp_glDisableClientState) { args.This()->Set(v8::String::NewSymbol("glDisableClientState"), v8::Undefined()); }
		if(!obj->methodp_glDisableClientStateIndexedEXT) { obj->methodp_glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)wglGetProcAddress("glDisableClientStateIndexedEXT"); }
		if(!obj->methodp_glDisableClientStateIndexedEXT) { obj->methodp_glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)GetProcAddress(modOpenGL32, "glDisableClientStateIndexedEXT"); }
		if(!obj->methodp_glDisableClientStateIndexedEXT) { args.This()->Set(v8::String::NewSymbol("glDisableClientStateIndexedEXT"), v8::Undefined()); }
		if(!obj->methodp_glDisableClientStateiEXT) { obj->methodp_glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC)wglGetProcAddress("glDisableClientStateiEXT"); }
		if(!obj->methodp_glDisableClientStateiEXT) { obj->methodp_glDisableClientStateiEXT = (PFNGLDISABLECLIENTSTATEIEXTPROC)GetProcAddress(modOpenGL32, "glDisableClientStateiEXT"); }
		if(!obj->methodp_glDisableClientStateiEXT) { args.This()->Set(v8::String::NewSymbol("glDisableClientStateiEXT"), v8::Undefined()); }
		if(!obj->methodp_glDisableDriverControlQCOM) { obj->methodp_glDisableDriverControlQCOM = (PFNGLDISABLEDRIVERCONTROLQCOMPROC)wglGetProcAddress("glDisableDriverControlQCOM"); }
		if(!obj->methodp_glDisableDriverControlQCOM) { obj->methodp_glDisableDriverControlQCOM = (PFNGLDISABLEDRIVERCONTROLQCOMPROC)GetProcAddress(modOpenGL32, "glDisableDriverControlQCOM"); }
		if(!obj->methodp_glDisableDriverControlQCOM) { args.This()->Set(v8::String::NewSymbol("glDisableDriverControlQCOM"), v8::Undefined()); }
		if(!obj->methodp_glDisableIndexedEXT) { obj->methodp_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)wglGetProcAddress("glDisableIndexedEXT"); }
		if(!obj->methodp_glDisableIndexedEXT) { obj->methodp_glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)GetProcAddress(modOpenGL32, "glDisableIndexedEXT"); }
		if(!obj->methodp_glDisableIndexedEXT) { args.This()->Set(v8::String::NewSymbol("glDisableIndexedEXT"), v8::Undefined()); }
		if(!obj->methodp_glDisableVariantClientStateEXT) { obj->methodp_glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)wglGetProcAddress("glDisableVariantClientStateEXT"); }
		if(!obj->methodp_glDisableVariantClientStateEXT) { obj->methodp_glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)GetProcAddress(modOpenGL32, "glDisableVariantClientStateEXT"); }
		if(!obj->methodp_glDisableVariantClientStateEXT) { args.This()->Set(v8::String::NewSymbol("glDisableVariantClientStateEXT"), v8::Undefined()); }
		if(!obj->methodp_glDisableVertexArrayAttribEXT) { obj->methodp_glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)wglGetProcAddress("glDisableVertexArrayAttribEXT"); }
		if(!obj->methodp_glDisableVertexArrayAttribEXT) { obj->methodp_glDisableVertexArrayAttribEXT = (PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC)GetProcAddress(modOpenGL32, "glDisableVertexArrayAttribEXT"); }
		if(!obj->methodp_glDisableVertexArrayAttribEXT) { args.This()->Set(v8::String::NewSymbol("glDisableVertexArrayAttribEXT"), v8::Undefined()); }
		if(!obj->methodp_glDisableVertexArrayEXT) { obj->methodp_glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC)wglGetProcAddress("glDisableVertexArrayEXT"); }
		if(!obj->methodp_glDisableVertexArrayEXT) { obj->methodp_glDisableVertexArrayEXT = (PFNGLDISABLEVERTEXARRAYEXTPROC)GetProcAddress(modOpenGL32, "glDisableVertexArrayEXT"); }
		if(!obj->methodp_glDisableVertexArrayEXT) { args.This()->Set(v8::String::NewSymbol("glDisableVertexArrayEXT"), v8::Undefined()); }
		if(!obj->methodp_glDisableVertexAttribAPPLE) { obj->methodp_glDisableVertexAttribAPPLE = (PFNGLDISABLEVERTEXATTRIBAPPLEPROC)wglGetProcAddress("glDisableVertexAttribAPPLE"); }
		if(!obj->methodp_glDisableVertexAttribAPPLE) { obj->methodp_glDisableVertexAttribAPPLE = (PFNGLDISABLEVERTEXATTRIBAPPLEPROC)GetProcAddress(modOpenGL32, "glDisableVertexAttribAPPLE"); }
		if(!obj->methodp_glDisableVertexAttribAPPLE) { args.This()->Set(v8::String::NewSymbol("glDisableVertexAttribAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glDisableVertexAttribArray) { obj->methodp_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)wglGetProcAddress("glDisableVertexAttribArray"); }
		if(!obj->methodp_glDisableVertexAttribArray) { obj->methodp_glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)GetProcAddress(modOpenGL32, "glDisableVertexAttribArray"); }
		if(!obj->methodp_glDisableVertexAttribArray) { args.This()->Set(v8::String::NewSymbol("glDisableVertexAttribArray"), v8::Undefined()); }
		if(!obj->methodp_glDisableVertexAttribArrayARB) { obj->methodp_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)wglGetProcAddress("glDisableVertexAttribArrayARB"); }
		if(!obj->methodp_glDisableVertexAttribArrayARB) { obj->methodp_glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)GetProcAddress(modOpenGL32, "glDisableVertexAttribArrayARB"); }
		if(!obj->methodp_glDisableVertexAttribArrayARB) { args.This()->Set(v8::String::NewSymbol("glDisableVertexAttribArrayARB"), v8::Undefined()); }
		if(!obj->methodp_glDisablei) { obj->methodp_glDisablei = (PFNGLDISABLEIPROC)wglGetProcAddress("glDisablei"); }
		if(!obj->methodp_glDisablei) { obj->methodp_glDisablei = (PFNGLDISABLEIPROC)GetProcAddress(modOpenGL32, "glDisablei"); }
		if(!obj->methodp_glDisablei) { args.This()->Set(v8::String::NewSymbol("glDisablei"), v8::Undefined()); }
		if(!obj->methodp_glDisableiEXT) { obj->methodp_glDisableiEXT = (PFNGLDISABLEIEXTPROC)wglGetProcAddress("glDisableiEXT"); }
		if(!obj->methodp_glDisableiEXT) { obj->methodp_glDisableiEXT = (PFNGLDISABLEIEXTPROC)GetProcAddress(modOpenGL32, "glDisableiEXT"); }
		if(!obj->methodp_glDisableiEXT) { args.This()->Set(v8::String::NewSymbol("glDisableiEXT"), v8::Undefined()); }
		if(!obj->methodp_glDiscardFramebufferEXT) { obj->methodp_glDiscardFramebufferEXT = (PFNGLDISCARDFRAMEBUFFEREXTPROC)wglGetProcAddress("glDiscardFramebufferEXT"); }
		if(!obj->methodp_glDiscardFramebufferEXT) { obj->methodp_glDiscardFramebufferEXT = (PFNGLDISCARDFRAMEBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glDiscardFramebufferEXT"); }
		if(!obj->methodp_glDiscardFramebufferEXT) { args.This()->Set(v8::String::NewSymbol("glDiscardFramebufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glDispatchCompute) { obj->methodp_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)wglGetProcAddress("glDispatchCompute"); }
		if(!obj->methodp_glDispatchCompute) { obj->methodp_glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)GetProcAddress(modOpenGL32, "glDispatchCompute"); }
		if(!obj->methodp_glDispatchCompute) { args.This()->Set(v8::String::NewSymbol("glDispatchCompute"), v8::Undefined()); }
		if(!obj->methodp_glDispatchComputeGroupSizeARB) { obj->methodp_glDispatchComputeGroupSizeARB = (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)wglGetProcAddress("glDispatchComputeGroupSizeARB"); }
		if(!obj->methodp_glDispatchComputeGroupSizeARB) { obj->methodp_glDispatchComputeGroupSizeARB = (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)GetProcAddress(modOpenGL32, "glDispatchComputeGroupSizeARB"); }
		if(!obj->methodp_glDispatchComputeGroupSizeARB) { args.This()->Set(v8::String::NewSymbol("glDispatchComputeGroupSizeARB"), v8::Undefined()); }
		if(!obj->methodp_glDispatchComputeIndirect) { obj->methodp_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)wglGetProcAddress("glDispatchComputeIndirect"); }
		if(!obj->methodp_glDispatchComputeIndirect) { obj->methodp_glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)GetProcAddress(modOpenGL32, "glDispatchComputeIndirect"); }
		if(!obj->methodp_glDispatchComputeIndirect) { args.This()->Set(v8::String::NewSymbol("glDispatchComputeIndirect"), v8::Undefined()); }
		if(!obj->methodp_glDrawArrays) { obj->methodp_glDrawArrays = (PFNGLDRAWARRAYSPROC)wglGetProcAddress("glDrawArrays"); }
		if(!obj->methodp_glDrawArrays) { obj->methodp_glDrawArrays = (PFNGLDRAWARRAYSPROC)GetProcAddress(modOpenGL32, "glDrawArrays"); }
		if(!obj->methodp_glDrawArrays) { args.This()->Set(v8::String::NewSymbol("glDrawArrays"), v8::Undefined()); }
		if(!obj->methodp_glDrawArraysEXT) { obj->methodp_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)wglGetProcAddress("glDrawArraysEXT"); }
		if(!obj->methodp_glDrawArraysEXT) { obj->methodp_glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)GetProcAddress(modOpenGL32, "glDrawArraysEXT"); }
		if(!obj->methodp_glDrawArraysEXT) { args.This()->Set(v8::String::NewSymbol("glDrawArraysEXT"), v8::Undefined()); }
		if(!obj->methodp_glDrawArraysIndirect) { obj->methodp_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)wglGetProcAddress("glDrawArraysIndirect"); }
		if(!obj->methodp_glDrawArraysIndirect) { obj->methodp_glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)GetProcAddress(modOpenGL32, "glDrawArraysIndirect"); }
		if(!obj->methodp_glDrawArraysIndirect) { args.This()->Set(v8::String::NewSymbol("glDrawArraysIndirect"), v8::Undefined()); }
		if(!obj->methodp_glDrawArraysInstanced) { obj->methodp_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)wglGetProcAddress("glDrawArraysInstanced"); }
		if(!obj->methodp_glDrawArraysInstanced) { obj->methodp_glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)GetProcAddress(modOpenGL32, "glDrawArraysInstanced"); }
		if(!obj->methodp_glDrawArraysInstanced) { args.This()->Set(v8::String::NewSymbol("glDrawArraysInstanced"), v8::Undefined()); }
		if(!obj->methodp_glDrawArraysInstancedANGLE) { obj->methodp_glDrawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC)wglGetProcAddress("glDrawArraysInstancedANGLE"); }
		if(!obj->methodp_glDrawArraysInstancedANGLE) { obj->methodp_glDrawArraysInstancedANGLE = (PFNGLDRAWARRAYSINSTANCEDANGLEPROC)GetProcAddress(modOpenGL32, "glDrawArraysInstancedANGLE"); }
		if(!obj->methodp_glDrawArraysInstancedANGLE) { args.This()->Set(v8::String::NewSymbol("glDrawArraysInstancedANGLE"), v8::Undefined()); }
		if(!obj->methodp_glDrawArraysInstancedARB) { obj->methodp_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)wglGetProcAddress("glDrawArraysInstancedARB"); }
		if(!obj->methodp_glDrawArraysInstancedARB) { obj->methodp_glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)GetProcAddress(modOpenGL32, "glDrawArraysInstancedARB"); }
		if(!obj->methodp_glDrawArraysInstancedARB) { args.This()->Set(v8::String::NewSymbol("glDrawArraysInstancedARB"), v8::Undefined()); }
		if(!obj->methodp_glDrawArraysInstancedBaseInstance) { obj->methodp_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)wglGetProcAddress("glDrawArraysInstancedBaseInstance"); }
		if(!obj->methodp_glDrawArraysInstancedBaseInstance) { obj->methodp_glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)GetProcAddress(modOpenGL32, "glDrawArraysInstancedBaseInstance"); }
		if(!obj->methodp_glDrawArraysInstancedBaseInstance) { args.This()->Set(v8::String::NewSymbol("glDrawArraysInstancedBaseInstance"), v8::Undefined()); }
		if(!obj->methodp_glDrawArraysInstancedEXT) { obj->methodp_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)wglGetProcAddress("glDrawArraysInstancedEXT"); }
		if(!obj->methodp_glDrawArraysInstancedEXT) { obj->methodp_glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)GetProcAddress(modOpenGL32, "glDrawArraysInstancedEXT"); }
		if(!obj->methodp_glDrawArraysInstancedEXT) { args.This()->Set(v8::String::NewSymbol("glDrawArraysInstancedEXT"), v8::Undefined()); }
		if(!obj->methodp_glDrawArraysInstancedNV) { obj->methodp_glDrawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC)wglGetProcAddress("glDrawArraysInstancedNV"); }
		if(!obj->methodp_glDrawArraysInstancedNV) { obj->methodp_glDrawArraysInstancedNV = (PFNGLDRAWARRAYSINSTANCEDNVPROC)GetProcAddress(modOpenGL32, "glDrawArraysInstancedNV"); }
		if(!obj->methodp_glDrawArraysInstancedNV) { args.This()->Set(v8::String::NewSymbol("glDrawArraysInstancedNV"), v8::Undefined()); }
		if(!obj->methodp_glDrawBuffer) { obj->methodp_glDrawBuffer = (PFNGLDRAWBUFFERPROC)wglGetProcAddress("glDrawBuffer"); }
		if(!obj->methodp_glDrawBuffer) { obj->methodp_glDrawBuffer = (PFNGLDRAWBUFFERPROC)GetProcAddress(modOpenGL32, "glDrawBuffer"); }
		if(!obj->methodp_glDrawBuffer) { args.This()->Set(v8::String::NewSymbol("glDrawBuffer"), v8::Undefined()); }
		if(!obj->methodp_glDrawBuffers) { obj->methodp_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)wglGetProcAddress("glDrawBuffers"); }
		if(!obj->methodp_glDrawBuffers) { obj->methodp_glDrawBuffers = (PFNGLDRAWBUFFERSPROC)GetProcAddress(modOpenGL32, "glDrawBuffers"); }
		if(!obj->methodp_glDrawBuffers) { args.This()->Set(v8::String::NewSymbol("glDrawBuffers"), v8::Undefined()); }
		if(!obj->methodp_glDrawBuffersARB) { obj->methodp_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)wglGetProcAddress("glDrawBuffersARB"); }
		if(!obj->methodp_glDrawBuffersARB) { obj->methodp_glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)GetProcAddress(modOpenGL32, "glDrawBuffersARB"); }
		if(!obj->methodp_glDrawBuffersARB) { args.This()->Set(v8::String::NewSymbol("glDrawBuffersARB"), v8::Undefined()); }
		if(!obj->methodp_glDrawBuffersATI) { obj->methodp_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)wglGetProcAddress("glDrawBuffersATI"); }
		if(!obj->methodp_glDrawBuffersATI) { obj->methodp_glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)GetProcAddress(modOpenGL32, "glDrawBuffersATI"); }
		if(!obj->methodp_glDrawBuffersATI) { args.This()->Set(v8::String::NewSymbol("glDrawBuffersATI"), v8::Undefined()); }
		if(!obj->methodp_glDrawBuffersEXT) { obj->methodp_glDrawBuffersEXT = (PFNGLDRAWBUFFERSEXTPROC)wglGetProcAddress("glDrawBuffersEXT"); }
		if(!obj->methodp_glDrawBuffersEXT) { obj->methodp_glDrawBuffersEXT = (PFNGLDRAWBUFFERSEXTPROC)GetProcAddress(modOpenGL32, "glDrawBuffersEXT"); }
		if(!obj->methodp_glDrawBuffersEXT) { args.This()->Set(v8::String::NewSymbol("glDrawBuffersEXT"), v8::Undefined()); }
		if(!obj->methodp_glDrawBuffersIndexedEXT) { obj->methodp_glDrawBuffersIndexedEXT = (PFNGLDRAWBUFFERSINDEXEDEXTPROC)wglGetProcAddress("glDrawBuffersIndexedEXT"); }
		if(!obj->methodp_glDrawBuffersIndexedEXT) { obj->methodp_glDrawBuffersIndexedEXT = (PFNGLDRAWBUFFERSINDEXEDEXTPROC)GetProcAddress(modOpenGL32, "glDrawBuffersIndexedEXT"); }
		if(!obj->methodp_glDrawBuffersIndexedEXT) { args.This()->Set(v8::String::NewSymbol("glDrawBuffersIndexedEXT"), v8::Undefined()); }
		if(!obj->methodp_glDrawBuffersNV) { obj->methodp_glDrawBuffersNV = (PFNGLDRAWBUFFERSNVPROC)wglGetProcAddress("glDrawBuffersNV"); }
		if(!obj->methodp_glDrawBuffersNV) { obj->methodp_glDrawBuffersNV = (PFNGLDRAWBUFFERSNVPROC)GetProcAddress(modOpenGL32, "glDrawBuffersNV"); }
		if(!obj->methodp_glDrawBuffersNV) { args.This()->Set(v8::String::NewSymbol("glDrawBuffersNV"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementArrayAPPLE) { obj->methodp_glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC)wglGetProcAddress("glDrawElementArrayAPPLE"); }
		if(!obj->methodp_glDrawElementArrayAPPLE) { obj->methodp_glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC)GetProcAddress(modOpenGL32, "glDrawElementArrayAPPLE"); }
		if(!obj->methodp_glDrawElementArrayAPPLE) { args.This()->Set(v8::String::NewSymbol("glDrawElementArrayAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementArrayATI) { obj->methodp_glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC)wglGetProcAddress("glDrawElementArrayATI"); }
		if(!obj->methodp_glDrawElementArrayATI) { obj->methodp_glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC)GetProcAddress(modOpenGL32, "glDrawElementArrayATI"); }
		if(!obj->methodp_glDrawElementArrayATI) { args.This()->Set(v8::String::NewSymbol("glDrawElementArrayATI"), v8::Undefined()); }
		if(!obj->methodp_glDrawElements) { obj->methodp_glDrawElements = (PFNGLDRAWELEMENTSPROC)wglGetProcAddress("glDrawElements"); }
		if(!obj->methodp_glDrawElements) { obj->methodp_glDrawElements = (PFNGLDRAWELEMENTSPROC)GetProcAddress(modOpenGL32, "glDrawElements"); }
		if(!obj->methodp_glDrawElements) { args.This()->Set(v8::String::NewSymbol("glDrawElements"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsBaseVertex) { obj->methodp_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)wglGetProcAddress("glDrawElementsBaseVertex"); }
		if(!obj->methodp_glDrawElementsBaseVertex) { obj->methodp_glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)GetProcAddress(modOpenGL32, "glDrawElementsBaseVertex"); }
		if(!obj->methodp_glDrawElementsBaseVertex) { args.This()->Set(v8::String::NewSymbol("glDrawElementsBaseVertex"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsIndirect) { obj->methodp_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)wglGetProcAddress("glDrawElementsIndirect"); }
		if(!obj->methodp_glDrawElementsIndirect) { obj->methodp_glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)GetProcAddress(modOpenGL32, "glDrawElementsIndirect"); }
		if(!obj->methodp_glDrawElementsIndirect) { args.This()->Set(v8::String::NewSymbol("glDrawElementsIndirect"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsInstanced) { obj->methodp_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)wglGetProcAddress("glDrawElementsInstanced"); }
		if(!obj->methodp_glDrawElementsInstanced) { obj->methodp_glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)GetProcAddress(modOpenGL32, "glDrawElementsInstanced"); }
		if(!obj->methodp_glDrawElementsInstanced) { args.This()->Set(v8::String::NewSymbol("glDrawElementsInstanced"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsInstancedANGLE) { obj->methodp_glDrawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC)wglGetProcAddress("glDrawElementsInstancedANGLE"); }
		if(!obj->methodp_glDrawElementsInstancedANGLE) { obj->methodp_glDrawElementsInstancedANGLE = (PFNGLDRAWELEMENTSINSTANCEDANGLEPROC)GetProcAddress(modOpenGL32, "glDrawElementsInstancedANGLE"); }
		if(!obj->methodp_glDrawElementsInstancedANGLE) { args.This()->Set(v8::String::NewSymbol("glDrawElementsInstancedANGLE"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsInstancedARB) { obj->methodp_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)wglGetProcAddress("glDrawElementsInstancedARB"); }
		if(!obj->methodp_glDrawElementsInstancedARB) { obj->methodp_glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)GetProcAddress(modOpenGL32, "glDrawElementsInstancedARB"); }
		if(!obj->methodp_glDrawElementsInstancedARB) { args.This()->Set(v8::String::NewSymbol("glDrawElementsInstancedARB"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsInstancedBaseInstance) { obj->methodp_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)wglGetProcAddress("glDrawElementsInstancedBaseInstance"); }
		if(!obj->methodp_glDrawElementsInstancedBaseInstance) { obj->methodp_glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)GetProcAddress(modOpenGL32, "glDrawElementsInstancedBaseInstance"); }
		if(!obj->methodp_glDrawElementsInstancedBaseInstance) { args.This()->Set(v8::String::NewSymbol("glDrawElementsInstancedBaseInstance"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsInstancedBaseVertex) { obj->methodp_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)wglGetProcAddress("glDrawElementsInstancedBaseVertex"); }
		if(!obj->methodp_glDrawElementsInstancedBaseVertex) { obj->methodp_glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)GetProcAddress(modOpenGL32, "glDrawElementsInstancedBaseVertex"); }
		if(!obj->methodp_glDrawElementsInstancedBaseVertex) { args.This()->Set(v8::String::NewSymbol("glDrawElementsInstancedBaseVertex"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsInstancedBaseVertexBaseInstance) { obj->methodp_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)wglGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance"); }
		if(!obj->methodp_glDrawElementsInstancedBaseVertexBaseInstance) { obj->methodp_glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)GetProcAddress(modOpenGL32, "glDrawElementsInstancedBaseVertexBaseInstance"); }
		if(!obj->methodp_glDrawElementsInstancedBaseVertexBaseInstance) { args.This()->Set(v8::String::NewSymbol("glDrawElementsInstancedBaseVertexBaseInstance"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsInstancedEXT) { obj->methodp_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)wglGetProcAddress("glDrawElementsInstancedEXT"); }
		if(!obj->methodp_glDrawElementsInstancedEXT) { obj->methodp_glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)GetProcAddress(modOpenGL32, "glDrawElementsInstancedEXT"); }
		if(!obj->methodp_glDrawElementsInstancedEXT) { args.This()->Set(v8::String::NewSymbol("glDrawElementsInstancedEXT"), v8::Undefined()); }
		if(!obj->methodp_glDrawElementsInstancedNV) { obj->methodp_glDrawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC)wglGetProcAddress("glDrawElementsInstancedNV"); }
		if(!obj->methodp_glDrawElementsInstancedNV) { obj->methodp_glDrawElementsInstancedNV = (PFNGLDRAWELEMENTSINSTANCEDNVPROC)GetProcAddress(modOpenGL32, "glDrawElementsInstancedNV"); }
		if(!obj->methodp_glDrawElementsInstancedNV) { args.This()->Set(v8::String::NewSymbol("glDrawElementsInstancedNV"), v8::Undefined()); }
		if(!obj->methodp_glDrawMeshArraysSUN) { obj->methodp_glDrawMeshArraysSUN = (PFNGLDRAWMESHARRAYSSUNPROC)wglGetProcAddress("glDrawMeshArraysSUN"); }
		if(!obj->methodp_glDrawMeshArraysSUN) { obj->methodp_glDrawMeshArraysSUN = (PFNGLDRAWMESHARRAYSSUNPROC)GetProcAddress(modOpenGL32, "glDrawMeshArraysSUN"); }
		if(!obj->methodp_glDrawMeshArraysSUN) { args.This()->Set(v8::String::NewSymbol("glDrawMeshArraysSUN"), v8::Undefined()); }
		if(!obj->methodp_glDrawPixels) { obj->methodp_glDrawPixels = (PFNGLDRAWPIXELSPROC)wglGetProcAddress("glDrawPixels"); }
		if(!obj->methodp_glDrawPixels) { obj->methodp_glDrawPixels = (PFNGLDRAWPIXELSPROC)GetProcAddress(modOpenGL32, "glDrawPixels"); }
		if(!obj->methodp_glDrawPixels) { args.This()->Set(v8::String::NewSymbol("glDrawPixels"), v8::Undefined()); }
		if(!obj->methodp_glDrawRangeElementArrayAPPLE) { obj->methodp_glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)wglGetProcAddress("glDrawRangeElementArrayAPPLE"); }
		if(!obj->methodp_glDrawRangeElementArrayAPPLE) { obj->methodp_glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)GetProcAddress(modOpenGL32, "glDrawRangeElementArrayAPPLE"); }
		if(!obj->methodp_glDrawRangeElementArrayAPPLE) { args.This()->Set(v8::String::NewSymbol("glDrawRangeElementArrayAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glDrawRangeElementArrayATI) { obj->methodp_glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)wglGetProcAddress("glDrawRangeElementArrayATI"); }
		if(!obj->methodp_glDrawRangeElementArrayATI) { obj->methodp_glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)GetProcAddress(modOpenGL32, "glDrawRangeElementArrayATI"); }
		if(!obj->methodp_glDrawRangeElementArrayATI) { args.This()->Set(v8::String::NewSymbol("glDrawRangeElementArrayATI"), v8::Undefined()); }
		if(!obj->methodp_glDrawRangeElements) { obj->methodp_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)wglGetProcAddress("glDrawRangeElements"); }
		if(!obj->methodp_glDrawRangeElements) { obj->methodp_glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)GetProcAddress(modOpenGL32, "glDrawRangeElements"); }
		if(!obj->methodp_glDrawRangeElements) { args.This()->Set(v8::String::NewSymbol("glDrawRangeElements"), v8::Undefined()); }
		if(!obj->methodp_glDrawRangeElementsBaseVertex) { obj->methodp_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)wglGetProcAddress("glDrawRangeElementsBaseVertex"); }
		if(!obj->methodp_glDrawRangeElementsBaseVertex) { obj->methodp_glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)GetProcAddress(modOpenGL32, "glDrawRangeElementsBaseVertex"); }
		if(!obj->methodp_glDrawRangeElementsBaseVertex) { args.This()->Set(v8::String::NewSymbol("glDrawRangeElementsBaseVertex"), v8::Undefined()); }
		if(!obj->methodp_glDrawRangeElementsEXT) { obj->methodp_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)wglGetProcAddress("glDrawRangeElementsEXT"); }
		if(!obj->methodp_glDrawRangeElementsEXT) { obj->methodp_glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)GetProcAddress(modOpenGL32, "glDrawRangeElementsEXT"); }
		if(!obj->methodp_glDrawRangeElementsEXT) { args.This()->Set(v8::String::NewSymbol("glDrawRangeElementsEXT"), v8::Undefined()); }
		if(!obj->methodp_glDrawTexfOES) { obj->methodp_glDrawTexfOES = (PFNGLDRAWTEXFOESPROC)wglGetProcAddress("glDrawTexfOES"); }
		if(!obj->methodp_glDrawTexfOES) { obj->methodp_glDrawTexfOES = (PFNGLDRAWTEXFOESPROC)GetProcAddress(modOpenGL32, "glDrawTexfOES"); }
		if(!obj->methodp_glDrawTexfOES) { args.This()->Set(v8::String::NewSymbol("glDrawTexfOES"), v8::Undefined()); }
		if(!obj->methodp_glDrawTexfvOES) { obj->methodp_glDrawTexfvOES = (PFNGLDRAWTEXFVOESPROC)wglGetProcAddress("glDrawTexfvOES"); }
		if(!obj->methodp_glDrawTexfvOES) { obj->methodp_glDrawTexfvOES = (PFNGLDRAWTEXFVOESPROC)GetProcAddress(modOpenGL32, "glDrawTexfvOES"); }
		if(!obj->methodp_glDrawTexfvOES) { args.This()->Set(v8::String::NewSymbol("glDrawTexfvOES"), v8::Undefined()); }
		if(!obj->methodp_glDrawTexiOES) { obj->methodp_glDrawTexiOES = (PFNGLDRAWTEXIOESPROC)wglGetProcAddress("glDrawTexiOES"); }
		if(!obj->methodp_glDrawTexiOES) { obj->methodp_glDrawTexiOES = (PFNGLDRAWTEXIOESPROC)GetProcAddress(modOpenGL32, "glDrawTexiOES"); }
		if(!obj->methodp_glDrawTexiOES) { args.This()->Set(v8::String::NewSymbol("glDrawTexiOES"), v8::Undefined()); }
		if(!obj->methodp_glDrawTexivOES) { obj->methodp_glDrawTexivOES = (PFNGLDRAWTEXIVOESPROC)wglGetProcAddress("glDrawTexivOES"); }
		if(!obj->methodp_glDrawTexivOES) { obj->methodp_glDrawTexivOES = (PFNGLDRAWTEXIVOESPROC)GetProcAddress(modOpenGL32, "glDrawTexivOES"); }
		if(!obj->methodp_glDrawTexivOES) { args.This()->Set(v8::String::NewSymbol("glDrawTexivOES"), v8::Undefined()); }
		if(!obj->methodp_glDrawTexsOES) { obj->methodp_glDrawTexsOES = (PFNGLDRAWTEXSOESPROC)wglGetProcAddress("glDrawTexsOES"); }
		if(!obj->methodp_glDrawTexsOES) { obj->methodp_glDrawTexsOES = (PFNGLDRAWTEXSOESPROC)GetProcAddress(modOpenGL32, "glDrawTexsOES"); }
		if(!obj->methodp_glDrawTexsOES) { args.This()->Set(v8::String::NewSymbol("glDrawTexsOES"), v8::Undefined()); }
		if(!obj->methodp_glDrawTexsvOES) { obj->methodp_glDrawTexsvOES = (PFNGLDRAWTEXSVOESPROC)wglGetProcAddress("glDrawTexsvOES"); }
		if(!obj->methodp_glDrawTexsvOES) { obj->methodp_glDrawTexsvOES = (PFNGLDRAWTEXSVOESPROC)GetProcAddress(modOpenGL32, "glDrawTexsvOES"); }
		if(!obj->methodp_glDrawTexsvOES) { args.This()->Set(v8::String::NewSymbol("glDrawTexsvOES"), v8::Undefined()); }
		if(!obj->methodp_glDrawTextureNV) { obj->methodp_glDrawTextureNV = (PFNGLDRAWTEXTURENVPROC)wglGetProcAddress("glDrawTextureNV"); }
		if(!obj->methodp_glDrawTextureNV) { obj->methodp_glDrawTextureNV = (PFNGLDRAWTEXTURENVPROC)GetProcAddress(modOpenGL32, "glDrawTextureNV"); }
		if(!obj->methodp_glDrawTextureNV) { args.This()->Set(v8::String::NewSymbol("glDrawTextureNV"), v8::Undefined()); }
		if(!obj->methodp_glDrawTexxOES) { obj->methodp_glDrawTexxOES = (PFNGLDRAWTEXXOESPROC)wglGetProcAddress("glDrawTexxOES"); }
		if(!obj->methodp_glDrawTexxOES) { obj->methodp_glDrawTexxOES = (PFNGLDRAWTEXXOESPROC)GetProcAddress(modOpenGL32, "glDrawTexxOES"); }
		if(!obj->methodp_glDrawTexxOES) { args.This()->Set(v8::String::NewSymbol("glDrawTexxOES"), v8::Undefined()); }
		if(!obj->methodp_glDrawTexxvOES) { obj->methodp_glDrawTexxvOES = (PFNGLDRAWTEXXVOESPROC)wglGetProcAddress("glDrawTexxvOES"); }
		if(!obj->methodp_glDrawTexxvOES) { obj->methodp_glDrawTexxvOES = (PFNGLDRAWTEXXVOESPROC)GetProcAddress(modOpenGL32, "glDrawTexxvOES"); }
		if(!obj->methodp_glDrawTexxvOES) { args.This()->Set(v8::String::NewSymbol("glDrawTexxvOES"), v8::Undefined()); }
		if(!obj->methodp_glDrawTransformFeedback) { obj->methodp_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)wglGetProcAddress("glDrawTransformFeedback"); }
		if(!obj->methodp_glDrawTransformFeedback) { obj->methodp_glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)GetProcAddress(modOpenGL32, "glDrawTransformFeedback"); }
		if(!obj->methodp_glDrawTransformFeedback) { args.This()->Set(v8::String::NewSymbol("glDrawTransformFeedback"), v8::Undefined()); }
		if(!obj->methodp_glDrawTransformFeedbackInstanced) { obj->methodp_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)wglGetProcAddress("glDrawTransformFeedbackInstanced"); }
		if(!obj->methodp_glDrawTransformFeedbackInstanced) { obj->methodp_glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)GetProcAddress(modOpenGL32, "glDrawTransformFeedbackInstanced"); }
		if(!obj->methodp_glDrawTransformFeedbackInstanced) { args.This()->Set(v8::String::NewSymbol("glDrawTransformFeedbackInstanced"), v8::Undefined()); }
		if(!obj->methodp_glDrawTransformFeedbackNV) { obj->methodp_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC)wglGetProcAddress("glDrawTransformFeedbackNV"); }
		if(!obj->methodp_glDrawTransformFeedbackNV) { obj->methodp_glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC)GetProcAddress(modOpenGL32, "glDrawTransformFeedbackNV"); }
		if(!obj->methodp_glDrawTransformFeedbackNV) { args.This()->Set(v8::String::NewSymbol("glDrawTransformFeedbackNV"), v8::Undefined()); }
		if(!obj->methodp_glDrawTransformFeedbackStream) { obj->methodp_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)wglGetProcAddress("glDrawTransformFeedbackStream"); }
		if(!obj->methodp_glDrawTransformFeedbackStream) { obj->methodp_glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)GetProcAddress(modOpenGL32, "glDrawTransformFeedbackStream"); }
		if(!obj->methodp_glDrawTransformFeedbackStream) { args.This()->Set(v8::String::NewSymbol("glDrawTransformFeedbackStream"), v8::Undefined()); }
		if(!obj->methodp_glDrawTransformFeedbackStreamInstanced) { obj->methodp_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)wglGetProcAddress("glDrawTransformFeedbackStreamInstanced"); }
		if(!obj->methodp_glDrawTransformFeedbackStreamInstanced) { obj->methodp_glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)GetProcAddress(modOpenGL32, "glDrawTransformFeedbackStreamInstanced"); }
		if(!obj->methodp_glDrawTransformFeedbackStreamInstanced) { args.This()->Set(v8::String::NewSymbol("glDrawTransformFeedbackStreamInstanced"), v8::Undefined()); }
		if(!obj->methodp_glEGLImageTargetRenderbufferStorageOES) { obj->methodp_glEGLImageTargetRenderbufferStorageOES = (PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC)wglGetProcAddress("glEGLImageTargetRenderbufferStorageOES"); }
		if(!obj->methodp_glEGLImageTargetRenderbufferStorageOES) { obj->methodp_glEGLImageTargetRenderbufferStorageOES = (PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC)GetProcAddress(modOpenGL32, "glEGLImageTargetRenderbufferStorageOES"); }
		if(!obj->methodp_glEGLImageTargetRenderbufferStorageOES) { args.This()->Set(v8::String::NewSymbol("glEGLImageTargetRenderbufferStorageOES"), v8::Undefined()); }
		if(!obj->methodp_glEGLImageTargetTexture2DOES) { obj->methodp_glEGLImageTargetTexture2DOES = (PFNGLEGLIMAGETARGETTEXTURE2DOESPROC)wglGetProcAddress("glEGLImageTargetTexture2DOES"); }
		if(!obj->methodp_glEGLImageTargetTexture2DOES) { obj->methodp_glEGLImageTargetTexture2DOES = (PFNGLEGLIMAGETARGETTEXTURE2DOESPROC)GetProcAddress(modOpenGL32, "glEGLImageTargetTexture2DOES"); }
		if(!obj->methodp_glEGLImageTargetTexture2DOES) { args.This()->Set(v8::String::NewSymbol("glEGLImageTargetTexture2DOES"), v8::Undefined()); }
		if(!obj->methodp_glEdgeFlag) { obj->methodp_glEdgeFlag = (PFNGLEDGEFLAGPROC)wglGetProcAddress("glEdgeFlag"); }
		if(!obj->methodp_glEdgeFlag) { obj->methodp_glEdgeFlag = (PFNGLEDGEFLAGPROC)GetProcAddress(modOpenGL32, "glEdgeFlag"); }
		if(!obj->methodp_glEdgeFlag) { args.This()->Set(v8::String::NewSymbol("glEdgeFlag"), v8::Undefined()); }
		if(!obj->methodp_glEdgeFlagFormatNV) { obj->methodp_glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC)wglGetProcAddress("glEdgeFlagFormatNV"); }
		if(!obj->methodp_glEdgeFlagFormatNV) { obj->methodp_glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC)GetProcAddress(modOpenGL32, "glEdgeFlagFormatNV"); }
		if(!obj->methodp_glEdgeFlagFormatNV) { args.This()->Set(v8::String::NewSymbol("glEdgeFlagFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glEdgeFlagPointer) { obj->methodp_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC)wglGetProcAddress("glEdgeFlagPointer"); }
		if(!obj->methodp_glEdgeFlagPointer) { obj->methodp_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC)GetProcAddress(modOpenGL32, "glEdgeFlagPointer"); }
		if(!obj->methodp_glEdgeFlagPointer) { args.This()->Set(v8::String::NewSymbol("glEdgeFlagPointer"), v8::Undefined()); }
		if(!obj->methodp_glEdgeFlagPointerEXT) { obj->methodp_glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)wglGetProcAddress("glEdgeFlagPointerEXT"); }
		if(!obj->methodp_glEdgeFlagPointerEXT) { obj->methodp_glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glEdgeFlagPointerEXT"); }
		if(!obj->methodp_glEdgeFlagPointerEXT) { args.This()->Set(v8::String::NewSymbol("glEdgeFlagPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glEdgeFlagPointerListIBM) { obj->methodp_glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)wglGetProcAddress("glEdgeFlagPointerListIBM"); }
		if(!obj->methodp_glEdgeFlagPointerListIBM) { obj->methodp_glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)GetProcAddress(modOpenGL32, "glEdgeFlagPointerListIBM"); }
		if(!obj->methodp_glEdgeFlagPointerListIBM) { args.This()->Set(v8::String::NewSymbol("glEdgeFlagPointerListIBM"), v8::Undefined()); }
		if(!obj->methodp_glEdgeFlagv) { obj->methodp_glEdgeFlagv = (PFNGLEDGEFLAGVPROC)wglGetProcAddress("glEdgeFlagv"); }
		if(!obj->methodp_glEdgeFlagv) { obj->methodp_glEdgeFlagv = (PFNGLEDGEFLAGVPROC)GetProcAddress(modOpenGL32, "glEdgeFlagv"); }
		if(!obj->methodp_glEdgeFlagv) { args.This()->Set(v8::String::NewSymbol("glEdgeFlagv"), v8::Undefined()); }
		if(!obj->methodp_glElementPointerAPPLE) { obj->methodp_glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC)wglGetProcAddress("glElementPointerAPPLE"); }
		if(!obj->methodp_glElementPointerAPPLE) { obj->methodp_glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC)GetProcAddress(modOpenGL32, "glElementPointerAPPLE"); }
		if(!obj->methodp_glElementPointerAPPLE) { args.This()->Set(v8::String::NewSymbol("glElementPointerAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glElementPointerATI) { obj->methodp_glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC)wglGetProcAddress("glElementPointerATI"); }
		if(!obj->methodp_glElementPointerATI) { obj->methodp_glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC)GetProcAddress(modOpenGL32, "glElementPointerATI"); }
		if(!obj->methodp_glElementPointerATI) { args.This()->Set(v8::String::NewSymbol("glElementPointerATI"), v8::Undefined()); }
		if(!obj->methodp_glEnable) { obj->methodp_glEnable = (PFNGLENABLEPROC)wglGetProcAddress("glEnable"); }
		if(!obj->methodp_glEnable) { obj->methodp_glEnable = (PFNGLENABLEPROC)GetProcAddress(modOpenGL32, "glEnable"); }
		if(!obj->methodp_glEnable) { args.This()->Set(v8::String::NewSymbol("glEnable"), v8::Undefined()); }
		if(!obj->methodp_glEnableClientState) { obj->methodp_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC)wglGetProcAddress("glEnableClientState"); }
		if(!obj->methodp_glEnableClientState) { obj->methodp_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC)GetProcAddress(modOpenGL32, "glEnableClientState"); }
		if(!obj->methodp_glEnableClientState) { args.This()->Set(v8::String::NewSymbol("glEnableClientState"), v8::Undefined()); }
		if(!obj->methodp_glEnableClientStateIndexedEXT) { obj->methodp_glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)wglGetProcAddress("glEnableClientStateIndexedEXT"); }
		if(!obj->methodp_glEnableClientStateIndexedEXT) { obj->methodp_glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)GetProcAddress(modOpenGL32, "glEnableClientStateIndexedEXT"); }
		if(!obj->methodp_glEnableClientStateIndexedEXT) { args.This()->Set(v8::String::NewSymbol("glEnableClientStateIndexedEXT"), v8::Undefined()); }
		if(!obj->methodp_glEnableClientStateiEXT) { obj->methodp_glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC)wglGetProcAddress("glEnableClientStateiEXT"); }
		if(!obj->methodp_glEnableClientStateiEXT) { obj->methodp_glEnableClientStateiEXT = (PFNGLENABLECLIENTSTATEIEXTPROC)GetProcAddress(modOpenGL32, "glEnableClientStateiEXT"); }
		if(!obj->methodp_glEnableClientStateiEXT) { args.This()->Set(v8::String::NewSymbol("glEnableClientStateiEXT"), v8::Undefined()); }
		if(!obj->methodp_glEnableDriverControlQCOM) { obj->methodp_glEnableDriverControlQCOM = (PFNGLENABLEDRIVERCONTROLQCOMPROC)wglGetProcAddress("glEnableDriverControlQCOM"); }
		if(!obj->methodp_glEnableDriverControlQCOM) { obj->methodp_glEnableDriverControlQCOM = (PFNGLENABLEDRIVERCONTROLQCOMPROC)GetProcAddress(modOpenGL32, "glEnableDriverControlQCOM"); }
		if(!obj->methodp_glEnableDriverControlQCOM) { args.This()->Set(v8::String::NewSymbol("glEnableDriverControlQCOM"), v8::Undefined()); }
		if(!obj->methodp_glEnableIndexedEXT) { obj->methodp_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)wglGetProcAddress("glEnableIndexedEXT"); }
		if(!obj->methodp_glEnableIndexedEXT) { obj->methodp_glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)GetProcAddress(modOpenGL32, "glEnableIndexedEXT"); }
		if(!obj->methodp_glEnableIndexedEXT) { args.This()->Set(v8::String::NewSymbol("glEnableIndexedEXT"), v8::Undefined()); }
		if(!obj->methodp_glEnableVariantClientStateEXT) { obj->methodp_glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)wglGetProcAddress("glEnableVariantClientStateEXT"); }
		if(!obj->methodp_glEnableVariantClientStateEXT) { obj->methodp_glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)GetProcAddress(modOpenGL32, "glEnableVariantClientStateEXT"); }
		if(!obj->methodp_glEnableVariantClientStateEXT) { args.This()->Set(v8::String::NewSymbol("glEnableVariantClientStateEXT"), v8::Undefined()); }
		if(!obj->methodp_glEnableVertexArrayAttribEXT) { obj->methodp_glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)wglGetProcAddress("glEnableVertexArrayAttribEXT"); }
		if(!obj->methodp_glEnableVertexArrayAttribEXT) { obj->methodp_glEnableVertexArrayAttribEXT = (PFNGLENABLEVERTEXARRAYATTRIBEXTPROC)GetProcAddress(modOpenGL32, "glEnableVertexArrayAttribEXT"); }
		if(!obj->methodp_glEnableVertexArrayAttribEXT) { args.This()->Set(v8::String::NewSymbol("glEnableVertexArrayAttribEXT"), v8::Undefined()); }
		if(!obj->methodp_glEnableVertexArrayEXT) { obj->methodp_glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC)wglGetProcAddress("glEnableVertexArrayEXT"); }
		if(!obj->methodp_glEnableVertexArrayEXT) { obj->methodp_glEnableVertexArrayEXT = (PFNGLENABLEVERTEXARRAYEXTPROC)GetProcAddress(modOpenGL32, "glEnableVertexArrayEXT"); }
		if(!obj->methodp_glEnableVertexArrayEXT) { args.This()->Set(v8::String::NewSymbol("glEnableVertexArrayEXT"), v8::Undefined()); }
		if(!obj->methodp_glEnableVertexAttribAPPLE) { obj->methodp_glEnableVertexAttribAPPLE = (PFNGLENABLEVERTEXATTRIBAPPLEPROC)wglGetProcAddress("glEnableVertexAttribAPPLE"); }
		if(!obj->methodp_glEnableVertexAttribAPPLE) { obj->methodp_glEnableVertexAttribAPPLE = (PFNGLENABLEVERTEXATTRIBAPPLEPROC)GetProcAddress(modOpenGL32, "glEnableVertexAttribAPPLE"); }
		if(!obj->methodp_glEnableVertexAttribAPPLE) { args.This()->Set(v8::String::NewSymbol("glEnableVertexAttribAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glEnableVertexAttribArray) { obj->methodp_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)wglGetProcAddress("glEnableVertexAttribArray"); }
		if(!obj->methodp_glEnableVertexAttribArray) { obj->methodp_glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)GetProcAddress(modOpenGL32, "glEnableVertexAttribArray"); }
		if(!obj->methodp_glEnableVertexAttribArray) { args.This()->Set(v8::String::NewSymbol("glEnableVertexAttribArray"), v8::Undefined()); }
		if(!obj->methodp_glEnableVertexAttribArrayARB) { obj->methodp_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)wglGetProcAddress("glEnableVertexAttribArrayARB"); }
		if(!obj->methodp_glEnableVertexAttribArrayARB) { obj->methodp_glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)GetProcAddress(modOpenGL32, "glEnableVertexAttribArrayARB"); }
		if(!obj->methodp_glEnableVertexAttribArrayARB) { args.This()->Set(v8::String::NewSymbol("glEnableVertexAttribArrayARB"), v8::Undefined()); }
		if(!obj->methodp_glEnablei) { obj->methodp_glEnablei = (PFNGLENABLEIPROC)wglGetProcAddress("glEnablei"); }
		if(!obj->methodp_glEnablei) { obj->methodp_glEnablei = (PFNGLENABLEIPROC)GetProcAddress(modOpenGL32, "glEnablei"); }
		if(!obj->methodp_glEnablei) { args.This()->Set(v8::String::NewSymbol("glEnablei"), v8::Undefined()); }
		if(!obj->methodp_glEnableiEXT) { obj->methodp_glEnableiEXT = (PFNGLENABLEIEXTPROC)wglGetProcAddress("glEnableiEXT"); }
		if(!obj->methodp_glEnableiEXT) { obj->methodp_glEnableiEXT = (PFNGLENABLEIEXTPROC)GetProcAddress(modOpenGL32, "glEnableiEXT"); }
		if(!obj->methodp_glEnableiEXT) { args.This()->Set(v8::String::NewSymbol("glEnableiEXT"), v8::Undefined()); }
		if(!obj->methodp_glEnd) { obj->methodp_glEnd = (PFNGLENDPROC)wglGetProcAddress("glEnd"); }
		if(!obj->methodp_glEnd) { obj->methodp_glEnd = (PFNGLENDPROC)GetProcAddress(modOpenGL32, "glEnd"); }
		if(!obj->methodp_glEnd) { args.This()->Set(v8::String::NewSymbol("glEnd"), v8::Undefined()); }
		if(!obj->methodp_glEndConditionalRender) { obj->methodp_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)wglGetProcAddress("glEndConditionalRender"); }
		if(!obj->methodp_glEndConditionalRender) { obj->methodp_glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)GetProcAddress(modOpenGL32, "glEndConditionalRender"); }
		if(!obj->methodp_glEndConditionalRender) { args.This()->Set(v8::String::NewSymbol("glEndConditionalRender"), v8::Undefined()); }
		if(!obj->methodp_glEndConditionalRenderNV) { obj->methodp_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)wglGetProcAddress("glEndConditionalRenderNV"); }
		if(!obj->methodp_glEndConditionalRenderNV) { obj->methodp_glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)GetProcAddress(modOpenGL32, "glEndConditionalRenderNV"); }
		if(!obj->methodp_glEndConditionalRenderNV) { args.This()->Set(v8::String::NewSymbol("glEndConditionalRenderNV"), v8::Undefined()); }
		if(!obj->methodp_glEndConditionalRenderNVX) { obj->methodp_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)wglGetProcAddress("glEndConditionalRenderNVX"); }
		if(!obj->methodp_glEndConditionalRenderNVX) { obj->methodp_glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)GetProcAddress(modOpenGL32, "glEndConditionalRenderNVX"); }
		if(!obj->methodp_glEndConditionalRenderNVX) { args.This()->Set(v8::String::NewSymbol("glEndConditionalRenderNVX"), v8::Undefined()); }
		if(!obj->methodp_glEndFragmentShaderATI) { obj->methodp_glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC)wglGetProcAddress("glEndFragmentShaderATI"); }
		if(!obj->methodp_glEndFragmentShaderATI) { obj->methodp_glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC)GetProcAddress(modOpenGL32, "glEndFragmentShaderATI"); }
		if(!obj->methodp_glEndFragmentShaderATI) { args.This()->Set(v8::String::NewSymbol("glEndFragmentShaderATI"), v8::Undefined()); }
		if(!obj->methodp_glEndList) { obj->methodp_glEndList = (PFNGLENDLISTPROC)wglGetProcAddress("glEndList"); }
		if(!obj->methodp_glEndList) { obj->methodp_glEndList = (PFNGLENDLISTPROC)GetProcAddress(modOpenGL32, "glEndList"); }
		if(!obj->methodp_glEndList) { args.This()->Set(v8::String::NewSymbol("glEndList"), v8::Undefined()); }
		if(!obj->methodp_glEndOcclusionQueryNV) { obj->methodp_glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC)wglGetProcAddress("glEndOcclusionQueryNV"); }
		if(!obj->methodp_glEndOcclusionQueryNV) { obj->methodp_glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC)GetProcAddress(modOpenGL32, "glEndOcclusionQueryNV"); }
		if(!obj->methodp_glEndOcclusionQueryNV) { args.This()->Set(v8::String::NewSymbol("glEndOcclusionQueryNV"), v8::Undefined()); }
		if(!obj->methodp_glEndPerfMonitorAMD) { obj->methodp_glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC)wglGetProcAddress("glEndPerfMonitorAMD"); }
		if(!obj->methodp_glEndPerfMonitorAMD) { obj->methodp_glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC)GetProcAddress(modOpenGL32, "glEndPerfMonitorAMD"); }
		if(!obj->methodp_glEndPerfMonitorAMD) { args.This()->Set(v8::String::NewSymbol("glEndPerfMonitorAMD"), v8::Undefined()); }
		if(!obj->methodp_glEndPerfQueryINTEL) { obj->methodp_glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC)wglGetProcAddress("glEndPerfQueryINTEL"); }
		if(!obj->methodp_glEndPerfQueryINTEL) { obj->methodp_glEndPerfQueryINTEL = (PFNGLENDPERFQUERYINTELPROC)GetProcAddress(modOpenGL32, "glEndPerfQueryINTEL"); }
		if(!obj->methodp_glEndPerfQueryINTEL) { args.This()->Set(v8::String::NewSymbol("glEndPerfQueryINTEL"), v8::Undefined()); }
		if(!obj->methodp_glEndQuery) { obj->methodp_glEndQuery = (PFNGLENDQUERYPROC)wglGetProcAddress("glEndQuery"); }
		if(!obj->methodp_glEndQuery) { obj->methodp_glEndQuery = (PFNGLENDQUERYPROC)GetProcAddress(modOpenGL32, "glEndQuery"); }
		if(!obj->methodp_glEndQuery) { args.This()->Set(v8::String::NewSymbol("glEndQuery"), v8::Undefined()); }
		if(!obj->methodp_glEndQueryARB) { obj->methodp_glEndQueryARB = (PFNGLENDQUERYARBPROC)wglGetProcAddress("glEndQueryARB"); }
		if(!obj->methodp_glEndQueryARB) { obj->methodp_glEndQueryARB = (PFNGLENDQUERYARBPROC)GetProcAddress(modOpenGL32, "glEndQueryARB"); }
		if(!obj->methodp_glEndQueryARB) { args.This()->Set(v8::String::NewSymbol("glEndQueryARB"), v8::Undefined()); }
		if(!obj->methodp_glEndQueryEXT) { obj->methodp_glEndQueryEXT = (PFNGLENDQUERYEXTPROC)wglGetProcAddress("glEndQueryEXT"); }
		if(!obj->methodp_glEndQueryEXT) { obj->methodp_glEndQueryEXT = (PFNGLENDQUERYEXTPROC)GetProcAddress(modOpenGL32, "glEndQueryEXT"); }
		if(!obj->methodp_glEndQueryEXT) { args.This()->Set(v8::String::NewSymbol("glEndQueryEXT"), v8::Undefined()); }
		if(!obj->methodp_glEndQueryIndexed) { obj->methodp_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)wglGetProcAddress("glEndQueryIndexed"); }
		if(!obj->methodp_glEndQueryIndexed) { obj->methodp_glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)GetProcAddress(modOpenGL32, "glEndQueryIndexed"); }
		if(!obj->methodp_glEndQueryIndexed) { args.This()->Set(v8::String::NewSymbol("glEndQueryIndexed"), v8::Undefined()); }
		if(!obj->methodp_glEndTilingQCOM) { obj->methodp_glEndTilingQCOM = (PFNGLENDTILINGQCOMPROC)wglGetProcAddress("glEndTilingQCOM"); }
		if(!obj->methodp_glEndTilingQCOM) { obj->methodp_glEndTilingQCOM = (PFNGLENDTILINGQCOMPROC)GetProcAddress(modOpenGL32, "glEndTilingQCOM"); }
		if(!obj->methodp_glEndTilingQCOM) { args.This()->Set(v8::String::NewSymbol("glEndTilingQCOM"), v8::Undefined()); }
		if(!obj->methodp_glEndTransformFeedback) { obj->methodp_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)wglGetProcAddress("glEndTransformFeedback"); }
		if(!obj->methodp_glEndTransformFeedback) { obj->methodp_glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)GetProcAddress(modOpenGL32, "glEndTransformFeedback"); }
		if(!obj->methodp_glEndTransformFeedback) { args.This()->Set(v8::String::NewSymbol("glEndTransformFeedback"), v8::Undefined()); }
		if(!obj->methodp_glEndTransformFeedbackEXT) { obj->methodp_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)wglGetProcAddress("glEndTransformFeedbackEXT"); }
		if(!obj->methodp_glEndTransformFeedbackEXT) { obj->methodp_glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)GetProcAddress(modOpenGL32, "glEndTransformFeedbackEXT"); }
		if(!obj->methodp_glEndTransformFeedbackEXT) { args.This()->Set(v8::String::NewSymbol("glEndTransformFeedbackEXT"), v8::Undefined()); }
		if(!obj->methodp_glEndTransformFeedbackNV) { obj->methodp_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)wglGetProcAddress("glEndTransformFeedbackNV"); }
		if(!obj->methodp_glEndTransformFeedbackNV) { obj->methodp_glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)GetProcAddress(modOpenGL32, "glEndTransformFeedbackNV"); }
		if(!obj->methodp_glEndTransformFeedbackNV) { args.This()->Set(v8::String::NewSymbol("glEndTransformFeedbackNV"), v8::Undefined()); }
		if(!obj->methodp_glEndVertexShaderEXT) { obj->methodp_glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC)wglGetProcAddress("glEndVertexShaderEXT"); }
		if(!obj->methodp_glEndVertexShaderEXT) { obj->methodp_glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC)GetProcAddress(modOpenGL32, "glEndVertexShaderEXT"); }
		if(!obj->methodp_glEndVertexShaderEXT) { args.This()->Set(v8::String::NewSymbol("glEndVertexShaderEXT"), v8::Undefined()); }
		if(!obj->methodp_glEndVideoCaptureNV) { obj->methodp_glEndVideoCaptureNV = (PFNGLENDVIDEOCAPTURENVPROC)wglGetProcAddress("glEndVideoCaptureNV"); }
		if(!obj->methodp_glEndVideoCaptureNV) { obj->methodp_glEndVideoCaptureNV = (PFNGLENDVIDEOCAPTURENVPROC)GetProcAddress(modOpenGL32, "glEndVideoCaptureNV"); }
		if(!obj->methodp_glEndVideoCaptureNV) { args.This()->Set(v8::String::NewSymbol("glEndVideoCaptureNV"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord1d) { obj->methodp_glEvalCoord1d = (PFNGLEVALCOORD1DPROC)wglGetProcAddress("glEvalCoord1d"); }
		if(!obj->methodp_glEvalCoord1d) { obj->methodp_glEvalCoord1d = (PFNGLEVALCOORD1DPROC)GetProcAddress(modOpenGL32, "glEvalCoord1d"); }
		if(!obj->methodp_glEvalCoord1d) { args.This()->Set(v8::String::NewSymbol("glEvalCoord1d"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord1dv) { obj->methodp_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC)wglGetProcAddress("glEvalCoord1dv"); }
		if(!obj->methodp_glEvalCoord1dv) { obj->methodp_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC)GetProcAddress(modOpenGL32, "glEvalCoord1dv"); }
		if(!obj->methodp_glEvalCoord1dv) { args.This()->Set(v8::String::NewSymbol("glEvalCoord1dv"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord1f) { obj->methodp_glEvalCoord1f = (PFNGLEVALCOORD1FPROC)wglGetProcAddress("glEvalCoord1f"); }
		if(!obj->methodp_glEvalCoord1f) { obj->methodp_glEvalCoord1f = (PFNGLEVALCOORD1FPROC)GetProcAddress(modOpenGL32, "glEvalCoord1f"); }
		if(!obj->methodp_glEvalCoord1f) { args.This()->Set(v8::String::NewSymbol("glEvalCoord1f"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord1fv) { obj->methodp_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC)wglGetProcAddress("glEvalCoord1fv"); }
		if(!obj->methodp_glEvalCoord1fv) { obj->methodp_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC)GetProcAddress(modOpenGL32, "glEvalCoord1fv"); }
		if(!obj->methodp_glEvalCoord1fv) { args.This()->Set(v8::String::NewSymbol("glEvalCoord1fv"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord1xOES) { obj->methodp_glEvalCoord1xOES = (PFNGLEVALCOORD1XOESPROC)wglGetProcAddress("glEvalCoord1xOES"); }
		if(!obj->methodp_glEvalCoord1xOES) { obj->methodp_glEvalCoord1xOES = (PFNGLEVALCOORD1XOESPROC)GetProcAddress(modOpenGL32, "glEvalCoord1xOES"); }
		if(!obj->methodp_glEvalCoord1xOES) { args.This()->Set(v8::String::NewSymbol("glEvalCoord1xOES"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord1xvOES) { obj->methodp_glEvalCoord1xvOES = (PFNGLEVALCOORD1XVOESPROC)wglGetProcAddress("glEvalCoord1xvOES"); }
		if(!obj->methodp_glEvalCoord1xvOES) { obj->methodp_glEvalCoord1xvOES = (PFNGLEVALCOORD1XVOESPROC)GetProcAddress(modOpenGL32, "glEvalCoord1xvOES"); }
		if(!obj->methodp_glEvalCoord1xvOES) { args.This()->Set(v8::String::NewSymbol("glEvalCoord1xvOES"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord2d) { obj->methodp_glEvalCoord2d = (PFNGLEVALCOORD2DPROC)wglGetProcAddress("glEvalCoord2d"); }
		if(!obj->methodp_glEvalCoord2d) { obj->methodp_glEvalCoord2d = (PFNGLEVALCOORD2DPROC)GetProcAddress(modOpenGL32, "glEvalCoord2d"); }
		if(!obj->methodp_glEvalCoord2d) { args.This()->Set(v8::String::NewSymbol("glEvalCoord2d"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord2dv) { obj->methodp_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC)wglGetProcAddress("glEvalCoord2dv"); }
		if(!obj->methodp_glEvalCoord2dv) { obj->methodp_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC)GetProcAddress(modOpenGL32, "glEvalCoord2dv"); }
		if(!obj->methodp_glEvalCoord2dv) { args.This()->Set(v8::String::NewSymbol("glEvalCoord2dv"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord2f) { obj->methodp_glEvalCoord2f = (PFNGLEVALCOORD2FPROC)wglGetProcAddress("glEvalCoord2f"); }
		if(!obj->methodp_glEvalCoord2f) { obj->methodp_glEvalCoord2f = (PFNGLEVALCOORD2FPROC)GetProcAddress(modOpenGL32, "glEvalCoord2f"); }
		if(!obj->methodp_glEvalCoord2f) { args.This()->Set(v8::String::NewSymbol("glEvalCoord2f"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord2fv) { obj->methodp_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC)wglGetProcAddress("glEvalCoord2fv"); }
		if(!obj->methodp_glEvalCoord2fv) { obj->methodp_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC)GetProcAddress(modOpenGL32, "glEvalCoord2fv"); }
		if(!obj->methodp_glEvalCoord2fv) { args.This()->Set(v8::String::NewSymbol("glEvalCoord2fv"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord2xOES) { obj->methodp_glEvalCoord2xOES = (PFNGLEVALCOORD2XOESPROC)wglGetProcAddress("glEvalCoord2xOES"); }
		if(!obj->methodp_glEvalCoord2xOES) { obj->methodp_glEvalCoord2xOES = (PFNGLEVALCOORD2XOESPROC)GetProcAddress(modOpenGL32, "glEvalCoord2xOES"); }
		if(!obj->methodp_glEvalCoord2xOES) { args.This()->Set(v8::String::NewSymbol("glEvalCoord2xOES"), v8::Undefined()); }
		if(!obj->methodp_glEvalCoord2xvOES) { obj->methodp_glEvalCoord2xvOES = (PFNGLEVALCOORD2XVOESPROC)wglGetProcAddress("glEvalCoord2xvOES"); }
		if(!obj->methodp_glEvalCoord2xvOES) { obj->methodp_glEvalCoord2xvOES = (PFNGLEVALCOORD2XVOESPROC)GetProcAddress(modOpenGL32, "glEvalCoord2xvOES"); }
		if(!obj->methodp_glEvalCoord2xvOES) { args.This()->Set(v8::String::NewSymbol("glEvalCoord2xvOES"), v8::Undefined()); }
		if(!obj->methodp_glEvalMapsNV) { obj->methodp_glEvalMapsNV = (PFNGLEVALMAPSNVPROC)wglGetProcAddress("glEvalMapsNV"); }
		if(!obj->methodp_glEvalMapsNV) { obj->methodp_glEvalMapsNV = (PFNGLEVALMAPSNVPROC)GetProcAddress(modOpenGL32, "glEvalMapsNV"); }
		if(!obj->methodp_glEvalMapsNV) { args.This()->Set(v8::String::NewSymbol("glEvalMapsNV"), v8::Undefined()); }
		if(!obj->methodp_glEvalMesh1) { obj->methodp_glEvalMesh1 = (PFNGLEVALMESH1PROC)wglGetProcAddress("glEvalMesh1"); }
		if(!obj->methodp_glEvalMesh1) { obj->methodp_glEvalMesh1 = (PFNGLEVALMESH1PROC)GetProcAddress(modOpenGL32, "glEvalMesh1"); }
		if(!obj->methodp_glEvalMesh1) { args.This()->Set(v8::String::NewSymbol("glEvalMesh1"), v8::Undefined()); }
		if(!obj->methodp_glEvalMesh2) { obj->methodp_glEvalMesh2 = (PFNGLEVALMESH2PROC)wglGetProcAddress("glEvalMesh2"); }
		if(!obj->methodp_glEvalMesh2) { obj->methodp_glEvalMesh2 = (PFNGLEVALMESH2PROC)GetProcAddress(modOpenGL32, "glEvalMesh2"); }
		if(!obj->methodp_glEvalMesh2) { args.This()->Set(v8::String::NewSymbol("glEvalMesh2"), v8::Undefined()); }
		if(!obj->methodp_glEvalPoint1) { obj->methodp_glEvalPoint1 = (PFNGLEVALPOINT1PROC)wglGetProcAddress("glEvalPoint1"); }
		if(!obj->methodp_glEvalPoint1) { obj->methodp_glEvalPoint1 = (PFNGLEVALPOINT1PROC)GetProcAddress(modOpenGL32, "glEvalPoint1"); }
		if(!obj->methodp_glEvalPoint1) { args.This()->Set(v8::String::NewSymbol("glEvalPoint1"), v8::Undefined()); }
		if(!obj->methodp_glEvalPoint2) { obj->methodp_glEvalPoint2 = (PFNGLEVALPOINT2PROC)wglGetProcAddress("glEvalPoint2"); }
		if(!obj->methodp_glEvalPoint2) { obj->methodp_glEvalPoint2 = (PFNGLEVALPOINT2PROC)GetProcAddress(modOpenGL32, "glEvalPoint2"); }
		if(!obj->methodp_glEvalPoint2) { args.This()->Set(v8::String::NewSymbol("glEvalPoint2"), v8::Undefined()); }
		if(!obj->methodp_glExecuteProgramNV) { obj->methodp_glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)wglGetProcAddress("glExecuteProgramNV"); }
		if(!obj->methodp_glExecuteProgramNV) { obj->methodp_glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)GetProcAddress(modOpenGL32, "glExecuteProgramNV"); }
		if(!obj->methodp_glExecuteProgramNV) { args.This()->Set(v8::String::NewSymbol("glExecuteProgramNV"), v8::Undefined()); }
		if(!obj->methodp_glExtGetBufferPointervQCOM) { obj->methodp_glExtGetBufferPointervQCOM = (PFNGLEXTGETBUFFERPOINTERVQCOMPROC)wglGetProcAddress("glExtGetBufferPointervQCOM"); }
		if(!obj->methodp_glExtGetBufferPointervQCOM) { obj->methodp_glExtGetBufferPointervQCOM = (PFNGLEXTGETBUFFERPOINTERVQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetBufferPointervQCOM"); }
		if(!obj->methodp_glExtGetBufferPointervQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetBufferPointervQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetBuffersQCOM) { obj->methodp_glExtGetBuffersQCOM = (PFNGLEXTGETBUFFERSQCOMPROC)wglGetProcAddress("glExtGetBuffersQCOM"); }
		if(!obj->methodp_glExtGetBuffersQCOM) { obj->methodp_glExtGetBuffersQCOM = (PFNGLEXTGETBUFFERSQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetBuffersQCOM"); }
		if(!obj->methodp_glExtGetBuffersQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetBuffersQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetFramebuffersQCOM) { obj->methodp_glExtGetFramebuffersQCOM = (PFNGLEXTGETFRAMEBUFFERSQCOMPROC)wglGetProcAddress("glExtGetFramebuffersQCOM"); }
		if(!obj->methodp_glExtGetFramebuffersQCOM) { obj->methodp_glExtGetFramebuffersQCOM = (PFNGLEXTGETFRAMEBUFFERSQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetFramebuffersQCOM"); }
		if(!obj->methodp_glExtGetFramebuffersQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetFramebuffersQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetProgramBinarySourceQCOM) { obj->methodp_glExtGetProgramBinarySourceQCOM = (PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC)wglGetProcAddress("glExtGetProgramBinarySourceQCOM"); }
		if(!obj->methodp_glExtGetProgramBinarySourceQCOM) { obj->methodp_glExtGetProgramBinarySourceQCOM = (PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetProgramBinarySourceQCOM"); }
		if(!obj->methodp_glExtGetProgramBinarySourceQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetProgramBinarySourceQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetProgramsQCOM) { obj->methodp_glExtGetProgramsQCOM = (PFNGLEXTGETPROGRAMSQCOMPROC)wglGetProcAddress("glExtGetProgramsQCOM"); }
		if(!obj->methodp_glExtGetProgramsQCOM) { obj->methodp_glExtGetProgramsQCOM = (PFNGLEXTGETPROGRAMSQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetProgramsQCOM"); }
		if(!obj->methodp_glExtGetProgramsQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetProgramsQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetRenderbuffersQCOM) { obj->methodp_glExtGetRenderbuffersQCOM = (PFNGLEXTGETRENDERBUFFERSQCOMPROC)wglGetProcAddress("glExtGetRenderbuffersQCOM"); }
		if(!obj->methodp_glExtGetRenderbuffersQCOM) { obj->methodp_glExtGetRenderbuffersQCOM = (PFNGLEXTGETRENDERBUFFERSQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetRenderbuffersQCOM"); }
		if(!obj->methodp_glExtGetRenderbuffersQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetRenderbuffersQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetShadersQCOM) { obj->methodp_glExtGetShadersQCOM = (PFNGLEXTGETSHADERSQCOMPROC)wglGetProcAddress("glExtGetShadersQCOM"); }
		if(!obj->methodp_glExtGetShadersQCOM) { obj->methodp_glExtGetShadersQCOM = (PFNGLEXTGETSHADERSQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetShadersQCOM"); }
		if(!obj->methodp_glExtGetShadersQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetShadersQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetTexLevelParameterivQCOM) { obj->methodp_glExtGetTexLevelParameterivQCOM = (PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC)wglGetProcAddress("glExtGetTexLevelParameterivQCOM"); }
		if(!obj->methodp_glExtGetTexLevelParameterivQCOM) { obj->methodp_glExtGetTexLevelParameterivQCOM = (PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetTexLevelParameterivQCOM"); }
		if(!obj->methodp_glExtGetTexLevelParameterivQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetTexLevelParameterivQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetTexSubImageQCOM) { obj->methodp_glExtGetTexSubImageQCOM = (PFNGLEXTGETTEXSUBIMAGEQCOMPROC)wglGetProcAddress("glExtGetTexSubImageQCOM"); }
		if(!obj->methodp_glExtGetTexSubImageQCOM) { obj->methodp_glExtGetTexSubImageQCOM = (PFNGLEXTGETTEXSUBIMAGEQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetTexSubImageQCOM"); }
		if(!obj->methodp_glExtGetTexSubImageQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetTexSubImageQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtGetTexturesQCOM) { obj->methodp_glExtGetTexturesQCOM = (PFNGLEXTGETTEXTURESQCOMPROC)wglGetProcAddress("glExtGetTexturesQCOM"); }
		if(!obj->methodp_glExtGetTexturesQCOM) { obj->methodp_glExtGetTexturesQCOM = (PFNGLEXTGETTEXTURESQCOMPROC)GetProcAddress(modOpenGL32, "glExtGetTexturesQCOM"); }
		if(!obj->methodp_glExtGetTexturesQCOM) { args.This()->Set(v8::String::NewSymbol("glExtGetTexturesQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtIsProgramBinaryQCOM) { obj->methodp_glExtIsProgramBinaryQCOM = (PFNGLEXTISPROGRAMBINARYQCOMPROC)wglGetProcAddress("glExtIsProgramBinaryQCOM"); }
		if(!obj->methodp_glExtIsProgramBinaryQCOM) { obj->methodp_glExtIsProgramBinaryQCOM = (PFNGLEXTISPROGRAMBINARYQCOMPROC)GetProcAddress(modOpenGL32, "glExtIsProgramBinaryQCOM"); }
		if(!obj->methodp_glExtIsProgramBinaryQCOM) { args.This()->Set(v8::String::NewSymbol("glExtIsProgramBinaryQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtTexObjectStateOverrideiQCOM) { obj->methodp_glExtTexObjectStateOverrideiQCOM = (PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC)wglGetProcAddress("glExtTexObjectStateOverrideiQCOM"); }
		if(!obj->methodp_glExtTexObjectStateOverrideiQCOM) { obj->methodp_glExtTexObjectStateOverrideiQCOM = (PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC)GetProcAddress(modOpenGL32, "glExtTexObjectStateOverrideiQCOM"); }
		if(!obj->methodp_glExtTexObjectStateOverrideiQCOM) { args.This()->Set(v8::String::NewSymbol("glExtTexObjectStateOverrideiQCOM"), v8::Undefined()); }
		if(!obj->methodp_glExtractComponentEXT) { obj->methodp_glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC)wglGetProcAddress("glExtractComponentEXT"); }
		if(!obj->methodp_glExtractComponentEXT) { obj->methodp_glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC)GetProcAddress(modOpenGL32, "glExtractComponentEXT"); }
		if(!obj->methodp_glExtractComponentEXT) { args.This()->Set(v8::String::NewSymbol("glExtractComponentEXT"), v8::Undefined()); }
		if(!obj->methodp_glFeedbackBuffer) { obj->methodp_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC)wglGetProcAddress("glFeedbackBuffer"); }
		if(!obj->methodp_glFeedbackBuffer) { obj->methodp_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC)GetProcAddress(modOpenGL32, "glFeedbackBuffer"); }
		if(!obj->methodp_glFeedbackBuffer) { args.This()->Set(v8::String::NewSymbol("glFeedbackBuffer"), v8::Undefined()); }
		if(!obj->methodp_glFeedbackBufferxOES) { obj->methodp_glFeedbackBufferxOES = (PFNGLFEEDBACKBUFFERXOESPROC)wglGetProcAddress("glFeedbackBufferxOES"); }
		if(!obj->methodp_glFeedbackBufferxOES) { obj->methodp_glFeedbackBufferxOES = (PFNGLFEEDBACKBUFFERXOESPROC)GetProcAddress(modOpenGL32, "glFeedbackBufferxOES"); }
		if(!obj->methodp_glFeedbackBufferxOES) { args.This()->Set(v8::String::NewSymbol("glFeedbackBufferxOES"), v8::Undefined()); }
		if(!obj->methodp_glFenceSync) { obj->methodp_glFenceSync = (PFNGLFENCESYNCPROC)wglGetProcAddress("glFenceSync"); }
		if(!obj->methodp_glFenceSync) { obj->methodp_glFenceSync = (PFNGLFENCESYNCPROC)GetProcAddress(modOpenGL32, "glFenceSync"); }
		if(!obj->methodp_glFenceSync) { args.This()->Set(v8::String::NewSymbol("glFenceSync"), v8::Undefined()); }
		if(!obj->methodp_glFenceSyncAPPLE) { obj->methodp_glFenceSyncAPPLE = (PFNGLFENCESYNCAPPLEPROC)wglGetProcAddress("glFenceSyncAPPLE"); }
		if(!obj->methodp_glFenceSyncAPPLE) { obj->methodp_glFenceSyncAPPLE = (PFNGLFENCESYNCAPPLEPROC)GetProcAddress(modOpenGL32, "glFenceSyncAPPLE"); }
		if(!obj->methodp_glFenceSyncAPPLE) { args.This()->Set(v8::String::NewSymbol("glFenceSyncAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glFinalCombinerInputNV) { obj->methodp_glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)wglGetProcAddress("glFinalCombinerInputNV"); }
		if(!obj->methodp_glFinalCombinerInputNV) { obj->methodp_glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)GetProcAddress(modOpenGL32, "glFinalCombinerInputNV"); }
		if(!obj->methodp_glFinalCombinerInputNV) { args.This()->Set(v8::String::NewSymbol("glFinalCombinerInputNV"), v8::Undefined()); }
		if(!obj->methodp_glFinish) { obj->methodp_glFinish = (PFNGLFINISHPROC)wglGetProcAddress("glFinish"); }
		if(!obj->methodp_glFinish) { obj->methodp_glFinish = (PFNGLFINISHPROC)GetProcAddress(modOpenGL32, "glFinish"); }
		if(!obj->methodp_glFinish) { args.This()->Set(v8::String::NewSymbol("glFinish"), v8::Undefined()); }
		if(!obj->methodp_glFinishAsyncSGIX) { obj->methodp_glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC)wglGetProcAddress("glFinishAsyncSGIX"); }
		if(!obj->methodp_glFinishAsyncSGIX) { obj->methodp_glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC)GetProcAddress(modOpenGL32, "glFinishAsyncSGIX"); }
		if(!obj->methodp_glFinishAsyncSGIX) { args.This()->Set(v8::String::NewSymbol("glFinishAsyncSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFinishFenceAPPLE) { obj->methodp_glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC)wglGetProcAddress("glFinishFenceAPPLE"); }
		if(!obj->methodp_glFinishFenceAPPLE) { obj->methodp_glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC)GetProcAddress(modOpenGL32, "glFinishFenceAPPLE"); }
		if(!obj->methodp_glFinishFenceAPPLE) { args.This()->Set(v8::String::NewSymbol("glFinishFenceAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glFinishFenceNV) { obj->methodp_glFinishFenceNV = (PFNGLFINISHFENCENVPROC)wglGetProcAddress("glFinishFenceNV"); }
		if(!obj->methodp_glFinishFenceNV) { obj->methodp_glFinishFenceNV = (PFNGLFINISHFENCENVPROC)GetProcAddress(modOpenGL32, "glFinishFenceNV"); }
		if(!obj->methodp_glFinishFenceNV) { args.This()->Set(v8::String::NewSymbol("glFinishFenceNV"), v8::Undefined()); }
		if(!obj->methodp_glFinishObjectAPPLE) { obj->methodp_glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC)wglGetProcAddress("glFinishObjectAPPLE"); }
		if(!obj->methodp_glFinishObjectAPPLE) { obj->methodp_glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC)GetProcAddress(modOpenGL32, "glFinishObjectAPPLE"); }
		if(!obj->methodp_glFinishObjectAPPLE) { args.This()->Set(v8::String::NewSymbol("glFinishObjectAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glFinishTextureSUNX) { obj->methodp_glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC)wglGetProcAddress("glFinishTextureSUNX"); }
		if(!obj->methodp_glFinishTextureSUNX) { obj->methodp_glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC)GetProcAddress(modOpenGL32, "glFinishTextureSUNX"); }
		if(!obj->methodp_glFinishTextureSUNX) { args.This()->Set(v8::String::NewSymbol("glFinishTextureSUNX"), v8::Undefined()); }
		if(!obj->methodp_glFlush) { obj->methodp_glFlush = (PFNGLFLUSHPROC)wglGetProcAddress("glFlush"); }
		if(!obj->methodp_glFlush) { obj->methodp_glFlush = (PFNGLFLUSHPROC)GetProcAddress(modOpenGL32, "glFlush"); }
		if(!obj->methodp_glFlush) { args.This()->Set(v8::String::NewSymbol("glFlush"), v8::Undefined()); }
		if(!obj->methodp_glFlushMappedBufferRange) { obj->methodp_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)wglGetProcAddress("glFlushMappedBufferRange"); }
		if(!obj->methodp_glFlushMappedBufferRange) { obj->methodp_glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)GetProcAddress(modOpenGL32, "glFlushMappedBufferRange"); }
		if(!obj->methodp_glFlushMappedBufferRange) { args.This()->Set(v8::String::NewSymbol("glFlushMappedBufferRange"), v8::Undefined()); }
		if(!obj->methodp_glFlushMappedBufferRangeAPPLE) { obj->methodp_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)wglGetProcAddress("glFlushMappedBufferRangeAPPLE"); }
		if(!obj->methodp_glFlushMappedBufferRangeAPPLE) { obj->methodp_glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)GetProcAddress(modOpenGL32, "glFlushMappedBufferRangeAPPLE"); }
		if(!obj->methodp_glFlushMappedBufferRangeAPPLE) { args.This()->Set(v8::String::NewSymbol("glFlushMappedBufferRangeAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glFlushMappedBufferRangeEXT) { obj->methodp_glFlushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC)wglGetProcAddress("glFlushMappedBufferRangeEXT"); }
		if(!obj->methodp_glFlushMappedBufferRangeEXT) { obj->methodp_glFlushMappedBufferRangeEXT = (PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC)GetProcAddress(modOpenGL32, "glFlushMappedBufferRangeEXT"); }
		if(!obj->methodp_glFlushMappedBufferRangeEXT) { args.This()->Set(v8::String::NewSymbol("glFlushMappedBufferRangeEXT"), v8::Undefined()); }
		if(!obj->methodp_glFlushMappedNamedBufferRangeEXT) { obj->methodp_glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)wglGetProcAddress("glFlushMappedNamedBufferRangeEXT"); }
		if(!obj->methodp_glFlushMappedNamedBufferRangeEXT) { obj->methodp_glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)GetProcAddress(modOpenGL32, "glFlushMappedNamedBufferRangeEXT"); }
		if(!obj->methodp_glFlushMappedNamedBufferRangeEXT) { args.This()->Set(v8::String::NewSymbol("glFlushMappedNamedBufferRangeEXT"), v8::Undefined()); }
		if(!obj->methodp_glFlushPixelDataRangeNV) { obj->methodp_glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC)wglGetProcAddress("glFlushPixelDataRangeNV"); }
		if(!obj->methodp_glFlushPixelDataRangeNV) { obj->methodp_glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC)GetProcAddress(modOpenGL32, "glFlushPixelDataRangeNV"); }
		if(!obj->methodp_glFlushPixelDataRangeNV) { args.This()->Set(v8::String::NewSymbol("glFlushPixelDataRangeNV"), v8::Undefined()); }
		if(!obj->methodp_glFlushRasterSGIX) { obj->methodp_glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC)wglGetProcAddress("glFlushRasterSGIX"); }
		if(!obj->methodp_glFlushRasterSGIX) { obj->methodp_glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC)GetProcAddress(modOpenGL32, "glFlushRasterSGIX"); }
		if(!obj->methodp_glFlushRasterSGIX) { args.This()->Set(v8::String::NewSymbol("glFlushRasterSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFlushStaticDataIBM) { obj->methodp_glFlushStaticDataIBM = (PFNGLFLUSHSTATICDATAIBMPROC)wglGetProcAddress("glFlushStaticDataIBM"); }
		if(!obj->methodp_glFlushStaticDataIBM) { obj->methodp_glFlushStaticDataIBM = (PFNGLFLUSHSTATICDATAIBMPROC)GetProcAddress(modOpenGL32, "glFlushStaticDataIBM"); }
		if(!obj->methodp_glFlushStaticDataIBM) { args.This()->Set(v8::String::NewSymbol("glFlushStaticDataIBM"), v8::Undefined()); }
		if(!obj->methodp_glFlushVertexArrayRangeAPPLE) { obj->methodp_glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)wglGetProcAddress("glFlushVertexArrayRangeAPPLE"); }
		if(!obj->methodp_glFlushVertexArrayRangeAPPLE) { obj->methodp_glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)GetProcAddress(modOpenGL32, "glFlushVertexArrayRangeAPPLE"); }
		if(!obj->methodp_glFlushVertexArrayRangeAPPLE) { args.This()->Set(v8::String::NewSymbol("glFlushVertexArrayRangeAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glFlushVertexArrayRangeNV) { obj->methodp_glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)wglGetProcAddress("glFlushVertexArrayRangeNV"); }
		if(!obj->methodp_glFlushVertexArrayRangeNV) { obj->methodp_glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)GetProcAddress(modOpenGL32, "glFlushVertexArrayRangeNV"); }
		if(!obj->methodp_glFlushVertexArrayRangeNV) { args.This()->Set(v8::String::NewSymbol("glFlushVertexArrayRangeNV"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordFormatNV) { obj->methodp_glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC)wglGetProcAddress("glFogCoordFormatNV"); }
		if(!obj->methodp_glFogCoordFormatNV) { obj->methodp_glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC)GetProcAddress(modOpenGL32, "glFogCoordFormatNV"); }
		if(!obj->methodp_glFogCoordFormatNV) { args.This()->Set(v8::String::NewSymbol("glFogCoordFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordPointer) { obj->methodp_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)wglGetProcAddress("glFogCoordPointer"); }
		if(!obj->methodp_glFogCoordPointer) { obj->methodp_glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)GetProcAddress(modOpenGL32, "glFogCoordPointer"); }
		if(!obj->methodp_glFogCoordPointer) { args.This()->Set(v8::String::NewSymbol("glFogCoordPointer"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordPointerEXT) { obj->methodp_glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)wglGetProcAddress("glFogCoordPointerEXT"); }
		if(!obj->methodp_glFogCoordPointerEXT) { obj->methodp_glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glFogCoordPointerEXT"); }
		if(!obj->methodp_glFogCoordPointerEXT) { args.This()->Set(v8::String::NewSymbol("glFogCoordPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordPointerListIBM) { obj->methodp_glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC)wglGetProcAddress("glFogCoordPointerListIBM"); }
		if(!obj->methodp_glFogCoordPointerListIBM) { obj->methodp_glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC)GetProcAddress(modOpenGL32, "glFogCoordPointerListIBM"); }
		if(!obj->methodp_glFogCoordPointerListIBM) { args.This()->Set(v8::String::NewSymbol("glFogCoordPointerListIBM"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordd) { obj->methodp_glFogCoordd = (PFNGLFOGCOORDDPROC)wglGetProcAddress("glFogCoordd"); }
		if(!obj->methodp_glFogCoordd) { obj->methodp_glFogCoordd = (PFNGLFOGCOORDDPROC)GetProcAddress(modOpenGL32, "glFogCoordd"); }
		if(!obj->methodp_glFogCoordd) { args.This()->Set(v8::String::NewSymbol("glFogCoordd"), v8::Undefined()); }
		if(!obj->methodp_glFogCoorddEXT) { obj->methodp_glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)wglGetProcAddress("glFogCoorddEXT"); }
		if(!obj->methodp_glFogCoorddEXT) { obj->methodp_glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)GetProcAddress(modOpenGL32, "glFogCoorddEXT"); }
		if(!obj->methodp_glFogCoorddEXT) { args.This()->Set(v8::String::NewSymbol("glFogCoorddEXT"), v8::Undefined()); }
		if(!obj->methodp_glFogCoorddv) { obj->methodp_glFogCoorddv = (PFNGLFOGCOORDDVPROC)wglGetProcAddress("glFogCoorddv"); }
		if(!obj->methodp_glFogCoorddv) { obj->methodp_glFogCoorddv = (PFNGLFOGCOORDDVPROC)GetProcAddress(modOpenGL32, "glFogCoorddv"); }
		if(!obj->methodp_glFogCoorddv) { args.This()->Set(v8::String::NewSymbol("glFogCoorddv"), v8::Undefined()); }
		if(!obj->methodp_glFogCoorddvEXT) { obj->methodp_glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)wglGetProcAddress("glFogCoorddvEXT"); }
		if(!obj->methodp_glFogCoorddvEXT) { obj->methodp_glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)GetProcAddress(modOpenGL32, "glFogCoorddvEXT"); }
		if(!obj->methodp_glFogCoorddvEXT) { args.This()->Set(v8::String::NewSymbol("glFogCoorddvEXT"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordf) { obj->methodp_glFogCoordf = (PFNGLFOGCOORDFPROC)wglGetProcAddress("glFogCoordf"); }
		if(!obj->methodp_glFogCoordf) { obj->methodp_glFogCoordf = (PFNGLFOGCOORDFPROC)GetProcAddress(modOpenGL32, "glFogCoordf"); }
		if(!obj->methodp_glFogCoordf) { args.This()->Set(v8::String::NewSymbol("glFogCoordf"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordfEXT) { obj->methodp_glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)wglGetProcAddress("glFogCoordfEXT"); }
		if(!obj->methodp_glFogCoordfEXT) { obj->methodp_glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)GetProcAddress(modOpenGL32, "glFogCoordfEXT"); }
		if(!obj->methodp_glFogCoordfEXT) { args.This()->Set(v8::String::NewSymbol("glFogCoordfEXT"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordfv) { obj->methodp_glFogCoordfv = (PFNGLFOGCOORDFVPROC)wglGetProcAddress("glFogCoordfv"); }
		if(!obj->methodp_glFogCoordfv) { obj->methodp_glFogCoordfv = (PFNGLFOGCOORDFVPROC)GetProcAddress(modOpenGL32, "glFogCoordfv"); }
		if(!obj->methodp_glFogCoordfv) { args.This()->Set(v8::String::NewSymbol("glFogCoordfv"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordfvEXT) { obj->methodp_glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)wglGetProcAddress("glFogCoordfvEXT"); }
		if(!obj->methodp_glFogCoordfvEXT) { obj->methodp_glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)GetProcAddress(modOpenGL32, "glFogCoordfvEXT"); }
		if(!obj->methodp_glFogCoordfvEXT) { args.This()->Set(v8::String::NewSymbol("glFogCoordfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordhNV) { obj->methodp_glFogCoordhNV = (PFNGLFOGCOORDHNVPROC)wglGetProcAddress("glFogCoordhNV"); }
		if(!obj->methodp_glFogCoordhNV) { obj->methodp_glFogCoordhNV = (PFNGLFOGCOORDHNVPROC)GetProcAddress(modOpenGL32, "glFogCoordhNV"); }
		if(!obj->methodp_glFogCoordhNV) { args.This()->Set(v8::String::NewSymbol("glFogCoordhNV"), v8::Undefined()); }
		if(!obj->methodp_glFogCoordhvNV) { obj->methodp_glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC)wglGetProcAddress("glFogCoordhvNV"); }
		if(!obj->methodp_glFogCoordhvNV) { obj->methodp_glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC)GetProcAddress(modOpenGL32, "glFogCoordhvNV"); }
		if(!obj->methodp_glFogCoordhvNV) { args.This()->Set(v8::String::NewSymbol("glFogCoordhvNV"), v8::Undefined()); }
		if(!obj->methodp_glFogFuncSGIS) { obj->methodp_glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC)wglGetProcAddress("glFogFuncSGIS"); }
		if(!obj->methodp_glFogFuncSGIS) { obj->methodp_glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC)GetProcAddress(modOpenGL32, "glFogFuncSGIS"); }
		if(!obj->methodp_glFogFuncSGIS) { args.This()->Set(v8::String::NewSymbol("glFogFuncSGIS"), v8::Undefined()); }
		if(!obj->methodp_glFogf) { obj->methodp_glFogf = (PFNGLFOGFPROC)wglGetProcAddress("glFogf"); }
		if(!obj->methodp_glFogf) { obj->methodp_glFogf = (PFNGLFOGFPROC)GetProcAddress(modOpenGL32, "glFogf"); }
		if(!obj->methodp_glFogf) { args.This()->Set(v8::String::NewSymbol("glFogf"), v8::Undefined()); }
		if(!obj->methodp_glFogfv) { obj->methodp_glFogfv = (PFNGLFOGFVPROC)wglGetProcAddress("glFogfv"); }
		if(!obj->methodp_glFogfv) { obj->methodp_glFogfv = (PFNGLFOGFVPROC)GetProcAddress(modOpenGL32, "glFogfv"); }
		if(!obj->methodp_glFogfv) { args.This()->Set(v8::String::NewSymbol("glFogfv"), v8::Undefined()); }
		if(!obj->methodp_glFogi) { obj->methodp_glFogi = (PFNGLFOGIPROC)wglGetProcAddress("glFogi"); }
		if(!obj->methodp_glFogi) { obj->methodp_glFogi = (PFNGLFOGIPROC)GetProcAddress(modOpenGL32, "glFogi"); }
		if(!obj->methodp_glFogi) { args.This()->Set(v8::String::NewSymbol("glFogi"), v8::Undefined()); }
		if(!obj->methodp_glFogiv) { obj->methodp_glFogiv = (PFNGLFOGIVPROC)wglGetProcAddress("glFogiv"); }
		if(!obj->methodp_glFogiv) { obj->methodp_glFogiv = (PFNGLFOGIVPROC)GetProcAddress(modOpenGL32, "glFogiv"); }
		if(!obj->methodp_glFogiv) { args.This()->Set(v8::String::NewSymbol("glFogiv"), v8::Undefined()); }
		if(!obj->methodp_glFogx) { obj->methodp_glFogx = (PFNGLFOGXPROC)wglGetProcAddress("glFogx"); }
		if(!obj->methodp_glFogx) { obj->methodp_glFogx = (PFNGLFOGXPROC)GetProcAddress(modOpenGL32, "glFogx"); }
		if(!obj->methodp_glFogx) { args.This()->Set(v8::String::NewSymbol("glFogx"), v8::Undefined()); }
		if(!obj->methodp_glFogxOES) { obj->methodp_glFogxOES = (PFNGLFOGXOESPROC)wglGetProcAddress("glFogxOES"); }
		if(!obj->methodp_glFogxOES) { obj->methodp_glFogxOES = (PFNGLFOGXOESPROC)GetProcAddress(modOpenGL32, "glFogxOES"); }
		if(!obj->methodp_glFogxOES) { args.This()->Set(v8::String::NewSymbol("glFogxOES"), v8::Undefined()); }
		if(!obj->methodp_glFogxv) { obj->methodp_glFogxv = (PFNGLFOGXVPROC)wglGetProcAddress("glFogxv"); }
		if(!obj->methodp_glFogxv) { obj->methodp_glFogxv = (PFNGLFOGXVPROC)GetProcAddress(modOpenGL32, "glFogxv"); }
		if(!obj->methodp_glFogxv) { args.This()->Set(v8::String::NewSymbol("glFogxv"), v8::Undefined()); }
		if(!obj->methodp_glFogxvOES) { obj->methodp_glFogxvOES = (PFNGLFOGXVOESPROC)wglGetProcAddress("glFogxvOES"); }
		if(!obj->methodp_glFogxvOES) { obj->methodp_glFogxvOES = (PFNGLFOGXVOESPROC)GetProcAddress(modOpenGL32, "glFogxvOES"); }
		if(!obj->methodp_glFogxvOES) { args.This()->Set(v8::String::NewSymbol("glFogxvOES"), v8::Undefined()); }
		if(!obj->methodp_glFragmentColorMaterialSGIX) { obj->methodp_glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)wglGetProcAddress("glFragmentColorMaterialSGIX"); }
		if(!obj->methodp_glFragmentColorMaterialSGIX) { obj->methodp_glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentColorMaterialSGIX"); }
		if(!obj->methodp_glFragmentColorMaterialSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentColorMaterialSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentLightModelfSGIX) { obj->methodp_glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)wglGetProcAddress("glFragmentLightModelfSGIX"); }
		if(!obj->methodp_glFragmentLightModelfSGIX) { obj->methodp_glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentLightModelfSGIX"); }
		if(!obj->methodp_glFragmentLightModelfSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentLightModelfSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentLightModelfvSGIX) { obj->methodp_glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)wglGetProcAddress("glFragmentLightModelfvSGIX"); }
		if(!obj->methodp_glFragmentLightModelfvSGIX) { obj->methodp_glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentLightModelfvSGIX"); }
		if(!obj->methodp_glFragmentLightModelfvSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentLightModelfvSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentLightModeliSGIX) { obj->methodp_glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)wglGetProcAddress("glFragmentLightModeliSGIX"); }
		if(!obj->methodp_glFragmentLightModeliSGIX) { obj->methodp_glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)GetProcAddress(modOpenGL32, "glFragmentLightModeliSGIX"); }
		if(!obj->methodp_glFragmentLightModeliSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentLightModeliSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentLightModelivSGIX) { obj->methodp_glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)wglGetProcAddress("glFragmentLightModelivSGIX"); }
		if(!obj->methodp_glFragmentLightModelivSGIX) { obj->methodp_glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentLightModelivSGIX"); }
		if(!obj->methodp_glFragmentLightModelivSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentLightModelivSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentLightfSGIX) { obj->methodp_glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC)wglGetProcAddress("glFragmentLightfSGIX"); }
		if(!obj->methodp_glFragmentLightfSGIX) { obj->methodp_glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentLightfSGIX"); }
		if(!obj->methodp_glFragmentLightfSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentLightfSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentLightfvSGIX) { obj->methodp_glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC)wglGetProcAddress("glFragmentLightfvSGIX"); }
		if(!obj->methodp_glFragmentLightfvSGIX) { obj->methodp_glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentLightfvSGIX"); }
		if(!obj->methodp_glFragmentLightfvSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentLightfvSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentLightiSGIX) { obj->methodp_glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC)wglGetProcAddress("glFragmentLightiSGIX"); }
		if(!obj->methodp_glFragmentLightiSGIX) { obj->methodp_glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC)GetProcAddress(modOpenGL32, "glFragmentLightiSGIX"); }
		if(!obj->methodp_glFragmentLightiSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentLightiSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentLightivSGIX) { obj->methodp_glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC)wglGetProcAddress("glFragmentLightivSGIX"); }
		if(!obj->methodp_glFragmentLightivSGIX) { obj->methodp_glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentLightivSGIX"); }
		if(!obj->methodp_glFragmentLightivSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentLightivSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentMaterialfSGIX) { obj->methodp_glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC)wglGetProcAddress("glFragmentMaterialfSGIX"); }
		if(!obj->methodp_glFragmentMaterialfSGIX) { obj->methodp_glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentMaterialfSGIX"); }
		if(!obj->methodp_glFragmentMaterialfSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentMaterialfSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentMaterialfvSGIX) { obj->methodp_glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC)wglGetProcAddress("glFragmentMaterialfvSGIX"); }
		if(!obj->methodp_glFragmentMaterialfvSGIX) { obj->methodp_glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentMaterialfvSGIX"); }
		if(!obj->methodp_glFragmentMaterialfvSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentMaterialfvSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentMaterialiSGIX) { obj->methodp_glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC)wglGetProcAddress("glFragmentMaterialiSGIX"); }
		if(!obj->methodp_glFragmentMaterialiSGIX) { obj->methodp_glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC)GetProcAddress(modOpenGL32, "glFragmentMaterialiSGIX"); }
		if(!obj->methodp_glFragmentMaterialiSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentMaterialiSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFragmentMaterialivSGIX) { obj->methodp_glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC)wglGetProcAddress("glFragmentMaterialivSGIX"); }
		if(!obj->methodp_glFragmentMaterialivSGIX) { obj->methodp_glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC)GetProcAddress(modOpenGL32, "glFragmentMaterialivSGIX"); }
		if(!obj->methodp_glFragmentMaterialivSGIX) { args.This()->Set(v8::String::NewSymbol("glFragmentMaterialivSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFrameTerminatorGREMEDY) { obj->methodp_glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC)wglGetProcAddress("glFrameTerminatorGREMEDY"); }
		if(!obj->methodp_glFrameTerminatorGREMEDY) { obj->methodp_glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC)GetProcAddress(modOpenGL32, "glFrameTerminatorGREMEDY"); }
		if(!obj->methodp_glFrameTerminatorGREMEDY) { args.This()->Set(v8::String::NewSymbol("glFrameTerminatorGREMEDY"), v8::Undefined()); }
		if(!obj->methodp_glFrameZoomSGIX) { obj->methodp_glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC)wglGetProcAddress("glFrameZoomSGIX"); }
		if(!obj->methodp_glFrameZoomSGIX) { obj->methodp_glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC)GetProcAddress(modOpenGL32, "glFrameZoomSGIX"); }
		if(!obj->methodp_glFrameZoomSGIX) { args.This()->Set(v8::String::NewSymbol("glFrameZoomSGIX"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferDrawBufferEXT) { obj->methodp_glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)wglGetProcAddress("glFramebufferDrawBufferEXT"); }
		if(!obj->methodp_glFramebufferDrawBufferEXT) { obj->methodp_glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glFramebufferDrawBufferEXT"); }
		if(!obj->methodp_glFramebufferDrawBufferEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferDrawBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferDrawBuffersEXT) { obj->methodp_glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)wglGetProcAddress("glFramebufferDrawBuffersEXT"); }
		if(!obj->methodp_glFramebufferDrawBuffersEXT) { obj->methodp_glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)GetProcAddress(modOpenGL32, "glFramebufferDrawBuffersEXT"); }
		if(!obj->methodp_glFramebufferDrawBuffersEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferDrawBuffersEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferParameteri) { obj->methodp_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)wglGetProcAddress("glFramebufferParameteri"); }
		if(!obj->methodp_glFramebufferParameteri) { obj->methodp_glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)GetProcAddress(modOpenGL32, "glFramebufferParameteri"); }
		if(!obj->methodp_glFramebufferParameteri) { args.This()->Set(v8::String::NewSymbol("glFramebufferParameteri"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferReadBufferEXT) { obj->methodp_glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC)wglGetProcAddress("glFramebufferReadBufferEXT"); }
		if(!obj->methodp_glFramebufferReadBufferEXT) { obj->methodp_glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glFramebufferReadBufferEXT"); }
		if(!obj->methodp_glFramebufferReadBufferEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferReadBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferRenderbuffer) { obj->methodp_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)wglGetProcAddress("glFramebufferRenderbuffer"); }
		if(!obj->methodp_glFramebufferRenderbuffer) { obj->methodp_glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)GetProcAddress(modOpenGL32, "glFramebufferRenderbuffer"); }
		if(!obj->methodp_glFramebufferRenderbuffer) { args.This()->Set(v8::String::NewSymbol("glFramebufferRenderbuffer"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferRenderbufferEXT) { obj->methodp_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)wglGetProcAddress("glFramebufferRenderbufferEXT"); }
		if(!obj->methodp_glFramebufferRenderbufferEXT) { obj->methodp_glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glFramebufferRenderbufferEXT"); }
		if(!obj->methodp_glFramebufferRenderbufferEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferRenderbufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferRenderbufferOES) { obj->methodp_glFramebufferRenderbufferOES = (PFNGLFRAMEBUFFERRENDERBUFFEROESPROC)wglGetProcAddress("glFramebufferRenderbufferOES"); }
		if(!obj->methodp_glFramebufferRenderbufferOES) { obj->methodp_glFramebufferRenderbufferOES = (PFNGLFRAMEBUFFERRENDERBUFFEROESPROC)GetProcAddress(modOpenGL32, "glFramebufferRenderbufferOES"); }
		if(!obj->methodp_glFramebufferRenderbufferOES) { args.This()->Set(v8::String::NewSymbol("glFramebufferRenderbufferOES"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture) { obj->methodp_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)wglGetProcAddress("glFramebufferTexture"); }
		if(!obj->methodp_glFramebufferTexture) { obj->methodp_glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture"); }
		if(!obj->methodp_glFramebufferTexture) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture1D) { obj->methodp_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)wglGetProcAddress("glFramebufferTexture1D"); }
		if(!obj->methodp_glFramebufferTexture1D) { obj->methodp_glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture1D"); }
		if(!obj->methodp_glFramebufferTexture1D) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture1D"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture1DEXT) { obj->methodp_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)wglGetProcAddress("glFramebufferTexture1DEXT"); }
		if(!obj->methodp_glFramebufferTexture1DEXT) { obj->methodp_glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture1DEXT"); }
		if(!obj->methodp_glFramebufferTexture1DEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture2D) { obj->methodp_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)wglGetProcAddress("glFramebufferTexture2D"); }
		if(!obj->methodp_glFramebufferTexture2D) { obj->methodp_glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture2D"); }
		if(!obj->methodp_glFramebufferTexture2D) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture2D"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture2DEXT) { obj->methodp_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)wglGetProcAddress("glFramebufferTexture2DEXT"); }
		if(!obj->methodp_glFramebufferTexture2DEXT) { obj->methodp_glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture2DEXT"); }
		if(!obj->methodp_glFramebufferTexture2DEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture2DMultisampleEXT) { obj->methodp_glFramebufferTexture2DMultisampleEXT = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC)wglGetProcAddress("glFramebufferTexture2DMultisampleEXT"); }
		if(!obj->methodp_glFramebufferTexture2DMultisampleEXT) { obj->methodp_glFramebufferTexture2DMultisampleEXT = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture2DMultisampleEXT"); }
		if(!obj->methodp_glFramebufferTexture2DMultisampleEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture2DMultisampleEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture2DMultisampleIMG) { obj->methodp_glFramebufferTexture2DMultisampleIMG = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC)wglGetProcAddress("glFramebufferTexture2DMultisampleIMG"); }
		if(!obj->methodp_glFramebufferTexture2DMultisampleIMG) { obj->methodp_glFramebufferTexture2DMultisampleIMG = (PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture2DMultisampleIMG"); }
		if(!obj->methodp_glFramebufferTexture2DMultisampleIMG) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture2DMultisampleIMG"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture2DOES) { obj->methodp_glFramebufferTexture2DOES = (PFNGLFRAMEBUFFERTEXTURE2DOESPROC)wglGetProcAddress("glFramebufferTexture2DOES"); }
		if(!obj->methodp_glFramebufferTexture2DOES) { obj->methodp_glFramebufferTexture2DOES = (PFNGLFRAMEBUFFERTEXTURE2DOESPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture2DOES"); }
		if(!obj->methodp_glFramebufferTexture2DOES) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture2DOES"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture3D) { obj->methodp_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)wglGetProcAddress("glFramebufferTexture3D"); }
		if(!obj->methodp_glFramebufferTexture3D) { obj->methodp_glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture3D"); }
		if(!obj->methodp_glFramebufferTexture3D) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture3D"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture3DEXT) { obj->methodp_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)wglGetProcAddress("glFramebufferTexture3DEXT"); }
		if(!obj->methodp_glFramebufferTexture3DEXT) { obj->methodp_glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture3DEXT"); }
		if(!obj->methodp_glFramebufferTexture3DEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTexture3DOES) { obj->methodp_glFramebufferTexture3DOES = (PFNGLFRAMEBUFFERTEXTURE3DOESPROC)wglGetProcAddress("glFramebufferTexture3DOES"); }
		if(!obj->methodp_glFramebufferTexture3DOES) { obj->methodp_glFramebufferTexture3DOES = (PFNGLFRAMEBUFFERTEXTURE3DOESPROC)GetProcAddress(modOpenGL32, "glFramebufferTexture3DOES"); }
		if(!obj->methodp_glFramebufferTexture3DOES) { args.This()->Set(v8::String::NewSymbol("glFramebufferTexture3DOES"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTextureARB) { obj->methodp_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)wglGetProcAddress("glFramebufferTextureARB"); }
		if(!obj->methodp_glFramebufferTextureARB) { obj->methodp_glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)GetProcAddress(modOpenGL32, "glFramebufferTextureARB"); }
		if(!obj->methodp_glFramebufferTextureARB) { args.This()->Set(v8::String::NewSymbol("glFramebufferTextureARB"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTextureEXT) { obj->methodp_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)wglGetProcAddress("glFramebufferTextureEXT"); }
		if(!obj->methodp_glFramebufferTextureEXT) { obj->methodp_glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)GetProcAddress(modOpenGL32, "glFramebufferTextureEXT"); }
		if(!obj->methodp_glFramebufferTextureEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferTextureEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTextureFaceARB) { obj->methodp_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)wglGetProcAddress("glFramebufferTextureFaceARB"); }
		if(!obj->methodp_glFramebufferTextureFaceARB) { obj->methodp_glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)GetProcAddress(modOpenGL32, "glFramebufferTextureFaceARB"); }
		if(!obj->methodp_glFramebufferTextureFaceARB) { args.This()->Set(v8::String::NewSymbol("glFramebufferTextureFaceARB"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTextureFaceEXT) { obj->methodp_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)wglGetProcAddress("glFramebufferTextureFaceEXT"); }
		if(!obj->methodp_glFramebufferTextureFaceEXT) { obj->methodp_glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)GetProcAddress(modOpenGL32, "glFramebufferTextureFaceEXT"); }
		if(!obj->methodp_glFramebufferTextureFaceEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferTextureFaceEXT"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTextureLayer) { obj->methodp_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)wglGetProcAddress("glFramebufferTextureLayer"); }
		if(!obj->methodp_glFramebufferTextureLayer) { obj->methodp_glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)GetProcAddress(modOpenGL32, "glFramebufferTextureLayer"); }
		if(!obj->methodp_glFramebufferTextureLayer) { args.This()->Set(v8::String::NewSymbol("glFramebufferTextureLayer"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTextureLayerARB) { obj->methodp_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)wglGetProcAddress("glFramebufferTextureLayerARB"); }
		if(!obj->methodp_glFramebufferTextureLayerARB) { obj->methodp_glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)GetProcAddress(modOpenGL32, "glFramebufferTextureLayerARB"); }
		if(!obj->methodp_glFramebufferTextureLayerARB) { args.This()->Set(v8::String::NewSymbol("glFramebufferTextureLayerARB"), v8::Undefined()); }
		if(!obj->methodp_glFramebufferTextureLayerEXT) { obj->methodp_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)wglGetProcAddress("glFramebufferTextureLayerEXT"); }
		if(!obj->methodp_glFramebufferTextureLayerEXT) { obj->methodp_glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)GetProcAddress(modOpenGL32, "glFramebufferTextureLayerEXT"); }
		if(!obj->methodp_glFramebufferTextureLayerEXT) { args.This()->Set(v8::String::NewSymbol("glFramebufferTextureLayerEXT"), v8::Undefined()); }
		if(!obj->methodp_glFreeObjectBufferATI) { obj->methodp_glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC)wglGetProcAddress("glFreeObjectBufferATI"); }
		if(!obj->methodp_glFreeObjectBufferATI) { obj->methodp_glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC)GetProcAddress(modOpenGL32, "glFreeObjectBufferATI"); }
		if(!obj->methodp_glFreeObjectBufferATI) { args.This()->Set(v8::String::NewSymbol("glFreeObjectBufferATI"), v8::Undefined()); }
		if(!obj->methodp_glFrontFace) { obj->methodp_glFrontFace = (PFNGLFRONTFACEPROC)wglGetProcAddress("glFrontFace"); }
		if(!obj->methodp_glFrontFace) { obj->methodp_glFrontFace = (PFNGLFRONTFACEPROC)GetProcAddress(modOpenGL32, "glFrontFace"); }
		if(!obj->methodp_glFrontFace) { args.This()->Set(v8::String::NewSymbol("glFrontFace"), v8::Undefined()); }
		if(!obj->methodp_glFrustum) { obj->methodp_glFrustum = (PFNGLFRUSTUMPROC)wglGetProcAddress("glFrustum"); }
		if(!obj->methodp_glFrustum) { obj->methodp_glFrustum = (PFNGLFRUSTUMPROC)GetProcAddress(modOpenGL32, "glFrustum"); }
		if(!obj->methodp_glFrustum) { args.This()->Set(v8::String::NewSymbol("glFrustum"), v8::Undefined()); }
		if(!obj->methodp_glFrustumf) { obj->methodp_glFrustumf = (PFNGLFRUSTUMFPROC)wglGetProcAddress("glFrustumf"); }
		if(!obj->methodp_glFrustumf) { obj->methodp_glFrustumf = (PFNGLFRUSTUMFPROC)GetProcAddress(modOpenGL32, "glFrustumf"); }
		if(!obj->methodp_glFrustumf) { args.This()->Set(v8::String::NewSymbol("glFrustumf"), v8::Undefined()); }
		if(!obj->methodp_glFrustumfOES) { obj->methodp_glFrustumfOES = (PFNGLFRUSTUMFOESPROC)wglGetProcAddress("glFrustumfOES"); }
		if(!obj->methodp_glFrustumfOES) { obj->methodp_glFrustumfOES = (PFNGLFRUSTUMFOESPROC)GetProcAddress(modOpenGL32, "glFrustumfOES"); }
		if(!obj->methodp_glFrustumfOES) { args.This()->Set(v8::String::NewSymbol("glFrustumfOES"), v8::Undefined()); }
		if(!obj->methodp_glFrustumx) { obj->methodp_glFrustumx = (PFNGLFRUSTUMXPROC)wglGetProcAddress("glFrustumx"); }
		if(!obj->methodp_glFrustumx) { obj->methodp_glFrustumx = (PFNGLFRUSTUMXPROC)GetProcAddress(modOpenGL32, "glFrustumx"); }
		if(!obj->methodp_glFrustumx) { args.This()->Set(v8::String::NewSymbol("glFrustumx"), v8::Undefined()); }
		if(!obj->methodp_glFrustumxOES) { obj->methodp_glFrustumxOES = (PFNGLFRUSTUMXOESPROC)wglGetProcAddress("glFrustumxOES"); }
		if(!obj->methodp_glFrustumxOES) { obj->methodp_glFrustumxOES = (PFNGLFRUSTUMXOESPROC)GetProcAddress(modOpenGL32, "glFrustumxOES"); }
		if(!obj->methodp_glFrustumxOES) { args.This()->Set(v8::String::NewSymbol("glFrustumxOES"), v8::Undefined()); }
		if(!obj->methodp_glGenAsyncMarkersSGIX) { obj->methodp_glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC)wglGetProcAddress("glGenAsyncMarkersSGIX"); }
		if(!obj->methodp_glGenAsyncMarkersSGIX) { obj->methodp_glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC)GetProcAddress(modOpenGL32, "glGenAsyncMarkersSGIX"); }
		if(!obj->methodp_glGenAsyncMarkersSGIX) { args.This()->Set(v8::String::NewSymbol("glGenAsyncMarkersSGIX"), v8::Undefined()); }
		if(!obj->methodp_glGenBuffers) { obj->methodp_glGenBuffers = (PFNGLGENBUFFERSPROC)wglGetProcAddress("glGenBuffers"); }
		if(!obj->methodp_glGenBuffers) { obj->methodp_glGenBuffers = (PFNGLGENBUFFERSPROC)GetProcAddress(modOpenGL32, "glGenBuffers"); }
		if(!obj->methodp_glGenBuffers) { args.This()->Set(v8::String::NewSymbol("glGenBuffers"), v8::Undefined()); }
		if(!obj->methodp_glGenBuffersARB) { obj->methodp_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)wglGetProcAddress("glGenBuffersARB"); }
		if(!obj->methodp_glGenBuffersARB) { obj->methodp_glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)GetProcAddress(modOpenGL32, "glGenBuffersARB"); }
		if(!obj->methodp_glGenBuffersARB) { args.This()->Set(v8::String::NewSymbol("glGenBuffersARB"), v8::Undefined()); }
		if(!obj->methodp_glGenFencesAPPLE) { obj->methodp_glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC)wglGetProcAddress("glGenFencesAPPLE"); }
		if(!obj->methodp_glGenFencesAPPLE) { obj->methodp_glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC)GetProcAddress(modOpenGL32, "glGenFencesAPPLE"); }
		if(!obj->methodp_glGenFencesAPPLE) { args.This()->Set(v8::String::NewSymbol("glGenFencesAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glGenFencesNV) { obj->methodp_glGenFencesNV = (PFNGLGENFENCESNVPROC)wglGetProcAddress("glGenFencesNV"); }
		if(!obj->methodp_glGenFencesNV) { obj->methodp_glGenFencesNV = (PFNGLGENFENCESNVPROC)GetProcAddress(modOpenGL32, "glGenFencesNV"); }
		if(!obj->methodp_glGenFencesNV) { args.This()->Set(v8::String::NewSymbol("glGenFencesNV"), v8::Undefined()); }
		if(!obj->methodp_glGenFragmentShadersATI) { obj->methodp_glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC)wglGetProcAddress("glGenFragmentShadersATI"); }
		if(!obj->methodp_glGenFragmentShadersATI) { obj->methodp_glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC)GetProcAddress(modOpenGL32, "glGenFragmentShadersATI"); }
		if(!obj->methodp_glGenFragmentShadersATI) { args.This()->Set(v8::String::NewSymbol("glGenFragmentShadersATI"), v8::Undefined()); }
		if(!obj->methodp_glGenFramebuffers) { obj->methodp_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)wglGetProcAddress("glGenFramebuffers"); }
		if(!obj->methodp_glGenFramebuffers) { obj->methodp_glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)GetProcAddress(modOpenGL32, "glGenFramebuffers"); }
		if(!obj->methodp_glGenFramebuffers) { args.This()->Set(v8::String::NewSymbol("glGenFramebuffers"), v8::Undefined()); }
		if(!obj->methodp_glGenFramebuffersEXT) { obj->methodp_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)wglGetProcAddress("glGenFramebuffersEXT"); }
		if(!obj->methodp_glGenFramebuffersEXT) { obj->methodp_glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)GetProcAddress(modOpenGL32, "glGenFramebuffersEXT"); }
		if(!obj->methodp_glGenFramebuffersEXT) { args.This()->Set(v8::String::NewSymbol("glGenFramebuffersEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenFramebuffersOES) { obj->methodp_glGenFramebuffersOES = (PFNGLGENFRAMEBUFFERSOESPROC)wglGetProcAddress("glGenFramebuffersOES"); }
		if(!obj->methodp_glGenFramebuffersOES) { obj->methodp_glGenFramebuffersOES = (PFNGLGENFRAMEBUFFERSOESPROC)GetProcAddress(modOpenGL32, "glGenFramebuffersOES"); }
		if(!obj->methodp_glGenFramebuffersOES) { args.This()->Set(v8::String::NewSymbol("glGenFramebuffersOES"), v8::Undefined()); }
		if(!obj->methodp_glGenLists) { obj->methodp_glGenLists = (PFNGLGENLISTSPROC)wglGetProcAddress("glGenLists"); }
		if(!obj->methodp_glGenLists) { obj->methodp_glGenLists = (PFNGLGENLISTSPROC)GetProcAddress(modOpenGL32, "glGenLists"); }
		if(!obj->methodp_glGenLists) { args.This()->Set(v8::String::NewSymbol("glGenLists"), v8::Undefined()); }
		if(!obj->methodp_glGenNamesAMD) { obj->methodp_glGenNamesAMD = (PFNGLGENNAMESAMDPROC)wglGetProcAddress("glGenNamesAMD"); }
		if(!obj->methodp_glGenNamesAMD) { obj->methodp_glGenNamesAMD = (PFNGLGENNAMESAMDPROC)GetProcAddress(modOpenGL32, "glGenNamesAMD"); }
		if(!obj->methodp_glGenNamesAMD) { args.This()->Set(v8::String::NewSymbol("glGenNamesAMD"), v8::Undefined()); }
		if(!obj->methodp_glGenOcclusionQueriesNV) { obj->methodp_glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC)wglGetProcAddress("glGenOcclusionQueriesNV"); }
		if(!obj->methodp_glGenOcclusionQueriesNV) { obj->methodp_glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC)GetProcAddress(modOpenGL32, "glGenOcclusionQueriesNV"); }
		if(!obj->methodp_glGenOcclusionQueriesNV) { args.This()->Set(v8::String::NewSymbol("glGenOcclusionQueriesNV"), v8::Undefined()); }
		if(!obj->methodp_glGenPathsNV) { obj->methodp_glGenPathsNV = (PFNGLGENPATHSNVPROC)wglGetProcAddress("glGenPathsNV"); }
		if(!obj->methodp_glGenPathsNV) { obj->methodp_glGenPathsNV = (PFNGLGENPATHSNVPROC)GetProcAddress(modOpenGL32, "glGenPathsNV"); }
		if(!obj->methodp_glGenPathsNV) { args.This()->Set(v8::String::NewSymbol("glGenPathsNV"), v8::Undefined()); }
		if(!obj->methodp_glGenPerfMonitorsAMD) { obj->methodp_glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC)wglGetProcAddress("glGenPerfMonitorsAMD"); }
		if(!obj->methodp_glGenPerfMonitorsAMD) { obj->methodp_glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC)GetProcAddress(modOpenGL32, "glGenPerfMonitorsAMD"); }
		if(!obj->methodp_glGenPerfMonitorsAMD) { args.This()->Set(v8::String::NewSymbol("glGenPerfMonitorsAMD"), v8::Undefined()); }
		if(!obj->methodp_glGenProgramPipelines) { obj->methodp_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)wglGetProcAddress("glGenProgramPipelines"); }
		if(!obj->methodp_glGenProgramPipelines) { obj->methodp_glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)GetProcAddress(modOpenGL32, "glGenProgramPipelines"); }
		if(!obj->methodp_glGenProgramPipelines) { args.This()->Set(v8::String::NewSymbol("glGenProgramPipelines"), v8::Undefined()); }
		if(!obj->methodp_glGenProgramPipelinesEXT) { obj->methodp_glGenProgramPipelinesEXT = (PFNGLGENPROGRAMPIPELINESEXTPROC)wglGetProcAddress("glGenProgramPipelinesEXT"); }
		if(!obj->methodp_glGenProgramPipelinesEXT) { obj->methodp_glGenProgramPipelinesEXT = (PFNGLGENPROGRAMPIPELINESEXTPROC)GetProcAddress(modOpenGL32, "glGenProgramPipelinesEXT"); }
		if(!obj->methodp_glGenProgramPipelinesEXT) { args.This()->Set(v8::String::NewSymbol("glGenProgramPipelinesEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenProgramsARB) { obj->methodp_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)wglGetProcAddress("glGenProgramsARB"); }
		if(!obj->methodp_glGenProgramsARB) { obj->methodp_glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)GetProcAddress(modOpenGL32, "glGenProgramsARB"); }
		if(!obj->methodp_glGenProgramsARB) { args.This()->Set(v8::String::NewSymbol("glGenProgramsARB"), v8::Undefined()); }
		if(!obj->methodp_glGenProgramsNV) { obj->methodp_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)wglGetProcAddress("glGenProgramsNV"); }
		if(!obj->methodp_glGenProgramsNV) { obj->methodp_glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)GetProcAddress(modOpenGL32, "glGenProgramsNV"); }
		if(!obj->methodp_glGenProgramsNV) { args.This()->Set(v8::String::NewSymbol("glGenProgramsNV"), v8::Undefined()); }
		if(!obj->methodp_glGenQueries) { obj->methodp_glGenQueries = (PFNGLGENQUERIESPROC)wglGetProcAddress("glGenQueries"); }
		if(!obj->methodp_glGenQueries) { obj->methodp_glGenQueries = (PFNGLGENQUERIESPROC)GetProcAddress(modOpenGL32, "glGenQueries"); }
		if(!obj->methodp_glGenQueries) { args.This()->Set(v8::String::NewSymbol("glGenQueries"), v8::Undefined()); }
		if(!obj->methodp_glGenQueriesARB) { obj->methodp_glGenQueriesARB = (PFNGLGENQUERIESARBPROC)wglGetProcAddress("glGenQueriesARB"); }
		if(!obj->methodp_glGenQueriesARB) { obj->methodp_glGenQueriesARB = (PFNGLGENQUERIESARBPROC)GetProcAddress(modOpenGL32, "glGenQueriesARB"); }
		if(!obj->methodp_glGenQueriesARB) { args.This()->Set(v8::String::NewSymbol("glGenQueriesARB"), v8::Undefined()); }
		if(!obj->methodp_glGenQueriesEXT) { obj->methodp_glGenQueriesEXT = (PFNGLGENQUERIESEXTPROC)wglGetProcAddress("glGenQueriesEXT"); }
		if(!obj->methodp_glGenQueriesEXT) { obj->methodp_glGenQueriesEXT = (PFNGLGENQUERIESEXTPROC)GetProcAddress(modOpenGL32, "glGenQueriesEXT"); }
		if(!obj->methodp_glGenQueriesEXT) { args.This()->Set(v8::String::NewSymbol("glGenQueriesEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenRenderbuffers) { obj->methodp_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)wglGetProcAddress("glGenRenderbuffers"); }
		if(!obj->methodp_glGenRenderbuffers) { obj->methodp_glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)GetProcAddress(modOpenGL32, "glGenRenderbuffers"); }
		if(!obj->methodp_glGenRenderbuffers) { args.This()->Set(v8::String::NewSymbol("glGenRenderbuffers"), v8::Undefined()); }
		if(!obj->methodp_glGenRenderbuffersEXT) { obj->methodp_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)wglGetProcAddress("glGenRenderbuffersEXT"); }
		if(!obj->methodp_glGenRenderbuffersEXT) { obj->methodp_glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)GetProcAddress(modOpenGL32, "glGenRenderbuffersEXT"); }
		if(!obj->methodp_glGenRenderbuffersEXT) { args.This()->Set(v8::String::NewSymbol("glGenRenderbuffersEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenRenderbuffersOES) { obj->methodp_glGenRenderbuffersOES = (PFNGLGENRENDERBUFFERSOESPROC)wglGetProcAddress("glGenRenderbuffersOES"); }
		if(!obj->methodp_glGenRenderbuffersOES) { obj->methodp_glGenRenderbuffersOES = (PFNGLGENRENDERBUFFERSOESPROC)GetProcAddress(modOpenGL32, "glGenRenderbuffersOES"); }
		if(!obj->methodp_glGenRenderbuffersOES) { args.This()->Set(v8::String::NewSymbol("glGenRenderbuffersOES"), v8::Undefined()); }
		if(!obj->methodp_glGenSamplers) { obj->methodp_glGenSamplers = (PFNGLGENSAMPLERSPROC)wglGetProcAddress("glGenSamplers"); }
		if(!obj->methodp_glGenSamplers) { obj->methodp_glGenSamplers = (PFNGLGENSAMPLERSPROC)GetProcAddress(modOpenGL32, "glGenSamplers"); }
		if(!obj->methodp_glGenSamplers) { args.This()->Set(v8::String::NewSymbol("glGenSamplers"), v8::Undefined()); }
		if(!obj->methodp_glGenSymbolsEXT) { obj->methodp_glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC)wglGetProcAddress("glGenSymbolsEXT"); }
		if(!obj->methodp_glGenSymbolsEXT) { obj->methodp_glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC)GetProcAddress(modOpenGL32, "glGenSymbolsEXT"); }
		if(!obj->methodp_glGenSymbolsEXT) { args.This()->Set(v8::String::NewSymbol("glGenSymbolsEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenTextures) { obj->methodp_glGenTextures = (PFNGLGENTEXTURESPROC)wglGetProcAddress("glGenTextures"); }
		if(!obj->methodp_glGenTextures) { obj->methodp_glGenTextures = (PFNGLGENTEXTURESPROC)GetProcAddress(modOpenGL32, "glGenTextures"); }
		if(!obj->methodp_glGenTextures) { args.This()->Set(v8::String::NewSymbol("glGenTextures"), v8::Undefined()); }
		if(!obj->methodp_glGenTexturesEXT) { obj->methodp_glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)wglGetProcAddress("glGenTexturesEXT"); }
		if(!obj->methodp_glGenTexturesEXT) { obj->methodp_glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)GetProcAddress(modOpenGL32, "glGenTexturesEXT"); }
		if(!obj->methodp_glGenTexturesEXT) { args.This()->Set(v8::String::NewSymbol("glGenTexturesEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenTransformFeedbacks) { obj->methodp_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)wglGetProcAddress("glGenTransformFeedbacks"); }
		if(!obj->methodp_glGenTransformFeedbacks) { obj->methodp_glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)GetProcAddress(modOpenGL32, "glGenTransformFeedbacks"); }
		if(!obj->methodp_glGenTransformFeedbacks) { args.This()->Set(v8::String::NewSymbol("glGenTransformFeedbacks"), v8::Undefined()); }
		if(!obj->methodp_glGenTransformFeedbacksNV) { obj->methodp_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC)wglGetProcAddress("glGenTransformFeedbacksNV"); }
		if(!obj->methodp_glGenTransformFeedbacksNV) { obj->methodp_glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC)GetProcAddress(modOpenGL32, "glGenTransformFeedbacksNV"); }
		if(!obj->methodp_glGenTransformFeedbacksNV) { args.This()->Set(v8::String::NewSymbol("glGenTransformFeedbacksNV"), v8::Undefined()); }
		if(!obj->methodp_glGenVertexArrays) { obj->methodp_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)wglGetProcAddress("glGenVertexArrays"); }
		if(!obj->methodp_glGenVertexArrays) { obj->methodp_glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)GetProcAddress(modOpenGL32, "glGenVertexArrays"); }
		if(!obj->methodp_glGenVertexArrays) { args.This()->Set(v8::String::NewSymbol("glGenVertexArrays"), v8::Undefined()); }
		if(!obj->methodp_glGenVertexArraysAPPLE) { obj->methodp_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)wglGetProcAddress("glGenVertexArraysAPPLE"); }
		if(!obj->methodp_glGenVertexArraysAPPLE) { obj->methodp_glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)GetProcAddress(modOpenGL32, "glGenVertexArraysAPPLE"); }
		if(!obj->methodp_glGenVertexArraysAPPLE) { args.This()->Set(v8::String::NewSymbol("glGenVertexArraysAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glGenVertexArraysOES) { obj->methodp_glGenVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC)wglGetProcAddress("glGenVertexArraysOES"); }
		if(!obj->methodp_glGenVertexArraysOES) { obj->methodp_glGenVertexArraysOES = (PFNGLGENVERTEXARRAYSOESPROC)GetProcAddress(modOpenGL32, "glGenVertexArraysOES"); }
		if(!obj->methodp_glGenVertexArraysOES) { args.This()->Set(v8::String::NewSymbol("glGenVertexArraysOES"), v8::Undefined()); }
		if(!obj->methodp_glGenVertexShadersEXT) { obj->methodp_glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC)wglGetProcAddress("glGenVertexShadersEXT"); }
		if(!obj->methodp_glGenVertexShadersEXT) { obj->methodp_glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC)GetProcAddress(modOpenGL32, "glGenVertexShadersEXT"); }
		if(!obj->methodp_glGenVertexShadersEXT) { args.This()->Set(v8::String::NewSymbol("glGenVertexShadersEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenerateMipmap) { obj->methodp_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)wglGetProcAddress("glGenerateMipmap"); }
		if(!obj->methodp_glGenerateMipmap) { obj->methodp_glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)GetProcAddress(modOpenGL32, "glGenerateMipmap"); }
		if(!obj->methodp_glGenerateMipmap) { args.This()->Set(v8::String::NewSymbol("glGenerateMipmap"), v8::Undefined()); }
		if(!obj->methodp_glGenerateMipmapEXT) { obj->methodp_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)wglGetProcAddress("glGenerateMipmapEXT"); }
		if(!obj->methodp_glGenerateMipmapEXT) { obj->methodp_glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)GetProcAddress(modOpenGL32, "glGenerateMipmapEXT"); }
		if(!obj->methodp_glGenerateMipmapEXT) { args.This()->Set(v8::String::NewSymbol("glGenerateMipmapEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenerateMipmapOES) { obj->methodp_glGenerateMipmapOES = (PFNGLGENERATEMIPMAPOESPROC)wglGetProcAddress("glGenerateMipmapOES"); }
		if(!obj->methodp_glGenerateMipmapOES) { obj->methodp_glGenerateMipmapOES = (PFNGLGENERATEMIPMAPOESPROC)GetProcAddress(modOpenGL32, "glGenerateMipmapOES"); }
		if(!obj->methodp_glGenerateMipmapOES) { args.This()->Set(v8::String::NewSymbol("glGenerateMipmapOES"), v8::Undefined()); }
		if(!obj->methodp_glGenerateMultiTexMipmapEXT) { obj->methodp_glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC)wglGetProcAddress("glGenerateMultiTexMipmapEXT"); }
		if(!obj->methodp_glGenerateMultiTexMipmapEXT) { obj->methodp_glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC)GetProcAddress(modOpenGL32, "glGenerateMultiTexMipmapEXT"); }
		if(!obj->methodp_glGenerateMultiTexMipmapEXT) { args.This()->Set(v8::String::NewSymbol("glGenerateMultiTexMipmapEXT"), v8::Undefined()); }
		if(!obj->methodp_glGenerateTextureMipmapEXT) { obj->methodp_glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC)wglGetProcAddress("glGenerateTextureMipmapEXT"); }
		if(!obj->methodp_glGenerateTextureMipmapEXT) { obj->methodp_glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC)GetProcAddress(modOpenGL32, "glGenerateTextureMipmapEXT"); }
		if(!obj->methodp_glGenerateTextureMipmapEXT) { args.This()->Set(v8::String::NewSymbol("glGenerateTextureMipmapEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveAtomicCounterBufferiv) { obj->methodp_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)wglGetProcAddress("glGetActiveAtomicCounterBufferiv"); }
		if(!obj->methodp_glGetActiveAtomicCounterBufferiv) { obj->methodp_glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)GetProcAddress(modOpenGL32, "glGetActiveAtomicCounterBufferiv"); }
		if(!obj->methodp_glGetActiveAtomicCounterBufferiv) { args.This()->Set(v8::String::NewSymbol("glGetActiveAtomicCounterBufferiv"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveAttrib) { obj->methodp_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)wglGetProcAddress("glGetActiveAttrib"); }
		if(!obj->methodp_glGetActiveAttrib) { obj->methodp_glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)GetProcAddress(modOpenGL32, "glGetActiveAttrib"); }
		if(!obj->methodp_glGetActiveAttrib) { args.This()->Set(v8::String::NewSymbol("glGetActiveAttrib"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveAttribARB) { obj->methodp_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)wglGetProcAddress("glGetActiveAttribARB"); }
		if(!obj->methodp_glGetActiveAttribARB) { obj->methodp_glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)GetProcAddress(modOpenGL32, "glGetActiveAttribARB"); }
		if(!obj->methodp_glGetActiveAttribARB) { args.This()->Set(v8::String::NewSymbol("glGetActiveAttribARB"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveSubroutineName) { obj->methodp_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)wglGetProcAddress("glGetActiveSubroutineName"); }
		if(!obj->methodp_glGetActiveSubroutineName) { obj->methodp_glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)GetProcAddress(modOpenGL32, "glGetActiveSubroutineName"); }
		if(!obj->methodp_glGetActiveSubroutineName) { args.This()->Set(v8::String::NewSymbol("glGetActiveSubroutineName"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveSubroutineUniformName) { obj->methodp_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)wglGetProcAddress("glGetActiveSubroutineUniformName"); }
		if(!obj->methodp_glGetActiveSubroutineUniformName) { obj->methodp_glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)GetProcAddress(modOpenGL32, "glGetActiveSubroutineUniformName"); }
		if(!obj->methodp_glGetActiveSubroutineUniformName) { args.This()->Set(v8::String::NewSymbol("glGetActiveSubroutineUniformName"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveSubroutineUniformiv) { obj->methodp_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)wglGetProcAddress("glGetActiveSubroutineUniformiv"); }
		if(!obj->methodp_glGetActiveSubroutineUniformiv) { obj->methodp_glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)GetProcAddress(modOpenGL32, "glGetActiveSubroutineUniformiv"); }
		if(!obj->methodp_glGetActiveSubroutineUniformiv) { args.This()->Set(v8::String::NewSymbol("glGetActiveSubroutineUniformiv"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveUniform) { obj->methodp_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)wglGetProcAddress("glGetActiveUniform"); }
		if(!obj->methodp_glGetActiveUniform) { obj->methodp_glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)GetProcAddress(modOpenGL32, "glGetActiveUniform"); }
		if(!obj->methodp_glGetActiveUniform) { args.This()->Set(v8::String::NewSymbol("glGetActiveUniform"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveUniformARB) { obj->methodp_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)wglGetProcAddress("glGetActiveUniformARB"); }
		if(!obj->methodp_glGetActiveUniformARB) { obj->methodp_glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)GetProcAddress(modOpenGL32, "glGetActiveUniformARB"); }
		if(!obj->methodp_glGetActiveUniformARB) { args.This()->Set(v8::String::NewSymbol("glGetActiveUniformARB"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveUniformBlockName) { obj->methodp_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)wglGetProcAddress("glGetActiveUniformBlockName"); }
		if(!obj->methodp_glGetActiveUniformBlockName) { obj->methodp_glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)GetProcAddress(modOpenGL32, "glGetActiveUniformBlockName"); }
		if(!obj->methodp_glGetActiveUniformBlockName) { args.This()->Set(v8::String::NewSymbol("glGetActiveUniformBlockName"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveUniformBlockiv) { obj->methodp_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)wglGetProcAddress("glGetActiveUniformBlockiv"); }
		if(!obj->methodp_glGetActiveUniformBlockiv) { obj->methodp_glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)GetProcAddress(modOpenGL32, "glGetActiveUniformBlockiv"); }
		if(!obj->methodp_glGetActiveUniformBlockiv) { args.This()->Set(v8::String::NewSymbol("glGetActiveUniformBlockiv"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveUniformName) { obj->methodp_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)wglGetProcAddress("glGetActiveUniformName"); }
		if(!obj->methodp_glGetActiveUniformName) { obj->methodp_glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)GetProcAddress(modOpenGL32, "glGetActiveUniformName"); }
		if(!obj->methodp_glGetActiveUniformName) { args.This()->Set(v8::String::NewSymbol("glGetActiveUniformName"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveUniformsiv) { obj->methodp_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)wglGetProcAddress("glGetActiveUniformsiv"); }
		if(!obj->methodp_glGetActiveUniformsiv) { obj->methodp_glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)GetProcAddress(modOpenGL32, "glGetActiveUniformsiv"); }
		if(!obj->methodp_glGetActiveUniformsiv) { args.This()->Set(v8::String::NewSymbol("glGetActiveUniformsiv"), v8::Undefined()); }
		if(!obj->methodp_glGetActiveVaryingNV) { obj->methodp_glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC)wglGetProcAddress("glGetActiveVaryingNV"); }
		if(!obj->methodp_glGetActiveVaryingNV) { obj->methodp_glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC)GetProcAddress(modOpenGL32, "glGetActiveVaryingNV"); }
		if(!obj->methodp_glGetActiveVaryingNV) { args.This()->Set(v8::String::NewSymbol("glGetActiveVaryingNV"), v8::Undefined()); }
		if(!obj->methodp_glGetArrayObjectfvATI) { obj->methodp_glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC)wglGetProcAddress("glGetArrayObjectfvATI"); }
		if(!obj->methodp_glGetArrayObjectfvATI) { obj->methodp_glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC)GetProcAddress(modOpenGL32, "glGetArrayObjectfvATI"); }
		if(!obj->methodp_glGetArrayObjectfvATI) { args.This()->Set(v8::String::NewSymbol("glGetArrayObjectfvATI"), v8::Undefined()); }
		if(!obj->methodp_glGetArrayObjectivATI) { obj->methodp_glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC)wglGetProcAddress("glGetArrayObjectivATI"); }
		if(!obj->methodp_glGetArrayObjectivATI) { obj->methodp_glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC)GetProcAddress(modOpenGL32, "glGetArrayObjectivATI"); }
		if(!obj->methodp_glGetArrayObjectivATI) { args.This()->Set(v8::String::NewSymbol("glGetArrayObjectivATI"), v8::Undefined()); }
		if(!obj->methodp_glGetAttachedObjectsARB) { obj->methodp_glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC)wglGetProcAddress("glGetAttachedObjectsARB"); }
		if(!obj->methodp_glGetAttachedObjectsARB) { obj->methodp_glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC)GetProcAddress(modOpenGL32, "glGetAttachedObjectsARB"); }
		if(!obj->methodp_glGetAttachedObjectsARB) { args.This()->Set(v8::String::NewSymbol("glGetAttachedObjectsARB"), v8::Undefined()); }
		if(!obj->methodp_glGetAttachedShaders) { obj->methodp_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)wglGetProcAddress("glGetAttachedShaders"); }
		if(!obj->methodp_glGetAttachedShaders) { obj->methodp_glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)GetProcAddress(modOpenGL32, "glGetAttachedShaders"); }
		if(!obj->methodp_glGetAttachedShaders) { args.This()->Set(v8::String::NewSymbol("glGetAttachedShaders"), v8::Undefined()); }
		if(!obj->methodp_glGetAttribLocation) { obj->methodp_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)wglGetProcAddress("glGetAttribLocation"); }
		if(!obj->methodp_glGetAttribLocation) { obj->methodp_glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)GetProcAddress(modOpenGL32, "glGetAttribLocation"); }
		if(!obj->methodp_glGetAttribLocation) { args.This()->Set(v8::String::NewSymbol("glGetAttribLocation"), v8::Undefined()); }
		if(!obj->methodp_glGetAttribLocationARB) { obj->methodp_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)wglGetProcAddress("glGetAttribLocationARB"); }
		if(!obj->methodp_glGetAttribLocationARB) { obj->methodp_glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)GetProcAddress(modOpenGL32, "glGetAttribLocationARB"); }
		if(!obj->methodp_glGetAttribLocationARB) { args.This()->Set(v8::String::NewSymbol("glGetAttribLocationARB"), v8::Undefined()); }
		if(!obj->methodp_glGetBooleanIndexedvEXT) { obj->methodp_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)wglGetProcAddress("glGetBooleanIndexedvEXT"); }
		if(!obj->methodp_glGetBooleanIndexedvEXT) { obj->methodp_glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)GetProcAddress(modOpenGL32, "glGetBooleanIndexedvEXT"); }
		if(!obj->methodp_glGetBooleanIndexedvEXT) { args.This()->Set(v8::String::NewSymbol("glGetBooleanIndexedvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetBooleani_v) { obj->methodp_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)wglGetProcAddress("glGetBooleani_v"); }
		if(!obj->methodp_glGetBooleani_v) { obj->methodp_glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)GetProcAddress(modOpenGL32, "glGetBooleani_v"); }
		if(!obj->methodp_glGetBooleani_v) { args.This()->Set(v8::String::NewSymbol("glGetBooleani_v"), v8::Undefined()); }
		if(!obj->methodp_glGetBooleanv) { obj->methodp_glGetBooleanv = (PFNGLGETBOOLEANVPROC)wglGetProcAddress("glGetBooleanv"); }
		if(!obj->methodp_glGetBooleanv) { obj->methodp_glGetBooleanv = (PFNGLGETBOOLEANVPROC)GetProcAddress(modOpenGL32, "glGetBooleanv"); }
		if(!obj->methodp_glGetBooleanv) { args.This()->Set(v8::String::NewSymbol("glGetBooleanv"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferParameteri64v) { obj->methodp_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)wglGetProcAddress("glGetBufferParameteri64v"); }
		if(!obj->methodp_glGetBufferParameteri64v) { obj->methodp_glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)GetProcAddress(modOpenGL32, "glGetBufferParameteri64v"); }
		if(!obj->methodp_glGetBufferParameteri64v) { args.This()->Set(v8::String::NewSymbol("glGetBufferParameteri64v"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferParameteriv) { obj->methodp_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)wglGetProcAddress("glGetBufferParameteriv"); }
		if(!obj->methodp_glGetBufferParameteriv) { obj->methodp_glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetBufferParameteriv"); }
		if(!obj->methodp_glGetBufferParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetBufferParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferParameterivARB) { obj->methodp_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)wglGetProcAddress("glGetBufferParameterivARB"); }
		if(!obj->methodp_glGetBufferParameterivARB) { obj->methodp_glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)GetProcAddress(modOpenGL32, "glGetBufferParameterivARB"); }
		if(!obj->methodp_glGetBufferParameterivARB) { args.This()->Set(v8::String::NewSymbol("glGetBufferParameterivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferParameterui64vNV) { obj->methodp_glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC)wglGetProcAddress("glGetBufferParameterui64vNV"); }
		if(!obj->methodp_glGetBufferParameterui64vNV) { obj->methodp_glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC)GetProcAddress(modOpenGL32, "glGetBufferParameterui64vNV"); }
		if(!obj->methodp_glGetBufferParameterui64vNV) { args.This()->Set(v8::String::NewSymbol("glGetBufferParameterui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferPointerv) { obj->methodp_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)wglGetProcAddress("glGetBufferPointerv"); }
		if(!obj->methodp_glGetBufferPointerv) { obj->methodp_glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)GetProcAddress(modOpenGL32, "glGetBufferPointerv"); }
		if(!obj->methodp_glGetBufferPointerv) { args.This()->Set(v8::String::NewSymbol("glGetBufferPointerv"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferPointervARB) { obj->methodp_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)wglGetProcAddress("glGetBufferPointervARB"); }
		if(!obj->methodp_glGetBufferPointervARB) { obj->methodp_glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)GetProcAddress(modOpenGL32, "glGetBufferPointervARB"); }
		if(!obj->methodp_glGetBufferPointervARB) { args.This()->Set(v8::String::NewSymbol("glGetBufferPointervARB"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferPointervOES) { obj->methodp_glGetBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC)wglGetProcAddress("glGetBufferPointervOES"); }
		if(!obj->methodp_glGetBufferPointervOES) { obj->methodp_glGetBufferPointervOES = (PFNGLGETBUFFERPOINTERVOESPROC)GetProcAddress(modOpenGL32, "glGetBufferPointervOES"); }
		if(!obj->methodp_glGetBufferPointervOES) { args.This()->Set(v8::String::NewSymbol("glGetBufferPointervOES"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferSubData) { obj->methodp_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)wglGetProcAddress("glGetBufferSubData"); }
		if(!obj->methodp_glGetBufferSubData) { obj->methodp_glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)GetProcAddress(modOpenGL32, "glGetBufferSubData"); }
		if(!obj->methodp_glGetBufferSubData) { args.This()->Set(v8::String::NewSymbol("glGetBufferSubData"), v8::Undefined()); }
		if(!obj->methodp_glGetBufferSubDataARB) { obj->methodp_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)wglGetProcAddress("glGetBufferSubDataARB"); }
		if(!obj->methodp_glGetBufferSubDataARB) { obj->methodp_glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)GetProcAddress(modOpenGL32, "glGetBufferSubDataARB"); }
		if(!obj->methodp_glGetBufferSubDataARB) { args.This()->Set(v8::String::NewSymbol("glGetBufferSubDataARB"), v8::Undefined()); }
		if(!obj->methodp_glGetClipPlane) { obj->methodp_glGetClipPlane = (PFNGLGETCLIPPLANEPROC)wglGetProcAddress("glGetClipPlane"); }
		if(!obj->methodp_glGetClipPlane) { obj->methodp_glGetClipPlane = (PFNGLGETCLIPPLANEPROC)GetProcAddress(modOpenGL32, "glGetClipPlane"); }
		if(!obj->methodp_glGetClipPlane) { args.This()->Set(v8::String::NewSymbol("glGetClipPlane"), v8::Undefined()); }
		if(!obj->methodp_glGetClipPlanef) { obj->methodp_glGetClipPlanef = (PFNGLGETCLIPPLANEFPROC)wglGetProcAddress("glGetClipPlanef"); }
		if(!obj->methodp_glGetClipPlanef) { obj->methodp_glGetClipPlanef = (PFNGLGETCLIPPLANEFPROC)GetProcAddress(modOpenGL32, "glGetClipPlanef"); }
		if(!obj->methodp_glGetClipPlanef) { args.This()->Set(v8::String::NewSymbol("glGetClipPlanef"), v8::Undefined()); }
		if(!obj->methodp_glGetClipPlanefOES) { obj->methodp_glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC)wglGetProcAddress("glGetClipPlanefOES"); }
		if(!obj->methodp_glGetClipPlanefOES) { obj->methodp_glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC)GetProcAddress(modOpenGL32, "glGetClipPlanefOES"); }
		if(!obj->methodp_glGetClipPlanefOES) { args.This()->Set(v8::String::NewSymbol("glGetClipPlanefOES"), v8::Undefined()); }
		if(!obj->methodp_glGetClipPlanex) { obj->methodp_glGetClipPlanex = (PFNGLGETCLIPPLANEXPROC)wglGetProcAddress("glGetClipPlanex"); }
		if(!obj->methodp_glGetClipPlanex) { obj->methodp_glGetClipPlanex = (PFNGLGETCLIPPLANEXPROC)GetProcAddress(modOpenGL32, "glGetClipPlanex"); }
		if(!obj->methodp_glGetClipPlanex) { args.This()->Set(v8::String::NewSymbol("glGetClipPlanex"), v8::Undefined()); }
		if(!obj->methodp_glGetClipPlanexOES) { obj->methodp_glGetClipPlanexOES = (PFNGLGETCLIPPLANEXOESPROC)wglGetProcAddress("glGetClipPlanexOES"); }
		if(!obj->methodp_glGetClipPlanexOES) { obj->methodp_glGetClipPlanexOES = (PFNGLGETCLIPPLANEXOESPROC)GetProcAddress(modOpenGL32, "glGetClipPlanexOES"); }
		if(!obj->methodp_glGetClipPlanexOES) { args.This()->Set(v8::String::NewSymbol("glGetClipPlanexOES"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTable) { obj->methodp_glGetColorTable = (PFNGLGETCOLORTABLEPROC)wglGetProcAddress("glGetColorTable"); }
		if(!obj->methodp_glGetColorTable) { obj->methodp_glGetColorTable = (PFNGLGETCOLORTABLEPROC)GetProcAddress(modOpenGL32, "glGetColorTable"); }
		if(!obj->methodp_glGetColorTable) { args.This()->Set(v8::String::NewSymbol("glGetColorTable"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTableEXT) { obj->methodp_glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)wglGetProcAddress("glGetColorTableEXT"); }
		if(!obj->methodp_glGetColorTableEXT) { obj->methodp_glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)GetProcAddress(modOpenGL32, "glGetColorTableEXT"); }
		if(!obj->methodp_glGetColorTableEXT) { args.This()->Set(v8::String::NewSymbol("glGetColorTableEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTableParameterfv) { obj->methodp_glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)wglGetProcAddress("glGetColorTableParameterfv"); }
		if(!obj->methodp_glGetColorTableParameterfv) { obj->methodp_glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glGetColorTableParameterfv"); }
		if(!obj->methodp_glGetColorTableParameterfv) { args.This()->Set(v8::String::NewSymbol("glGetColorTableParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTableParameterfvEXT) { obj->methodp_glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)wglGetProcAddress("glGetColorTableParameterfvEXT"); }
		if(!obj->methodp_glGetColorTableParameterfvEXT) { obj->methodp_glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetColorTableParameterfvEXT"); }
		if(!obj->methodp_glGetColorTableParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetColorTableParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTableParameterfvSGI) { obj->methodp_glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)wglGetProcAddress("glGetColorTableParameterfvSGI"); }
		if(!obj->methodp_glGetColorTableParameterfvSGI) { obj->methodp_glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)GetProcAddress(modOpenGL32, "glGetColorTableParameterfvSGI"); }
		if(!obj->methodp_glGetColorTableParameterfvSGI) { args.This()->Set(v8::String::NewSymbol("glGetColorTableParameterfvSGI"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTableParameteriv) { obj->methodp_glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)wglGetProcAddress("glGetColorTableParameteriv"); }
		if(!obj->methodp_glGetColorTableParameteriv) { obj->methodp_glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetColorTableParameteriv"); }
		if(!obj->methodp_glGetColorTableParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetColorTableParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTableParameterivEXT) { obj->methodp_glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)wglGetProcAddress("glGetColorTableParameterivEXT"); }
		if(!obj->methodp_glGetColorTableParameterivEXT) { obj->methodp_glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetColorTableParameterivEXT"); }
		if(!obj->methodp_glGetColorTableParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetColorTableParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTableParameterivSGI) { obj->methodp_glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)wglGetProcAddress("glGetColorTableParameterivSGI"); }
		if(!obj->methodp_glGetColorTableParameterivSGI) { obj->methodp_glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)GetProcAddress(modOpenGL32, "glGetColorTableParameterivSGI"); }
		if(!obj->methodp_glGetColorTableParameterivSGI) { args.This()->Set(v8::String::NewSymbol("glGetColorTableParameterivSGI"), v8::Undefined()); }
		if(!obj->methodp_glGetColorTableSGI) { obj->methodp_glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC)wglGetProcAddress("glGetColorTableSGI"); }
		if(!obj->methodp_glGetColorTableSGI) { obj->methodp_glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC)GetProcAddress(modOpenGL32, "glGetColorTableSGI"); }
		if(!obj->methodp_glGetColorTableSGI) { args.This()->Set(v8::String::NewSymbol("glGetColorTableSGI"), v8::Undefined()); }
		if(!obj->methodp_glGetCombinerInputParameterfvNV) { obj->methodp_glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)wglGetProcAddress("glGetCombinerInputParameterfvNV"); }
		if(!obj->methodp_glGetCombinerInputParameterfvNV) { obj->methodp_glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetCombinerInputParameterfvNV"); }
		if(!obj->methodp_glGetCombinerInputParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetCombinerInputParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetCombinerInputParameterivNV) { obj->methodp_glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)wglGetProcAddress("glGetCombinerInputParameterivNV"); }
		if(!obj->methodp_glGetCombinerInputParameterivNV) { obj->methodp_glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glGetCombinerInputParameterivNV"); }
		if(!obj->methodp_glGetCombinerInputParameterivNV) { args.This()->Set(v8::String::NewSymbol("glGetCombinerInputParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetCombinerOutputParameterfvNV) { obj->methodp_glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)wglGetProcAddress("glGetCombinerOutputParameterfvNV"); }
		if(!obj->methodp_glGetCombinerOutputParameterfvNV) { obj->methodp_glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetCombinerOutputParameterfvNV"); }
		if(!obj->methodp_glGetCombinerOutputParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetCombinerOutputParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetCombinerOutputParameterivNV) { obj->methodp_glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)wglGetProcAddress("glGetCombinerOutputParameterivNV"); }
		if(!obj->methodp_glGetCombinerOutputParameterivNV) { obj->methodp_glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glGetCombinerOutputParameterivNV"); }
		if(!obj->methodp_glGetCombinerOutputParameterivNV) { args.This()->Set(v8::String::NewSymbol("glGetCombinerOutputParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetCombinerStageParameterfvNV) { obj->methodp_glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)wglGetProcAddress("glGetCombinerStageParameterfvNV"); }
		if(!obj->methodp_glGetCombinerStageParameterfvNV) { obj->methodp_glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetCombinerStageParameterfvNV"); }
		if(!obj->methodp_glGetCombinerStageParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetCombinerStageParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetCompressedMultiTexImageEXT) { obj->methodp_glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)wglGetProcAddress("glGetCompressedMultiTexImageEXT"); }
		if(!obj->methodp_glGetCompressedMultiTexImageEXT) { obj->methodp_glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)GetProcAddress(modOpenGL32, "glGetCompressedMultiTexImageEXT"); }
		if(!obj->methodp_glGetCompressedMultiTexImageEXT) { args.This()->Set(v8::String::NewSymbol("glGetCompressedMultiTexImageEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetCompressedTexImage) { obj->methodp_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)wglGetProcAddress("glGetCompressedTexImage"); }
		if(!obj->methodp_glGetCompressedTexImage) { obj->methodp_glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)GetProcAddress(modOpenGL32, "glGetCompressedTexImage"); }
		if(!obj->methodp_glGetCompressedTexImage) { args.This()->Set(v8::String::NewSymbol("glGetCompressedTexImage"), v8::Undefined()); }
		if(!obj->methodp_glGetCompressedTexImageARB) { obj->methodp_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)wglGetProcAddress("glGetCompressedTexImageARB"); }
		if(!obj->methodp_glGetCompressedTexImageARB) { obj->methodp_glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)GetProcAddress(modOpenGL32, "glGetCompressedTexImageARB"); }
		if(!obj->methodp_glGetCompressedTexImageARB) { args.This()->Set(v8::String::NewSymbol("glGetCompressedTexImageARB"), v8::Undefined()); }
		if(!obj->methodp_glGetCompressedTextureImageEXT) { obj->methodp_glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)wglGetProcAddress("glGetCompressedTextureImageEXT"); }
		if(!obj->methodp_glGetCompressedTextureImageEXT) { obj->methodp_glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)GetProcAddress(modOpenGL32, "glGetCompressedTextureImageEXT"); }
		if(!obj->methodp_glGetCompressedTextureImageEXT) { args.This()->Set(v8::String::NewSymbol("glGetCompressedTextureImageEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetConvolutionFilter) { obj->methodp_glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)wglGetProcAddress("glGetConvolutionFilter"); }
		if(!obj->methodp_glGetConvolutionFilter) { obj->methodp_glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)GetProcAddress(modOpenGL32, "glGetConvolutionFilter"); }
		if(!obj->methodp_glGetConvolutionFilter) { args.This()->Set(v8::String::NewSymbol("glGetConvolutionFilter"), v8::Undefined()); }
		if(!obj->methodp_glGetConvolutionFilterEXT) { obj->methodp_glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC)wglGetProcAddress("glGetConvolutionFilterEXT"); }
		if(!obj->methodp_glGetConvolutionFilterEXT) { obj->methodp_glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC)GetProcAddress(modOpenGL32, "glGetConvolutionFilterEXT"); }
		if(!obj->methodp_glGetConvolutionFilterEXT) { args.This()->Set(v8::String::NewSymbol("glGetConvolutionFilterEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetConvolutionParameterfv) { obj->methodp_glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)wglGetProcAddress("glGetConvolutionParameterfv"); }
		if(!obj->methodp_glGetConvolutionParameterfv) { obj->methodp_glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glGetConvolutionParameterfv"); }
		if(!obj->methodp_glGetConvolutionParameterfv) { args.This()->Set(v8::String::NewSymbol("glGetConvolutionParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glGetConvolutionParameterfvEXT) { obj->methodp_glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)wglGetProcAddress("glGetConvolutionParameterfvEXT"); }
		if(!obj->methodp_glGetConvolutionParameterfvEXT) { obj->methodp_glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetConvolutionParameterfvEXT"); }
		if(!obj->methodp_glGetConvolutionParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetConvolutionParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetConvolutionParameteriv) { obj->methodp_glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)wglGetProcAddress("glGetConvolutionParameteriv"); }
		if(!obj->methodp_glGetConvolutionParameteriv) { obj->methodp_glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetConvolutionParameteriv"); }
		if(!obj->methodp_glGetConvolutionParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetConvolutionParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetConvolutionParameterivEXT) { obj->methodp_glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)wglGetProcAddress("glGetConvolutionParameterivEXT"); }
		if(!obj->methodp_glGetConvolutionParameterivEXT) { obj->methodp_glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetConvolutionParameterivEXT"); }
		if(!obj->methodp_glGetConvolutionParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetConvolutionParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetConvolutionParameterxvOES) { obj->methodp_glGetConvolutionParameterxvOES = (PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)wglGetProcAddress("glGetConvolutionParameterxvOES"); }
		if(!obj->methodp_glGetConvolutionParameterxvOES) { obj->methodp_glGetConvolutionParameterxvOES = (PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)GetProcAddress(modOpenGL32, "glGetConvolutionParameterxvOES"); }
		if(!obj->methodp_glGetConvolutionParameterxvOES) { args.This()->Set(v8::String::NewSymbol("glGetConvolutionParameterxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetDebugMessageLog) { obj->methodp_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)wglGetProcAddress("glGetDebugMessageLog"); }
		if(!obj->methodp_glGetDebugMessageLog) { obj->methodp_glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)GetProcAddress(modOpenGL32, "glGetDebugMessageLog"); }
		if(!obj->methodp_glGetDebugMessageLog) { args.This()->Set(v8::String::NewSymbol("glGetDebugMessageLog"), v8::Undefined()); }
		if(!obj->methodp_glGetDebugMessageLogAMD) { obj->methodp_glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC)wglGetProcAddress("glGetDebugMessageLogAMD"); }
		if(!obj->methodp_glGetDebugMessageLogAMD) { obj->methodp_glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC)GetProcAddress(modOpenGL32, "glGetDebugMessageLogAMD"); }
		if(!obj->methodp_glGetDebugMessageLogAMD) { args.This()->Set(v8::String::NewSymbol("glGetDebugMessageLogAMD"), v8::Undefined()); }
		if(!obj->methodp_glGetDebugMessageLogARB) { obj->methodp_glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC)wglGetProcAddress("glGetDebugMessageLogARB"); }
		if(!obj->methodp_glGetDebugMessageLogARB) { obj->methodp_glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC)GetProcAddress(modOpenGL32, "glGetDebugMessageLogARB"); }
		if(!obj->methodp_glGetDebugMessageLogARB) { args.This()->Set(v8::String::NewSymbol("glGetDebugMessageLogARB"), v8::Undefined()); }
		if(!obj->methodp_glGetDebugMessageLogKHR) { obj->methodp_glGetDebugMessageLogKHR = (PFNGLGETDEBUGMESSAGELOGKHRPROC)wglGetProcAddress("glGetDebugMessageLogKHR"); }
		if(!obj->methodp_glGetDebugMessageLogKHR) { obj->methodp_glGetDebugMessageLogKHR = (PFNGLGETDEBUGMESSAGELOGKHRPROC)GetProcAddress(modOpenGL32, "glGetDebugMessageLogKHR"); }
		if(!obj->methodp_glGetDebugMessageLogKHR) { args.This()->Set(v8::String::NewSymbol("glGetDebugMessageLogKHR"), v8::Undefined()); }
		if(!obj->methodp_glGetDetailTexFuncSGIS) { obj->methodp_glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC)wglGetProcAddress("glGetDetailTexFuncSGIS"); }
		if(!obj->methodp_glGetDetailTexFuncSGIS) { obj->methodp_glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC)GetProcAddress(modOpenGL32, "glGetDetailTexFuncSGIS"); }
		if(!obj->methodp_glGetDetailTexFuncSGIS) { args.This()->Set(v8::String::NewSymbol("glGetDetailTexFuncSGIS"), v8::Undefined()); }
		if(!obj->methodp_glGetDoubleIndexedvEXT) { obj->methodp_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)wglGetProcAddress("glGetDoubleIndexedvEXT"); }
		if(!obj->methodp_glGetDoubleIndexedvEXT) { obj->methodp_glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)GetProcAddress(modOpenGL32, "glGetDoubleIndexedvEXT"); }
		if(!obj->methodp_glGetDoubleIndexedvEXT) { args.This()->Set(v8::String::NewSymbol("glGetDoubleIndexedvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetDoublei_v) { obj->methodp_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)wglGetProcAddress("glGetDoublei_v"); }
		if(!obj->methodp_glGetDoublei_v) { obj->methodp_glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)GetProcAddress(modOpenGL32, "glGetDoublei_v"); }
		if(!obj->methodp_glGetDoublei_v) { args.This()->Set(v8::String::NewSymbol("glGetDoublei_v"), v8::Undefined()); }
		if(!obj->methodp_glGetDoublei_vEXT) { obj->methodp_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)wglGetProcAddress("glGetDoublei_vEXT"); }
		if(!obj->methodp_glGetDoublei_vEXT) { obj->methodp_glGetDoublei_vEXT = (PFNGLGETDOUBLEI_VEXTPROC)GetProcAddress(modOpenGL32, "glGetDoublei_vEXT"); }
		if(!obj->methodp_glGetDoublei_vEXT) { args.This()->Set(v8::String::NewSymbol("glGetDoublei_vEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetDoublev) { obj->methodp_glGetDoublev = (PFNGLGETDOUBLEVPROC)wglGetProcAddress("glGetDoublev"); }
		if(!obj->methodp_glGetDoublev) { obj->methodp_glGetDoublev = (PFNGLGETDOUBLEVPROC)GetProcAddress(modOpenGL32, "glGetDoublev"); }
		if(!obj->methodp_glGetDoublev) { args.This()->Set(v8::String::NewSymbol("glGetDoublev"), v8::Undefined()); }
		if(!obj->methodp_glGetDriverControlStringQCOM) { obj->methodp_glGetDriverControlStringQCOM = (PFNGLGETDRIVERCONTROLSTRINGQCOMPROC)wglGetProcAddress("glGetDriverControlStringQCOM"); }
		if(!obj->methodp_glGetDriverControlStringQCOM) { obj->methodp_glGetDriverControlStringQCOM = (PFNGLGETDRIVERCONTROLSTRINGQCOMPROC)GetProcAddress(modOpenGL32, "glGetDriverControlStringQCOM"); }
		if(!obj->methodp_glGetDriverControlStringQCOM) { args.This()->Set(v8::String::NewSymbol("glGetDriverControlStringQCOM"), v8::Undefined()); }
		if(!obj->methodp_glGetDriverControlsQCOM) { obj->methodp_glGetDriverControlsQCOM = (PFNGLGETDRIVERCONTROLSQCOMPROC)wglGetProcAddress("glGetDriverControlsQCOM"); }
		if(!obj->methodp_glGetDriverControlsQCOM) { obj->methodp_glGetDriverControlsQCOM = (PFNGLGETDRIVERCONTROLSQCOMPROC)GetProcAddress(modOpenGL32, "glGetDriverControlsQCOM"); }
		if(!obj->methodp_glGetDriverControlsQCOM) { args.This()->Set(v8::String::NewSymbol("glGetDriverControlsQCOM"), v8::Undefined()); }
		if(!obj->methodp_glGetError) { obj->methodp_glGetError = (PFNGLGETERRORPROC)wglGetProcAddress("glGetError"); }
		if(!obj->methodp_glGetError) { obj->methodp_glGetError = (PFNGLGETERRORPROC)GetProcAddress(modOpenGL32, "glGetError"); }
		if(!obj->methodp_glGetError) { args.This()->Set(v8::String::NewSymbol("glGetError"), v8::Undefined()); }
		if(!obj->methodp_glGetFenceivNV) { obj->methodp_glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)wglGetProcAddress("glGetFenceivNV"); }
		if(!obj->methodp_glGetFenceivNV) { obj->methodp_glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)GetProcAddress(modOpenGL32, "glGetFenceivNV"); }
		if(!obj->methodp_glGetFenceivNV) { args.This()->Set(v8::String::NewSymbol("glGetFenceivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetFinalCombinerInputParameterfvNV) { obj->methodp_glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)wglGetProcAddress("glGetFinalCombinerInputParameterfvNV"); }
		if(!obj->methodp_glGetFinalCombinerInputParameterfvNV) { obj->methodp_glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetFinalCombinerInputParameterfvNV"); }
		if(!obj->methodp_glGetFinalCombinerInputParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetFinalCombinerInputParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetFinalCombinerInputParameterivNV) { obj->methodp_glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)wglGetProcAddress("glGetFinalCombinerInputParameterivNV"); }
		if(!obj->methodp_glGetFinalCombinerInputParameterivNV) { obj->methodp_glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glGetFinalCombinerInputParameterivNV"); }
		if(!obj->methodp_glGetFinalCombinerInputParameterivNV) { args.This()->Set(v8::String::NewSymbol("glGetFinalCombinerInputParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetFirstPerfQueryIdINTEL) { obj->methodp_glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC)wglGetProcAddress("glGetFirstPerfQueryIdINTEL"); }
		if(!obj->methodp_glGetFirstPerfQueryIdINTEL) { obj->methodp_glGetFirstPerfQueryIdINTEL = (PFNGLGETFIRSTPERFQUERYIDINTELPROC)GetProcAddress(modOpenGL32, "glGetFirstPerfQueryIdINTEL"); }
		if(!obj->methodp_glGetFirstPerfQueryIdINTEL) { args.This()->Set(v8::String::NewSymbol("glGetFirstPerfQueryIdINTEL"), v8::Undefined()); }
		if(!obj->methodp_glGetFixedv) { obj->methodp_glGetFixedv = (PFNGLGETFIXEDVPROC)wglGetProcAddress("glGetFixedv"); }
		if(!obj->methodp_glGetFixedv) { obj->methodp_glGetFixedv = (PFNGLGETFIXEDVPROC)GetProcAddress(modOpenGL32, "glGetFixedv"); }
		if(!obj->methodp_glGetFixedv) { args.This()->Set(v8::String::NewSymbol("glGetFixedv"), v8::Undefined()); }
		if(!obj->methodp_glGetFixedvOES) { obj->methodp_glGetFixedvOES = (PFNGLGETFIXEDVOESPROC)wglGetProcAddress("glGetFixedvOES"); }
		if(!obj->methodp_glGetFixedvOES) { obj->methodp_glGetFixedvOES = (PFNGLGETFIXEDVOESPROC)GetProcAddress(modOpenGL32, "glGetFixedvOES"); }
		if(!obj->methodp_glGetFixedvOES) { args.This()->Set(v8::String::NewSymbol("glGetFixedvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetFloatIndexedvEXT) { obj->methodp_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)wglGetProcAddress("glGetFloatIndexedvEXT"); }
		if(!obj->methodp_glGetFloatIndexedvEXT) { obj->methodp_glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)GetProcAddress(modOpenGL32, "glGetFloatIndexedvEXT"); }
		if(!obj->methodp_glGetFloatIndexedvEXT) { args.This()->Set(v8::String::NewSymbol("glGetFloatIndexedvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetFloati_v) { obj->methodp_glGetFloati_v = (PFNGLGETFLOATI_VPROC)wglGetProcAddress("glGetFloati_v"); }
		if(!obj->methodp_glGetFloati_v) { obj->methodp_glGetFloati_v = (PFNGLGETFLOATI_VPROC)GetProcAddress(modOpenGL32, "glGetFloati_v"); }
		if(!obj->methodp_glGetFloati_v) { args.This()->Set(v8::String::NewSymbol("glGetFloati_v"), v8::Undefined()); }
		if(!obj->methodp_glGetFloati_vEXT) { obj->methodp_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)wglGetProcAddress("glGetFloati_vEXT"); }
		if(!obj->methodp_glGetFloati_vEXT) { obj->methodp_glGetFloati_vEXT = (PFNGLGETFLOATI_VEXTPROC)GetProcAddress(modOpenGL32, "glGetFloati_vEXT"); }
		if(!obj->methodp_glGetFloati_vEXT) { args.This()->Set(v8::String::NewSymbol("glGetFloati_vEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetFloatv) { obj->methodp_glGetFloatv = (PFNGLGETFLOATVPROC)wglGetProcAddress("glGetFloatv"); }
		if(!obj->methodp_glGetFloatv) { obj->methodp_glGetFloatv = (PFNGLGETFLOATVPROC)GetProcAddress(modOpenGL32, "glGetFloatv"); }
		if(!obj->methodp_glGetFloatv) { args.This()->Set(v8::String::NewSymbol("glGetFloatv"), v8::Undefined()); }
		if(!obj->methodp_glGetFogFuncSGIS) { obj->methodp_glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC)wglGetProcAddress("glGetFogFuncSGIS"); }
		if(!obj->methodp_glGetFogFuncSGIS) { obj->methodp_glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC)GetProcAddress(modOpenGL32, "glGetFogFuncSGIS"); }
		if(!obj->methodp_glGetFogFuncSGIS) { args.This()->Set(v8::String::NewSymbol("glGetFogFuncSGIS"), v8::Undefined()); }
		if(!obj->methodp_glGetFragDataIndex) { obj->methodp_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)wglGetProcAddress("glGetFragDataIndex"); }
		if(!obj->methodp_glGetFragDataIndex) { obj->methodp_glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)GetProcAddress(modOpenGL32, "glGetFragDataIndex"); }
		if(!obj->methodp_glGetFragDataIndex) { args.This()->Set(v8::String::NewSymbol("glGetFragDataIndex"), v8::Undefined()); }
		if(!obj->methodp_glGetFragDataLocation) { obj->methodp_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)wglGetProcAddress("glGetFragDataLocation"); }
		if(!obj->methodp_glGetFragDataLocation) { obj->methodp_glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)GetProcAddress(modOpenGL32, "glGetFragDataLocation"); }
		if(!obj->methodp_glGetFragDataLocation) { args.This()->Set(v8::String::NewSymbol("glGetFragDataLocation"), v8::Undefined()); }
		if(!obj->methodp_glGetFragDataLocationEXT) { obj->methodp_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)wglGetProcAddress("glGetFragDataLocationEXT"); }
		if(!obj->methodp_glGetFragDataLocationEXT) { obj->methodp_glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)GetProcAddress(modOpenGL32, "glGetFragDataLocationEXT"); }
		if(!obj->methodp_glGetFragDataLocationEXT) { args.This()->Set(v8::String::NewSymbol("glGetFragDataLocationEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetFragmentLightfvSGIX) { obj->methodp_glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)wglGetProcAddress("glGetFragmentLightfvSGIX"); }
		if(!obj->methodp_glGetFragmentLightfvSGIX) { obj->methodp_glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)GetProcAddress(modOpenGL32, "glGetFragmentLightfvSGIX"); }
		if(!obj->methodp_glGetFragmentLightfvSGIX) { args.This()->Set(v8::String::NewSymbol("glGetFragmentLightfvSGIX"), v8::Undefined()); }
		if(!obj->methodp_glGetFragmentLightivSGIX) { obj->methodp_glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)wglGetProcAddress("glGetFragmentLightivSGIX"); }
		if(!obj->methodp_glGetFragmentLightivSGIX) { obj->methodp_glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)GetProcAddress(modOpenGL32, "glGetFragmentLightivSGIX"); }
		if(!obj->methodp_glGetFragmentLightivSGIX) { args.This()->Set(v8::String::NewSymbol("glGetFragmentLightivSGIX"), v8::Undefined()); }
		if(!obj->methodp_glGetFragmentMaterialfvSGIX) { obj->methodp_glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)wglGetProcAddress("glGetFragmentMaterialfvSGIX"); }
		if(!obj->methodp_glGetFragmentMaterialfvSGIX) { obj->methodp_glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)GetProcAddress(modOpenGL32, "glGetFragmentMaterialfvSGIX"); }
		if(!obj->methodp_glGetFragmentMaterialfvSGIX) { args.This()->Set(v8::String::NewSymbol("glGetFragmentMaterialfvSGIX"), v8::Undefined()); }
		if(!obj->methodp_glGetFragmentMaterialivSGIX) { obj->methodp_glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)wglGetProcAddress("glGetFragmentMaterialivSGIX"); }
		if(!obj->methodp_glGetFragmentMaterialivSGIX) { obj->methodp_glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)GetProcAddress(modOpenGL32, "glGetFragmentMaterialivSGIX"); }
		if(!obj->methodp_glGetFragmentMaterialivSGIX) { args.This()->Set(v8::String::NewSymbol("glGetFragmentMaterialivSGIX"), v8::Undefined()); }
		if(!obj->methodp_glGetFramebufferAttachmentParameteriv) { obj->methodp_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)wglGetProcAddress("glGetFramebufferAttachmentParameteriv"); }
		if(!obj->methodp_glGetFramebufferAttachmentParameteriv) { obj->methodp_glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetFramebufferAttachmentParameteriv"); }
		if(!obj->methodp_glGetFramebufferAttachmentParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetFramebufferAttachmentParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetFramebufferAttachmentParameterivEXT) { obj->methodp_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)wglGetProcAddress("glGetFramebufferAttachmentParameterivEXT"); }
		if(!obj->methodp_glGetFramebufferAttachmentParameterivEXT) { obj->methodp_glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetFramebufferAttachmentParameterivEXT"); }
		if(!obj->methodp_glGetFramebufferAttachmentParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetFramebufferAttachmentParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetFramebufferAttachmentParameterivOES) { obj->methodp_glGetFramebufferAttachmentParameterivOES = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC)wglGetProcAddress("glGetFramebufferAttachmentParameterivOES"); }
		if(!obj->methodp_glGetFramebufferAttachmentParameterivOES) { obj->methodp_glGetFramebufferAttachmentParameterivOES = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC)GetProcAddress(modOpenGL32, "glGetFramebufferAttachmentParameterivOES"); }
		if(!obj->methodp_glGetFramebufferAttachmentParameterivOES) { args.This()->Set(v8::String::NewSymbol("glGetFramebufferAttachmentParameterivOES"), v8::Undefined()); }
		if(!obj->methodp_glGetFramebufferParameteriv) { obj->methodp_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)wglGetProcAddress("glGetFramebufferParameteriv"); }
		if(!obj->methodp_glGetFramebufferParameteriv) { obj->methodp_glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetFramebufferParameteriv"); }
		if(!obj->methodp_glGetFramebufferParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetFramebufferParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetFramebufferParameterivEXT) { obj->methodp_glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)wglGetProcAddress("glGetFramebufferParameterivEXT"); }
		if(!obj->methodp_glGetFramebufferParameterivEXT) { obj->methodp_glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetFramebufferParameterivEXT"); }
		if(!obj->methodp_glGetFramebufferParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetFramebufferParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetGraphicsResetStatusARB) { obj->methodp_glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC)wglGetProcAddress("glGetGraphicsResetStatusARB"); }
		if(!obj->methodp_glGetGraphicsResetStatusARB) { obj->methodp_glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC)GetProcAddress(modOpenGL32, "glGetGraphicsResetStatusARB"); }
		if(!obj->methodp_glGetGraphicsResetStatusARB) { args.This()->Set(v8::String::NewSymbol("glGetGraphicsResetStatusARB"), v8::Undefined()); }
		if(!obj->methodp_glGetGraphicsResetStatusEXT) { obj->methodp_glGetGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC)wglGetProcAddress("glGetGraphicsResetStatusEXT"); }
		if(!obj->methodp_glGetGraphicsResetStatusEXT) { obj->methodp_glGetGraphicsResetStatusEXT = (PFNGLGETGRAPHICSRESETSTATUSEXTPROC)GetProcAddress(modOpenGL32, "glGetGraphicsResetStatusEXT"); }
		if(!obj->methodp_glGetGraphicsResetStatusEXT) { args.This()->Set(v8::String::NewSymbol("glGetGraphicsResetStatusEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetHandleARB) { obj->methodp_glGetHandleARB = (PFNGLGETHANDLEARBPROC)wglGetProcAddress("glGetHandleARB"); }
		if(!obj->methodp_glGetHandleARB) { obj->methodp_glGetHandleARB = (PFNGLGETHANDLEARBPROC)GetProcAddress(modOpenGL32, "glGetHandleARB"); }
		if(!obj->methodp_glGetHandleARB) { args.This()->Set(v8::String::NewSymbol("glGetHandleARB"), v8::Undefined()); }
		if(!obj->methodp_glGetHistogram) { obj->methodp_glGetHistogram = (PFNGLGETHISTOGRAMPROC)wglGetProcAddress("glGetHistogram"); }
		if(!obj->methodp_glGetHistogram) { obj->methodp_glGetHistogram = (PFNGLGETHISTOGRAMPROC)GetProcAddress(modOpenGL32, "glGetHistogram"); }
		if(!obj->methodp_glGetHistogram) { args.This()->Set(v8::String::NewSymbol("glGetHistogram"), v8::Undefined()); }
		if(!obj->methodp_glGetHistogramEXT) { obj->methodp_glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC)wglGetProcAddress("glGetHistogramEXT"); }
		if(!obj->methodp_glGetHistogramEXT) { obj->methodp_glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC)GetProcAddress(modOpenGL32, "glGetHistogramEXT"); }
		if(!obj->methodp_glGetHistogramEXT) { args.This()->Set(v8::String::NewSymbol("glGetHistogramEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetHistogramParameterfv) { obj->methodp_glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)wglGetProcAddress("glGetHistogramParameterfv"); }
		if(!obj->methodp_glGetHistogramParameterfv) { obj->methodp_glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glGetHistogramParameterfv"); }
		if(!obj->methodp_glGetHistogramParameterfv) { args.This()->Set(v8::String::NewSymbol("glGetHistogramParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glGetHistogramParameterfvEXT) { obj->methodp_glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)wglGetProcAddress("glGetHistogramParameterfvEXT"); }
		if(!obj->methodp_glGetHistogramParameterfvEXT) { obj->methodp_glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetHistogramParameterfvEXT"); }
		if(!obj->methodp_glGetHistogramParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetHistogramParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetHistogramParameteriv) { obj->methodp_glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)wglGetProcAddress("glGetHistogramParameteriv"); }
		if(!obj->methodp_glGetHistogramParameteriv) { obj->methodp_glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetHistogramParameteriv"); }
		if(!obj->methodp_glGetHistogramParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetHistogramParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetHistogramParameterivEXT) { obj->methodp_glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)wglGetProcAddress("glGetHistogramParameterivEXT"); }
		if(!obj->methodp_glGetHistogramParameterivEXT) { obj->methodp_glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetHistogramParameterivEXT"); }
		if(!obj->methodp_glGetHistogramParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetHistogramParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetHistogramParameterxvOES) { obj->methodp_glGetHistogramParameterxvOES = (PFNGLGETHISTOGRAMPARAMETERXVOESPROC)wglGetProcAddress("glGetHistogramParameterxvOES"); }
		if(!obj->methodp_glGetHistogramParameterxvOES) { obj->methodp_glGetHistogramParameterxvOES = (PFNGLGETHISTOGRAMPARAMETERXVOESPROC)GetProcAddress(modOpenGL32, "glGetHistogramParameterxvOES"); }
		if(!obj->methodp_glGetHistogramParameterxvOES) { args.This()->Set(v8::String::NewSymbol("glGetHistogramParameterxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetImageHandleARB) { obj->methodp_glGetImageHandleARB = (PFNGLGETIMAGEHANDLEARBPROC)wglGetProcAddress("glGetImageHandleARB"); }
		if(!obj->methodp_glGetImageHandleARB) { obj->methodp_glGetImageHandleARB = (PFNGLGETIMAGEHANDLEARBPROC)GetProcAddress(modOpenGL32, "glGetImageHandleARB"); }
		if(!obj->methodp_glGetImageHandleARB) { args.This()->Set(v8::String::NewSymbol("glGetImageHandleARB"), v8::Undefined()); }
		if(!obj->methodp_glGetImageHandleNV) { obj->methodp_glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC)wglGetProcAddress("glGetImageHandleNV"); }
		if(!obj->methodp_glGetImageHandleNV) { obj->methodp_glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC)GetProcAddress(modOpenGL32, "glGetImageHandleNV"); }
		if(!obj->methodp_glGetImageHandleNV) { args.This()->Set(v8::String::NewSymbol("glGetImageHandleNV"), v8::Undefined()); }
		if(!obj->methodp_glGetImageTransformParameterfvHP) { obj->methodp_glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)wglGetProcAddress("glGetImageTransformParameterfvHP"); }
		if(!obj->methodp_glGetImageTransformParameterfvHP) { obj->methodp_glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)GetProcAddress(modOpenGL32, "glGetImageTransformParameterfvHP"); }
		if(!obj->methodp_glGetImageTransformParameterfvHP) { args.This()->Set(v8::String::NewSymbol("glGetImageTransformParameterfvHP"), v8::Undefined()); }
		if(!obj->methodp_glGetImageTransformParameterivHP) { obj->methodp_glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)wglGetProcAddress("glGetImageTransformParameterivHP"); }
		if(!obj->methodp_glGetImageTransformParameterivHP) { obj->methodp_glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)GetProcAddress(modOpenGL32, "glGetImageTransformParameterivHP"); }
		if(!obj->methodp_glGetImageTransformParameterivHP) { args.This()->Set(v8::String::NewSymbol("glGetImageTransformParameterivHP"), v8::Undefined()); }
		if(!obj->methodp_glGetInfoLogARB) { obj->methodp_glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC)wglGetProcAddress("glGetInfoLogARB"); }
		if(!obj->methodp_glGetInfoLogARB) { obj->methodp_glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC)GetProcAddress(modOpenGL32, "glGetInfoLogARB"); }
		if(!obj->methodp_glGetInfoLogARB) { args.This()->Set(v8::String::NewSymbol("glGetInfoLogARB"), v8::Undefined()); }
		if(!obj->methodp_glGetInstrumentsSGIX) { obj->methodp_glGetInstrumentsSGIX = (PFNGLGETINSTRUMENTSSGIXPROC)wglGetProcAddress("glGetInstrumentsSGIX"); }
		if(!obj->methodp_glGetInstrumentsSGIX) { obj->methodp_glGetInstrumentsSGIX = (PFNGLGETINSTRUMENTSSGIXPROC)GetProcAddress(modOpenGL32, "glGetInstrumentsSGIX"); }
		if(!obj->methodp_glGetInstrumentsSGIX) { args.This()->Set(v8::String::NewSymbol("glGetInstrumentsSGIX"), v8::Undefined()); }
		if(!obj->methodp_glGetInteger64i_v) { obj->methodp_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)wglGetProcAddress("glGetInteger64i_v"); }
		if(!obj->methodp_glGetInteger64i_v) { obj->methodp_glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)GetProcAddress(modOpenGL32, "glGetInteger64i_v"); }
		if(!obj->methodp_glGetInteger64i_v) { args.This()->Set(v8::String::NewSymbol("glGetInteger64i_v"), v8::Undefined()); }
		if(!obj->methodp_glGetInteger64v) { obj->methodp_glGetInteger64v = (PFNGLGETINTEGER64VPROC)wglGetProcAddress("glGetInteger64v"); }
		if(!obj->methodp_glGetInteger64v) { obj->methodp_glGetInteger64v = (PFNGLGETINTEGER64VPROC)GetProcAddress(modOpenGL32, "glGetInteger64v"); }
		if(!obj->methodp_glGetInteger64v) { args.This()->Set(v8::String::NewSymbol("glGetInteger64v"), v8::Undefined()); }
		if(!obj->methodp_glGetInteger64vAPPLE) { obj->methodp_glGetInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC)wglGetProcAddress("glGetInteger64vAPPLE"); }
		if(!obj->methodp_glGetInteger64vAPPLE) { obj->methodp_glGetInteger64vAPPLE = (PFNGLGETINTEGER64VAPPLEPROC)GetProcAddress(modOpenGL32, "glGetInteger64vAPPLE"); }
		if(!obj->methodp_glGetInteger64vAPPLE) { args.This()->Set(v8::String::NewSymbol("glGetInteger64vAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glGetIntegerIndexedvEXT) { obj->methodp_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)wglGetProcAddress("glGetIntegerIndexedvEXT"); }
		if(!obj->methodp_glGetIntegerIndexedvEXT) { obj->methodp_glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)GetProcAddress(modOpenGL32, "glGetIntegerIndexedvEXT"); }
		if(!obj->methodp_glGetIntegerIndexedvEXT) { args.This()->Set(v8::String::NewSymbol("glGetIntegerIndexedvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetIntegeri_v) { obj->methodp_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)wglGetProcAddress("glGetIntegeri_v"); }
		if(!obj->methodp_glGetIntegeri_v) { obj->methodp_glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)GetProcAddress(modOpenGL32, "glGetIntegeri_v"); }
		if(!obj->methodp_glGetIntegeri_v) { args.This()->Set(v8::String::NewSymbol("glGetIntegeri_v"), v8::Undefined()); }
		if(!obj->methodp_glGetIntegeri_vEXT) { obj->methodp_glGetIntegeri_vEXT = (PFNGLGETINTEGERI_VEXTPROC)wglGetProcAddress("glGetIntegeri_vEXT"); }
		if(!obj->methodp_glGetIntegeri_vEXT) { obj->methodp_glGetIntegeri_vEXT = (PFNGLGETINTEGERI_VEXTPROC)GetProcAddress(modOpenGL32, "glGetIntegeri_vEXT"); }
		if(!obj->methodp_glGetIntegeri_vEXT) { args.This()->Set(v8::String::NewSymbol("glGetIntegeri_vEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetIntegerui64i_vNV) { obj->methodp_glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC)wglGetProcAddress("glGetIntegerui64i_vNV"); }
		if(!obj->methodp_glGetIntegerui64i_vNV) { obj->methodp_glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC)GetProcAddress(modOpenGL32, "glGetIntegerui64i_vNV"); }
		if(!obj->methodp_glGetIntegerui64i_vNV) { args.This()->Set(v8::String::NewSymbol("glGetIntegerui64i_vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetIntegerui64vNV) { obj->methodp_glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC)wglGetProcAddress("glGetIntegerui64vNV"); }
		if(!obj->methodp_glGetIntegerui64vNV) { obj->methodp_glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC)GetProcAddress(modOpenGL32, "glGetIntegerui64vNV"); }
		if(!obj->methodp_glGetIntegerui64vNV) { args.This()->Set(v8::String::NewSymbol("glGetIntegerui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetIntegerv) { obj->methodp_glGetIntegerv = (PFNGLGETINTEGERVPROC)wglGetProcAddress("glGetIntegerv"); }
		if(!obj->methodp_glGetIntegerv) { obj->methodp_glGetIntegerv = (PFNGLGETINTEGERVPROC)GetProcAddress(modOpenGL32, "glGetIntegerv"); }
		if(!obj->methodp_glGetIntegerv) { args.This()->Set(v8::String::NewSymbol("glGetIntegerv"), v8::Undefined()); }
		if(!obj->methodp_glGetInternalformati64v) { obj->methodp_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)wglGetProcAddress("glGetInternalformati64v"); }
		if(!obj->methodp_glGetInternalformati64v) { obj->methodp_glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)GetProcAddress(modOpenGL32, "glGetInternalformati64v"); }
		if(!obj->methodp_glGetInternalformati64v) { args.This()->Set(v8::String::NewSymbol("glGetInternalformati64v"), v8::Undefined()); }
		if(!obj->methodp_glGetInternalformativ) { obj->methodp_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)wglGetProcAddress("glGetInternalformativ"); }
		if(!obj->methodp_glGetInternalformativ) { obj->methodp_glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)GetProcAddress(modOpenGL32, "glGetInternalformativ"); }
		if(!obj->methodp_glGetInternalformativ) { args.This()->Set(v8::String::NewSymbol("glGetInternalformativ"), v8::Undefined()); }
		if(!obj->methodp_glGetInvariantBooleanvEXT) { obj->methodp_glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC)wglGetProcAddress("glGetInvariantBooleanvEXT"); }
		if(!obj->methodp_glGetInvariantBooleanvEXT) { obj->methodp_glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC)GetProcAddress(modOpenGL32, "glGetInvariantBooleanvEXT"); }
		if(!obj->methodp_glGetInvariantBooleanvEXT) { args.This()->Set(v8::String::NewSymbol("glGetInvariantBooleanvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetInvariantFloatvEXT) { obj->methodp_glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC)wglGetProcAddress("glGetInvariantFloatvEXT"); }
		if(!obj->methodp_glGetInvariantFloatvEXT) { obj->methodp_glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC)GetProcAddress(modOpenGL32, "glGetInvariantFloatvEXT"); }
		if(!obj->methodp_glGetInvariantFloatvEXT) { args.This()->Set(v8::String::NewSymbol("glGetInvariantFloatvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetInvariantIntegervEXT) { obj->methodp_glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC)wglGetProcAddress("glGetInvariantIntegervEXT"); }
		if(!obj->methodp_glGetInvariantIntegervEXT) { obj->methodp_glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC)GetProcAddress(modOpenGL32, "glGetInvariantIntegervEXT"); }
		if(!obj->methodp_glGetInvariantIntegervEXT) { args.This()->Set(v8::String::NewSymbol("glGetInvariantIntegervEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetLightfv) { obj->methodp_glGetLightfv = (PFNGLGETLIGHTFVPROC)wglGetProcAddress("glGetLightfv"); }
		if(!obj->methodp_glGetLightfv) { obj->methodp_glGetLightfv = (PFNGLGETLIGHTFVPROC)GetProcAddress(modOpenGL32, "glGetLightfv"); }
		if(!obj->methodp_glGetLightfv) { args.This()->Set(v8::String::NewSymbol("glGetLightfv"), v8::Undefined()); }
		if(!obj->methodp_glGetLightiv) { obj->methodp_glGetLightiv = (PFNGLGETLIGHTIVPROC)wglGetProcAddress("glGetLightiv"); }
		if(!obj->methodp_glGetLightiv) { obj->methodp_glGetLightiv = (PFNGLGETLIGHTIVPROC)GetProcAddress(modOpenGL32, "glGetLightiv"); }
		if(!obj->methodp_glGetLightiv) { args.This()->Set(v8::String::NewSymbol("glGetLightiv"), v8::Undefined()); }
		if(!obj->methodp_glGetLightxOES) { obj->methodp_glGetLightxOES = (PFNGLGETLIGHTXOESPROC)wglGetProcAddress("glGetLightxOES"); }
		if(!obj->methodp_glGetLightxOES) { obj->methodp_glGetLightxOES = (PFNGLGETLIGHTXOESPROC)GetProcAddress(modOpenGL32, "glGetLightxOES"); }
		if(!obj->methodp_glGetLightxOES) { args.This()->Set(v8::String::NewSymbol("glGetLightxOES"), v8::Undefined()); }
		if(!obj->methodp_glGetLightxv) { obj->methodp_glGetLightxv = (PFNGLGETLIGHTXVPROC)wglGetProcAddress("glGetLightxv"); }
		if(!obj->methodp_glGetLightxv) { obj->methodp_glGetLightxv = (PFNGLGETLIGHTXVPROC)GetProcAddress(modOpenGL32, "glGetLightxv"); }
		if(!obj->methodp_glGetLightxv) { args.This()->Set(v8::String::NewSymbol("glGetLightxv"), v8::Undefined()); }
		if(!obj->methodp_glGetLightxvOES) { obj->methodp_glGetLightxvOES = (PFNGLGETLIGHTXVOESPROC)wglGetProcAddress("glGetLightxvOES"); }
		if(!obj->methodp_glGetLightxvOES) { obj->methodp_glGetLightxvOES = (PFNGLGETLIGHTXVOESPROC)GetProcAddress(modOpenGL32, "glGetLightxvOES"); }
		if(!obj->methodp_glGetLightxvOES) { args.This()->Set(v8::String::NewSymbol("glGetLightxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetListParameterfvSGIX) { obj->methodp_glGetListParameterfvSGIX = (PFNGLGETLISTPARAMETERFVSGIXPROC)wglGetProcAddress("glGetListParameterfvSGIX"); }
		if(!obj->methodp_glGetListParameterfvSGIX) { obj->methodp_glGetListParameterfvSGIX = (PFNGLGETLISTPARAMETERFVSGIXPROC)GetProcAddress(modOpenGL32, "glGetListParameterfvSGIX"); }
		if(!obj->methodp_glGetListParameterfvSGIX) { args.This()->Set(v8::String::NewSymbol("glGetListParameterfvSGIX"), v8::Undefined()); }
		if(!obj->methodp_glGetListParameterivSGIX) { obj->methodp_glGetListParameterivSGIX = (PFNGLGETLISTPARAMETERIVSGIXPROC)wglGetProcAddress("glGetListParameterivSGIX"); }
		if(!obj->methodp_glGetListParameterivSGIX) { obj->methodp_glGetListParameterivSGIX = (PFNGLGETLISTPARAMETERIVSGIXPROC)GetProcAddress(modOpenGL32, "glGetListParameterivSGIX"); }
		if(!obj->methodp_glGetListParameterivSGIX) { args.This()->Set(v8::String::NewSymbol("glGetListParameterivSGIX"), v8::Undefined()); }
		if(!obj->methodp_glGetLocalConstantBooleanvEXT) { obj->methodp_glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)wglGetProcAddress("glGetLocalConstantBooleanvEXT"); }
		if(!obj->methodp_glGetLocalConstantBooleanvEXT) { obj->methodp_glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)GetProcAddress(modOpenGL32, "glGetLocalConstantBooleanvEXT"); }
		if(!obj->methodp_glGetLocalConstantBooleanvEXT) { args.This()->Set(v8::String::NewSymbol("glGetLocalConstantBooleanvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetLocalConstantFloatvEXT) { obj->methodp_glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)wglGetProcAddress("glGetLocalConstantFloatvEXT"); }
		if(!obj->methodp_glGetLocalConstantFloatvEXT) { obj->methodp_glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)GetProcAddress(modOpenGL32, "glGetLocalConstantFloatvEXT"); }
		if(!obj->methodp_glGetLocalConstantFloatvEXT) { args.This()->Set(v8::String::NewSymbol("glGetLocalConstantFloatvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetLocalConstantIntegervEXT) { obj->methodp_glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)wglGetProcAddress("glGetLocalConstantIntegervEXT"); }
		if(!obj->methodp_glGetLocalConstantIntegervEXT) { obj->methodp_glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)GetProcAddress(modOpenGL32, "glGetLocalConstantIntegervEXT"); }
		if(!obj->methodp_glGetLocalConstantIntegervEXT) { args.This()->Set(v8::String::NewSymbol("glGetLocalConstantIntegervEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMapAttribParameterfvNV) { obj->methodp_glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)wglGetProcAddress("glGetMapAttribParameterfvNV"); }
		if(!obj->methodp_glGetMapAttribParameterfvNV) { obj->methodp_glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetMapAttribParameterfvNV"); }
		if(!obj->methodp_glGetMapAttribParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetMapAttribParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetMapAttribParameterivNV) { obj->methodp_glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)wglGetProcAddress("glGetMapAttribParameterivNV"); }
		if(!obj->methodp_glGetMapAttribParameterivNV) { obj->methodp_glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glGetMapAttribParameterivNV"); }
		if(!obj->methodp_glGetMapAttribParameterivNV) { args.This()->Set(v8::String::NewSymbol("glGetMapAttribParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetMapControlPointsNV) { obj->methodp_glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)wglGetProcAddress("glGetMapControlPointsNV"); }
		if(!obj->methodp_glGetMapControlPointsNV) { obj->methodp_glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)GetProcAddress(modOpenGL32, "glGetMapControlPointsNV"); }
		if(!obj->methodp_glGetMapControlPointsNV) { args.This()->Set(v8::String::NewSymbol("glGetMapControlPointsNV"), v8::Undefined()); }
		if(!obj->methodp_glGetMapParameterfvNV) { obj->methodp_glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)wglGetProcAddress("glGetMapParameterfvNV"); }
		if(!obj->methodp_glGetMapParameterfvNV) { obj->methodp_glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetMapParameterfvNV"); }
		if(!obj->methodp_glGetMapParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetMapParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetMapParameterivNV) { obj->methodp_glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)wglGetProcAddress("glGetMapParameterivNV"); }
		if(!obj->methodp_glGetMapParameterivNV) { obj->methodp_glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glGetMapParameterivNV"); }
		if(!obj->methodp_glGetMapParameterivNV) { args.This()->Set(v8::String::NewSymbol("glGetMapParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetMapdv) { obj->methodp_glGetMapdv = (PFNGLGETMAPDVPROC)wglGetProcAddress("glGetMapdv"); }
		if(!obj->methodp_glGetMapdv) { obj->methodp_glGetMapdv = (PFNGLGETMAPDVPROC)GetProcAddress(modOpenGL32, "glGetMapdv"); }
		if(!obj->methodp_glGetMapdv) { args.This()->Set(v8::String::NewSymbol("glGetMapdv"), v8::Undefined()); }
		if(!obj->methodp_glGetMapfv) { obj->methodp_glGetMapfv = (PFNGLGETMAPFVPROC)wglGetProcAddress("glGetMapfv"); }
		if(!obj->methodp_glGetMapfv) { obj->methodp_glGetMapfv = (PFNGLGETMAPFVPROC)GetProcAddress(modOpenGL32, "glGetMapfv"); }
		if(!obj->methodp_glGetMapfv) { args.This()->Set(v8::String::NewSymbol("glGetMapfv"), v8::Undefined()); }
		if(!obj->methodp_glGetMapiv) { obj->methodp_glGetMapiv = (PFNGLGETMAPIVPROC)wglGetProcAddress("glGetMapiv"); }
		if(!obj->methodp_glGetMapiv) { obj->methodp_glGetMapiv = (PFNGLGETMAPIVPROC)GetProcAddress(modOpenGL32, "glGetMapiv"); }
		if(!obj->methodp_glGetMapiv) { args.This()->Set(v8::String::NewSymbol("glGetMapiv"), v8::Undefined()); }
		if(!obj->methodp_glGetMapxvOES) { obj->methodp_glGetMapxvOES = (PFNGLGETMAPXVOESPROC)wglGetProcAddress("glGetMapxvOES"); }
		if(!obj->methodp_glGetMapxvOES) { obj->methodp_glGetMapxvOES = (PFNGLGETMAPXVOESPROC)GetProcAddress(modOpenGL32, "glGetMapxvOES"); }
		if(!obj->methodp_glGetMapxvOES) { args.This()->Set(v8::String::NewSymbol("glGetMapxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetMaterialfv) { obj->methodp_glGetMaterialfv = (PFNGLGETMATERIALFVPROC)wglGetProcAddress("glGetMaterialfv"); }
		if(!obj->methodp_glGetMaterialfv) { obj->methodp_glGetMaterialfv = (PFNGLGETMATERIALFVPROC)GetProcAddress(modOpenGL32, "glGetMaterialfv"); }
		if(!obj->methodp_glGetMaterialfv) { args.This()->Set(v8::String::NewSymbol("glGetMaterialfv"), v8::Undefined()); }
		if(!obj->methodp_glGetMaterialiv) { obj->methodp_glGetMaterialiv = (PFNGLGETMATERIALIVPROC)wglGetProcAddress("glGetMaterialiv"); }
		if(!obj->methodp_glGetMaterialiv) { obj->methodp_glGetMaterialiv = (PFNGLGETMATERIALIVPROC)GetProcAddress(modOpenGL32, "glGetMaterialiv"); }
		if(!obj->methodp_glGetMaterialiv) { args.This()->Set(v8::String::NewSymbol("glGetMaterialiv"), v8::Undefined()); }
		if(!obj->methodp_glGetMaterialxOES) { obj->methodp_glGetMaterialxOES = (PFNGLGETMATERIALXOESPROC)wglGetProcAddress("glGetMaterialxOES"); }
		if(!obj->methodp_glGetMaterialxOES) { obj->methodp_glGetMaterialxOES = (PFNGLGETMATERIALXOESPROC)GetProcAddress(modOpenGL32, "glGetMaterialxOES"); }
		if(!obj->methodp_glGetMaterialxOES) { args.This()->Set(v8::String::NewSymbol("glGetMaterialxOES"), v8::Undefined()); }
		if(!obj->methodp_glGetMaterialxv) { obj->methodp_glGetMaterialxv = (PFNGLGETMATERIALXVPROC)wglGetProcAddress("glGetMaterialxv"); }
		if(!obj->methodp_glGetMaterialxv) { obj->methodp_glGetMaterialxv = (PFNGLGETMATERIALXVPROC)GetProcAddress(modOpenGL32, "glGetMaterialxv"); }
		if(!obj->methodp_glGetMaterialxv) { args.This()->Set(v8::String::NewSymbol("glGetMaterialxv"), v8::Undefined()); }
		if(!obj->methodp_glGetMaterialxvOES) { obj->methodp_glGetMaterialxvOES = (PFNGLGETMATERIALXVOESPROC)wglGetProcAddress("glGetMaterialxvOES"); }
		if(!obj->methodp_glGetMaterialxvOES) { obj->methodp_glGetMaterialxvOES = (PFNGLGETMATERIALXVOESPROC)GetProcAddress(modOpenGL32, "glGetMaterialxvOES"); }
		if(!obj->methodp_glGetMaterialxvOES) { args.This()->Set(v8::String::NewSymbol("glGetMaterialxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetMinmax) { obj->methodp_glGetMinmax = (PFNGLGETMINMAXPROC)wglGetProcAddress("glGetMinmax"); }
		if(!obj->methodp_glGetMinmax) { obj->methodp_glGetMinmax = (PFNGLGETMINMAXPROC)GetProcAddress(modOpenGL32, "glGetMinmax"); }
		if(!obj->methodp_glGetMinmax) { args.This()->Set(v8::String::NewSymbol("glGetMinmax"), v8::Undefined()); }
		if(!obj->methodp_glGetMinmaxEXT) { obj->methodp_glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC)wglGetProcAddress("glGetMinmaxEXT"); }
		if(!obj->methodp_glGetMinmaxEXT) { obj->methodp_glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC)GetProcAddress(modOpenGL32, "glGetMinmaxEXT"); }
		if(!obj->methodp_glGetMinmaxEXT) { args.This()->Set(v8::String::NewSymbol("glGetMinmaxEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMinmaxParameterfv) { obj->methodp_glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)wglGetProcAddress("glGetMinmaxParameterfv"); }
		if(!obj->methodp_glGetMinmaxParameterfv) { obj->methodp_glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glGetMinmaxParameterfv"); }
		if(!obj->methodp_glGetMinmaxParameterfv) { args.This()->Set(v8::String::NewSymbol("glGetMinmaxParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glGetMinmaxParameterfvEXT) { obj->methodp_glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC)wglGetProcAddress("glGetMinmaxParameterfvEXT"); }
		if(!obj->methodp_glGetMinmaxParameterfvEXT) { obj->methodp_glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetMinmaxParameterfvEXT"); }
		if(!obj->methodp_glGetMinmaxParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetMinmaxParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMinmaxParameteriv) { obj->methodp_glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)wglGetProcAddress("glGetMinmaxParameteriv"); }
		if(!obj->methodp_glGetMinmaxParameteriv) { obj->methodp_glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetMinmaxParameteriv"); }
		if(!obj->methodp_glGetMinmaxParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetMinmaxParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetMinmaxParameterivEXT) { obj->methodp_glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC)wglGetProcAddress("glGetMinmaxParameterivEXT"); }
		if(!obj->methodp_glGetMinmaxParameterivEXT) { obj->methodp_glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetMinmaxParameterivEXT"); }
		if(!obj->methodp_glGetMinmaxParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetMinmaxParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexEnvfvEXT) { obj->methodp_glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC)wglGetProcAddress("glGetMultiTexEnvfvEXT"); }
		if(!obj->methodp_glGetMultiTexEnvfvEXT) { obj->methodp_glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexEnvfvEXT"); }
		if(!obj->methodp_glGetMultiTexEnvfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexEnvfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexEnvivEXT) { obj->methodp_glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC)wglGetProcAddress("glGetMultiTexEnvivEXT"); }
		if(!obj->methodp_glGetMultiTexEnvivEXT) { obj->methodp_glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexEnvivEXT"); }
		if(!obj->methodp_glGetMultiTexEnvivEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexEnvivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexGendvEXT) { obj->methodp_glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC)wglGetProcAddress("glGetMultiTexGendvEXT"); }
		if(!obj->methodp_glGetMultiTexGendvEXT) { obj->methodp_glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexGendvEXT"); }
		if(!obj->methodp_glGetMultiTexGendvEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexGendvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexGenfvEXT) { obj->methodp_glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC)wglGetProcAddress("glGetMultiTexGenfvEXT"); }
		if(!obj->methodp_glGetMultiTexGenfvEXT) { obj->methodp_glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexGenfvEXT"); }
		if(!obj->methodp_glGetMultiTexGenfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexGenfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexGenivEXT) { obj->methodp_glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC)wglGetProcAddress("glGetMultiTexGenivEXT"); }
		if(!obj->methodp_glGetMultiTexGenivEXT) { obj->methodp_glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexGenivEXT"); }
		if(!obj->methodp_glGetMultiTexGenivEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexGenivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexImageEXT) { obj->methodp_glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC)wglGetProcAddress("glGetMultiTexImageEXT"); }
		if(!obj->methodp_glGetMultiTexImageEXT) { obj->methodp_glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexImageEXT"); }
		if(!obj->methodp_glGetMultiTexImageEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexImageEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexLevelParameterfvEXT) { obj->methodp_glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)wglGetProcAddress("glGetMultiTexLevelParameterfvEXT"); }
		if(!obj->methodp_glGetMultiTexLevelParameterfvEXT) { obj->methodp_glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexLevelParameterfvEXT"); }
		if(!obj->methodp_glGetMultiTexLevelParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexLevelParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexLevelParameterivEXT) { obj->methodp_glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)wglGetProcAddress("glGetMultiTexLevelParameterivEXT"); }
		if(!obj->methodp_glGetMultiTexLevelParameterivEXT) { obj->methodp_glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexLevelParameterivEXT"); }
		if(!obj->methodp_glGetMultiTexLevelParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexLevelParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexParameterIivEXT) { obj->methodp_glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC)wglGetProcAddress("glGetMultiTexParameterIivEXT"); }
		if(!obj->methodp_glGetMultiTexParameterIivEXT) { obj->methodp_glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexParameterIivEXT"); }
		if(!obj->methodp_glGetMultiTexParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexParameterIuivEXT) { obj->methodp_glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)wglGetProcAddress("glGetMultiTexParameterIuivEXT"); }
		if(!obj->methodp_glGetMultiTexParameterIuivEXT) { obj->methodp_glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexParameterIuivEXT"); }
		if(!obj->methodp_glGetMultiTexParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexParameterfvEXT) { obj->methodp_glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC)wglGetProcAddress("glGetMultiTexParameterfvEXT"); }
		if(!obj->methodp_glGetMultiTexParameterfvEXT) { obj->methodp_glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexParameterfvEXT"); }
		if(!obj->methodp_glGetMultiTexParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultiTexParameterivEXT) { obj->methodp_glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC)wglGetProcAddress("glGetMultiTexParameterivEXT"); }
		if(!obj->methodp_glGetMultiTexParameterivEXT) { obj->methodp_glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetMultiTexParameterivEXT"); }
		if(!obj->methodp_glGetMultiTexParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetMultiTexParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetMultisamplefv) { obj->methodp_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)wglGetProcAddress("glGetMultisamplefv"); }
		if(!obj->methodp_glGetMultisamplefv) { obj->methodp_glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)GetProcAddress(modOpenGL32, "glGetMultisamplefv"); }
		if(!obj->methodp_glGetMultisamplefv) { args.This()->Set(v8::String::NewSymbol("glGetMultisamplefv"), v8::Undefined()); }
		if(!obj->methodp_glGetMultisamplefvNV) { obj->methodp_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)wglGetProcAddress("glGetMultisamplefvNV"); }
		if(!obj->methodp_glGetMultisamplefvNV) { obj->methodp_glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)GetProcAddress(modOpenGL32, "glGetMultisamplefvNV"); }
		if(!obj->methodp_glGetMultisamplefvNV) { args.This()->Set(v8::String::NewSymbol("glGetMultisamplefvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedBufferParameterivEXT) { obj->methodp_glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)wglGetProcAddress("glGetNamedBufferParameterivEXT"); }
		if(!obj->methodp_glGetNamedBufferParameterivEXT) { obj->methodp_glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedBufferParameterivEXT"); }
		if(!obj->methodp_glGetNamedBufferParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedBufferParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedBufferParameterui64vNV) { obj->methodp_glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)wglGetProcAddress("glGetNamedBufferParameterui64vNV"); }
		if(!obj->methodp_glGetNamedBufferParameterui64vNV) { obj->methodp_glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)GetProcAddress(modOpenGL32, "glGetNamedBufferParameterui64vNV"); }
		if(!obj->methodp_glGetNamedBufferParameterui64vNV) { args.This()->Set(v8::String::NewSymbol("glGetNamedBufferParameterui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedBufferPointervEXT) { obj->methodp_glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)wglGetProcAddress("glGetNamedBufferPointervEXT"); }
		if(!obj->methodp_glGetNamedBufferPointervEXT) { obj->methodp_glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedBufferPointervEXT"); }
		if(!obj->methodp_glGetNamedBufferPointervEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedBufferPointervEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedBufferSubDataEXT) { obj->methodp_glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)wglGetProcAddress("glGetNamedBufferSubDataEXT"); }
		if(!obj->methodp_glGetNamedBufferSubDataEXT) { obj->methodp_glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedBufferSubDataEXT"); }
		if(!obj->methodp_glGetNamedBufferSubDataEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedBufferSubDataEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedFramebufferAttachmentParameterivEXT) { obj->methodp_glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)wglGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT"); }
		if(!obj->methodp_glGetNamedFramebufferAttachmentParameterivEXT) { obj->methodp_glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedFramebufferAttachmentParameterivEXT"); }
		if(!obj->methodp_glGetNamedFramebufferAttachmentParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedFramebufferAttachmentParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedFramebufferParameterivEXT) { obj->methodp_glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)wglGetProcAddress("glGetNamedFramebufferParameterivEXT"); }
		if(!obj->methodp_glGetNamedFramebufferParameterivEXT) { obj->methodp_glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedFramebufferParameterivEXT"); }
		if(!obj->methodp_glGetNamedFramebufferParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedFramebufferParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedProgramLocalParameterIivEXT) { obj->methodp_glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)wglGetProcAddress("glGetNamedProgramLocalParameterIivEXT"); }
		if(!obj->methodp_glGetNamedProgramLocalParameterIivEXT) { obj->methodp_glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedProgramLocalParameterIivEXT"); }
		if(!obj->methodp_glGetNamedProgramLocalParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedProgramLocalParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedProgramLocalParameterIuivEXT) { obj->methodp_glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)wglGetProcAddress("glGetNamedProgramLocalParameterIuivEXT"); }
		if(!obj->methodp_glGetNamedProgramLocalParameterIuivEXT) { obj->methodp_glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedProgramLocalParameterIuivEXT"); }
		if(!obj->methodp_glGetNamedProgramLocalParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedProgramLocalParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedProgramLocalParameterdvEXT) { obj->methodp_glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)wglGetProcAddress("glGetNamedProgramLocalParameterdvEXT"); }
		if(!obj->methodp_glGetNamedProgramLocalParameterdvEXT) { obj->methodp_glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedProgramLocalParameterdvEXT"); }
		if(!obj->methodp_glGetNamedProgramLocalParameterdvEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedProgramLocalParameterdvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedProgramLocalParameterfvEXT) { obj->methodp_glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)wglGetProcAddress("glGetNamedProgramLocalParameterfvEXT"); }
		if(!obj->methodp_glGetNamedProgramLocalParameterfvEXT) { obj->methodp_glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedProgramLocalParameterfvEXT"); }
		if(!obj->methodp_glGetNamedProgramLocalParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedProgramLocalParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedProgramStringEXT) { obj->methodp_glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)wglGetProcAddress("glGetNamedProgramStringEXT"); }
		if(!obj->methodp_glGetNamedProgramStringEXT) { obj->methodp_glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedProgramStringEXT"); }
		if(!obj->methodp_glGetNamedProgramStringEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedProgramStringEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedProgramivEXT) { obj->methodp_glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC)wglGetProcAddress("glGetNamedProgramivEXT"); }
		if(!obj->methodp_glGetNamedProgramivEXT) { obj->methodp_glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedProgramivEXT"); }
		if(!obj->methodp_glGetNamedProgramivEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedProgramivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedRenderbufferParameterivEXT) { obj->methodp_glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)wglGetProcAddress("glGetNamedRenderbufferParameterivEXT"); }
		if(!obj->methodp_glGetNamedRenderbufferParameterivEXT) { obj->methodp_glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetNamedRenderbufferParameterivEXT"); }
		if(!obj->methodp_glGetNamedRenderbufferParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetNamedRenderbufferParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedStringARB) { obj->methodp_glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC)wglGetProcAddress("glGetNamedStringARB"); }
		if(!obj->methodp_glGetNamedStringARB) { obj->methodp_glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC)GetProcAddress(modOpenGL32, "glGetNamedStringARB"); }
		if(!obj->methodp_glGetNamedStringARB) { args.This()->Set(v8::String::NewSymbol("glGetNamedStringARB"), v8::Undefined()); }
		if(!obj->methodp_glGetNamedStringivARB) { obj->methodp_glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC)wglGetProcAddress("glGetNamedStringivARB"); }
		if(!obj->methodp_glGetNamedStringivARB) { obj->methodp_glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC)GetProcAddress(modOpenGL32, "glGetNamedStringivARB"); }
		if(!obj->methodp_glGetNamedStringivARB) { args.This()->Set(v8::String::NewSymbol("glGetNamedStringivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetNextPerfQueryIdINTEL) { obj->methodp_glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC)wglGetProcAddress("glGetNextPerfQueryIdINTEL"); }
		if(!obj->methodp_glGetNextPerfQueryIdINTEL) { obj->methodp_glGetNextPerfQueryIdINTEL = (PFNGLGETNEXTPERFQUERYIDINTELPROC)GetProcAddress(modOpenGL32, "glGetNextPerfQueryIdINTEL"); }
		if(!obj->methodp_glGetNextPerfQueryIdINTEL) { args.This()->Set(v8::String::NewSymbol("glGetNextPerfQueryIdINTEL"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectBufferfvATI) { obj->methodp_glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC)wglGetProcAddress("glGetObjectBufferfvATI"); }
		if(!obj->methodp_glGetObjectBufferfvATI) { obj->methodp_glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC)GetProcAddress(modOpenGL32, "glGetObjectBufferfvATI"); }
		if(!obj->methodp_glGetObjectBufferfvATI) { args.This()->Set(v8::String::NewSymbol("glGetObjectBufferfvATI"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectBufferivATI) { obj->methodp_glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC)wglGetProcAddress("glGetObjectBufferivATI"); }
		if(!obj->methodp_glGetObjectBufferivATI) { obj->methodp_glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC)GetProcAddress(modOpenGL32, "glGetObjectBufferivATI"); }
		if(!obj->methodp_glGetObjectBufferivATI) { args.This()->Set(v8::String::NewSymbol("glGetObjectBufferivATI"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectLabel) { obj->methodp_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)wglGetProcAddress("glGetObjectLabel"); }
		if(!obj->methodp_glGetObjectLabel) { obj->methodp_glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)GetProcAddress(modOpenGL32, "glGetObjectLabel"); }
		if(!obj->methodp_glGetObjectLabel) { args.This()->Set(v8::String::NewSymbol("glGetObjectLabel"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectLabelEXT) { obj->methodp_glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC)wglGetProcAddress("glGetObjectLabelEXT"); }
		if(!obj->methodp_glGetObjectLabelEXT) { obj->methodp_glGetObjectLabelEXT = (PFNGLGETOBJECTLABELEXTPROC)GetProcAddress(modOpenGL32, "glGetObjectLabelEXT"); }
		if(!obj->methodp_glGetObjectLabelEXT) { args.This()->Set(v8::String::NewSymbol("glGetObjectLabelEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectLabelKHR) { obj->methodp_glGetObjectLabelKHR = (PFNGLGETOBJECTLABELKHRPROC)wglGetProcAddress("glGetObjectLabelKHR"); }
		if(!obj->methodp_glGetObjectLabelKHR) { obj->methodp_glGetObjectLabelKHR = (PFNGLGETOBJECTLABELKHRPROC)GetProcAddress(modOpenGL32, "glGetObjectLabelKHR"); }
		if(!obj->methodp_glGetObjectLabelKHR) { args.This()->Set(v8::String::NewSymbol("glGetObjectLabelKHR"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectParameterfvARB) { obj->methodp_glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC)wglGetProcAddress("glGetObjectParameterfvARB"); }
		if(!obj->methodp_glGetObjectParameterfvARB) { obj->methodp_glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC)GetProcAddress(modOpenGL32, "glGetObjectParameterfvARB"); }
		if(!obj->methodp_glGetObjectParameterfvARB) { args.This()->Set(v8::String::NewSymbol("glGetObjectParameterfvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectParameterivAPPLE) { obj->methodp_glGetObjectParameterivAPPLE = (PFNGLGETOBJECTPARAMETERIVAPPLEPROC)wglGetProcAddress("glGetObjectParameterivAPPLE"); }
		if(!obj->methodp_glGetObjectParameterivAPPLE) { obj->methodp_glGetObjectParameterivAPPLE = (PFNGLGETOBJECTPARAMETERIVAPPLEPROC)GetProcAddress(modOpenGL32, "glGetObjectParameterivAPPLE"); }
		if(!obj->methodp_glGetObjectParameterivAPPLE) { args.This()->Set(v8::String::NewSymbol("glGetObjectParameterivAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectParameterivARB) { obj->methodp_glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC)wglGetProcAddress("glGetObjectParameterivARB"); }
		if(!obj->methodp_glGetObjectParameterivARB) { obj->methodp_glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC)GetProcAddress(modOpenGL32, "glGetObjectParameterivARB"); }
		if(!obj->methodp_glGetObjectParameterivARB) { args.This()->Set(v8::String::NewSymbol("glGetObjectParameterivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectPtrLabel) { obj->methodp_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)wglGetProcAddress("glGetObjectPtrLabel"); }
		if(!obj->methodp_glGetObjectPtrLabel) { obj->methodp_glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)GetProcAddress(modOpenGL32, "glGetObjectPtrLabel"); }
		if(!obj->methodp_glGetObjectPtrLabel) { args.This()->Set(v8::String::NewSymbol("glGetObjectPtrLabel"), v8::Undefined()); }
		if(!obj->methodp_glGetObjectPtrLabelKHR) { obj->methodp_glGetObjectPtrLabelKHR = (PFNGLGETOBJECTPTRLABELKHRPROC)wglGetProcAddress("glGetObjectPtrLabelKHR"); }
		if(!obj->methodp_glGetObjectPtrLabelKHR) { obj->methodp_glGetObjectPtrLabelKHR = (PFNGLGETOBJECTPTRLABELKHRPROC)GetProcAddress(modOpenGL32, "glGetObjectPtrLabelKHR"); }
		if(!obj->methodp_glGetObjectPtrLabelKHR) { args.This()->Set(v8::String::NewSymbol("glGetObjectPtrLabelKHR"), v8::Undefined()); }
		if(!obj->methodp_glGetOcclusionQueryivNV) { obj->methodp_glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC)wglGetProcAddress("glGetOcclusionQueryivNV"); }
		if(!obj->methodp_glGetOcclusionQueryivNV) { obj->methodp_glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC)GetProcAddress(modOpenGL32, "glGetOcclusionQueryivNV"); }
		if(!obj->methodp_glGetOcclusionQueryivNV) { args.This()->Set(v8::String::NewSymbol("glGetOcclusionQueryivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetOcclusionQueryuivNV) { obj->methodp_glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)wglGetProcAddress("glGetOcclusionQueryuivNV"); }
		if(!obj->methodp_glGetOcclusionQueryuivNV) { obj->methodp_glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)GetProcAddress(modOpenGL32, "glGetOcclusionQueryuivNV"); }
		if(!obj->methodp_glGetOcclusionQueryuivNV) { args.This()->Set(v8::String::NewSymbol("glGetOcclusionQueryuivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathColorGenfvNV) { obj->methodp_glGetPathColorGenfvNV = (PFNGLGETPATHCOLORGENFVNVPROC)wglGetProcAddress("glGetPathColorGenfvNV"); }
		if(!obj->methodp_glGetPathColorGenfvNV) { obj->methodp_glGetPathColorGenfvNV = (PFNGLGETPATHCOLORGENFVNVPROC)GetProcAddress(modOpenGL32, "glGetPathColorGenfvNV"); }
		if(!obj->methodp_glGetPathColorGenfvNV) { args.This()->Set(v8::String::NewSymbol("glGetPathColorGenfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathColorGenivNV) { obj->methodp_glGetPathColorGenivNV = (PFNGLGETPATHCOLORGENIVNVPROC)wglGetProcAddress("glGetPathColorGenivNV"); }
		if(!obj->methodp_glGetPathColorGenivNV) { obj->methodp_glGetPathColorGenivNV = (PFNGLGETPATHCOLORGENIVNVPROC)GetProcAddress(modOpenGL32, "glGetPathColorGenivNV"); }
		if(!obj->methodp_glGetPathColorGenivNV) { args.This()->Set(v8::String::NewSymbol("glGetPathColorGenivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathCommandsNV) { obj->methodp_glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC)wglGetProcAddress("glGetPathCommandsNV"); }
		if(!obj->methodp_glGetPathCommandsNV) { obj->methodp_glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC)GetProcAddress(modOpenGL32, "glGetPathCommandsNV"); }
		if(!obj->methodp_glGetPathCommandsNV) { args.This()->Set(v8::String::NewSymbol("glGetPathCommandsNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathCoordsNV) { obj->methodp_glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC)wglGetProcAddress("glGetPathCoordsNV"); }
		if(!obj->methodp_glGetPathCoordsNV) { obj->methodp_glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC)GetProcAddress(modOpenGL32, "glGetPathCoordsNV"); }
		if(!obj->methodp_glGetPathCoordsNV) { args.This()->Set(v8::String::NewSymbol("glGetPathCoordsNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathDashArrayNV) { obj->methodp_glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC)wglGetProcAddress("glGetPathDashArrayNV"); }
		if(!obj->methodp_glGetPathDashArrayNV) { obj->methodp_glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC)GetProcAddress(modOpenGL32, "glGetPathDashArrayNV"); }
		if(!obj->methodp_glGetPathDashArrayNV) { args.This()->Set(v8::String::NewSymbol("glGetPathDashArrayNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathLengthNV) { obj->methodp_glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC)wglGetProcAddress("glGetPathLengthNV"); }
		if(!obj->methodp_glGetPathLengthNV) { obj->methodp_glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC)GetProcAddress(modOpenGL32, "glGetPathLengthNV"); }
		if(!obj->methodp_glGetPathLengthNV) { args.This()->Set(v8::String::NewSymbol("glGetPathLengthNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathMetricRangeNV) { obj->methodp_glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC)wglGetProcAddress("glGetPathMetricRangeNV"); }
		if(!obj->methodp_glGetPathMetricRangeNV) { obj->methodp_glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC)GetProcAddress(modOpenGL32, "glGetPathMetricRangeNV"); }
		if(!obj->methodp_glGetPathMetricRangeNV) { args.This()->Set(v8::String::NewSymbol("glGetPathMetricRangeNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathMetricsNV) { obj->methodp_glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC)wglGetProcAddress("glGetPathMetricsNV"); }
		if(!obj->methodp_glGetPathMetricsNV) { obj->methodp_glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC)GetProcAddress(modOpenGL32, "glGetPathMetricsNV"); }
		if(!obj->methodp_glGetPathMetricsNV) { args.This()->Set(v8::String::NewSymbol("glGetPathMetricsNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathParameterfvNV) { obj->methodp_glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC)wglGetProcAddress("glGetPathParameterfvNV"); }
		if(!obj->methodp_glGetPathParameterfvNV) { obj->methodp_glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetPathParameterfvNV"); }
		if(!obj->methodp_glGetPathParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetPathParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathParameterivNV) { obj->methodp_glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC)wglGetProcAddress("glGetPathParameterivNV"); }
		if(!obj->methodp_glGetPathParameterivNV) { obj->methodp_glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glGetPathParameterivNV"); }
		if(!obj->methodp_glGetPathParameterivNV) { args.This()->Set(v8::String::NewSymbol("glGetPathParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathSpacingNV) { obj->methodp_glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC)wglGetProcAddress("glGetPathSpacingNV"); }
		if(!obj->methodp_glGetPathSpacingNV) { obj->methodp_glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC)GetProcAddress(modOpenGL32, "glGetPathSpacingNV"); }
		if(!obj->methodp_glGetPathSpacingNV) { args.This()->Set(v8::String::NewSymbol("glGetPathSpacingNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathTexGenfvNV) { obj->methodp_glGetPathTexGenfvNV = (PFNGLGETPATHTEXGENFVNVPROC)wglGetProcAddress("glGetPathTexGenfvNV"); }
		if(!obj->methodp_glGetPathTexGenfvNV) { obj->methodp_glGetPathTexGenfvNV = (PFNGLGETPATHTEXGENFVNVPROC)GetProcAddress(modOpenGL32, "glGetPathTexGenfvNV"); }
		if(!obj->methodp_glGetPathTexGenfvNV) { args.This()->Set(v8::String::NewSymbol("glGetPathTexGenfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPathTexGenivNV) { obj->methodp_glGetPathTexGenivNV = (PFNGLGETPATHTEXGENIVNVPROC)wglGetProcAddress("glGetPathTexGenivNV"); }
		if(!obj->methodp_glGetPathTexGenivNV) { obj->methodp_glGetPathTexGenivNV = (PFNGLGETPATHTEXGENIVNVPROC)GetProcAddress(modOpenGL32, "glGetPathTexGenivNV"); }
		if(!obj->methodp_glGetPathTexGenivNV) { args.This()->Set(v8::String::NewSymbol("glGetPathTexGenivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfCounterInfoINTEL) { obj->methodp_glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC)wglGetProcAddress("glGetPerfCounterInfoINTEL"); }
		if(!obj->methodp_glGetPerfCounterInfoINTEL) { obj->methodp_glGetPerfCounterInfoINTEL = (PFNGLGETPERFCOUNTERINFOINTELPROC)GetProcAddress(modOpenGL32, "glGetPerfCounterInfoINTEL"); }
		if(!obj->methodp_glGetPerfCounterInfoINTEL) { args.This()->Set(v8::String::NewSymbol("glGetPerfCounterInfoINTEL"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfMonitorCounterDataAMD) { obj->methodp_glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)wglGetProcAddress("glGetPerfMonitorCounterDataAMD"); }
		if(!obj->methodp_glGetPerfMonitorCounterDataAMD) { obj->methodp_glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)GetProcAddress(modOpenGL32, "glGetPerfMonitorCounterDataAMD"); }
		if(!obj->methodp_glGetPerfMonitorCounterDataAMD) { args.This()->Set(v8::String::NewSymbol("glGetPerfMonitorCounterDataAMD"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfMonitorCounterInfoAMD) { obj->methodp_glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)wglGetProcAddress("glGetPerfMonitorCounterInfoAMD"); }
		if(!obj->methodp_glGetPerfMonitorCounterInfoAMD) { obj->methodp_glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)GetProcAddress(modOpenGL32, "glGetPerfMonitorCounterInfoAMD"); }
		if(!obj->methodp_glGetPerfMonitorCounterInfoAMD) { args.This()->Set(v8::String::NewSymbol("glGetPerfMonitorCounterInfoAMD"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfMonitorCounterStringAMD) { obj->methodp_glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)wglGetProcAddress("glGetPerfMonitorCounterStringAMD"); }
		if(!obj->methodp_glGetPerfMonitorCounterStringAMD) { obj->methodp_glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)GetProcAddress(modOpenGL32, "glGetPerfMonitorCounterStringAMD"); }
		if(!obj->methodp_glGetPerfMonitorCounterStringAMD) { args.This()->Set(v8::String::NewSymbol("glGetPerfMonitorCounterStringAMD"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfMonitorCountersAMD) { obj->methodp_glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC)wglGetProcAddress("glGetPerfMonitorCountersAMD"); }
		if(!obj->methodp_glGetPerfMonitorCountersAMD) { obj->methodp_glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC)GetProcAddress(modOpenGL32, "glGetPerfMonitorCountersAMD"); }
		if(!obj->methodp_glGetPerfMonitorCountersAMD) { args.This()->Set(v8::String::NewSymbol("glGetPerfMonitorCountersAMD"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfMonitorGroupStringAMD) { obj->methodp_glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)wglGetProcAddress("glGetPerfMonitorGroupStringAMD"); }
		if(!obj->methodp_glGetPerfMonitorGroupStringAMD) { obj->methodp_glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)GetProcAddress(modOpenGL32, "glGetPerfMonitorGroupStringAMD"); }
		if(!obj->methodp_glGetPerfMonitorGroupStringAMD) { args.This()->Set(v8::String::NewSymbol("glGetPerfMonitorGroupStringAMD"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfMonitorGroupsAMD) { obj->methodp_glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC)wglGetProcAddress("glGetPerfMonitorGroupsAMD"); }
		if(!obj->methodp_glGetPerfMonitorGroupsAMD) { obj->methodp_glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC)GetProcAddress(modOpenGL32, "glGetPerfMonitorGroupsAMD"); }
		if(!obj->methodp_glGetPerfMonitorGroupsAMD) { args.This()->Set(v8::String::NewSymbol("glGetPerfMonitorGroupsAMD"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfQueryDataINTEL) { obj->methodp_glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC)wglGetProcAddress("glGetPerfQueryDataINTEL"); }
		if(!obj->methodp_glGetPerfQueryDataINTEL) { obj->methodp_glGetPerfQueryDataINTEL = (PFNGLGETPERFQUERYDATAINTELPROC)GetProcAddress(modOpenGL32, "glGetPerfQueryDataINTEL"); }
		if(!obj->methodp_glGetPerfQueryDataINTEL) { args.This()->Set(v8::String::NewSymbol("glGetPerfQueryDataINTEL"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfQueryIdByNameINTEL) { obj->methodp_glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC)wglGetProcAddress("glGetPerfQueryIdByNameINTEL"); }
		if(!obj->methodp_glGetPerfQueryIdByNameINTEL) { obj->methodp_glGetPerfQueryIdByNameINTEL = (PFNGLGETPERFQUERYIDBYNAMEINTELPROC)GetProcAddress(modOpenGL32, "glGetPerfQueryIdByNameINTEL"); }
		if(!obj->methodp_glGetPerfQueryIdByNameINTEL) { args.This()->Set(v8::String::NewSymbol("glGetPerfQueryIdByNameINTEL"), v8::Undefined()); }
		if(!obj->methodp_glGetPerfQueryInfoINTEL) { obj->methodp_glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC)wglGetProcAddress("glGetPerfQueryInfoINTEL"); }
		if(!obj->methodp_glGetPerfQueryInfoINTEL) { obj->methodp_glGetPerfQueryInfoINTEL = (PFNGLGETPERFQUERYINFOINTELPROC)GetProcAddress(modOpenGL32, "glGetPerfQueryInfoINTEL"); }
		if(!obj->methodp_glGetPerfQueryInfoINTEL) { args.This()->Set(v8::String::NewSymbol("glGetPerfQueryInfoINTEL"), v8::Undefined()); }
		if(!obj->methodp_glGetPixelMapfv) { obj->methodp_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC)wglGetProcAddress("glGetPixelMapfv"); }
		if(!obj->methodp_glGetPixelMapfv) { obj->methodp_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC)GetProcAddress(modOpenGL32, "glGetPixelMapfv"); }
		if(!obj->methodp_glGetPixelMapfv) { args.This()->Set(v8::String::NewSymbol("glGetPixelMapfv"), v8::Undefined()); }
		if(!obj->methodp_glGetPixelMapuiv) { obj->methodp_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC)wglGetProcAddress("glGetPixelMapuiv"); }
		if(!obj->methodp_glGetPixelMapuiv) { obj->methodp_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC)GetProcAddress(modOpenGL32, "glGetPixelMapuiv"); }
		if(!obj->methodp_glGetPixelMapuiv) { args.This()->Set(v8::String::NewSymbol("glGetPixelMapuiv"), v8::Undefined()); }
		if(!obj->methodp_glGetPixelMapusv) { obj->methodp_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC)wglGetProcAddress("glGetPixelMapusv"); }
		if(!obj->methodp_glGetPixelMapusv) { obj->methodp_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC)GetProcAddress(modOpenGL32, "glGetPixelMapusv"); }
		if(!obj->methodp_glGetPixelMapusv) { args.This()->Set(v8::String::NewSymbol("glGetPixelMapusv"), v8::Undefined()); }
		if(!obj->methodp_glGetPixelMapxv) { obj->methodp_glGetPixelMapxv = (PFNGLGETPIXELMAPXVPROC)wglGetProcAddress("glGetPixelMapxv"); }
		if(!obj->methodp_glGetPixelMapxv) { obj->methodp_glGetPixelMapxv = (PFNGLGETPIXELMAPXVPROC)GetProcAddress(modOpenGL32, "glGetPixelMapxv"); }
		if(!obj->methodp_glGetPixelMapxv) { args.This()->Set(v8::String::NewSymbol("glGetPixelMapxv"), v8::Undefined()); }
		if(!obj->methodp_glGetPixelTexGenParameterfvSGIS) { obj->methodp_glGetPixelTexGenParameterfvSGIS = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)wglGetProcAddress("glGetPixelTexGenParameterfvSGIS"); }
		if(!obj->methodp_glGetPixelTexGenParameterfvSGIS) { obj->methodp_glGetPixelTexGenParameterfvSGIS = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)GetProcAddress(modOpenGL32, "glGetPixelTexGenParameterfvSGIS"); }
		if(!obj->methodp_glGetPixelTexGenParameterfvSGIS) { args.This()->Set(v8::String::NewSymbol("glGetPixelTexGenParameterfvSGIS"), v8::Undefined()); }
		if(!obj->methodp_glGetPixelTexGenParameterivSGIS) { obj->methodp_glGetPixelTexGenParameterivSGIS = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)wglGetProcAddress("glGetPixelTexGenParameterivSGIS"); }
		if(!obj->methodp_glGetPixelTexGenParameterivSGIS) { obj->methodp_glGetPixelTexGenParameterivSGIS = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)GetProcAddress(modOpenGL32, "glGetPixelTexGenParameterivSGIS"); }
		if(!obj->methodp_glGetPixelTexGenParameterivSGIS) { args.This()->Set(v8::String::NewSymbol("glGetPixelTexGenParameterivSGIS"), v8::Undefined()); }
		if(!obj->methodp_glGetPixelTransformParameterfvEXT) { obj->methodp_glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)wglGetProcAddress("glGetPixelTransformParameterfvEXT"); }
		if(!obj->methodp_glGetPixelTransformParameterfvEXT) { obj->methodp_glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetPixelTransformParameterfvEXT"); }
		if(!obj->methodp_glGetPixelTransformParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetPixelTransformParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetPixelTransformParameterivEXT) { obj->methodp_glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)wglGetProcAddress("glGetPixelTransformParameterivEXT"); }
		if(!obj->methodp_glGetPixelTransformParameterivEXT) { obj->methodp_glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetPixelTransformParameterivEXT"); }
		if(!obj->methodp_glGetPixelTransformParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetPixelTransformParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetPointerIndexedvEXT) { obj->methodp_glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC)wglGetProcAddress("glGetPointerIndexedvEXT"); }
		if(!obj->methodp_glGetPointerIndexedvEXT) { obj->methodp_glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC)GetProcAddress(modOpenGL32, "glGetPointerIndexedvEXT"); }
		if(!obj->methodp_glGetPointerIndexedvEXT) { args.This()->Set(v8::String::NewSymbol("glGetPointerIndexedvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetPointeri_vEXT) { obj->methodp_glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC)wglGetProcAddress("glGetPointeri_vEXT"); }
		if(!obj->methodp_glGetPointeri_vEXT) { obj->methodp_glGetPointeri_vEXT = (PFNGLGETPOINTERI_VEXTPROC)GetProcAddress(modOpenGL32, "glGetPointeri_vEXT"); }
		if(!obj->methodp_glGetPointeri_vEXT) { args.This()->Set(v8::String::NewSymbol("glGetPointeri_vEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetPointerv) { obj->methodp_glGetPointerv = (PFNGLGETPOINTERVPROC)wglGetProcAddress("glGetPointerv"); }
		if(!obj->methodp_glGetPointerv) { obj->methodp_glGetPointerv = (PFNGLGETPOINTERVPROC)GetProcAddress(modOpenGL32, "glGetPointerv"); }
		if(!obj->methodp_glGetPointerv) { args.This()->Set(v8::String::NewSymbol("glGetPointerv"), v8::Undefined()); }
		if(!obj->methodp_glGetPointervEXT) { obj->methodp_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)wglGetProcAddress("glGetPointervEXT"); }
		if(!obj->methodp_glGetPointervEXT) { obj->methodp_glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)GetProcAddress(modOpenGL32, "glGetPointervEXT"); }
		if(!obj->methodp_glGetPointervEXT) { args.This()->Set(v8::String::NewSymbol("glGetPointervEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetPointervKHR) { obj->methodp_glGetPointervKHR = (PFNGLGETPOINTERVKHRPROC)wglGetProcAddress("glGetPointervKHR"); }
		if(!obj->methodp_glGetPointervKHR) { obj->methodp_glGetPointervKHR = (PFNGLGETPOINTERVKHRPROC)GetProcAddress(modOpenGL32, "glGetPointervKHR"); }
		if(!obj->methodp_glGetPointervKHR) { args.This()->Set(v8::String::NewSymbol("glGetPointervKHR"), v8::Undefined()); }
		if(!obj->methodp_glGetPolygonStipple) { obj->methodp_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC)wglGetProcAddress("glGetPolygonStipple"); }
		if(!obj->methodp_glGetPolygonStipple) { obj->methodp_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC)GetProcAddress(modOpenGL32, "glGetPolygonStipple"); }
		if(!obj->methodp_glGetPolygonStipple) { args.This()->Set(v8::String::NewSymbol("glGetPolygonStipple"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramBinary) { obj->methodp_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)wglGetProcAddress("glGetProgramBinary"); }
		if(!obj->methodp_glGetProgramBinary) { obj->methodp_glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)GetProcAddress(modOpenGL32, "glGetProgramBinary"); }
		if(!obj->methodp_glGetProgramBinary) { args.This()->Set(v8::String::NewSymbol("glGetProgramBinary"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramBinaryOES) { obj->methodp_glGetProgramBinaryOES = (PFNGLGETPROGRAMBINARYOESPROC)wglGetProcAddress("glGetProgramBinaryOES"); }
		if(!obj->methodp_glGetProgramBinaryOES) { obj->methodp_glGetProgramBinaryOES = (PFNGLGETPROGRAMBINARYOESPROC)GetProcAddress(modOpenGL32, "glGetProgramBinaryOES"); }
		if(!obj->methodp_glGetProgramBinaryOES) { args.This()->Set(v8::String::NewSymbol("glGetProgramBinaryOES"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramEnvParameterIivNV) { obj->methodp_glGetProgramEnvParameterIivNV = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)wglGetProcAddress("glGetProgramEnvParameterIivNV"); }
		if(!obj->methodp_glGetProgramEnvParameterIivNV) { obj->methodp_glGetProgramEnvParameterIivNV = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramEnvParameterIivNV"); }
		if(!obj->methodp_glGetProgramEnvParameterIivNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramEnvParameterIivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramEnvParameterIuivNV) { obj->methodp_glGetProgramEnvParameterIuivNV = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)wglGetProcAddress("glGetProgramEnvParameterIuivNV"); }
		if(!obj->methodp_glGetProgramEnvParameterIuivNV) { obj->methodp_glGetProgramEnvParameterIuivNV = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramEnvParameterIuivNV"); }
		if(!obj->methodp_glGetProgramEnvParameterIuivNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramEnvParameterIuivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramEnvParameterdvARB) { obj->methodp_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)wglGetProcAddress("glGetProgramEnvParameterdvARB"); }
		if(!obj->methodp_glGetProgramEnvParameterdvARB) { obj->methodp_glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)GetProcAddress(modOpenGL32, "glGetProgramEnvParameterdvARB"); }
		if(!obj->methodp_glGetProgramEnvParameterdvARB) { args.This()->Set(v8::String::NewSymbol("glGetProgramEnvParameterdvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramEnvParameterfvARB) { obj->methodp_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)wglGetProcAddress("glGetProgramEnvParameterfvARB"); }
		if(!obj->methodp_glGetProgramEnvParameterfvARB) { obj->methodp_glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)GetProcAddress(modOpenGL32, "glGetProgramEnvParameterfvARB"); }
		if(!obj->methodp_glGetProgramEnvParameterfvARB) { args.This()->Set(v8::String::NewSymbol("glGetProgramEnvParameterfvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramInfoLog) { obj->methodp_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)wglGetProcAddress("glGetProgramInfoLog"); }
		if(!obj->methodp_glGetProgramInfoLog) { obj->methodp_glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)GetProcAddress(modOpenGL32, "glGetProgramInfoLog"); }
		if(!obj->methodp_glGetProgramInfoLog) { args.This()->Set(v8::String::NewSymbol("glGetProgramInfoLog"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramInterfaceiv) { obj->methodp_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)wglGetProcAddress("glGetProgramInterfaceiv"); }
		if(!obj->methodp_glGetProgramInterfaceiv) { obj->methodp_glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)GetProcAddress(modOpenGL32, "glGetProgramInterfaceiv"); }
		if(!obj->methodp_glGetProgramInterfaceiv) { args.This()->Set(v8::String::NewSymbol("glGetProgramInterfaceiv"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramLocalParameterIivNV) { obj->methodp_glGetProgramLocalParameterIivNV = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)wglGetProcAddress("glGetProgramLocalParameterIivNV"); }
		if(!obj->methodp_glGetProgramLocalParameterIivNV) { obj->methodp_glGetProgramLocalParameterIivNV = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramLocalParameterIivNV"); }
		if(!obj->methodp_glGetProgramLocalParameterIivNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramLocalParameterIivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramLocalParameterIuivNV) { obj->methodp_glGetProgramLocalParameterIuivNV = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)wglGetProcAddress("glGetProgramLocalParameterIuivNV"); }
		if(!obj->methodp_glGetProgramLocalParameterIuivNV) { obj->methodp_glGetProgramLocalParameterIuivNV = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramLocalParameterIuivNV"); }
		if(!obj->methodp_glGetProgramLocalParameterIuivNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramLocalParameterIuivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramLocalParameterdvARB) { obj->methodp_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)wglGetProcAddress("glGetProgramLocalParameterdvARB"); }
		if(!obj->methodp_glGetProgramLocalParameterdvARB) { obj->methodp_glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)GetProcAddress(modOpenGL32, "glGetProgramLocalParameterdvARB"); }
		if(!obj->methodp_glGetProgramLocalParameterdvARB) { args.This()->Set(v8::String::NewSymbol("glGetProgramLocalParameterdvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramLocalParameterfvARB) { obj->methodp_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)wglGetProcAddress("glGetProgramLocalParameterfvARB"); }
		if(!obj->methodp_glGetProgramLocalParameterfvARB) { obj->methodp_glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)GetProcAddress(modOpenGL32, "glGetProgramLocalParameterfvARB"); }
		if(!obj->methodp_glGetProgramLocalParameterfvARB) { args.This()->Set(v8::String::NewSymbol("glGetProgramLocalParameterfvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramNamedParameterdvNV) { obj->methodp_glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)wglGetProcAddress("glGetProgramNamedParameterdvNV"); }
		if(!obj->methodp_glGetProgramNamedParameterdvNV) { obj->methodp_glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramNamedParameterdvNV"); }
		if(!obj->methodp_glGetProgramNamedParameterdvNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramNamedParameterdvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramNamedParameterfvNV) { obj->methodp_glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)wglGetProcAddress("glGetProgramNamedParameterfvNV"); }
		if(!obj->methodp_glGetProgramNamedParameterfvNV) { obj->methodp_glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramNamedParameterfvNV"); }
		if(!obj->methodp_glGetProgramNamedParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramNamedParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramParameterdvNV) { obj->methodp_glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)wglGetProcAddress("glGetProgramParameterdvNV"); }
		if(!obj->methodp_glGetProgramParameterdvNV) { obj->methodp_glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramParameterdvNV"); }
		if(!obj->methodp_glGetProgramParameterdvNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramParameterdvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramParameterfvNV) { obj->methodp_glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)wglGetProcAddress("glGetProgramParameterfvNV"); }
		if(!obj->methodp_glGetProgramParameterfvNV) { obj->methodp_glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramParameterfvNV"); }
		if(!obj->methodp_glGetProgramParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramPipelineInfoLog) { obj->methodp_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)wglGetProcAddress("glGetProgramPipelineInfoLog"); }
		if(!obj->methodp_glGetProgramPipelineInfoLog) { obj->methodp_glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)GetProcAddress(modOpenGL32, "glGetProgramPipelineInfoLog"); }
		if(!obj->methodp_glGetProgramPipelineInfoLog) { args.This()->Set(v8::String::NewSymbol("glGetProgramPipelineInfoLog"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramPipelineInfoLogEXT) { obj->methodp_glGetProgramPipelineInfoLogEXT = (PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC)wglGetProcAddress("glGetProgramPipelineInfoLogEXT"); }
		if(!obj->methodp_glGetProgramPipelineInfoLogEXT) { obj->methodp_glGetProgramPipelineInfoLogEXT = (PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC)GetProcAddress(modOpenGL32, "glGetProgramPipelineInfoLogEXT"); }
		if(!obj->methodp_glGetProgramPipelineInfoLogEXT) { args.This()->Set(v8::String::NewSymbol("glGetProgramPipelineInfoLogEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramPipelineiv) { obj->methodp_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)wglGetProcAddress("glGetProgramPipelineiv"); }
		if(!obj->methodp_glGetProgramPipelineiv) { obj->methodp_glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)GetProcAddress(modOpenGL32, "glGetProgramPipelineiv"); }
		if(!obj->methodp_glGetProgramPipelineiv) { args.This()->Set(v8::String::NewSymbol("glGetProgramPipelineiv"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramPipelineivEXT) { obj->methodp_glGetProgramPipelineivEXT = (PFNGLGETPROGRAMPIPELINEIVEXTPROC)wglGetProcAddress("glGetProgramPipelineivEXT"); }
		if(!obj->methodp_glGetProgramPipelineivEXT) { obj->methodp_glGetProgramPipelineivEXT = (PFNGLGETPROGRAMPIPELINEIVEXTPROC)GetProcAddress(modOpenGL32, "glGetProgramPipelineivEXT"); }
		if(!obj->methodp_glGetProgramPipelineivEXT) { args.This()->Set(v8::String::NewSymbol("glGetProgramPipelineivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramResourceIndex) { obj->methodp_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)wglGetProcAddress("glGetProgramResourceIndex"); }
		if(!obj->methodp_glGetProgramResourceIndex) { obj->methodp_glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)GetProcAddress(modOpenGL32, "glGetProgramResourceIndex"); }
		if(!obj->methodp_glGetProgramResourceIndex) { args.This()->Set(v8::String::NewSymbol("glGetProgramResourceIndex"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramResourceLocation) { obj->methodp_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)wglGetProcAddress("glGetProgramResourceLocation"); }
		if(!obj->methodp_glGetProgramResourceLocation) { obj->methodp_glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)GetProcAddress(modOpenGL32, "glGetProgramResourceLocation"); }
		if(!obj->methodp_glGetProgramResourceLocation) { args.This()->Set(v8::String::NewSymbol("glGetProgramResourceLocation"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramResourceLocationIndex) { obj->methodp_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)wglGetProcAddress("glGetProgramResourceLocationIndex"); }
		if(!obj->methodp_glGetProgramResourceLocationIndex) { obj->methodp_glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)GetProcAddress(modOpenGL32, "glGetProgramResourceLocationIndex"); }
		if(!obj->methodp_glGetProgramResourceLocationIndex) { args.This()->Set(v8::String::NewSymbol("glGetProgramResourceLocationIndex"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramResourceName) { obj->methodp_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)wglGetProcAddress("glGetProgramResourceName"); }
		if(!obj->methodp_glGetProgramResourceName) { obj->methodp_glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)GetProcAddress(modOpenGL32, "glGetProgramResourceName"); }
		if(!obj->methodp_glGetProgramResourceName) { args.This()->Set(v8::String::NewSymbol("glGetProgramResourceName"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramResourceiv) { obj->methodp_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)wglGetProcAddress("glGetProgramResourceiv"); }
		if(!obj->methodp_glGetProgramResourceiv) { obj->methodp_glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)GetProcAddress(modOpenGL32, "glGetProgramResourceiv"); }
		if(!obj->methodp_glGetProgramResourceiv) { args.This()->Set(v8::String::NewSymbol("glGetProgramResourceiv"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramStageiv) { obj->methodp_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)wglGetProcAddress("glGetProgramStageiv"); }
		if(!obj->methodp_glGetProgramStageiv) { obj->methodp_glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)GetProcAddress(modOpenGL32, "glGetProgramStageiv"); }
		if(!obj->methodp_glGetProgramStageiv) { args.This()->Set(v8::String::NewSymbol("glGetProgramStageiv"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramStringARB) { obj->methodp_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)wglGetProcAddress("glGetProgramStringARB"); }
		if(!obj->methodp_glGetProgramStringARB) { obj->methodp_glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)GetProcAddress(modOpenGL32, "glGetProgramStringARB"); }
		if(!obj->methodp_glGetProgramStringARB) { args.This()->Set(v8::String::NewSymbol("glGetProgramStringARB"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramStringNV) { obj->methodp_glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)wglGetProcAddress("glGetProgramStringNV"); }
		if(!obj->methodp_glGetProgramStringNV) { obj->methodp_glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)GetProcAddress(modOpenGL32, "glGetProgramStringNV"); }
		if(!obj->methodp_glGetProgramStringNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramStringNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramSubroutineParameteruivNV) { obj->methodp_glGetProgramSubroutineParameteruivNV = (PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)wglGetProcAddress("glGetProgramSubroutineParameteruivNV"); }
		if(!obj->methodp_glGetProgramSubroutineParameteruivNV) { obj->methodp_glGetProgramSubroutineParameteruivNV = (PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramSubroutineParameteruivNV"); }
		if(!obj->methodp_glGetProgramSubroutineParameteruivNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramSubroutineParameteruivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramiv) { obj->methodp_glGetProgramiv = (PFNGLGETPROGRAMIVPROC)wglGetProcAddress("glGetProgramiv"); }
		if(!obj->methodp_glGetProgramiv) { obj->methodp_glGetProgramiv = (PFNGLGETPROGRAMIVPROC)GetProcAddress(modOpenGL32, "glGetProgramiv"); }
		if(!obj->methodp_glGetProgramiv) { args.This()->Set(v8::String::NewSymbol("glGetProgramiv"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramivARB) { obj->methodp_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)wglGetProcAddress("glGetProgramivARB"); }
		if(!obj->methodp_glGetProgramivARB) { obj->methodp_glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)GetProcAddress(modOpenGL32, "glGetProgramivARB"); }
		if(!obj->methodp_glGetProgramivARB) { args.This()->Set(v8::String::NewSymbol("glGetProgramivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetProgramivNV) { obj->methodp_glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)wglGetProcAddress("glGetProgramivNV"); }
		if(!obj->methodp_glGetProgramivNV) { obj->methodp_glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)GetProcAddress(modOpenGL32, "glGetProgramivNV"); }
		if(!obj->methodp_glGetProgramivNV) { args.This()->Set(v8::String::NewSymbol("glGetProgramivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryIndexediv) { obj->methodp_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)wglGetProcAddress("glGetQueryIndexediv"); }
		if(!obj->methodp_glGetQueryIndexediv) { obj->methodp_glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)GetProcAddress(modOpenGL32, "glGetQueryIndexediv"); }
		if(!obj->methodp_glGetQueryIndexediv) { args.This()->Set(v8::String::NewSymbol("glGetQueryIndexediv"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjecti64v) { obj->methodp_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)wglGetProcAddress("glGetQueryObjecti64v"); }
		if(!obj->methodp_glGetQueryObjecti64v) { obj->methodp_glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)GetProcAddress(modOpenGL32, "glGetQueryObjecti64v"); }
		if(!obj->methodp_glGetQueryObjecti64v) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjecti64v"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjecti64vEXT) { obj->methodp_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)wglGetProcAddress("glGetQueryObjecti64vEXT"); }
		if(!obj->methodp_glGetQueryObjecti64vEXT) { obj->methodp_glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)GetProcAddress(modOpenGL32, "glGetQueryObjecti64vEXT"); }
		if(!obj->methodp_glGetQueryObjecti64vEXT) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjecti64vEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjectiv) { obj->methodp_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)wglGetProcAddress("glGetQueryObjectiv"); }
		if(!obj->methodp_glGetQueryObjectiv) { obj->methodp_glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)GetProcAddress(modOpenGL32, "glGetQueryObjectiv"); }
		if(!obj->methodp_glGetQueryObjectiv) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjectiv"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjectivARB) { obj->methodp_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)wglGetProcAddress("glGetQueryObjectivARB"); }
		if(!obj->methodp_glGetQueryObjectivARB) { obj->methodp_glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)GetProcAddress(modOpenGL32, "glGetQueryObjectivARB"); }
		if(!obj->methodp_glGetQueryObjectivARB) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjectivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjectivEXT) { obj->methodp_glGetQueryObjectivEXT = (PFNGLGETQUERYOBJECTIVEXTPROC)wglGetProcAddress("glGetQueryObjectivEXT"); }
		if(!obj->methodp_glGetQueryObjectivEXT) { obj->methodp_glGetQueryObjectivEXT = (PFNGLGETQUERYOBJECTIVEXTPROC)GetProcAddress(modOpenGL32, "glGetQueryObjectivEXT"); }
		if(!obj->methodp_glGetQueryObjectivEXT) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjectivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjectui64v) { obj->methodp_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)wglGetProcAddress("glGetQueryObjectui64v"); }
		if(!obj->methodp_glGetQueryObjectui64v) { obj->methodp_glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)GetProcAddress(modOpenGL32, "glGetQueryObjectui64v"); }
		if(!obj->methodp_glGetQueryObjectui64v) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjectui64v"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjectui64vEXT) { obj->methodp_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)wglGetProcAddress("glGetQueryObjectui64vEXT"); }
		if(!obj->methodp_glGetQueryObjectui64vEXT) { obj->methodp_glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)GetProcAddress(modOpenGL32, "glGetQueryObjectui64vEXT"); }
		if(!obj->methodp_glGetQueryObjectui64vEXT) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjectui64vEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjectuiv) { obj->methodp_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)wglGetProcAddress("glGetQueryObjectuiv"); }
		if(!obj->methodp_glGetQueryObjectuiv) { obj->methodp_glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)GetProcAddress(modOpenGL32, "glGetQueryObjectuiv"); }
		if(!obj->methodp_glGetQueryObjectuiv) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjectuiv"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjectuivARB) { obj->methodp_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)wglGetProcAddress("glGetQueryObjectuivARB"); }
		if(!obj->methodp_glGetQueryObjectuivARB) { obj->methodp_glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)GetProcAddress(modOpenGL32, "glGetQueryObjectuivARB"); }
		if(!obj->methodp_glGetQueryObjectuivARB) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjectuivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryObjectuivEXT) { obj->methodp_glGetQueryObjectuivEXT = (PFNGLGETQUERYOBJECTUIVEXTPROC)wglGetProcAddress("glGetQueryObjectuivEXT"); }
		if(!obj->methodp_glGetQueryObjectuivEXT) { obj->methodp_glGetQueryObjectuivEXT = (PFNGLGETQUERYOBJECTUIVEXTPROC)GetProcAddress(modOpenGL32, "glGetQueryObjectuivEXT"); }
		if(!obj->methodp_glGetQueryObjectuivEXT) { args.This()->Set(v8::String::NewSymbol("glGetQueryObjectuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryiv) { obj->methodp_glGetQueryiv = (PFNGLGETQUERYIVPROC)wglGetProcAddress("glGetQueryiv"); }
		if(!obj->methodp_glGetQueryiv) { obj->methodp_glGetQueryiv = (PFNGLGETQUERYIVPROC)GetProcAddress(modOpenGL32, "glGetQueryiv"); }
		if(!obj->methodp_glGetQueryiv) { args.This()->Set(v8::String::NewSymbol("glGetQueryiv"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryivARB) { obj->methodp_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)wglGetProcAddress("glGetQueryivARB"); }
		if(!obj->methodp_glGetQueryivARB) { obj->methodp_glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)GetProcAddress(modOpenGL32, "glGetQueryivARB"); }
		if(!obj->methodp_glGetQueryivARB) { args.This()->Set(v8::String::NewSymbol("glGetQueryivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetQueryivEXT) { obj->methodp_glGetQueryivEXT = (PFNGLGETQUERYIVEXTPROC)wglGetProcAddress("glGetQueryivEXT"); }
		if(!obj->methodp_glGetQueryivEXT) { obj->methodp_glGetQueryivEXT = (PFNGLGETQUERYIVEXTPROC)GetProcAddress(modOpenGL32, "glGetQueryivEXT"); }
		if(!obj->methodp_glGetQueryivEXT) { args.This()->Set(v8::String::NewSymbol("glGetQueryivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetRenderbufferParameteriv) { obj->methodp_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)wglGetProcAddress("glGetRenderbufferParameteriv"); }
		if(!obj->methodp_glGetRenderbufferParameteriv) { obj->methodp_glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetRenderbufferParameteriv"); }
		if(!obj->methodp_glGetRenderbufferParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetRenderbufferParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetRenderbufferParameterivEXT) { obj->methodp_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)wglGetProcAddress("glGetRenderbufferParameterivEXT"); }
		if(!obj->methodp_glGetRenderbufferParameterivEXT) { obj->methodp_glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetRenderbufferParameterivEXT"); }
		if(!obj->methodp_glGetRenderbufferParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetRenderbufferParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetRenderbufferParameterivOES) { obj->methodp_glGetRenderbufferParameterivOES = (PFNGLGETRENDERBUFFERPARAMETERIVOESPROC)wglGetProcAddress("glGetRenderbufferParameterivOES"); }
		if(!obj->methodp_glGetRenderbufferParameterivOES) { obj->methodp_glGetRenderbufferParameterivOES = (PFNGLGETRENDERBUFFERPARAMETERIVOESPROC)GetProcAddress(modOpenGL32, "glGetRenderbufferParameterivOES"); }
		if(!obj->methodp_glGetRenderbufferParameterivOES) { args.This()->Set(v8::String::NewSymbol("glGetRenderbufferParameterivOES"), v8::Undefined()); }
		if(!obj->methodp_glGetSamplerParameterIiv) { obj->methodp_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)wglGetProcAddress("glGetSamplerParameterIiv"); }
		if(!obj->methodp_glGetSamplerParameterIiv) { obj->methodp_glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)GetProcAddress(modOpenGL32, "glGetSamplerParameterIiv"); }
		if(!obj->methodp_glGetSamplerParameterIiv) { args.This()->Set(v8::String::NewSymbol("glGetSamplerParameterIiv"), v8::Undefined()); }
		if(!obj->methodp_glGetSamplerParameterIivEXT) { obj->methodp_glGetSamplerParameterIivEXT = (PFNGLGETSAMPLERPARAMETERIIVEXTPROC)wglGetProcAddress("glGetSamplerParameterIivEXT"); }
		if(!obj->methodp_glGetSamplerParameterIivEXT) { obj->methodp_glGetSamplerParameterIivEXT = (PFNGLGETSAMPLERPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glGetSamplerParameterIivEXT"); }
		if(!obj->methodp_glGetSamplerParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glGetSamplerParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetSamplerParameterIuiv) { obj->methodp_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)wglGetProcAddress("glGetSamplerParameterIuiv"); }
		if(!obj->methodp_glGetSamplerParameterIuiv) { obj->methodp_glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)GetProcAddress(modOpenGL32, "glGetSamplerParameterIuiv"); }
		if(!obj->methodp_glGetSamplerParameterIuiv) { args.This()->Set(v8::String::NewSymbol("glGetSamplerParameterIuiv"), v8::Undefined()); }
		if(!obj->methodp_glGetSamplerParameterIuivEXT) { obj->methodp_glGetSamplerParameterIuivEXT = (PFNGLGETSAMPLERPARAMETERIUIVEXTPROC)wglGetProcAddress("glGetSamplerParameterIuivEXT"); }
		if(!obj->methodp_glGetSamplerParameterIuivEXT) { obj->methodp_glGetSamplerParameterIuivEXT = (PFNGLGETSAMPLERPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glGetSamplerParameterIuivEXT"); }
		if(!obj->methodp_glGetSamplerParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glGetSamplerParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetSamplerParameterfv) { obj->methodp_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)wglGetProcAddress("glGetSamplerParameterfv"); }
		if(!obj->methodp_glGetSamplerParameterfv) { obj->methodp_glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glGetSamplerParameterfv"); }
		if(!obj->methodp_glGetSamplerParameterfv) { args.This()->Set(v8::String::NewSymbol("glGetSamplerParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glGetSamplerParameteriv) { obj->methodp_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)wglGetProcAddress("glGetSamplerParameteriv"); }
		if(!obj->methodp_glGetSamplerParameteriv) { obj->methodp_glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetSamplerParameteriv"); }
		if(!obj->methodp_glGetSamplerParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetSamplerParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetSeparableFilter) { obj->methodp_glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)wglGetProcAddress("glGetSeparableFilter"); }
		if(!obj->methodp_glGetSeparableFilter) { obj->methodp_glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)GetProcAddress(modOpenGL32, "glGetSeparableFilter"); }
		if(!obj->methodp_glGetSeparableFilter) { args.This()->Set(v8::String::NewSymbol("glGetSeparableFilter"), v8::Undefined()); }
		if(!obj->methodp_glGetSeparableFilterEXT) { obj->methodp_glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC)wglGetProcAddress("glGetSeparableFilterEXT"); }
		if(!obj->methodp_glGetSeparableFilterEXT) { obj->methodp_glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC)GetProcAddress(modOpenGL32, "glGetSeparableFilterEXT"); }
		if(!obj->methodp_glGetSeparableFilterEXT) { args.This()->Set(v8::String::NewSymbol("glGetSeparableFilterEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetShaderInfoLog) { obj->methodp_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)wglGetProcAddress("glGetShaderInfoLog"); }
		if(!obj->methodp_glGetShaderInfoLog) { obj->methodp_glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)GetProcAddress(modOpenGL32, "glGetShaderInfoLog"); }
		if(!obj->methodp_glGetShaderInfoLog) { args.This()->Set(v8::String::NewSymbol("glGetShaderInfoLog"), v8::Undefined()); }
		if(!obj->methodp_glGetShaderPrecisionFormat) { obj->methodp_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)wglGetProcAddress("glGetShaderPrecisionFormat"); }
		if(!obj->methodp_glGetShaderPrecisionFormat) { obj->methodp_glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)GetProcAddress(modOpenGL32, "glGetShaderPrecisionFormat"); }
		if(!obj->methodp_glGetShaderPrecisionFormat) { args.This()->Set(v8::String::NewSymbol("glGetShaderPrecisionFormat"), v8::Undefined()); }
		if(!obj->methodp_glGetShaderSource) { obj->methodp_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)wglGetProcAddress("glGetShaderSource"); }
		if(!obj->methodp_glGetShaderSource) { obj->methodp_glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)GetProcAddress(modOpenGL32, "glGetShaderSource"); }
		if(!obj->methodp_glGetShaderSource) { args.This()->Set(v8::String::NewSymbol("glGetShaderSource"), v8::Undefined()); }
		if(!obj->methodp_glGetShaderSourceARB) { obj->methodp_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)wglGetProcAddress("glGetShaderSourceARB"); }
		if(!obj->methodp_glGetShaderSourceARB) { obj->methodp_glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)GetProcAddress(modOpenGL32, "glGetShaderSourceARB"); }
		if(!obj->methodp_glGetShaderSourceARB) { args.This()->Set(v8::String::NewSymbol("glGetShaderSourceARB"), v8::Undefined()); }
		if(!obj->methodp_glGetShaderiv) { obj->methodp_glGetShaderiv = (PFNGLGETSHADERIVPROC)wglGetProcAddress("glGetShaderiv"); }
		if(!obj->methodp_glGetShaderiv) { obj->methodp_glGetShaderiv = (PFNGLGETSHADERIVPROC)GetProcAddress(modOpenGL32, "glGetShaderiv"); }
		if(!obj->methodp_glGetShaderiv) { args.This()->Set(v8::String::NewSymbol("glGetShaderiv"), v8::Undefined()); }
		if(!obj->methodp_glGetSharpenTexFuncSGIS) { obj->methodp_glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC)wglGetProcAddress("glGetSharpenTexFuncSGIS"); }
		if(!obj->methodp_glGetSharpenTexFuncSGIS) { obj->methodp_glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC)GetProcAddress(modOpenGL32, "glGetSharpenTexFuncSGIS"); }
		if(!obj->methodp_glGetSharpenTexFuncSGIS) { args.This()->Set(v8::String::NewSymbol("glGetSharpenTexFuncSGIS"), v8::Undefined()); }
		if(!obj->methodp_glGetString) { obj->methodp_glGetString = (PFNGLGETSTRINGPROC)wglGetProcAddress("glGetString"); }
		if(!obj->methodp_glGetString) { obj->methodp_glGetString = (PFNGLGETSTRINGPROC)GetProcAddress(modOpenGL32, "glGetString"); }
		if(!obj->methodp_glGetString) { args.This()->Set(v8::String::NewSymbol("glGetString"), v8::Undefined()); }
		if(!obj->methodp_glGetStringi) { obj->methodp_glGetStringi = (PFNGLGETSTRINGIPROC)wglGetProcAddress("glGetStringi"); }
		if(!obj->methodp_glGetStringi) { obj->methodp_glGetStringi = (PFNGLGETSTRINGIPROC)GetProcAddress(modOpenGL32, "glGetStringi"); }
		if(!obj->methodp_glGetStringi) { args.This()->Set(v8::String::NewSymbol("glGetStringi"), v8::Undefined()); }
		if(!obj->methodp_glGetSubroutineIndex) { obj->methodp_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)wglGetProcAddress("glGetSubroutineIndex"); }
		if(!obj->methodp_glGetSubroutineIndex) { obj->methodp_glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)GetProcAddress(modOpenGL32, "glGetSubroutineIndex"); }
		if(!obj->methodp_glGetSubroutineIndex) { args.This()->Set(v8::String::NewSymbol("glGetSubroutineIndex"), v8::Undefined()); }
		if(!obj->methodp_glGetSubroutineUniformLocation) { obj->methodp_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)wglGetProcAddress("glGetSubroutineUniformLocation"); }
		if(!obj->methodp_glGetSubroutineUniformLocation) { obj->methodp_glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)GetProcAddress(modOpenGL32, "glGetSubroutineUniformLocation"); }
		if(!obj->methodp_glGetSubroutineUniformLocation) { args.This()->Set(v8::String::NewSymbol("glGetSubroutineUniformLocation"), v8::Undefined()); }
		if(!obj->methodp_glGetSynciv) { obj->methodp_glGetSynciv = (PFNGLGETSYNCIVPROC)wglGetProcAddress("glGetSynciv"); }
		if(!obj->methodp_glGetSynciv) { obj->methodp_glGetSynciv = (PFNGLGETSYNCIVPROC)GetProcAddress(modOpenGL32, "glGetSynciv"); }
		if(!obj->methodp_glGetSynciv) { args.This()->Set(v8::String::NewSymbol("glGetSynciv"), v8::Undefined()); }
		if(!obj->methodp_glGetSyncivAPPLE) { obj->methodp_glGetSyncivAPPLE = (PFNGLGETSYNCIVAPPLEPROC)wglGetProcAddress("glGetSyncivAPPLE"); }
		if(!obj->methodp_glGetSyncivAPPLE) { obj->methodp_glGetSyncivAPPLE = (PFNGLGETSYNCIVAPPLEPROC)GetProcAddress(modOpenGL32, "glGetSyncivAPPLE"); }
		if(!obj->methodp_glGetSyncivAPPLE) { args.This()->Set(v8::String::NewSymbol("glGetSyncivAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glGetTexBumpParameterfvATI) { obj->methodp_glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)wglGetProcAddress("glGetTexBumpParameterfvATI"); }
		if(!obj->methodp_glGetTexBumpParameterfvATI) { obj->methodp_glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)GetProcAddress(modOpenGL32, "glGetTexBumpParameterfvATI"); }
		if(!obj->methodp_glGetTexBumpParameterfvATI) { args.This()->Set(v8::String::NewSymbol("glGetTexBumpParameterfvATI"), v8::Undefined()); }
		if(!obj->methodp_glGetTexBumpParameterivATI) { obj->methodp_glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)wglGetProcAddress("glGetTexBumpParameterivATI"); }
		if(!obj->methodp_glGetTexBumpParameterivATI) { obj->methodp_glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)GetProcAddress(modOpenGL32, "glGetTexBumpParameterivATI"); }
		if(!obj->methodp_glGetTexBumpParameterivATI) { args.This()->Set(v8::String::NewSymbol("glGetTexBumpParameterivATI"), v8::Undefined()); }
		if(!obj->methodp_glGetTexEnvfv) { obj->methodp_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC)wglGetProcAddress("glGetTexEnvfv"); }
		if(!obj->methodp_glGetTexEnvfv) { obj->methodp_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC)GetProcAddress(modOpenGL32, "glGetTexEnvfv"); }
		if(!obj->methodp_glGetTexEnvfv) { args.This()->Set(v8::String::NewSymbol("glGetTexEnvfv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexEnviv) { obj->methodp_glGetTexEnviv = (PFNGLGETTEXENVIVPROC)wglGetProcAddress("glGetTexEnviv"); }
		if(!obj->methodp_glGetTexEnviv) { obj->methodp_glGetTexEnviv = (PFNGLGETTEXENVIVPROC)GetProcAddress(modOpenGL32, "glGetTexEnviv"); }
		if(!obj->methodp_glGetTexEnviv) { args.This()->Set(v8::String::NewSymbol("glGetTexEnviv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexEnvxv) { obj->methodp_glGetTexEnvxv = (PFNGLGETTEXENVXVPROC)wglGetProcAddress("glGetTexEnvxv"); }
		if(!obj->methodp_glGetTexEnvxv) { obj->methodp_glGetTexEnvxv = (PFNGLGETTEXENVXVPROC)GetProcAddress(modOpenGL32, "glGetTexEnvxv"); }
		if(!obj->methodp_glGetTexEnvxv) { args.This()->Set(v8::String::NewSymbol("glGetTexEnvxv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexEnvxvOES) { obj->methodp_glGetTexEnvxvOES = (PFNGLGETTEXENVXVOESPROC)wglGetProcAddress("glGetTexEnvxvOES"); }
		if(!obj->methodp_glGetTexEnvxvOES) { obj->methodp_glGetTexEnvxvOES = (PFNGLGETTEXENVXVOESPROC)GetProcAddress(modOpenGL32, "glGetTexEnvxvOES"); }
		if(!obj->methodp_glGetTexEnvxvOES) { args.This()->Set(v8::String::NewSymbol("glGetTexEnvxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetTexFilterFuncSGIS) { obj->methodp_glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC)wglGetProcAddress("glGetTexFilterFuncSGIS"); }
		if(!obj->methodp_glGetTexFilterFuncSGIS) { obj->methodp_glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC)GetProcAddress(modOpenGL32, "glGetTexFilterFuncSGIS"); }
		if(!obj->methodp_glGetTexFilterFuncSGIS) { args.This()->Set(v8::String::NewSymbol("glGetTexFilterFuncSGIS"), v8::Undefined()); }
		if(!obj->methodp_glGetTexGendv) { obj->methodp_glGetTexGendv = (PFNGLGETTEXGENDVPROC)wglGetProcAddress("glGetTexGendv"); }
		if(!obj->methodp_glGetTexGendv) { obj->methodp_glGetTexGendv = (PFNGLGETTEXGENDVPROC)GetProcAddress(modOpenGL32, "glGetTexGendv"); }
		if(!obj->methodp_glGetTexGendv) { args.This()->Set(v8::String::NewSymbol("glGetTexGendv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexGenfv) { obj->methodp_glGetTexGenfv = (PFNGLGETTEXGENFVPROC)wglGetProcAddress("glGetTexGenfv"); }
		if(!obj->methodp_glGetTexGenfv) { obj->methodp_glGetTexGenfv = (PFNGLGETTEXGENFVPROC)GetProcAddress(modOpenGL32, "glGetTexGenfv"); }
		if(!obj->methodp_glGetTexGenfv) { args.This()->Set(v8::String::NewSymbol("glGetTexGenfv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexGenfvOES) { obj->methodp_glGetTexGenfvOES = (PFNGLGETTEXGENFVOESPROC)wglGetProcAddress("glGetTexGenfvOES"); }
		if(!obj->methodp_glGetTexGenfvOES) { obj->methodp_glGetTexGenfvOES = (PFNGLGETTEXGENFVOESPROC)GetProcAddress(modOpenGL32, "glGetTexGenfvOES"); }
		if(!obj->methodp_glGetTexGenfvOES) { args.This()->Set(v8::String::NewSymbol("glGetTexGenfvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetTexGeniv) { obj->methodp_glGetTexGeniv = (PFNGLGETTEXGENIVPROC)wglGetProcAddress("glGetTexGeniv"); }
		if(!obj->methodp_glGetTexGeniv) { obj->methodp_glGetTexGeniv = (PFNGLGETTEXGENIVPROC)GetProcAddress(modOpenGL32, "glGetTexGeniv"); }
		if(!obj->methodp_glGetTexGeniv) { args.This()->Set(v8::String::NewSymbol("glGetTexGeniv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexGenivOES) { obj->methodp_glGetTexGenivOES = (PFNGLGETTEXGENIVOESPROC)wglGetProcAddress("glGetTexGenivOES"); }
		if(!obj->methodp_glGetTexGenivOES) { obj->methodp_glGetTexGenivOES = (PFNGLGETTEXGENIVOESPROC)GetProcAddress(modOpenGL32, "glGetTexGenivOES"); }
		if(!obj->methodp_glGetTexGenivOES) { args.This()->Set(v8::String::NewSymbol("glGetTexGenivOES"), v8::Undefined()); }
		if(!obj->methodp_glGetTexGenxvOES) { obj->methodp_glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC)wglGetProcAddress("glGetTexGenxvOES"); }
		if(!obj->methodp_glGetTexGenxvOES) { obj->methodp_glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC)GetProcAddress(modOpenGL32, "glGetTexGenxvOES"); }
		if(!obj->methodp_glGetTexGenxvOES) { args.This()->Set(v8::String::NewSymbol("glGetTexGenxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetTexImage) { obj->methodp_glGetTexImage = (PFNGLGETTEXIMAGEPROC)wglGetProcAddress("glGetTexImage"); }
		if(!obj->methodp_glGetTexImage) { obj->methodp_glGetTexImage = (PFNGLGETTEXIMAGEPROC)GetProcAddress(modOpenGL32, "glGetTexImage"); }
		if(!obj->methodp_glGetTexImage) { args.This()->Set(v8::String::NewSymbol("glGetTexImage"), v8::Undefined()); }
		if(!obj->methodp_glGetTexLevelParameterfv) { obj->methodp_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)wglGetProcAddress("glGetTexLevelParameterfv"); }
		if(!obj->methodp_glGetTexLevelParameterfv) { obj->methodp_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glGetTexLevelParameterfv"); }
		if(!obj->methodp_glGetTexLevelParameterfv) { args.This()->Set(v8::String::NewSymbol("glGetTexLevelParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexLevelParameteriv) { obj->methodp_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)wglGetProcAddress("glGetTexLevelParameteriv"); }
		if(!obj->methodp_glGetTexLevelParameteriv) { obj->methodp_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetTexLevelParameteriv"); }
		if(!obj->methodp_glGetTexLevelParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetTexLevelParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexLevelParameterxvOES) { obj->methodp_glGetTexLevelParameterxvOES = (PFNGLGETTEXLEVELPARAMETERXVOESPROC)wglGetProcAddress("glGetTexLevelParameterxvOES"); }
		if(!obj->methodp_glGetTexLevelParameterxvOES) { obj->methodp_glGetTexLevelParameterxvOES = (PFNGLGETTEXLEVELPARAMETERXVOESPROC)GetProcAddress(modOpenGL32, "glGetTexLevelParameterxvOES"); }
		if(!obj->methodp_glGetTexLevelParameterxvOES) { args.This()->Set(v8::String::NewSymbol("glGetTexLevelParameterxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameterIiv) { obj->methodp_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)wglGetProcAddress("glGetTexParameterIiv"); }
		if(!obj->methodp_glGetTexParameterIiv) { obj->methodp_glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)GetProcAddress(modOpenGL32, "glGetTexParameterIiv"); }
		if(!obj->methodp_glGetTexParameterIiv) { args.This()->Set(v8::String::NewSymbol("glGetTexParameterIiv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameterIivEXT) { obj->methodp_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)wglGetProcAddress("glGetTexParameterIivEXT"); }
		if(!obj->methodp_glGetTexParameterIivEXT) { obj->methodp_glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glGetTexParameterIivEXT"); }
		if(!obj->methodp_glGetTexParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glGetTexParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameterIuiv) { obj->methodp_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)wglGetProcAddress("glGetTexParameterIuiv"); }
		if(!obj->methodp_glGetTexParameterIuiv) { obj->methodp_glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)GetProcAddress(modOpenGL32, "glGetTexParameterIuiv"); }
		if(!obj->methodp_glGetTexParameterIuiv) { args.This()->Set(v8::String::NewSymbol("glGetTexParameterIuiv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameterIuivEXT) { obj->methodp_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)wglGetProcAddress("glGetTexParameterIuivEXT"); }
		if(!obj->methodp_glGetTexParameterIuivEXT) { obj->methodp_glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glGetTexParameterIuivEXT"); }
		if(!obj->methodp_glGetTexParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glGetTexParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameterPointervAPPLE) { obj->methodp_glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)wglGetProcAddress("glGetTexParameterPointervAPPLE"); }
		if(!obj->methodp_glGetTexParameterPointervAPPLE) { obj->methodp_glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)GetProcAddress(modOpenGL32, "glGetTexParameterPointervAPPLE"); }
		if(!obj->methodp_glGetTexParameterPointervAPPLE) { args.This()->Set(v8::String::NewSymbol("glGetTexParameterPointervAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameterfv) { obj->methodp_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)wglGetProcAddress("glGetTexParameterfv"); }
		if(!obj->methodp_glGetTexParameterfv) { obj->methodp_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glGetTexParameterfv"); }
		if(!obj->methodp_glGetTexParameterfv) { args.This()->Set(v8::String::NewSymbol("glGetTexParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameteriv) { obj->methodp_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)wglGetProcAddress("glGetTexParameteriv"); }
		if(!obj->methodp_glGetTexParameteriv) { obj->methodp_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glGetTexParameteriv"); }
		if(!obj->methodp_glGetTexParameteriv) { args.This()->Set(v8::String::NewSymbol("glGetTexParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameterxv) { obj->methodp_glGetTexParameterxv = (PFNGLGETTEXPARAMETERXVPROC)wglGetProcAddress("glGetTexParameterxv"); }
		if(!obj->methodp_glGetTexParameterxv) { obj->methodp_glGetTexParameterxv = (PFNGLGETTEXPARAMETERXVPROC)GetProcAddress(modOpenGL32, "glGetTexParameterxv"); }
		if(!obj->methodp_glGetTexParameterxv) { args.This()->Set(v8::String::NewSymbol("glGetTexParameterxv"), v8::Undefined()); }
		if(!obj->methodp_glGetTexParameterxvOES) { obj->methodp_glGetTexParameterxvOES = (PFNGLGETTEXPARAMETERXVOESPROC)wglGetProcAddress("glGetTexParameterxvOES"); }
		if(!obj->methodp_glGetTexParameterxvOES) { obj->methodp_glGetTexParameterxvOES = (PFNGLGETTEXPARAMETERXVOESPROC)GetProcAddress(modOpenGL32, "glGetTexParameterxvOES"); }
		if(!obj->methodp_glGetTexParameterxvOES) { args.This()->Set(v8::String::NewSymbol("glGetTexParameterxvOES"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureHandleARB) { obj->methodp_glGetTextureHandleARB = (PFNGLGETTEXTUREHANDLEARBPROC)wglGetProcAddress("glGetTextureHandleARB"); }
		if(!obj->methodp_glGetTextureHandleARB) { obj->methodp_glGetTextureHandleARB = (PFNGLGETTEXTUREHANDLEARBPROC)GetProcAddress(modOpenGL32, "glGetTextureHandleARB"); }
		if(!obj->methodp_glGetTextureHandleARB) { args.This()->Set(v8::String::NewSymbol("glGetTextureHandleARB"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureHandleNV) { obj->methodp_glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC)wglGetProcAddress("glGetTextureHandleNV"); }
		if(!obj->methodp_glGetTextureHandleNV) { obj->methodp_glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC)GetProcAddress(modOpenGL32, "glGetTextureHandleNV"); }
		if(!obj->methodp_glGetTextureHandleNV) { args.This()->Set(v8::String::NewSymbol("glGetTextureHandleNV"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureImageEXT) { obj->methodp_glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC)wglGetProcAddress("glGetTextureImageEXT"); }
		if(!obj->methodp_glGetTextureImageEXT) { obj->methodp_glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC)GetProcAddress(modOpenGL32, "glGetTextureImageEXT"); }
		if(!obj->methodp_glGetTextureImageEXT) { args.This()->Set(v8::String::NewSymbol("glGetTextureImageEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureLevelParameterfvEXT) { obj->methodp_glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)wglGetProcAddress("glGetTextureLevelParameterfvEXT"); }
		if(!obj->methodp_glGetTextureLevelParameterfvEXT) { obj->methodp_glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetTextureLevelParameterfvEXT"); }
		if(!obj->methodp_glGetTextureLevelParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetTextureLevelParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureLevelParameterivEXT) { obj->methodp_glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)wglGetProcAddress("glGetTextureLevelParameterivEXT"); }
		if(!obj->methodp_glGetTextureLevelParameterivEXT) { obj->methodp_glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetTextureLevelParameterivEXT"); }
		if(!obj->methodp_glGetTextureLevelParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetTextureLevelParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureParameterIivEXT) { obj->methodp_glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC)wglGetProcAddress("glGetTextureParameterIivEXT"); }
		if(!obj->methodp_glGetTextureParameterIivEXT) { obj->methodp_glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glGetTextureParameterIivEXT"); }
		if(!obj->methodp_glGetTextureParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glGetTextureParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureParameterIuivEXT) { obj->methodp_glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)wglGetProcAddress("glGetTextureParameterIuivEXT"); }
		if(!obj->methodp_glGetTextureParameterIuivEXT) { obj->methodp_glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glGetTextureParameterIuivEXT"); }
		if(!obj->methodp_glGetTextureParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glGetTextureParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureParameterfvEXT) { obj->methodp_glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC)wglGetProcAddress("glGetTextureParameterfvEXT"); }
		if(!obj->methodp_glGetTextureParameterfvEXT) { obj->methodp_glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glGetTextureParameterfvEXT"); }
		if(!obj->methodp_glGetTextureParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetTextureParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureParameterivEXT) { obj->methodp_glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC)wglGetProcAddress("glGetTextureParameterivEXT"); }
		if(!obj->methodp_glGetTextureParameterivEXT) { obj->methodp_glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glGetTextureParameterivEXT"); }
		if(!obj->methodp_glGetTextureParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glGetTextureParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureSamplerHandleARB) { obj->methodp_glGetTextureSamplerHandleARB = (PFNGLGETTEXTURESAMPLERHANDLEARBPROC)wglGetProcAddress("glGetTextureSamplerHandleARB"); }
		if(!obj->methodp_glGetTextureSamplerHandleARB) { obj->methodp_glGetTextureSamplerHandleARB = (PFNGLGETTEXTURESAMPLERHANDLEARBPROC)GetProcAddress(modOpenGL32, "glGetTextureSamplerHandleARB"); }
		if(!obj->methodp_glGetTextureSamplerHandleARB) { args.This()->Set(v8::String::NewSymbol("glGetTextureSamplerHandleARB"), v8::Undefined()); }
		if(!obj->methodp_glGetTextureSamplerHandleNV) { obj->methodp_glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC)wglGetProcAddress("glGetTextureSamplerHandleNV"); }
		if(!obj->methodp_glGetTextureSamplerHandleNV) { obj->methodp_glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC)GetProcAddress(modOpenGL32, "glGetTextureSamplerHandleNV"); }
		if(!obj->methodp_glGetTextureSamplerHandleNV) { args.This()->Set(v8::String::NewSymbol("glGetTextureSamplerHandleNV"), v8::Undefined()); }
		if(!obj->methodp_glGetTrackMatrixivNV) { obj->methodp_glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)wglGetProcAddress("glGetTrackMatrixivNV"); }
		if(!obj->methodp_glGetTrackMatrixivNV) { obj->methodp_glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)GetProcAddress(modOpenGL32, "glGetTrackMatrixivNV"); }
		if(!obj->methodp_glGetTrackMatrixivNV) { args.This()->Set(v8::String::NewSymbol("glGetTrackMatrixivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetTransformFeedbackVarying) { obj->methodp_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)wglGetProcAddress("glGetTransformFeedbackVarying"); }
		if(!obj->methodp_glGetTransformFeedbackVarying) { obj->methodp_glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)GetProcAddress(modOpenGL32, "glGetTransformFeedbackVarying"); }
		if(!obj->methodp_glGetTransformFeedbackVarying) { args.This()->Set(v8::String::NewSymbol("glGetTransformFeedbackVarying"), v8::Undefined()); }
		if(!obj->methodp_glGetTransformFeedbackVaryingEXT) { obj->methodp_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)wglGetProcAddress("glGetTransformFeedbackVaryingEXT"); }
		if(!obj->methodp_glGetTransformFeedbackVaryingEXT) { obj->methodp_glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)GetProcAddress(modOpenGL32, "glGetTransformFeedbackVaryingEXT"); }
		if(!obj->methodp_glGetTransformFeedbackVaryingEXT) { args.This()->Set(v8::String::NewSymbol("glGetTransformFeedbackVaryingEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetTransformFeedbackVaryingNV) { obj->methodp_glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)wglGetProcAddress("glGetTransformFeedbackVaryingNV"); }
		if(!obj->methodp_glGetTransformFeedbackVaryingNV) { obj->methodp_glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)GetProcAddress(modOpenGL32, "glGetTransformFeedbackVaryingNV"); }
		if(!obj->methodp_glGetTransformFeedbackVaryingNV) { args.This()->Set(v8::String::NewSymbol("glGetTransformFeedbackVaryingNV"), v8::Undefined()); }
		if(!obj->methodp_glGetTranslatedShaderSourceANGLE) { obj->methodp_glGetTranslatedShaderSourceANGLE = (PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC)wglGetProcAddress("glGetTranslatedShaderSourceANGLE"); }
		if(!obj->methodp_glGetTranslatedShaderSourceANGLE) { obj->methodp_glGetTranslatedShaderSourceANGLE = (PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC)GetProcAddress(modOpenGL32, "glGetTranslatedShaderSourceANGLE"); }
		if(!obj->methodp_glGetTranslatedShaderSourceANGLE) { args.This()->Set(v8::String::NewSymbol("glGetTranslatedShaderSourceANGLE"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformBlockIndex) { obj->methodp_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)wglGetProcAddress("glGetUniformBlockIndex"); }
		if(!obj->methodp_glGetUniformBlockIndex) { obj->methodp_glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)GetProcAddress(modOpenGL32, "glGetUniformBlockIndex"); }
		if(!obj->methodp_glGetUniformBlockIndex) { args.This()->Set(v8::String::NewSymbol("glGetUniformBlockIndex"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformBufferSizeEXT) { obj->methodp_glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)wglGetProcAddress("glGetUniformBufferSizeEXT"); }
		if(!obj->methodp_glGetUniformBufferSizeEXT) { obj->methodp_glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)GetProcAddress(modOpenGL32, "glGetUniformBufferSizeEXT"); }
		if(!obj->methodp_glGetUniformBufferSizeEXT) { args.This()->Set(v8::String::NewSymbol("glGetUniformBufferSizeEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformIndices) { obj->methodp_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)wglGetProcAddress("glGetUniformIndices"); }
		if(!obj->methodp_glGetUniformIndices) { obj->methodp_glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)GetProcAddress(modOpenGL32, "glGetUniformIndices"); }
		if(!obj->methodp_glGetUniformIndices) { args.This()->Set(v8::String::NewSymbol("glGetUniformIndices"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformLocation) { obj->methodp_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)wglGetProcAddress("glGetUniformLocation"); }
		if(!obj->methodp_glGetUniformLocation) { obj->methodp_glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)GetProcAddress(modOpenGL32, "glGetUniformLocation"); }
		if(!obj->methodp_glGetUniformLocation) { args.This()->Set(v8::String::NewSymbol("glGetUniformLocation"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformLocationARB) { obj->methodp_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)wglGetProcAddress("glGetUniformLocationARB"); }
		if(!obj->methodp_glGetUniformLocationARB) { obj->methodp_glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)GetProcAddress(modOpenGL32, "glGetUniformLocationARB"); }
		if(!obj->methodp_glGetUniformLocationARB) { args.This()->Set(v8::String::NewSymbol("glGetUniformLocationARB"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformOffsetEXT) { obj->methodp_glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC)wglGetProcAddress("glGetUniformOffsetEXT"); }
		if(!obj->methodp_glGetUniformOffsetEXT) { obj->methodp_glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glGetUniformOffsetEXT"); }
		if(!obj->methodp_glGetUniformOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glGetUniformOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformSubroutineuiv) { obj->methodp_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)wglGetProcAddress("glGetUniformSubroutineuiv"); }
		if(!obj->methodp_glGetUniformSubroutineuiv) { obj->methodp_glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)GetProcAddress(modOpenGL32, "glGetUniformSubroutineuiv"); }
		if(!obj->methodp_glGetUniformSubroutineuiv) { args.This()->Set(v8::String::NewSymbol("glGetUniformSubroutineuiv"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformdv) { obj->methodp_glGetUniformdv = (PFNGLGETUNIFORMDVPROC)wglGetProcAddress("glGetUniformdv"); }
		if(!obj->methodp_glGetUniformdv) { obj->methodp_glGetUniformdv = (PFNGLGETUNIFORMDVPROC)GetProcAddress(modOpenGL32, "glGetUniformdv"); }
		if(!obj->methodp_glGetUniformdv) { args.This()->Set(v8::String::NewSymbol("glGetUniformdv"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformfv) { obj->methodp_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)wglGetProcAddress("glGetUniformfv"); }
		if(!obj->methodp_glGetUniformfv) { obj->methodp_glGetUniformfv = (PFNGLGETUNIFORMFVPROC)GetProcAddress(modOpenGL32, "glGetUniformfv"); }
		if(!obj->methodp_glGetUniformfv) { args.This()->Set(v8::String::NewSymbol("glGetUniformfv"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformfvARB) { obj->methodp_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)wglGetProcAddress("glGetUniformfvARB"); }
		if(!obj->methodp_glGetUniformfvARB) { obj->methodp_glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)GetProcAddress(modOpenGL32, "glGetUniformfvARB"); }
		if(!obj->methodp_glGetUniformfvARB) { args.This()->Set(v8::String::NewSymbol("glGetUniformfvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformi64vNV) { obj->methodp_glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC)wglGetProcAddress("glGetUniformi64vNV"); }
		if(!obj->methodp_glGetUniformi64vNV) { obj->methodp_glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC)GetProcAddress(modOpenGL32, "glGetUniformi64vNV"); }
		if(!obj->methodp_glGetUniformi64vNV) { args.This()->Set(v8::String::NewSymbol("glGetUniformi64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformiv) { obj->methodp_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)wglGetProcAddress("glGetUniformiv"); }
		if(!obj->methodp_glGetUniformiv) { obj->methodp_glGetUniformiv = (PFNGLGETUNIFORMIVPROC)GetProcAddress(modOpenGL32, "glGetUniformiv"); }
		if(!obj->methodp_glGetUniformiv) { args.This()->Set(v8::String::NewSymbol("glGetUniformiv"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformivARB) { obj->methodp_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)wglGetProcAddress("glGetUniformivARB"); }
		if(!obj->methodp_glGetUniformivARB) { obj->methodp_glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)GetProcAddress(modOpenGL32, "glGetUniformivARB"); }
		if(!obj->methodp_glGetUniformivARB) { args.This()->Set(v8::String::NewSymbol("glGetUniformivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformui64vNV) { obj->methodp_glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC)wglGetProcAddress("glGetUniformui64vNV"); }
		if(!obj->methodp_glGetUniformui64vNV) { obj->methodp_glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC)GetProcAddress(modOpenGL32, "glGetUniformui64vNV"); }
		if(!obj->methodp_glGetUniformui64vNV) { args.This()->Set(v8::String::NewSymbol("glGetUniformui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformuiv) { obj->methodp_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)wglGetProcAddress("glGetUniformuiv"); }
		if(!obj->methodp_glGetUniformuiv) { obj->methodp_glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)GetProcAddress(modOpenGL32, "glGetUniformuiv"); }
		if(!obj->methodp_glGetUniformuiv) { args.This()->Set(v8::String::NewSymbol("glGetUniformuiv"), v8::Undefined()); }
		if(!obj->methodp_glGetUniformuivEXT) { obj->methodp_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)wglGetProcAddress("glGetUniformuivEXT"); }
		if(!obj->methodp_glGetUniformuivEXT) { obj->methodp_glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)GetProcAddress(modOpenGL32, "glGetUniformuivEXT"); }
		if(!obj->methodp_glGetUniformuivEXT) { args.This()->Set(v8::String::NewSymbol("glGetUniformuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVariantArrayObjectfvATI) { obj->methodp_glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)wglGetProcAddress("glGetVariantArrayObjectfvATI"); }
		if(!obj->methodp_glGetVariantArrayObjectfvATI) { obj->methodp_glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)GetProcAddress(modOpenGL32, "glGetVariantArrayObjectfvATI"); }
		if(!obj->methodp_glGetVariantArrayObjectfvATI) { args.This()->Set(v8::String::NewSymbol("glGetVariantArrayObjectfvATI"), v8::Undefined()); }
		if(!obj->methodp_glGetVariantArrayObjectivATI) { obj->methodp_glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)wglGetProcAddress("glGetVariantArrayObjectivATI"); }
		if(!obj->methodp_glGetVariantArrayObjectivATI) { obj->methodp_glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)GetProcAddress(modOpenGL32, "glGetVariantArrayObjectivATI"); }
		if(!obj->methodp_glGetVariantArrayObjectivATI) { args.This()->Set(v8::String::NewSymbol("glGetVariantArrayObjectivATI"), v8::Undefined()); }
		if(!obj->methodp_glGetVariantBooleanvEXT) { obj->methodp_glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC)wglGetProcAddress("glGetVariantBooleanvEXT"); }
		if(!obj->methodp_glGetVariantBooleanvEXT) { obj->methodp_glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC)GetProcAddress(modOpenGL32, "glGetVariantBooleanvEXT"); }
		if(!obj->methodp_glGetVariantBooleanvEXT) { args.This()->Set(v8::String::NewSymbol("glGetVariantBooleanvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVariantFloatvEXT) { obj->methodp_glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC)wglGetProcAddress("glGetVariantFloatvEXT"); }
		if(!obj->methodp_glGetVariantFloatvEXT) { obj->methodp_glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC)GetProcAddress(modOpenGL32, "glGetVariantFloatvEXT"); }
		if(!obj->methodp_glGetVariantFloatvEXT) { args.This()->Set(v8::String::NewSymbol("glGetVariantFloatvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVariantIntegervEXT) { obj->methodp_glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC)wglGetProcAddress("glGetVariantIntegervEXT"); }
		if(!obj->methodp_glGetVariantIntegervEXT) { obj->methodp_glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC)GetProcAddress(modOpenGL32, "glGetVariantIntegervEXT"); }
		if(!obj->methodp_glGetVariantIntegervEXT) { args.This()->Set(v8::String::NewSymbol("glGetVariantIntegervEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVariantPointervEXT) { obj->methodp_glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC)wglGetProcAddress("glGetVariantPointervEXT"); }
		if(!obj->methodp_glGetVariantPointervEXT) { obj->methodp_glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC)GetProcAddress(modOpenGL32, "glGetVariantPointervEXT"); }
		if(!obj->methodp_glGetVariantPointervEXT) { args.This()->Set(v8::String::NewSymbol("glGetVariantPointervEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVaryingLocationNV) { obj->methodp_glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC)wglGetProcAddress("glGetVaryingLocationNV"); }
		if(!obj->methodp_glGetVaryingLocationNV) { obj->methodp_glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC)GetProcAddress(modOpenGL32, "glGetVaryingLocationNV"); }
		if(!obj->methodp_glGetVaryingLocationNV) { args.This()->Set(v8::String::NewSymbol("glGetVaryingLocationNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexArrayIntegeri_vEXT) { obj->methodp_glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)wglGetProcAddress("glGetVertexArrayIntegeri_vEXT"); }
		if(!obj->methodp_glGetVertexArrayIntegeri_vEXT) { obj->methodp_glGetVertexArrayIntegeri_vEXT = (PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC)GetProcAddress(modOpenGL32, "glGetVertexArrayIntegeri_vEXT"); }
		if(!obj->methodp_glGetVertexArrayIntegeri_vEXT) { args.This()->Set(v8::String::NewSymbol("glGetVertexArrayIntegeri_vEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexArrayIntegervEXT) { obj->methodp_glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC)wglGetProcAddress("glGetVertexArrayIntegervEXT"); }
		if(!obj->methodp_glGetVertexArrayIntegervEXT) { obj->methodp_glGetVertexArrayIntegervEXT = (PFNGLGETVERTEXARRAYINTEGERVEXTPROC)GetProcAddress(modOpenGL32, "glGetVertexArrayIntegervEXT"); }
		if(!obj->methodp_glGetVertexArrayIntegervEXT) { args.This()->Set(v8::String::NewSymbol("glGetVertexArrayIntegervEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexArrayPointeri_vEXT) { obj->methodp_glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)wglGetProcAddress("glGetVertexArrayPointeri_vEXT"); }
		if(!obj->methodp_glGetVertexArrayPointeri_vEXT) { obj->methodp_glGetVertexArrayPointeri_vEXT = (PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC)GetProcAddress(modOpenGL32, "glGetVertexArrayPointeri_vEXT"); }
		if(!obj->methodp_glGetVertexArrayPointeri_vEXT) { args.This()->Set(v8::String::NewSymbol("glGetVertexArrayPointeri_vEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexArrayPointervEXT) { obj->methodp_glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC)wglGetProcAddress("glGetVertexArrayPointervEXT"); }
		if(!obj->methodp_glGetVertexArrayPointervEXT) { obj->methodp_glGetVertexArrayPointervEXT = (PFNGLGETVERTEXARRAYPOINTERVEXTPROC)GetProcAddress(modOpenGL32, "glGetVertexArrayPointervEXT"); }
		if(!obj->methodp_glGetVertexArrayPointervEXT) { args.This()->Set(v8::String::NewSymbol("glGetVertexArrayPointervEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribArrayObjectfvATI) { obj->methodp_glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)wglGetProcAddress("glGetVertexAttribArrayObjectfvATI"); }
		if(!obj->methodp_glGetVertexAttribArrayObjectfvATI) { obj->methodp_glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribArrayObjectfvATI"); }
		if(!obj->methodp_glGetVertexAttribArrayObjectfvATI) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribArrayObjectfvATI"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribArrayObjectivATI) { obj->methodp_glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)wglGetProcAddress("glGetVertexAttribArrayObjectivATI"); }
		if(!obj->methodp_glGetVertexAttribArrayObjectivATI) { obj->methodp_glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribArrayObjectivATI"); }
		if(!obj->methodp_glGetVertexAttribArrayObjectivATI) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribArrayObjectivATI"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribIiv) { obj->methodp_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)wglGetProcAddress("glGetVertexAttribIiv"); }
		if(!obj->methodp_glGetVertexAttribIiv) { obj->methodp_glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribIiv"); }
		if(!obj->methodp_glGetVertexAttribIiv) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribIiv"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribIivEXT) { obj->methodp_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)wglGetProcAddress("glGetVertexAttribIivEXT"); }
		if(!obj->methodp_glGetVertexAttribIivEXT) { obj->methodp_glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribIivEXT"); }
		if(!obj->methodp_glGetVertexAttribIivEXT) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribIuiv) { obj->methodp_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)wglGetProcAddress("glGetVertexAttribIuiv"); }
		if(!obj->methodp_glGetVertexAttribIuiv) { obj->methodp_glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribIuiv"); }
		if(!obj->methodp_glGetVertexAttribIuiv) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribIuiv"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribIuivEXT) { obj->methodp_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)wglGetProcAddress("glGetVertexAttribIuivEXT"); }
		if(!obj->methodp_glGetVertexAttribIuivEXT) { obj->methodp_glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribIuivEXT"); }
		if(!obj->methodp_glGetVertexAttribIuivEXT) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribLdv) { obj->methodp_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)wglGetProcAddress("glGetVertexAttribLdv"); }
		if(!obj->methodp_glGetVertexAttribLdv) { obj->methodp_glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribLdv"); }
		if(!obj->methodp_glGetVertexAttribLdv) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribLdv"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribLdvEXT) { obj->methodp_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC)wglGetProcAddress("glGetVertexAttribLdvEXT"); }
		if(!obj->methodp_glGetVertexAttribLdvEXT) { obj->methodp_glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribLdvEXT"); }
		if(!obj->methodp_glGetVertexAttribLdvEXT) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribLdvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribLi64vNV) { obj->methodp_glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC)wglGetProcAddress("glGetVertexAttribLi64vNV"); }
		if(!obj->methodp_glGetVertexAttribLi64vNV) { obj->methodp_glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribLi64vNV"); }
		if(!obj->methodp_glGetVertexAttribLi64vNV) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribLi64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribLui64vARB) { obj->methodp_glGetVertexAttribLui64vARB = (PFNGLGETVERTEXATTRIBLUI64VARBPROC)wglGetProcAddress("glGetVertexAttribLui64vARB"); }
		if(!obj->methodp_glGetVertexAttribLui64vARB) { obj->methodp_glGetVertexAttribLui64vARB = (PFNGLGETVERTEXATTRIBLUI64VARBPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribLui64vARB"); }
		if(!obj->methodp_glGetVertexAttribLui64vARB) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribLui64vARB"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribLui64vNV) { obj->methodp_glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC)wglGetProcAddress("glGetVertexAttribLui64vNV"); }
		if(!obj->methodp_glGetVertexAttribLui64vNV) { obj->methodp_glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribLui64vNV"); }
		if(!obj->methodp_glGetVertexAttribLui64vNV) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribLui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribPointerv) { obj->methodp_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)wglGetProcAddress("glGetVertexAttribPointerv"); }
		if(!obj->methodp_glGetVertexAttribPointerv) { obj->methodp_glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribPointerv"); }
		if(!obj->methodp_glGetVertexAttribPointerv) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribPointerv"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribPointervARB) { obj->methodp_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)wglGetProcAddress("glGetVertexAttribPointervARB"); }
		if(!obj->methodp_glGetVertexAttribPointervARB) { obj->methodp_glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribPointervARB"); }
		if(!obj->methodp_glGetVertexAttribPointervARB) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribPointervARB"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribPointervNV) { obj->methodp_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)wglGetProcAddress("glGetVertexAttribPointervNV"); }
		if(!obj->methodp_glGetVertexAttribPointervNV) { obj->methodp_glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribPointervNV"); }
		if(!obj->methodp_glGetVertexAttribPointervNV) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribPointervNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribdv) { obj->methodp_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)wglGetProcAddress("glGetVertexAttribdv"); }
		if(!obj->methodp_glGetVertexAttribdv) { obj->methodp_glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribdv"); }
		if(!obj->methodp_glGetVertexAttribdv) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribdv"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribdvARB) { obj->methodp_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)wglGetProcAddress("glGetVertexAttribdvARB"); }
		if(!obj->methodp_glGetVertexAttribdvARB) { obj->methodp_glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribdvARB"); }
		if(!obj->methodp_glGetVertexAttribdvARB) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribdvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribdvNV) { obj->methodp_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)wglGetProcAddress("glGetVertexAttribdvNV"); }
		if(!obj->methodp_glGetVertexAttribdvNV) { obj->methodp_glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribdvNV"); }
		if(!obj->methodp_glGetVertexAttribdvNV) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribdvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribfv) { obj->methodp_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)wglGetProcAddress("glGetVertexAttribfv"); }
		if(!obj->methodp_glGetVertexAttribfv) { obj->methodp_glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribfv"); }
		if(!obj->methodp_glGetVertexAttribfv) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribfv"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribfvARB) { obj->methodp_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)wglGetProcAddress("glGetVertexAttribfvARB"); }
		if(!obj->methodp_glGetVertexAttribfvARB) { obj->methodp_glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribfvARB"); }
		if(!obj->methodp_glGetVertexAttribfvARB) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribfvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribfvNV) { obj->methodp_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)wglGetProcAddress("glGetVertexAttribfvNV"); }
		if(!obj->methodp_glGetVertexAttribfvNV) { obj->methodp_glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribfvNV"); }
		if(!obj->methodp_glGetVertexAttribfvNV) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribiv) { obj->methodp_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)wglGetProcAddress("glGetVertexAttribiv"); }
		if(!obj->methodp_glGetVertexAttribiv) { obj->methodp_glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribiv"); }
		if(!obj->methodp_glGetVertexAttribiv) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribiv"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribivARB) { obj->methodp_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)wglGetProcAddress("glGetVertexAttribivARB"); }
		if(!obj->methodp_glGetVertexAttribivARB) { obj->methodp_glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribivARB"); }
		if(!obj->methodp_glGetVertexAttribivARB) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetVertexAttribivNV) { obj->methodp_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)wglGetProcAddress("glGetVertexAttribivNV"); }
		if(!obj->methodp_glGetVertexAttribivNV) { obj->methodp_glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)GetProcAddress(modOpenGL32, "glGetVertexAttribivNV"); }
		if(!obj->methodp_glGetVertexAttribivNV) { args.This()->Set(v8::String::NewSymbol("glGetVertexAttribivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVideoCaptureStreamdvNV) { obj->methodp_glGetVideoCaptureStreamdvNV = (PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)wglGetProcAddress("glGetVideoCaptureStreamdvNV"); }
		if(!obj->methodp_glGetVideoCaptureStreamdvNV) { obj->methodp_glGetVideoCaptureStreamdvNV = (PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)GetProcAddress(modOpenGL32, "glGetVideoCaptureStreamdvNV"); }
		if(!obj->methodp_glGetVideoCaptureStreamdvNV) { args.This()->Set(v8::String::NewSymbol("glGetVideoCaptureStreamdvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVideoCaptureStreamfvNV) { obj->methodp_glGetVideoCaptureStreamfvNV = (PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)wglGetProcAddress("glGetVideoCaptureStreamfvNV"); }
		if(!obj->methodp_glGetVideoCaptureStreamfvNV) { obj->methodp_glGetVideoCaptureStreamfvNV = (PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)GetProcAddress(modOpenGL32, "glGetVideoCaptureStreamfvNV"); }
		if(!obj->methodp_glGetVideoCaptureStreamfvNV) { args.This()->Set(v8::String::NewSymbol("glGetVideoCaptureStreamfvNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVideoCaptureStreamivNV) { obj->methodp_glGetVideoCaptureStreamivNV = (PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)wglGetProcAddress("glGetVideoCaptureStreamivNV"); }
		if(!obj->methodp_glGetVideoCaptureStreamivNV) { obj->methodp_glGetVideoCaptureStreamivNV = (PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)GetProcAddress(modOpenGL32, "glGetVideoCaptureStreamivNV"); }
		if(!obj->methodp_glGetVideoCaptureStreamivNV) { args.This()->Set(v8::String::NewSymbol("glGetVideoCaptureStreamivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVideoCaptureivNV) { obj->methodp_glGetVideoCaptureivNV = (PFNGLGETVIDEOCAPTUREIVNVPROC)wglGetProcAddress("glGetVideoCaptureivNV"); }
		if(!obj->methodp_glGetVideoCaptureivNV) { obj->methodp_glGetVideoCaptureivNV = (PFNGLGETVIDEOCAPTUREIVNVPROC)GetProcAddress(modOpenGL32, "glGetVideoCaptureivNV"); }
		if(!obj->methodp_glGetVideoCaptureivNV) { args.This()->Set(v8::String::NewSymbol("glGetVideoCaptureivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVideoi64vNV) { obj->methodp_glGetVideoi64vNV = (PFNGLGETVIDEOI64VNVPROC)wglGetProcAddress("glGetVideoi64vNV"); }
		if(!obj->methodp_glGetVideoi64vNV) { obj->methodp_glGetVideoi64vNV = (PFNGLGETVIDEOI64VNVPROC)GetProcAddress(modOpenGL32, "glGetVideoi64vNV"); }
		if(!obj->methodp_glGetVideoi64vNV) { args.This()->Set(v8::String::NewSymbol("glGetVideoi64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVideoivNV) { obj->methodp_glGetVideoivNV = (PFNGLGETVIDEOIVNVPROC)wglGetProcAddress("glGetVideoivNV"); }
		if(!obj->methodp_glGetVideoivNV) { obj->methodp_glGetVideoivNV = (PFNGLGETVIDEOIVNVPROC)GetProcAddress(modOpenGL32, "glGetVideoivNV"); }
		if(!obj->methodp_glGetVideoivNV) { args.This()->Set(v8::String::NewSymbol("glGetVideoivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVideoui64vNV) { obj->methodp_glGetVideoui64vNV = (PFNGLGETVIDEOUI64VNVPROC)wglGetProcAddress("glGetVideoui64vNV"); }
		if(!obj->methodp_glGetVideoui64vNV) { obj->methodp_glGetVideoui64vNV = (PFNGLGETVIDEOUI64VNVPROC)GetProcAddress(modOpenGL32, "glGetVideoui64vNV"); }
		if(!obj->methodp_glGetVideoui64vNV) { args.This()->Set(v8::String::NewSymbol("glGetVideoui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glGetVideouivNV) { obj->methodp_glGetVideouivNV = (PFNGLGETVIDEOUIVNVPROC)wglGetProcAddress("glGetVideouivNV"); }
		if(!obj->methodp_glGetVideouivNV) { obj->methodp_glGetVideouivNV = (PFNGLGETVIDEOUIVNVPROC)GetProcAddress(modOpenGL32, "glGetVideouivNV"); }
		if(!obj->methodp_glGetVideouivNV) { args.This()->Set(v8::String::NewSymbol("glGetVideouivNV"), v8::Undefined()); }
		if(!obj->methodp_glGetnColorTableARB) { obj->methodp_glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC)wglGetProcAddress("glGetnColorTableARB"); }
		if(!obj->methodp_glGetnColorTableARB) { obj->methodp_glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC)GetProcAddress(modOpenGL32, "glGetnColorTableARB"); }
		if(!obj->methodp_glGetnColorTableARB) { args.This()->Set(v8::String::NewSymbol("glGetnColorTableARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnCompressedTexImageARB) { obj->methodp_glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)wglGetProcAddress("glGetnCompressedTexImageARB"); }
		if(!obj->methodp_glGetnCompressedTexImageARB) { obj->methodp_glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)GetProcAddress(modOpenGL32, "glGetnCompressedTexImageARB"); }
		if(!obj->methodp_glGetnCompressedTexImageARB) { args.This()->Set(v8::String::NewSymbol("glGetnCompressedTexImageARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnConvolutionFilterARB) { obj->methodp_glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC)wglGetProcAddress("glGetnConvolutionFilterARB"); }
		if(!obj->methodp_glGetnConvolutionFilterARB) { obj->methodp_glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC)GetProcAddress(modOpenGL32, "glGetnConvolutionFilterARB"); }
		if(!obj->methodp_glGetnConvolutionFilterARB) { args.This()->Set(v8::String::NewSymbol("glGetnConvolutionFilterARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnHistogramARB) { obj->methodp_glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC)wglGetProcAddress("glGetnHistogramARB"); }
		if(!obj->methodp_glGetnHistogramARB) { obj->methodp_glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC)GetProcAddress(modOpenGL32, "glGetnHistogramARB"); }
		if(!obj->methodp_glGetnHistogramARB) { args.This()->Set(v8::String::NewSymbol("glGetnHistogramARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnMapdvARB) { obj->methodp_glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC)wglGetProcAddress("glGetnMapdvARB"); }
		if(!obj->methodp_glGetnMapdvARB) { obj->methodp_glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC)GetProcAddress(modOpenGL32, "glGetnMapdvARB"); }
		if(!obj->methodp_glGetnMapdvARB) { args.This()->Set(v8::String::NewSymbol("glGetnMapdvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnMapfvARB) { obj->methodp_glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC)wglGetProcAddress("glGetnMapfvARB"); }
		if(!obj->methodp_glGetnMapfvARB) { obj->methodp_glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC)GetProcAddress(modOpenGL32, "glGetnMapfvARB"); }
		if(!obj->methodp_glGetnMapfvARB) { args.This()->Set(v8::String::NewSymbol("glGetnMapfvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnMapivARB) { obj->methodp_glGetnMapivARB = (PFNGLGETNMAPIVARBPROC)wglGetProcAddress("glGetnMapivARB"); }
		if(!obj->methodp_glGetnMapivARB) { obj->methodp_glGetnMapivARB = (PFNGLGETNMAPIVARBPROC)GetProcAddress(modOpenGL32, "glGetnMapivARB"); }
		if(!obj->methodp_glGetnMapivARB) { args.This()->Set(v8::String::NewSymbol("glGetnMapivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnMinmaxARB) { obj->methodp_glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC)wglGetProcAddress("glGetnMinmaxARB"); }
		if(!obj->methodp_glGetnMinmaxARB) { obj->methodp_glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC)GetProcAddress(modOpenGL32, "glGetnMinmaxARB"); }
		if(!obj->methodp_glGetnMinmaxARB) { args.This()->Set(v8::String::NewSymbol("glGetnMinmaxARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnPixelMapfvARB) { obj->methodp_glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC)wglGetProcAddress("glGetnPixelMapfvARB"); }
		if(!obj->methodp_glGetnPixelMapfvARB) { obj->methodp_glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC)GetProcAddress(modOpenGL32, "glGetnPixelMapfvARB"); }
		if(!obj->methodp_glGetnPixelMapfvARB) { args.This()->Set(v8::String::NewSymbol("glGetnPixelMapfvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnPixelMapuivARB) { obj->methodp_glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC)wglGetProcAddress("glGetnPixelMapuivARB"); }
		if(!obj->methodp_glGetnPixelMapuivARB) { obj->methodp_glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC)GetProcAddress(modOpenGL32, "glGetnPixelMapuivARB"); }
		if(!obj->methodp_glGetnPixelMapuivARB) { args.This()->Set(v8::String::NewSymbol("glGetnPixelMapuivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnPixelMapusvARB) { obj->methodp_glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC)wglGetProcAddress("glGetnPixelMapusvARB"); }
		if(!obj->methodp_glGetnPixelMapusvARB) { obj->methodp_glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC)GetProcAddress(modOpenGL32, "glGetnPixelMapusvARB"); }
		if(!obj->methodp_glGetnPixelMapusvARB) { args.This()->Set(v8::String::NewSymbol("glGetnPixelMapusvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnPolygonStippleARB) { obj->methodp_glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC)wglGetProcAddress("glGetnPolygonStippleARB"); }
		if(!obj->methodp_glGetnPolygonStippleARB) { obj->methodp_glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC)GetProcAddress(modOpenGL32, "glGetnPolygonStippleARB"); }
		if(!obj->methodp_glGetnPolygonStippleARB) { args.This()->Set(v8::String::NewSymbol("glGetnPolygonStippleARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnSeparableFilterARB) { obj->methodp_glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC)wglGetProcAddress("glGetnSeparableFilterARB"); }
		if(!obj->methodp_glGetnSeparableFilterARB) { obj->methodp_glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC)GetProcAddress(modOpenGL32, "glGetnSeparableFilterARB"); }
		if(!obj->methodp_glGetnSeparableFilterARB) { args.This()->Set(v8::String::NewSymbol("glGetnSeparableFilterARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnTexImageARB) { obj->methodp_glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC)wglGetProcAddress("glGetnTexImageARB"); }
		if(!obj->methodp_glGetnTexImageARB) { obj->methodp_glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC)GetProcAddress(modOpenGL32, "glGetnTexImageARB"); }
		if(!obj->methodp_glGetnTexImageARB) { args.This()->Set(v8::String::NewSymbol("glGetnTexImageARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnUniformdvARB) { obj->methodp_glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC)wglGetProcAddress("glGetnUniformdvARB"); }
		if(!obj->methodp_glGetnUniformdvARB) { obj->methodp_glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC)GetProcAddress(modOpenGL32, "glGetnUniformdvARB"); }
		if(!obj->methodp_glGetnUniformdvARB) { args.This()->Set(v8::String::NewSymbol("glGetnUniformdvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnUniformfvARB) { obj->methodp_glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC)wglGetProcAddress("glGetnUniformfvARB"); }
		if(!obj->methodp_glGetnUniformfvARB) { obj->methodp_glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC)GetProcAddress(modOpenGL32, "glGetnUniformfvARB"); }
		if(!obj->methodp_glGetnUniformfvARB) { args.This()->Set(v8::String::NewSymbol("glGetnUniformfvARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnUniformfvEXT) { obj->methodp_glGetnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC)wglGetProcAddress("glGetnUniformfvEXT"); }
		if(!obj->methodp_glGetnUniformfvEXT) { obj->methodp_glGetnUniformfvEXT = (PFNGLGETNUNIFORMFVEXTPROC)GetProcAddress(modOpenGL32, "glGetnUniformfvEXT"); }
		if(!obj->methodp_glGetnUniformfvEXT) { args.This()->Set(v8::String::NewSymbol("glGetnUniformfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetnUniformivARB) { obj->methodp_glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC)wglGetProcAddress("glGetnUniformivARB"); }
		if(!obj->methodp_glGetnUniformivARB) { obj->methodp_glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC)GetProcAddress(modOpenGL32, "glGetnUniformivARB"); }
		if(!obj->methodp_glGetnUniformivARB) { args.This()->Set(v8::String::NewSymbol("glGetnUniformivARB"), v8::Undefined()); }
		if(!obj->methodp_glGetnUniformivEXT) { obj->methodp_glGetnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC)wglGetProcAddress("glGetnUniformivEXT"); }
		if(!obj->methodp_glGetnUniformivEXT) { obj->methodp_glGetnUniformivEXT = (PFNGLGETNUNIFORMIVEXTPROC)GetProcAddress(modOpenGL32, "glGetnUniformivEXT"); }
		if(!obj->methodp_glGetnUniformivEXT) { args.This()->Set(v8::String::NewSymbol("glGetnUniformivEXT"), v8::Undefined()); }
		if(!obj->methodp_glGetnUniformuivARB) { obj->methodp_glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC)wglGetProcAddress("glGetnUniformuivARB"); }
		if(!obj->methodp_glGetnUniformuivARB) { obj->methodp_glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC)GetProcAddress(modOpenGL32, "glGetnUniformuivARB"); }
		if(!obj->methodp_glGetnUniformuivARB) { args.This()->Set(v8::String::NewSymbol("glGetnUniformuivARB"), v8::Undefined()); }
		if(!obj->methodp_glGlobalAlphaFactorbSUN) { obj->methodp_glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC)wglGetProcAddress("glGlobalAlphaFactorbSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorbSUN) { obj->methodp_glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC)GetProcAddress(modOpenGL32, "glGlobalAlphaFactorbSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorbSUN) { args.This()->Set(v8::String::NewSymbol("glGlobalAlphaFactorbSUN"), v8::Undefined()); }
		if(!obj->methodp_glGlobalAlphaFactordSUN) { obj->methodp_glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC)wglGetProcAddress("glGlobalAlphaFactordSUN"); }
		if(!obj->methodp_glGlobalAlphaFactordSUN) { obj->methodp_glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC)GetProcAddress(modOpenGL32, "glGlobalAlphaFactordSUN"); }
		if(!obj->methodp_glGlobalAlphaFactordSUN) { args.This()->Set(v8::String::NewSymbol("glGlobalAlphaFactordSUN"), v8::Undefined()); }
		if(!obj->methodp_glGlobalAlphaFactorfSUN) { obj->methodp_glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC)wglGetProcAddress("glGlobalAlphaFactorfSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorfSUN) { obj->methodp_glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC)GetProcAddress(modOpenGL32, "glGlobalAlphaFactorfSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorfSUN) { args.This()->Set(v8::String::NewSymbol("glGlobalAlphaFactorfSUN"), v8::Undefined()); }
		if(!obj->methodp_glGlobalAlphaFactoriSUN) { obj->methodp_glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC)wglGetProcAddress("glGlobalAlphaFactoriSUN"); }
		if(!obj->methodp_glGlobalAlphaFactoriSUN) { obj->methodp_glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC)GetProcAddress(modOpenGL32, "glGlobalAlphaFactoriSUN"); }
		if(!obj->methodp_glGlobalAlphaFactoriSUN) { args.This()->Set(v8::String::NewSymbol("glGlobalAlphaFactoriSUN"), v8::Undefined()); }
		if(!obj->methodp_glGlobalAlphaFactorsSUN) { obj->methodp_glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC)wglGetProcAddress("glGlobalAlphaFactorsSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorsSUN) { obj->methodp_glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC)GetProcAddress(modOpenGL32, "glGlobalAlphaFactorsSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorsSUN) { args.This()->Set(v8::String::NewSymbol("glGlobalAlphaFactorsSUN"), v8::Undefined()); }
		if(!obj->methodp_glGlobalAlphaFactorubSUN) { obj->methodp_glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC)wglGetProcAddress("glGlobalAlphaFactorubSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorubSUN) { obj->methodp_glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC)GetProcAddress(modOpenGL32, "glGlobalAlphaFactorubSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorubSUN) { args.This()->Set(v8::String::NewSymbol("glGlobalAlphaFactorubSUN"), v8::Undefined()); }
		if(!obj->methodp_glGlobalAlphaFactoruiSUN) { obj->methodp_glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC)wglGetProcAddress("glGlobalAlphaFactoruiSUN"); }
		if(!obj->methodp_glGlobalAlphaFactoruiSUN) { obj->methodp_glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC)GetProcAddress(modOpenGL32, "glGlobalAlphaFactoruiSUN"); }
		if(!obj->methodp_glGlobalAlphaFactoruiSUN) { args.This()->Set(v8::String::NewSymbol("glGlobalAlphaFactoruiSUN"), v8::Undefined()); }
		if(!obj->methodp_glGlobalAlphaFactorusSUN) { obj->methodp_glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC)wglGetProcAddress("glGlobalAlphaFactorusSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorusSUN) { obj->methodp_glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC)GetProcAddress(modOpenGL32, "glGlobalAlphaFactorusSUN"); }
		if(!obj->methodp_glGlobalAlphaFactorusSUN) { args.This()->Set(v8::String::NewSymbol("glGlobalAlphaFactorusSUN"), v8::Undefined()); }
		if(!obj->methodp_glHint) { obj->methodp_glHint = (PFNGLHINTPROC)wglGetProcAddress("glHint"); }
		if(!obj->methodp_glHint) { obj->methodp_glHint = (PFNGLHINTPROC)GetProcAddress(modOpenGL32, "glHint"); }
		if(!obj->methodp_glHint) { args.This()->Set(v8::String::NewSymbol("glHint"), v8::Undefined()); }
		if(!obj->methodp_glHintPGI) { obj->methodp_glHintPGI = (PFNGLHINTPGIPROC)wglGetProcAddress("glHintPGI"); }
		if(!obj->methodp_glHintPGI) { obj->methodp_glHintPGI = (PFNGLHINTPGIPROC)GetProcAddress(modOpenGL32, "glHintPGI"); }
		if(!obj->methodp_glHintPGI) { args.This()->Set(v8::String::NewSymbol("glHintPGI"), v8::Undefined()); }
		if(!obj->methodp_glHistogram) { obj->methodp_glHistogram = (PFNGLHISTOGRAMPROC)wglGetProcAddress("glHistogram"); }
		if(!obj->methodp_glHistogram) { obj->methodp_glHistogram = (PFNGLHISTOGRAMPROC)GetProcAddress(modOpenGL32, "glHistogram"); }
		if(!obj->methodp_glHistogram) { args.This()->Set(v8::String::NewSymbol("glHistogram"), v8::Undefined()); }
		if(!obj->methodp_glHistogramEXT) { obj->methodp_glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)wglGetProcAddress("glHistogramEXT"); }
		if(!obj->methodp_glHistogramEXT) { obj->methodp_glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)GetProcAddress(modOpenGL32, "glHistogramEXT"); }
		if(!obj->methodp_glHistogramEXT) { args.This()->Set(v8::String::NewSymbol("glHistogramEXT"), v8::Undefined()); }
		if(!obj->methodp_glIglooInterfaceSGIX) { obj->methodp_glIglooInterfaceSGIX = (PFNGLIGLOOINTERFACESGIXPROC)wglGetProcAddress("glIglooInterfaceSGIX"); }
		if(!obj->methodp_glIglooInterfaceSGIX) { obj->methodp_glIglooInterfaceSGIX = (PFNGLIGLOOINTERFACESGIXPROC)GetProcAddress(modOpenGL32, "glIglooInterfaceSGIX"); }
		if(!obj->methodp_glIglooInterfaceSGIX) { args.This()->Set(v8::String::NewSymbol("glIglooInterfaceSGIX"), v8::Undefined()); }
		if(!obj->methodp_glImageTransformParameterfHP) { obj->methodp_glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)wglGetProcAddress("glImageTransformParameterfHP"); }
		if(!obj->methodp_glImageTransformParameterfHP) { obj->methodp_glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)GetProcAddress(modOpenGL32, "glImageTransformParameterfHP"); }
		if(!obj->methodp_glImageTransformParameterfHP) { args.This()->Set(v8::String::NewSymbol("glImageTransformParameterfHP"), v8::Undefined()); }
		if(!obj->methodp_glImageTransformParameterfvHP) { obj->methodp_glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)wglGetProcAddress("glImageTransformParameterfvHP"); }
		if(!obj->methodp_glImageTransformParameterfvHP) { obj->methodp_glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)GetProcAddress(modOpenGL32, "glImageTransformParameterfvHP"); }
		if(!obj->methodp_glImageTransformParameterfvHP) { args.This()->Set(v8::String::NewSymbol("glImageTransformParameterfvHP"), v8::Undefined()); }
		if(!obj->methodp_glImageTransformParameteriHP) { obj->methodp_glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)wglGetProcAddress("glImageTransformParameteriHP"); }
		if(!obj->methodp_glImageTransformParameteriHP) { obj->methodp_glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)GetProcAddress(modOpenGL32, "glImageTransformParameteriHP"); }
		if(!obj->methodp_glImageTransformParameteriHP) { args.This()->Set(v8::String::NewSymbol("glImageTransformParameteriHP"), v8::Undefined()); }
		if(!obj->methodp_glImageTransformParameterivHP) { obj->methodp_glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)wglGetProcAddress("glImageTransformParameterivHP"); }
		if(!obj->methodp_glImageTransformParameterivHP) { obj->methodp_glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)GetProcAddress(modOpenGL32, "glImageTransformParameterivHP"); }
		if(!obj->methodp_glImageTransformParameterivHP) { args.This()->Set(v8::String::NewSymbol("glImageTransformParameterivHP"), v8::Undefined()); }
		if(!obj->methodp_glImportSyncEXT) { obj->methodp_glImportSyncEXT = (PFNGLIMPORTSYNCEXTPROC)wglGetProcAddress("glImportSyncEXT"); }
		if(!obj->methodp_glImportSyncEXT) { obj->methodp_glImportSyncEXT = (PFNGLIMPORTSYNCEXTPROC)GetProcAddress(modOpenGL32, "glImportSyncEXT"); }
		if(!obj->methodp_glImportSyncEXT) { args.This()->Set(v8::String::NewSymbol("glImportSyncEXT"), v8::Undefined()); }
		if(!obj->methodp_glIndexFormatNV) { obj->methodp_glIndexFormatNV = (PFNGLINDEXFORMATNVPROC)wglGetProcAddress("glIndexFormatNV"); }
		if(!obj->methodp_glIndexFormatNV) { obj->methodp_glIndexFormatNV = (PFNGLINDEXFORMATNVPROC)GetProcAddress(modOpenGL32, "glIndexFormatNV"); }
		if(!obj->methodp_glIndexFormatNV) { args.This()->Set(v8::String::NewSymbol("glIndexFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glIndexFuncEXT) { obj->methodp_glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC)wglGetProcAddress("glIndexFuncEXT"); }
		if(!obj->methodp_glIndexFuncEXT) { obj->methodp_glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC)GetProcAddress(modOpenGL32, "glIndexFuncEXT"); }
		if(!obj->methodp_glIndexFuncEXT) { args.This()->Set(v8::String::NewSymbol("glIndexFuncEXT"), v8::Undefined()); }
		if(!obj->methodp_glIndexMask) { obj->methodp_glIndexMask = (PFNGLINDEXMASKPROC)wglGetProcAddress("glIndexMask"); }
		if(!obj->methodp_glIndexMask) { obj->methodp_glIndexMask = (PFNGLINDEXMASKPROC)GetProcAddress(modOpenGL32, "glIndexMask"); }
		if(!obj->methodp_glIndexMask) { args.This()->Set(v8::String::NewSymbol("glIndexMask"), v8::Undefined()); }
		if(!obj->methodp_glIndexMaterialEXT) { obj->methodp_glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC)wglGetProcAddress("glIndexMaterialEXT"); }
		if(!obj->methodp_glIndexMaterialEXT) { obj->methodp_glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC)GetProcAddress(modOpenGL32, "glIndexMaterialEXT"); }
		if(!obj->methodp_glIndexMaterialEXT) { args.This()->Set(v8::String::NewSymbol("glIndexMaterialEXT"), v8::Undefined()); }
		if(!obj->methodp_glIndexPointer) { obj->methodp_glIndexPointer = (PFNGLINDEXPOINTERPROC)wglGetProcAddress("glIndexPointer"); }
		if(!obj->methodp_glIndexPointer) { obj->methodp_glIndexPointer = (PFNGLINDEXPOINTERPROC)GetProcAddress(modOpenGL32, "glIndexPointer"); }
		if(!obj->methodp_glIndexPointer) { args.This()->Set(v8::String::NewSymbol("glIndexPointer"), v8::Undefined()); }
		if(!obj->methodp_glIndexPointerEXT) { obj->methodp_glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)wglGetProcAddress("glIndexPointerEXT"); }
		if(!obj->methodp_glIndexPointerEXT) { obj->methodp_glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glIndexPointerEXT"); }
		if(!obj->methodp_glIndexPointerEXT) { args.This()->Set(v8::String::NewSymbol("glIndexPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glIndexPointerListIBM) { obj->methodp_glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC)wglGetProcAddress("glIndexPointerListIBM"); }
		if(!obj->methodp_glIndexPointerListIBM) { obj->methodp_glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC)GetProcAddress(modOpenGL32, "glIndexPointerListIBM"); }
		if(!obj->methodp_glIndexPointerListIBM) { args.This()->Set(v8::String::NewSymbol("glIndexPointerListIBM"), v8::Undefined()); }
		if(!obj->methodp_glIndexd) { obj->methodp_glIndexd = (PFNGLINDEXDPROC)wglGetProcAddress("glIndexd"); }
		if(!obj->methodp_glIndexd) { obj->methodp_glIndexd = (PFNGLINDEXDPROC)GetProcAddress(modOpenGL32, "glIndexd"); }
		if(!obj->methodp_glIndexd) { args.This()->Set(v8::String::NewSymbol("glIndexd"), v8::Undefined()); }
		if(!obj->methodp_glIndexdv) { obj->methodp_glIndexdv = (PFNGLINDEXDVPROC)wglGetProcAddress("glIndexdv"); }
		if(!obj->methodp_glIndexdv) { obj->methodp_glIndexdv = (PFNGLINDEXDVPROC)GetProcAddress(modOpenGL32, "glIndexdv"); }
		if(!obj->methodp_glIndexdv) { args.This()->Set(v8::String::NewSymbol("glIndexdv"), v8::Undefined()); }
		if(!obj->methodp_glIndexf) { obj->methodp_glIndexf = (PFNGLINDEXFPROC)wglGetProcAddress("glIndexf"); }
		if(!obj->methodp_glIndexf) { obj->methodp_glIndexf = (PFNGLINDEXFPROC)GetProcAddress(modOpenGL32, "glIndexf"); }
		if(!obj->methodp_glIndexf) { args.This()->Set(v8::String::NewSymbol("glIndexf"), v8::Undefined()); }
		if(!obj->methodp_glIndexfv) { obj->methodp_glIndexfv = (PFNGLINDEXFVPROC)wglGetProcAddress("glIndexfv"); }
		if(!obj->methodp_glIndexfv) { obj->methodp_glIndexfv = (PFNGLINDEXFVPROC)GetProcAddress(modOpenGL32, "glIndexfv"); }
		if(!obj->methodp_glIndexfv) { args.This()->Set(v8::String::NewSymbol("glIndexfv"), v8::Undefined()); }
		if(!obj->methodp_glIndexi) { obj->methodp_glIndexi = (PFNGLINDEXIPROC)wglGetProcAddress("glIndexi"); }
		if(!obj->methodp_glIndexi) { obj->methodp_glIndexi = (PFNGLINDEXIPROC)GetProcAddress(modOpenGL32, "glIndexi"); }
		if(!obj->methodp_glIndexi) { args.This()->Set(v8::String::NewSymbol("glIndexi"), v8::Undefined()); }
		if(!obj->methodp_glIndexiv) { obj->methodp_glIndexiv = (PFNGLINDEXIVPROC)wglGetProcAddress("glIndexiv"); }
		if(!obj->methodp_glIndexiv) { obj->methodp_glIndexiv = (PFNGLINDEXIVPROC)GetProcAddress(modOpenGL32, "glIndexiv"); }
		if(!obj->methodp_glIndexiv) { args.This()->Set(v8::String::NewSymbol("glIndexiv"), v8::Undefined()); }
		if(!obj->methodp_glIndexs) { obj->methodp_glIndexs = (PFNGLINDEXSPROC)wglGetProcAddress("glIndexs"); }
		if(!obj->methodp_glIndexs) { obj->methodp_glIndexs = (PFNGLINDEXSPROC)GetProcAddress(modOpenGL32, "glIndexs"); }
		if(!obj->methodp_glIndexs) { args.This()->Set(v8::String::NewSymbol("glIndexs"), v8::Undefined()); }
		if(!obj->methodp_glIndexsv) { obj->methodp_glIndexsv = (PFNGLINDEXSVPROC)wglGetProcAddress("glIndexsv"); }
		if(!obj->methodp_glIndexsv) { obj->methodp_glIndexsv = (PFNGLINDEXSVPROC)GetProcAddress(modOpenGL32, "glIndexsv"); }
		if(!obj->methodp_glIndexsv) { args.This()->Set(v8::String::NewSymbol("glIndexsv"), v8::Undefined()); }
		if(!obj->methodp_glIndexub) { obj->methodp_glIndexub = (PFNGLINDEXUBPROC)wglGetProcAddress("glIndexub"); }
		if(!obj->methodp_glIndexub) { obj->methodp_glIndexub = (PFNGLINDEXUBPROC)GetProcAddress(modOpenGL32, "glIndexub"); }
		if(!obj->methodp_glIndexub) { args.This()->Set(v8::String::NewSymbol("glIndexub"), v8::Undefined()); }
		if(!obj->methodp_glIndexubv) { obj->methodp_glIndexubv = (PFNGLINDEXUBVPROC)wglGetProcAddress("glIndexubv"); }
		if(!obj->methodp_glIndexubv) { obj->methodp_glIndexubv = (PFNGLINDEXUBVPROC)GetProcAddress(modOpenGL32, "glIndexubv"); }
		if(!obj->methodp_glIndexubv) { args.This()->Set(v8::String::NewSymbol("glIndexubv"), v8::Undefined()); }
		if(!obj->methodp_glIndexxOES) { obj->methodp_glIndexxOES = (PFNGLINDEXXOESPROC)wglGetProcAddress("glIndexxOES"); }
		if(!obj->methodp_glIndexxOES) { obj->methodp_glIndexxOES = (PFNGLINDEXXOESPROC)GetProcAddress(modOpenGL32, "glIndexxOES"); }
		if(!obj->methodp_glIndexxOES) { args.This()->Set(v8::String::NewSymbol("glIndexxOES"), v8::Undefined()); }
		if(!obj->methodp_glIndexxvOES) { obj->methodp_glIndexxvOES = (PFNGLINDEXXVOESPROC)wglGetProcAddress("glIndexxvOES"); }
		if(!obj->methodp_glIndexxvOES) { obj->methodp_glIndexxvOES = (PFNGLINDEXXVOESPROC)GetProcAddress(modOpenGL32, "glIndexxvOES"); }
		if(!obj->methodp_glIndexxvOES) { args.This()->Set(v8::String::NewSymbol("glIndexxvOES"), v8::Undefined()); }
		if(!obj->methodp_glInitNames) { obj->methodp_glInitNames = (PFNGLINITNAMESPROC)wglGetProcAddress("glInitNames"); }
		if(!obj->methodp_glInitNames) { obj->methodp_glInitNames = (PFNGLINITNAMESPROC)GetProcAddress(modOpenGL32, "glInitNames"); }
		if(!obj->methodp_glInitNames) { args.This()->Set(v8::String::NewSymbol("glInitNames"), v8::Undefined()); }
		if(!obj->methodp_glInsertComponentEXT) { obj->methodp_glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC)wglGetProcAddress("glInsertComponentEXT"); }
		if(!obj->methodp_glInsertComponentEXT) { obj->methodp_glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC)GetProcAddress(modOpenGL32, "glInsertComponentEXT"); }
		if(!obj->methodp_glInsertComponentEXT) { args.This()->Set(v8::String::NewSymbol("glInsertComponentEXT"), v8::Undefined()); }
		if(!obj->methodp_glInsertEventMarkerEXT) { obj->methodp_glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC)wglGetProcAddress("glInsertEventMarkerEXT"); }
		if(!obj->methodp_glInsertEventMarkerEXT) { obj->methodp_glInsertEventMarkerEXT = (PFNGLINSERTEVENTMARKEREXTPROC)GetProcAddress(modOpenGL32, "glInsertEventMarkerEXT"); }
		if(!obj->methodp_glInsertEventMarkerEXT) { args.This()->Set(v8::String::NewSymbol("glInsertEventMarkerEXT"), v8::Undefined()); }
		if(!obj->methodp_glInstrumentsBufferSGIX) { obj->methodp_glInstrumentsBufferSGIX = (PFNGLINSTRUMENTSBUFFERSGIXPROC)wglGetProcAddress("glInstrumentsBufferSGIX"); }
		if(!obj->methodp_glInstrumentsBufferSGIX) { obj->methodp_glInstrumentsBufferSGIX = (PFNGLINSTRUMENTSBUFFERSGIXPROC)GetProcAddress(modOpenGL32, "glInstrumentsBufferSGIX"); }
		if(!obj->methodp_glInstrumentsBufferSGIX) { args.This()->Set(v8::String::NewSymbol("glInstrumentsBufferSGIX"), v8::Undefined()); }
		if(!obj->methodp_glInterleavedArrays) { obj->methodp_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC)wglGetProcAddress("glInterleavedArrays"); }
		if(!obj->methodp_glInterleavedArrays) { obj->methodp_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC)GetProcAddress(modOpenGL32, "glInterleavedArrays"); }
		if(!obj->methodp_glInterleavedArrays) { args.This()->Set(v8::String::NewSymbol("glInterleavedArrays"), v8::Undefined()); }
		if(!obj->methodp_glInterpolatePathsNV) { obj->methodp_glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC)wglGetProcAddress("glInterpolatePathsNV"); }
		if(!obj->methodp_glInterpolatePathsNV) { obj->methodp_glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC)GetProcAddress(modOpenGL32, "glInterpolatePathsNV"); }
		if(!obj->methodp_glInterpolatePathsNV) { args.This()->Set(v8::String::NewSymbol("glInterpolatePathsNV"), v8::Undefined()); }
		if(!obj->methodp_glInvalidateBufferData) { obj->methodp_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)wglGetProcAddress("glInvalidateBufferData"); }
		if(!obj->methodp_glInvalidateBufferData) { obj->methodp_glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)GetProcAddress(modOpenGL32, "glInvalidateBufferData"); }
		if(!obj->methodp_glInvalidateBufferData) { args.This()->Set(v8::String::NewSymbol("glInvalidateBufferData"), v8::Undefined()); }
		if(!obj->methodp_glInvalidateBufferSubData) { obj->methodp_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)wglGetProcAddress("glInvalidateBufferSubData"); }
		if(!obj->methodp_glInvalidateBufferSubData) { obj->methodp_glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)GetProcAddress(modOpenGL32, "glInvalidateBufferSubData"); }
		if(!obj->methodp_glInvalidateBufferSubData) { args.This()->Set(v8::String::NewSymbol("glInvalidateBufferSubData"), v8::Undefined()); }
		if(!obj->methodp_glInvalidateFramebuffer) { obj->methodp_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)wglGetProcAddress("glInvalidateFramebuffer"); }
		if(!obj->methodp_glInvalidateFramebuffer) { obj->methodp_glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)GetProcAddress(modOpenGL32, "glInvalidateFramebuffer"); }
		if(!obj->methodp_glInvalidateFramebuffer) { args.This()->Set(v8::String::NewSymbol("glInvalidateFramebuffer"), v8::Undefined()); }
		if(!obj->methodp_glInvalidateSubFramebuffer) { obj->methodp_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)wglGetProcAddress("glInvalidateSubFramebuffer"); }
		if(!obj->methodp_glInvalidateSubFramebuffer) { obj->methodp_glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)GetProcAddress(modOpenGL32, "glInvalidateSubFramebuffer"); }
		if(!obj->methodp_glInvalidateSubFramebuffer) { args.This()->Set(v8::String::NewSymbol("glInvalidateSubFramebuffer"), v8::Undefined()); }
		if(!obj->methodp_glInvalidateTexImage) { obj->methodp_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)wglGetProcAddress("glInvalidateTexImage"); }
		if(!obj->methodp_glInvalidateTexImage) { obj->methodp_glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)GetProcAddress(modOpenGL32, "glInvalidateTexImage"); }
		if(!obj->methodp_glInvalidateTexImage) { args.This()->Set(v8::String::NewSymbol("glInvalidateTexImage"), v8::Undefined()); }
		if(!obj->methodp_glInvalidateTexSubImage) { obj->methodp_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)wglGetProcAddress("glInvalidateTexSubImage"); }
		if(!obj->methodp_glInvalidateTexSubImage) { obj->methodp_glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)GetProcAddress(modOpenGL32, "glInvalidateTexSubImage"); }
		if(!obj->methodp_glInvalidateTexSubImage) { args.This()->Set(v8::String::NewSymbol("glInvalidateTexSubImage"), v8::Undefined()); }
		if(!obj->methodp_glIsAsyncMarkerSGIX) { obj->methodp_glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC)wglGetProcAddress("glIsAsyncMarkerSGIX"); }
		if(!obj->methodp_glIsAsyncMarkerSGIX) { obj->methodp_glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC)GetProcAddress(modOpenGL32, "glIsAsyncMarkerSGIX"); }
		if(!obj->methodp_glIsAsyncMarkerSGIX) { args.This()->Set(v8::String::NewSymbol("glIsAsyncMarkerSGIX"), v8::Undefined()); }
		if(!obj->methodp_glIsBuffer) { obj->methodp_glIsBuffer = (PFNGLISBUFFERPROC)wglGetProcAddress("glIsBuffer"); }
		if(!obj->methodp_glIsBuffer) { obj->methodp_glIsBuffer = (PFNGLISBUFFERPROC)GetProcAddress(modOpenGL32, "glIsBuffer"); }
		if(!obj->methodp_glIsBuffer) { args.This()->Set(v8::String::NewSymbol("glIsBuffer"), v8::Undefined()); }
		if(!obj->methodp_glIsBufferARB) { obj->methodp_glIsBufferARB = (PFNGLISBUFFERARBPROC)wglGetProcAddress("glIsBufferARB"); }
		if(!obj->methodp_glIsBufferARB) { obj->methodp_glIsBufferARB = (PFNGLISBUFFERARBPROC)GetProcAddress(modOpenGL32, "glIsBufferARB"); }
		if(!obj->methodp_glIsBufferARB) { args.This()->Set(v8::String::NewSymbol("glIsBufferARB"), v8::Undefined()); }
		if(!obj->methodp_glIsBufferResidentNV) { obj->methodp_glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC)wglGetProcAddress("glIsBufferResidentNV"); }
		if(!obj->methodp_glIsBufferResidentNV) { obj->methodp_glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glIsBufferResidentNV"); }
		if(!obj->methodp_glIsBufferResidentNV) { args.This()->Set(v8::String::NewSymbol("glIsBufferResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glIsEnabled) { obj->methodp_glIsEnabled = (PFNGLISENABLEDPROC)wglGetProcAddress("glIsEnabled"); }
		if(!obj->methodp_glIsEnabled) { obj->methodp_glIsEnabled = (PFNGLISENABLEDPROC)GetProcAddress(modOpenGL32, "glIsEnabled"); }
		if(!obj->methodp_glIsEnabled) { args.This()->Set(v8::String::NewSymbol("glIsEnabled"), v8::Undefined()); }
		if(!obj->methodp_glIsEnabledIndexedEXT) { obj->methodp_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)wglGetProcAddress("glIsEnabledIndexedEXT"); }
		if(!obj->methodp_glIsEnabledIndexedEXT) { obj->methodp_glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)GetProcAddress(modOpenGL32, "glIsEnabledIndexedEXT"); }
		if(!obj->methodp_glIsEnabledIndexedEXT) { args.This()->Set(v8::String::NewSymbol("glIsEnabledIndexedEXT"), v8::Undefined()); }
		if(!obj->methodp_glIsEnabledi) { obj->methodp_glIsEnabledi = (PFNGLISENABLEDIPROC)wglGetProcAddress("glIsEnabledi"); }
		if(!obj->methodp_glIsEnabledi) { obj->methodp_glIsEnabledi = (PFNGLISENABLEDIPROC)GetProcAddress(modOpenGL32, "glIsEnabledi"); }
		if(!obj->methodp_glIsEnabledi) { args.This()->Set(v8::String::NewSymbol("glIsEnabledi"), v8::Undefined()); }
		if(!obj->methodp_glIsEnablediEXT) { obj->methodp_glIsEnablediEXT = (PFNGLISENABLEDIEXTPROC)wglGetProcAddress("glIsEnablediEXT"); }
		if(!obj->methodp_glIsEnablediEXT) { obj->methodp_glIsEnablediEXT = (PFNGLISENABLEDIEXTPROC)GetProcAddress(modOpenGL32, "glIsEnablediEXT"); }
		if(!obj->methodp_glIsEnablediEXT) { args.This()->Set(v8::String::NewSymbol("glIsEnablediEXT"), v8::Undefined()); }
		if(!obj->methodp_glIsFenceAPPLE) { obj->methodp_glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC)wglGetProcAddress("glIsFenceAPPLE"); }
		if(!obj->methodp_glIsFenceAPPLE) { obj->methodp_glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC)GetProcAddress(modOpenGL32, "glIsFenceAPPLE"); }
		if(!obj->methodp_glIsFenceAPPLE) { args.This()->Set(v8::String::NewSymbol("glIsFenceAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glIsFenceNV) { obj->methodp_glIsFenceNV = (PFNGLISFENCENVPROC)wglGetProcAddress("glIsFenceNV"); }
		if(!obj->methodp_glIsFenceNV) { obj->methodp_glIsFenceNV = (PFNGLISFENCENVPROC)GetProcAddress(modOpenGL32, "glIsFenceNV"); }
		if(!obj->methodp_glIsFenceNV) { args.This()->Set(v8::String::NewSymbol("glIsFenceNV"), v8::Undefined()); }
		if(!obj->methodp_glIsFramebuffer) { obj->methodp_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)wglGetProcAddress("glIsFramebuffer"); }
		if(!obj->methodp_glIsFramebuffer) { obj->methodp_glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)GetProcAddress(modOpenGL32, "glIsFramebuffer"); }
		if(!obj->methodp_glIsFramebuffer) { args.This()->Set(v8::String::NewSymbol("glIsFramebuffer"), v8::Undefined()); }
		if(!obj->methodp_glIsFramebufferEXT) { obj->methodp_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)wglGetProcAddress("glIsFramebufferEXT"); }
		if(!obj->methodp_glIsFramebufferEXT) { obj->methodp_glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glIsFramebufferEXT"); }
		if(!obj->methodp_glIsFramebufferEXT) { args.This()->Set(v8::String::NewSymbol("glIsFramebufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glIsFramebufferOES) { obj->methodp_glIsFramebufferOES = (PFNGLISFRAMEBUFFEROESPROC)wglGetProcAddress("glIsFramebufferOES"); }
		if(!obj->methodp_glIsFramebufferOES) { obj->methodp_glIsFramebufferOES = (PFNGLISFRAMEBUFFEROESPROC)GetProcAddress(modOpenGL32, "glIsFramebufferOES"); }
		if(!obj->methodp_glIsFramebufferOES) { args.This()->Set(v8::String::NewSymbol("glIsFramebufferOES"), v8::Undefined()); }
		if(!obj->methodp_glIsImageHandleResidentARB) { obj->methodp_glIsImageHandleResidentARB = (PFNGLISIMAGEHANDLERESIDENTARBPROC)wglGetProcAddress("glIsImageHandleResidentARB"); }
		if(!obj->methodp_glIsImageHandleResidentARB) { obj->methodp_glIsImageHandleResidentARB = (PFNGLISIMAGEHANDLERESIDENTARBPROC)GetProcAddress(modOpenGL32, "glIsImageHandleResidentARB"); }
		if(!obj->methodp_glIsImageHandleResidentARB) { args.This()->Set(v8::String::NewSymbol("glIsImageHandleResidentARB"), v8::Undefined()); }
		if(!obj->methodp_glIsImageHandleResidentNV) { obj->methodp_glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC)wglGetProcAddress("glIsImageHandleResidentNV"); }
		if(!obj->methodp_glIsImageHandleResidentNV) { obj->methodp_glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC)GetProcAddress(modOpenGL32, "glIsImageHandleResidentNV"); }
		if(!obj->methodp_glIsImageHandleResidentNV) { args.This()->Set(v8::String::NewSymbol("glIsImageHandleResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glIsList) { obj->methodp_glIsList = (PFNGLISLISTPROC)wglGetProcAddress("glIsList"); }
		if(!obj->methodp_glIsList) { obj->methodp_glIsList = (PFNGLISLISTPROC)GetProcAddress(modOpenGL32, "glIsList"); }
		if(!obj->methodp_glIsList) { args.This()->Set(v8::String::NewSymbol("glIsList"), v8::Undefined()); }
		if(!obj->methodp_glIsNameAMD) { obj->methodp_glIsNameAMD = (PFNGLISNAMEAMDPROC)wglGetProcAddress("glIsNameAMD"); }
		if(!obj->methodp_glIsNameAMD) { obj->methodp_glIsNameAMD = (PFNGLISNAMEAMDPROC)GetProcAddress(modOpenGL32, "glIsNameAMD"); }
		if(!obj->methodp_glIsNameAMD) { args.This()->Set(v8::String::NewSymbol("glIsNameAMD"), v8::Undefined()); }
		if(!obj->methodp_glIsNamedBufferResidentNV) { obj->methodp_glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC)wglGetProcAddress("glIsNamedBufferResidentNV"); }
		if(!obj->methodp_glIsNamedBufferResidentNV) { obj->methodp_glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glIsNamedBufferResidentNV"); }
		if(!obj->methodp_glIsNamedBufferResidentNV) { args.This()->Set(v8::String::NewSymbol("glIsNamedBufferResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glIsNamedStringARB) { obj->methodp_glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC)wglGetProcAddress("glIsNamedStringARB"); }
		if(!obj->methodp_glIsNamedStringARB) { obj->methodp_glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC)GetProcAddress(modOpenGL32, "glIsNamedStringARB"); }
		if(!obj->methodp_glIsNamedStringARB) { args.This()->Set(v8::String::NewSymbol("glIsNamedStringARB"), v8::Undefined()); }
		if(!obj->methodp_glIsObjectBufferATI) { obj->methodp_glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC)wglGetProcAddress("glIsObjectBufferATI"); }
		if(!obj->methodp_glIsObjectBufferATI) { obj->methodp_glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC)GetProcAddress(modOpenGL32, "glIsObjectBufferATI"); }
		if(!obj->methodp_glIsObjectBufferATI) { args.This()->Set(v8::String::NewSymbol("glIsObjectBufferATI"), v8::Undefined()); }
		if(!obj->methodp_glIsOcclusionQueryNV) { obj->methodp_glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC)wglGetProcAddress("glIsOcclusionQueryNV"); }
		if(!obj->methodp_glIsOcclusionQueryNV) { obj->methodp_glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC)GetProcAddress(modOpenGL32, "glIsOcclusionQueryNV"); }
		if(!obj->methodp_glIsOcclusionQueryNV) { args.This()->Set(v8::String::NewSymbol("glIsOcclusionQueryNV"), v8::Undefined()); }
		if(!obj->methodp_glIsPathNV) { obj->methodp_glIsPathNV = (PFNGLISPATHNVPROC)wglGetProcAddress("glIsPathNV"); }
		if(!obj->methodp_glIsPathNV) { obj->methodp_glIsPathNV = (PFNGLISPATHNVPROC)GetProcAddress(modOpenGL32, "glIsPathNV"); }
		if(!obj->methodp_glIsPathNV) { args.This()->Set(v8::String::NewSymbol("glIsPathNV"), v8::Undefined()); }
		if(!obj->methodp_glIsPointInFillPathNV) { obj->methodp_glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC)wglGetProcAddress("glIsPointInFillPathNV"); }
		if(!obj->methodp_glIsPointInFillPathNV) { obj->methodp_glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC)GetProcAddress(modOpenGL32, "glIsPointInFillPathNV"); }
		if(!obj->methodp_glIsPointInFillPathNV) { args.This()->Set(v8::String::NewSymbol("glIsPointInFillPathNV"), v8::Undefined()); }
		if(!obj->methodp_glIsPointInStrokePathNV) { obj->methodp_glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC)wglGetProcAddress("glIsPointInStrokePathNV"); }
		if(!obj->methodp_glIsPointInStrokePathNV) { obj->methodp_glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC)GetProcAddress(modOpenGL32, "glIsPointInStrokePathNV"); }
		if(!obj->methodp_glIsPointInStrokePathNV) { args.This()->Set(v8::String::NewSymbol("glIsPointInStrokePathNV"), v8::Undefined()); }
		if(!obj->methodp_glIsProgram) { obj->methodp_glIsProgram = (PFNGLISPROGRAMPROC)wglGetProcAddress("glIsProgram"); }
		if(!obj->methodp_glIsProgram) { obj->methodp_glIsProgram = (PFNGLISPROGRAMPROC)GetProcAddress(modOpenGL32, "glIsProgram"); }
		if(!obj->methodp_glIsProgram) { args.This()->Set(v8::String::NewSymbol("glIsProgram"), v8::Undefined()); }
		if(!obj->methodp_glIsProgramARB) { obj->methodp_glIsProgramARB = (PFNGLISPROGRAMARBPROC)wglGetProcAddress("glIsProgramARB"); }
		if(!obj->methodp_glIsProgramARB) { obj->methodp_glIsProgramARB = (PFNGLISPROGRAMARBPROC)GetProcAddress(modOpenGL32, "glIsProgramARB"); }
		if(!obj->methodp_glIsProgramARB) { args.This()->Set(v8::String::NewSymbol("glIsProgramARB"), v8::Undefined()); }
		if(!obj->methodp_glIsProgramNV) { obj->methodp_glIsProgramNV = (PFNGLISPROGRAMNVPROC)wglGetProcAddress("glIsProgramNV"); }
		if(!obj->methodp_glIsProgramNV) { obj->methodp_glIsProgramNV = (PFNGLISPROGRAMNVPROC)GetProcAddress(modOpenGL32, "glIsProgramNV"); }
		if(!obj->methodp_glIsProgramNV) { args.This()->Set(v8::String::NewSymbol("glIsProgramNV"), v8::Undefined()); }
		if(!obj->methodp_glIsProgramPipeline) { obj->methodp_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)wglGetProcAddress("glIsProgramPipeline"); }
		if(!obj->methodp_glIsProgramPipeline) { obj->methodp_glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)GetProcAddress(modOpenGL32, "glIsProgramPipeline"); }
		if(!obj->methodp_glIsProgramPipeline) { args.This()->Set(v8::String::NewSymbol("glIsProgramPipeline"), v8::Undefined()); }
		if(!obj->methodp_glIsProgramPipelineEXT) { obj->methodp_glIsProgramPipelineEXT = (PFNGLISPROGRAMPIPELINEEXTPROC)wglGetProcAddress("glIsProgramPipelineEXT"); }
		if(!obj->methodp_glIsProgramPipelineEXT) { obj->methodp_glIsProgramPipelineEXT = (PFNGLISPROGRAMPIPELINEEXTPROC)GetProcAddress(modOpenGL32, "glIsProgramPipelineEXT"); }
		if(!obj->methodp_glIsProgramPipelineEXT) { args.This()->Set(v8::String::NewSymbol("glIsProgramPipelineEXT"), v8::Undefined()); }
		if(!obj->methodp_glIsQuery) { obj->methodp_glIsQuery = (PFNGLISQUERYPROC)wglGetProcAddress("glIsQuery"); }
		if(!obj->methodp_glIsQuery) { obj->methodp_glIsQuery = (PFNGLISQUERYPROC)GetProcAddress(modOpenGL32, "glIsQuery"); }
		if(!obj->methodp_glIsQuery) { args.This()->Set(v8::String::NewSymbol("glIsQuery"), v8::Undefined()); }
		if(!obj->methodp_glIsQueryARB) { obj->methodp_glIsQueryARB = (PFNGLISQUERYARBPROC)wglGetProcAddress("glIsQueryARB"); }
		if(!obj->methodp_glIsQueryARB) { obj->methodp_glIsQueryARB = (PFNGLISQUERYARBPROC)GetProcAddress(modOpenGL32, "glIsQueryARB"); }
		if(!obj->methodp_glIsQueryARB) { args.This()->Set(v8::String::NewSymbol("glIsQueryARB"), v8::Undefined()); }
		if(!obj->methodp_glIsQueryEXT) { obj->methodp_glIsQueryEXT = (PFNGLISQUERYEXTPROC)wglGetProcAddress("glIsQueryEXT"); }
		if(!obj->methodp_glIsQueryEXT) { obj->methodp_glIsQueryEXT = (PFNGLISQUERYEXTPROC)GetProcAddress(modOpenGL32, "glIsQueryEXT"); }
		if(!obj->methodp_glIsQueryEXT) { args.This()->Set(v8::String::NewSymbol("glIsQueryEXT"), v8::Undefined()); }
		if(!obj->methodp_glIsRenderbuffer) { obj->methodp_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)wglGetProcAddress("glIsRenderbuffer"); }
		if(!obj->methodp_glIsRenderbuffer) { obj->methodp_glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)GetProcAddress(modOpenGL32, "glIsRenderbuffer"); }
		if(!obj->methodp_glIsRenderbuffer) { args.This()->Set(v8::String::NewSymbol("glIsRenderbuffer"), v8::Undefined()); }
		if(!obj->methodp_glIsRenderbufferEXT) { obj->methodp_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)wglGetProcAddress("glIsRenderbufferEXT"); }
		if(!obj->methodp_glIsRenderbufferEXT) { obj->methodp_glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glIsRenderbufferEXT"); }
		if(!obj->methodp_glIsRenderbufferEXT) { args.This()->Set(v8::String::NewSymbol("glIsRenderbufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glIsRenderbufferOES) { obj->methodp_glIsRenderbufferOES = (PFNGLISRENDERBUFFEROESPROC)wglGetProcAddress("glIsRenderbufferOES"); }
		if(!obj->methodp_glIsRenderbufferOES) { obj->methodp_glIsRenderbufferOES = (PFNGLISRENDERBUFFEROESPROC)GetProcAddress(modOpenGL32, "glIsRenderbufferOES"); }
		if(!obj->methodp_glIsRenderbufferOES) { args.This()->Set(v8::String::NewSymbol("glIsRenderbufferOES"), v8::Undefined()); }
		if(!obj->methodp_glIsSampler) { obj->methodp_glIsSampler = (PFNGLISSAMPLERPROC)wglGetProcAddress("glIsSampler"); }
		if(!obj->methodp_glIsSampler) { obj->methodp_glIsSampler = (PFNGLISSAMPLERPROC)GetProcAddress(modOpenGL32, "glIsSampler"); }
		if(!obj->methodp_glIsSampler) { args.This()->Set(v8::String::NewSymbol("glIsSampler"), v8::Undefined()); }
		if(!obj->methodp_glIsShader) { obj->methodp_glIsShader = (PFNGLISSHADERPROC)wglGetProcAddress("glIsShader"); }
		if(!obj->methodp_glIsShader) { obj->methodp_glIsShader = (PFNGLISSHADERPROC)GetProcAddress(modOpenGL32, "glIsShader"); }
		if(!obj->methodp_glIsShader) { args.This()->Set(v8::String::NewSymbol("glIsShader"), v8::Undefined()); }
		if(!obj->methodp_glIsSync) { obj->methodp_glIsSync = (PFNGLISSYNCPROC)wglGetProcAddress("glIsSync"); }
		if(!obj->methodp_glIsSync) { obj->methodp_glIsSync = (PFNGLISSYNCPROC)GetProcAddress(modOpenGL32, "glIsSync"); }
		if(!obj->methodp_glIsSync) { args.This()->Set(v8::String::NewSymbol("glIsSync"), v8::Undefined()); }
		if(!obj->methodp_glIsSyncAPPLE) { obj->methodp_glIsSyncAPPLE = (PFNGLISSYNCAPPLEPROC)wglGetProcAddress("glIsSyncAPPLE"); }
		if(!obj->methodp_glIsSyncAPPLE) { obj->methodp_glIsSyncAPPLE = (PFNGLISSYNCAPPLEPROC)GetProcAddress(modOpenGL32, "glIsSyncAPPLE"); }
		if(!obj->methodp_glIsSyncAPPLE) { args.This()->Set(v8::String::NewSymbol("glIsSyncAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glIsTexture) { obj->methodp_glIsTexture = (PFNGLISTEXTUREPROC)wglGetProcAddress("glIsTexture"); }
		if(!obj->methodp_glIsTexture) { obj->methodp_glIsTexture = (PFNGLISTEXTUREPROC)GetProcAddress(modOpenGL32, "glIsTexture"); }
		if(!obj->methodp_glIsTexture) { args.This()->Set(v8::String::NewSymbol("glIsTexture"), v8::Undefined()); }
		if(!obj->methodp_glIsTextureEXT) { obj->methodp_glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)wglGetProcAddress("glIsTextureEXT"); }
		if(!obj->methodp_glIsTextureEXT) { obj->methodp_glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)GetProcAddress(modOpenGL32, "glIsTextureEXT"); }
		if(!obj->methodp_glIsTextureEXT) { args.This()->Set(v8::String::NewSymbol("glIsTextureEXT"), v8::Undefined()); }
		if(!obj->methodp_glIsTextureHandleResidentARB) { obj->methodp_glIsTextureHandleResidentARB = (PFNGLISTEXTUREHANDLERESIDENTARBPROC)wglGetProcAddress("glIsTextureHandleResidentARB"); }
		if(!obj->methodp_glIsTextureHandleResidentARB) { obj->methodp_glIsTextureHandleResidentARB = (PFNGLISTEXTUREHANDLERESIDENTARBPROC)GetProcAddress(modOpenGL32, "glIsTextureHandleResidentARB"); }
		if(!obj->methodp_glIsTextureHandleResidentARB) { args.This()->Set(v8::String::NewSymbol("glIsTextureHandleResidentARB"), v8::Undefined()); }
		if(!obj->methodp_glIsTextureHandleResidentNV) { obj->methodp_glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC)wglGetProcAddress("glIsTextureHandleResidentNV"); }
		if(!obj->methodp_glIsTextureHandleResidentNV) { obj->methodp_glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC)GetProcAddress(modOpenGL32, "glIsTextureHandleResidentNV"); }
		if(!obj->methodp_glIsTextureHandleResidentNV) { args.This()->Set(v8::String::NewSymbol("glIsTextureHandleResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glIsTransformFeedback) { obj->methodp_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)wglGetProcAddress("glIsTransformFeedback"); }
		if(!obj->methodp_glIsTransformFeedback) { obj->methodp_glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)GetProcAddress(modOpenGL32, "glIsTransformFeedback"); }
		if(!obj->methodp_glIsTransformFeedback) { args.This()->Set(v8::String::NewSymbol("glIsTransformFeedback"), v8::Undefined()); }
		if(!obj->methodp_glIsTransformFeedbackNV) { obj->methodp_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC)wglGetProcAddress("glIsTransformFeedbackNV"); }
		if(!obj->methodp_glIsTransformFeedbackNV) { obj->methodp_glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC)GetProcAddress(modOpenGL32, "glIsTransformFeedbackNV"); }
		if(!obj->methodp_glIsTransformFeedbackNV) { args.This()->Set(v8::String::NewSymbol("glIsTransformFeedbackNV"), v8::Undefined()); }
		if(!obj->methodp_glIsVariantEnabledEXT) { obj->methodp_glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC)wglGetProcAddress("glIsVariantEnabledEXT"); }
		if(!obj->methodp_glIsVariantEnabledEXT) { obj->methodp_glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC)GetProcAddress(modOpenGL32, "glIsVariantEnabledEXT"); }
		if(!obj->methodp_glIsVariantEnabledEXT) { args.This()->Set(v8::String::NewSymbol("glIsVariantEnabledEXT"), v8::Undefined()); }
		if(!obj->methodp_glIsVertexArray) { obj->methodp_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)wglGetProcAddress("glIsVertexArray"); }
		if(!obj->methodp_glIsVertexArray) { obj->methodp_glIsVertexArray = (PFNGLISVERTEXARRAYPROC)GetProcAddress(modOpenGL32, "glIsVertexArray"); }
		if(!obj->methodp_glIsVertexArray) { args.This()->Set(v8::String::NewSymbol("glIsVertexArray"), v8::Undefined()); }
		if(!obj->methodp_glIsVertexArrayAPPLE) { obj->methodp_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)wglGetProcAddress("glIsVertexArrayAPPLE"); }
		if(!obj->methodp_glIsVertexArrayAPPLE) { obj->methodp_glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)GetProcAddress(modOpenGL32, "glIsVertexArrayAPPLE"); }
		if(!obj->methodp_glIsVertexArrayAPPLE) { args.This()->Set(v8::String::NewSymbol("glIsVertexArrayAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glIsVertexArrayOES) { obj->methodp_glIsVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC)wglGetProcAddress("glIsVertexArrayOES"); }
		if(!obj->methodp_glIsVertexArrayOES) { obj->methodp_glIsVertexArrayOES = (PFNGLISVERTEXARRAYOESPROC)GetProcAddress(modOpenGL32, "glIsVertexArrayOES"); }
		if(!obj->methodp_glIsVertexArrayOES) { args.This()->Set(v8::String::NewSymbol("glIsVertexArrayOES"), v8::Undefined()); }
		if(!obj->methodp_glIsVertexAttribEnabledAPPLE) { obj->methodp_glIsVertexAttribEnabledAPPLE = (PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)wglGetProcAddress("glIsVertexAttribEnabledAPPLE"); }
		if(!obj->methodp_glIsVertexAttribEnabledAPPLE) { obj->methodp_glIsVertexAttribEnabledAPPLE = (PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)GetProcAddress(modOpenGL32, "glIsVertexAttribEnabledAPPLE"); }
		if(!obj->methodp_glIsVertexAttribEnabledAPPLE) { args.This()->Set(v8::String::NewSymbol("glIsVertexAttribEnabledAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glLabelObjectEXT) { obj->methodp_glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC)wglGetProcAddress("glLabelObjectEXT"); }
		if(!obj->methodp_glLabelObjectEXT) { obj->methodp_glLabelObjectEXT = (PFNGLLABELOBJECTEXTPROC)GetProcAddress(modOpenGL32, "glLabelObjectEXT"); }
		if(!obj->methodp_glLabelObjectEXT) { args.This()->Set(v8::String::NewSymbol("glLabelObjectEXT"), v8::Undefined()); }
		if(!obj->methodp_glLightEnviSGIX) { obj->methodp_glLightEnviSGIX = (PFNGLLIGHTENVISGIXPROC)wglGetProcAddress("glLightEnviSGIX"); }
		if(!obj->methodp_glLightEnviSGIX) { obj->methodp_glLightEnviSGIX = (PFNGLLIGHTENVISGIXPROC)GetProcAddress(modOpenGL32, "glLightEnviSGIX"); }
		if(!obj->methodp_glLightEnviSGIX) { args.This()->Set(v8::String::NewSymbol("glLightEnviSGIX"), v8::Undefined()); }
		if(!obj->methodp_glLightModelf) { obj->methodp_glLightModelf = (PFNGLLIGHTMODELFPROC)wglGetProcAddress("glLightModelf"); }
		if(!obj->methodp_glLightModelf) { obj->methodp_glLightModelf = (PFNGLLIGHTMODELFPROC)GetProcAddress(modOpenGL32, "glLightModelf"); }
		if(!obj->methodp_glLightModelf) { args.This()->Set(v8::String::NewSymbol("glLightModelf"), v8::Undefined()); }
		if(!obj->methodp_glLightModelfv) { obj->methodp_glLightModelfv = (PFNGLLIGHTMODELFVPROC)wglGetProcAddress("glLightModelfv"); }
		if(!obj->methodp_glLightModelfv) { obj->methodp_glLightModelfv = (PFNGLLIGHTMODELFVPROC)GetProcAddress(modOpenGL32, "glLightModelfv"); }
		if(!obj->methodp_glLightModelfv) { args.This()->Set(v8::String::NewSymbol("glLightModelfv"), v8::Undefined()); }
		if(!obj->methodp_glLightModeli) { obj->methodp_glLightModeli = (PFNGLLIGHTMODELIPROC)wglGetProcAddress("glLightModeli"); }
		if(!obj->methodp_glLightModeli) { obj->methodp_glLightModeli = (PFNGLLIGHTMODELIPROC)GetProcAddress(modOpenGL32, "glLightModeli"); }
		if(!obj->methodp_glLightModeli) { args.This()->Set(v8::String::NewSymbol("glLightModeli"), v8::Undefined()); }
		if(!obj->methodp_glLightModeliv) { obj->methodp_glLightModeliv = (PFNGLLIGHTMODELIVPROC)wglGetProcAddress("glLightModeliv"); }
		if(!obj->methodp_glLightModeliv) { obj->methodp_glLightModeliv = (PFNGLLIGHTMODELIVPROC)GetProcAddress(modOpenGL32, "glLightModeliv"); }
		if(!obj->methodp_glLightModeliv) { args.This()->Set(v8::String::NewSymbol("glLightModeliv"), v8::Undefined()); }
		if(!obj->methodp_glLightModelx) { obj->methodp_glLightModelx = (PFNGLLIGHTMODELXPROC)wglGetProcAddress("glLightModelx"); }
		if(!obj->methodp_glLightModelx) { obj->methodp_glLightModelx = (PFNGLLIGHTMODELXPROC)GetProcAddress(modOpenGL32, "glLightModelx"); }
		if(!obj->methodp_glLightModelx) { args.This()->Set(v8::String::NewSymbol("glLightModelx"), v8::Undefined()); }
		if(!obj->methodp_glLightModelxOES) { obj->methodp_glLightModelxOES = (PFNGLLIGHTMODELXOESPROC)wglGetProcAddress("glLightModelxOES"); }
		if(!obj->methodp_glLightModelxOES) { obj->methodp_glLightModelxOES = (PFNGLLIGHTMODELXOESPROC)GetProcAddress(modOpenGL32, "glLightModelxOES"); }
		if(!obj->methodp_glLightModelxOES) { args.This()->Set(v8::String::NewSymbol("glLightModelxOES"), v8::Undefined()); }
		if(!obj->methodp_glLightModelxv) { obj->methodp_glLightModelxv = (PFNGLLIGHTMODELXVPROC)wglGetProcAddress("glLightModelxv"); }
		if(!obj->methodp_glLightModelxv) { obj->methodp_glLightModelxv = (PFNGLLIGHTMODELXVPROC)GetProcAddress(modOpenGL32, "glLightModelxv"); }
		if(!obj->methodp_glLightModelxv) { args.This()->Set(v8::String::NewSymbol("glLightModelxv"), v8::Undefined()); }
		if(!obj->methodp_glLightModelxvOES) { obj->methodp_glLightModelxvOES = (PFNGLLIGHTMODELXVOESPROC)wglGetProcAddress("glLightModelxvOES"); }
		if(!obj->methodp_glLightModelxvOES) { obj->methodp_glLightModelxvOES = (PFNGLLIGHTMODELXVOESPROC)GetProcAddress(modOpenGL32, "glLightModelxvOES"); }
		if(!obj->methodp_glLightModelxvOES) { args.This()->Set(v8::String::NewSymbol("glLightModelxvOES"), v8::Undefined()); }
		if(!obj->methodp_glLightf) { obj->methodp_glLightf = (PFNGLLIGHTFPROC)wglGetProcAddress("glLightf"); }
		if(!obj->methodp_glLightf) { obj->methodp_glLightf = (PFNGLLIGHTFPROC)GetProcAddress(modOpenGL32, "glLightf"); }
		if(!obj->methodp_glLightf) { args.This()->Set(v8::String::NewSymbol("glLightf"), v8::Undefined()); }
		if(!obj->methodp_glLightfv) { obj->methodp_glLightfv = (PFNGLLIGHTFVPROC)wglGetProcAddress("glLightfv"); }
		if(!obj->methodp_glLightfv) { obj->methodp_glLightfv = (PFNGLLIGHTFVPROC)GetProcAddress(modOpenGL32, "glLightfv"); }
		if(!obj->methodp_glLightfv) { args.This()->Set(v8::String::NewSymbol("glLightfv"), v8::Undefined()); }
		if(!obj->methodp_glLighti) { obj->methodp_glLighti = (PFNGLLIGHTIPROC)wglGetProcAddress("glLighti"); }
		if(!obj->methodp_glLighti) { obj->methodp_glLighti = (PFNGLLIGHTIPROC)GetProcAddress(modOpenGL32, "glLighti"); }
		if(!obj->methodp_glLighti) { args.This()->Set(v8::String::NewSymbol("glLighti"), v8::Undefined()); }
		if(!obj->methodp_glLightiv) { obj->methodp_glLightiv = (PFNGLLIGHTIVPROC)wglGetProcAddress("glLightiv"); }
		if(!obj->methodp_glLightiv) { obj->methodp_glLightiv = (PFNGLLIGHTIVPROC)GetProcAddress(modOpenGL32, "glLightiv"); }
		if(!obj->methodp_glLightiv) { args.This()->Set(v8::String::NewSymbol("glLightiv"), v8::Undefined()); }
		if(!obj->methodp_glLightx) { obj->methodp_glLightx = (PFNGLLIGHTXPROC)wglGetProcAddress("glLightx"); }
		if(!obj->methodp_glLightx) { obj->methodp_glLightx = (PFNGLLIGHTXPROC)GetProcAddress(modOpenGL32, "glLightx"); }
		if(!obj->methodp_glLightx) { args.This()->Set(v8::String::NewSymbol("glLightx"), v8::Undefined()); }
		if(!obj->methodp_glLightxOES) { obj->methodp_glLightxOES = (PFNGLLIGHTXOESPROC)wglGetProcAddress("glLightxOES"); }
		if(!obj->methodp_glLightxOES) { obj->methodp_glLightxOES = (PFNGLLIGHTXOESPROC)GetProcAddress(modOpenGL32, "glLightxOES"); }
		if(!obj->methodp_glLightxOES) { args.This()->Set(v8::String::NewSymbol("glLightxOES"), v8::Undefined()); }
		if(!obj->methodp_glLightxv) { obj->methodp_glLightxv = (PFNGLLIGHTXVPROC)wglGetProcAddress("glLightxv"); }
		if(!obj->methodp_glLightxv) { obj->methodp_glLightxv = (PFNGLLIGHTXVPROC)GetProcAddress(modOpenGL32, "glLightxv"); }
		if(!obj->methodp_glLightxv) { args.This()->Set(v8::String::NewSymbol("glLightxv"), v8::Undefined()); }
		if(!obj->methodp_glLightxvOES) { obj->methodp_glLightxvOES = (PFNGLLIGHTXVOESPROC)wglGetProcAddress("glLightxvOES"); }
		if(!obj->methodp_glLightxvOES) { obj->methodp_glLightxvOES = (PFNGLLIGHTXVOESPROC)GetProcAddress(modOpenGL32, "glLightxvOES"); }
		if(!obj->methodp_glLightxvOES) { args.This()->Set(v8::String::NewSymbol("glLightxvOES"), v8::Undefined()); }
		if(!obj->methodp_glLineStipple) { obj->methodp_glLineStipple = (PFNGLLINESTIPPLEPROC)wglGetProcAddress("glLineStipple"); }
		if(!obj->methodp_glLineStipple) { obj->methodp_glLineStipple = (PFNGLLINESTIPPLEPROC)GetProcAddress(modOpenGL32, "glLineStipple"); }
		if(!obj->methodp_glLineStipple) { args.This()->Set(v8::String::NewSymbol("glLineStipple"), v8::Undefined()); }
		if(!obj->methodp_glLineWidth) { obj->methodp_glLineWidth = (PFNGLLINEWIDTHPROC)wglGetProcAddress("glLineWidth"); }
		if(!obj->methodp_glLineWidth) { obj->methodp_glLineWidth = (PFNGLLINEWIDTHPROC)GetProcAddress(modOpenGL32, "glLineWidth"); }
		if(!obj->methodp_glLineWidth) { args.This()->Set(v8::String::NewSymbol("glLineWidth"), v8::Undefined()); }
		if(!obj->methodp_glLineWidthx) { obj->methodp_glLineWidthx = (PFNGLLINEWIDTHXPROC)wglGetProcAddress("glLineWidthx"); }
		if(!obj->methodp_glLineWidthx) { obj->methodp_glLineWidthx = (PFNGLLINEWIDTHXPROC)GetProcAddress(modOpenGL32, "glLineWidthx"); }
		if(!obj->methodp_glLineWidthx) { args.This()->Set(v8::String::NewSymbol("glLineWidthx"), v8::Undefined()); }
		if(!obj->methodp_glLineWidthxOES) { obj->methodp_glLineWidthxOES = (PFNGLLINEWIDTHXOESPROC)wglGetProcAddress("glLineWidthxOES"); }
		if(!obj->methodp_glLineWidthxOES) { obj->methodp_glLineWidthxOES = (PFNGLLINEWIDTHXOESPROC)GetProcAddress(modOpenGL32, "glLineWidthxOES"); }
		if(!obj->methodp_glLineWidthxOES) { args.This()->Set(v8::String::NewSymbol("glLineWidthxOES"), v8::Undefined()); }
		if(!obj->methodp_glLinkProgram) { obj->methodp_glLinkProgram = (PFNGLLINKPROGRAMPROC)wglGetProcAddress("glLinkProgram"); }
		if(!obj->methodp_glLinkProgram) { obj->methodp_glLinkProgram = (PFNGLLINKPROGRAMPROC)GetProcAddress(modOpenGL32, "glLinkProgram"); }
		if(!obj->methodp_glLinkProgram) { args.This()->Set(v8::String::NewSymbol("glLinkProgram"), v8::Undefined()); }
		if(!obj->methodp_glLinkProgramARB) { obj->methodp_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)wglGetProcAddress("glLinkProgramARB"); }
		if(!obj->methodp_glLinkProgramARB) { obj->methodp_glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)GetProcAddress(modOpenGL32, "glLinkProgramARB"); }
		if(!obj->methodp_glLinkProgramARB) { args.This()->Set(v8::String::NewSymbol("glLinkProgramARB"), v8::Undefined()); }
		if(!obj->methodp_glListBase) { obj->methodp_glListBase = (PFNGLLISTBASEPROC)wglGetProcAddress("glListBase"); }
		if(!obj->methodp_glListBase) { obj->methodp_glListBase = (PFNGLLISTBASEPROC)GetProcAddress(modOpenGL32, "glListBase"); }
		if(!obj->methodp_glListBase) { args.This()->Set(v8::String::NewSymbol("glListBase"), v8::Undefined()); }
		if(!obj->methodp_glListParameterfSGIX) { obj->methodp_glListParameterfSGIX = (PFNGLLISTPARAMETERFSGIXPROC)wglGetProcAddress("glListParameterfSGIX"); }
		if(!obj->methodp_glListParameterfSGIX) { obj->methodp_glListParameterfSGIX = (PFNGLLISTPARAMETERFSGIXPROC)GetProcAddress(modOpenGL32, "glListParameterfSGIX"); }
		if(!obj->methodp_glListParameterfSGIX) { args.This()->Set(v8::String::NewSymbol("glListParameterfSGIX"), v8::Undefined()); }
		if(!obj->methodp_glListParameterfvSGIX) { obj->methodp_glListParameterfvSGIX = (PFNGLLISTPARAMETERFVSGIXPROC)wglGetProcAddress("glListParameterfvSGIX"); }
		if(!obj->methodp_glListParameterfvSGIX) { obj->methodp_glListParameterfvSGIX = (PFNGLLISTPARAMETERFVSGIXPROC)GetProcAddress(modOpenGL32, "glListParameterfvSGIX"); }
		if(!obj->methodp_glListParameterfvSGIX) { args.This()->Set(v8::String::NewSymbol("glListParameterfvSGIX"), v8::Undefined()); }
		if(!obj->methodp_glListParameteriSGIX) { obj->methodp_glListParameteriSGIX = (PFNGLLISTPARAMETERISGIXPROC)wglGetProcAddress("glListParameteriSGIX"); }
		if(!obj->methodp_glListParameteriSGIX) { obj->methodp_glListParameteriSGIX = (PFNGLLISTPARAMETERISGIXPROC)GetProcAddress(modOpenGL32, "glListParameteriSGIX"); }
		if(!obj->methodp_glListParameteriSGIX) { args.This()->Set(v8::String::NewSymbol("glListParameteriSGIX"), v8::Undefined()); }
		if(!obj->methodp_glListParameterivSGIX) { obj->methodp_glListParameterivSGIX = (PFNGLLISTPARAMETERIVSGIXPROC)wglGetProcAddress("glListParameterivSGIX"); }
		if(!obj->methodp_glListParameterivSGIX) { obj->methodp_glListParameterivSGIX = (PFNGLLISTPARAMETERIVSGIXPROC)GetProcAddress(modOpenGL32, "glListParameterivSGIX"); }
		if(!obj->methodp_glListParameterivSGIX) { args.This()->Set(v8::String::NewSymbol("glListParameterivSGIX"), v8::Undefined()); }
		if(!obj->methodp_glLoadIdentity) { obj->methodp_glLoadIdentity = (PFNGLLOADIDENTITYPROC)wglGetProcAddress("glLoadIdentity"); }
		if(!obj->methodp_glLoadIdentity) { obj->methodp_glLoadIdentity = (PFNGLLOADIDENTITYPROC)GetProcAddress(modOpenGL32, "glLoadIdentity"); }
		if(!obj->methodp_glLoadIdentity) { args.This()->Set(v8::String::NewSymbol("glLoadIdentity"), v8::Undefined()); }
		if(!obj->methodp_glLoadIdentityDeformationMapSGIX) { obj->methodp_glLoadIdentityDeformationMapSGIX = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)wglGetProcAddress("glLoadIdentityDeformationMapSGIX"); }
		if(!obj->methodp_glLoadIdentityDeformationMapSGIX) { obj->methodp_glLoadIdentityDeformationMapSGIX = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)GetProcAddress(modOpenGL32, "glLoadIdentityDeformationMapSGIX"); }
		if(!obj->methodp_glLoadIdentityDeformationMapSGIX) { args.This()->Set(v8::String::NewSymbol("glLoadIdentityDeformationMapSGIX"), v8::Undefined()); }
		if(!obj->methodp_glLoadMatrixd) { obj->methodp_glLoadMatrixd = (PFNGLLOADMATRIXDPROC)wglGetProcAddress("glLoadMatrixd"); }
		if(!obj->methodp_glLoadMatrixd) { obj->methodp_glLoadMatrixd = (PFNGLLOADMATRIXDPROC)GetProcAddress(modOpenGL32, "glLoadMatrixd"); }
		if(!obj->methodp_glLoadMatrixd) { args.This()->Set(v8::String::NewSymbol("glLoadMatrixd"), v8::Undefined()); }
		if(!obj->methodp_glLoadMatrixf) { obj->methodp_glLoadMatrixf = (PFNGLLOADMATRIXFPROC)wglGetProcAddress("glLoadMatrixf"); }
		if(!obj->methodp_glLoadMatrixf) { obj->methodp_glLoadMatrixf = (PFNGLLOADMATRIXFPROC)GetProcAddress(modOpenGL32, "glLoadMatrixf"); }
		if(!obj->methodp_glLoadMatrixf) { args.This()->Set(v8::String::NewSymbol("glLoadMatrixf"), v8::Undefined()); }
		if(!obj->methodp_glLoadMatrixx) { obj->methodp_glLoadMatrixx = (PFNGLLOADMATRIXXPROC)wglGetProcAddress("glLoadMatrixx"); }
		if(!obj->methodp_glLoadMatrixx) { obj->methodp_glLoadMatrixx = (PFNGLLOADMATRIXXPROC)GetProcAddress(modOpenGL32, "glLoadMatrixx"); }
		if(!obj->methodp_glLoadMatrixx) { args.This()->Set(v8::String::NewSymbol("glLoadMatrixx"), v8::Undefined()); }
		if(!obj->methodp_glLoadMatrixxOES) { obj->methodp_glLoadMatrixxOES = (PFNGLLOADMATRIXXOESPROC)wglGetProcAddress("glLoadMatrixxOES"); }
		if(!obj->methodp_glLoadMatrixxOES) { obj->methodp_glLoadMatrixxOES = (PFNGLLOADMATRIXXOESPROC)GetProcAddress(modOpenGL32, "glLoadMatrixxOES"); }
		if(!obj->methodp_glLoadMatrixxOES) { args.This()->Set(v8::String::NewSymbol("glLoadMatrixxOES"), v8::Undefined()); }
		if(!obj->methodp_glLoadName) { obj->methodp_glLoadName = (PFNGLLOADNAMEPROC)wglGetProcAddress("glLoadName"); }
		if(!obj->methodp_glLoadName) { obj->methodp_glLoadName = (PFNGLLOADNAMEPROC)GetProcAddress(modOpenGL32, "glLoadName"); }
		if(!obj->methodp_glLoadName) { args.This()->Set(v8::String::NewSymbol("glLoadName"), v8::Undefined()); }
		if(!obj->methodp_glLoadPaletteFromModelViewMatrixOES) { obj->methodp_glLoadPaletteFromModelViewMatrixOES = (PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC)wglGetProcAddress("glLoadPaletteFromModelViewMatrixOES"); }
		if(!obj->methodp_glLoadPaletteFromModelViewMatrixOES) { obj->methodp_glLoadPaletteFromModelViewMatrixOES = (PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC)GetProcAddress(modOpenGL32, "glLoadPaletteFromModelViewMatrixOES"); }
		if(!obj->methodp_glLoadPaletteFromModelViewMatrixOES) { args.This()->Set(v8::String::NewSymbol("glLoadPaletteFromModelViewMatrixOES"), v8::Undefined()); }
		if(!obj->methodp_glLoadProgramNV) { obj->methodp_glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)wglGetProcAddress("glLoadProgramNV"); }
		if(!obj->methodp_glLoadProgramNV) { obj->methodp_glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)GetProcAddress(modOpenGL32, "glLoadProgramNV"); }
		if(!obj->methodp_glLoadProgramNV) { args.This()->Set(v8::String::NewSymbol("glLoadProgramNV"), v8::Undefined()); }
		if(!obj->methodp_glLoadTransposeMatrixd) { obj->methodp_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)wglGetProcAddress("glLoadTransposeMatrixd"); }
		if(!obj->methodp_glLoadTransposeMatrixd) { obj->methodp_glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)GetProcAddress(modOpenGL32, "glLoadTransposeMatrixd"); }
		if(!obj->methodp_glLoadTransposeMatrixd) { args.This()->Set(v8::String::NewSymbol("glLoadTransposeMatrixd"), v8::Undefined()); }
		if(!obj->methodp_glLoadTransposeMatrixdARB) { obj->methodp_glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)wglGetProcAddress("glLoadTransposeMatrixdARB"); }
		if(!obj->methodp_glLoadTransposeMatrixdARB) { obj->methodp_glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)GetProcAddress(modOpenGL32, "glLoadTransposeMatrixdARB"); }
		if(!obj->methodp_glLoadTransposeMatrixdARB) { args.This()->Set(v8::String::NewSymbol("glLoadTransposeMatrixdARB"), v8::Undefined()); }
		if(!obj->methodp_glLoadTransposeMatrixf) { obj->methodp_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)wglGetProcAddress("glLoadTransposeMatrixf"); }
		if(!obj->methodp_glLoadTransposeMatrixf) { obj->methodp_glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)GetProcAddress(modOpenGL32, "glLoadTransposeMatrixf"); }
		if(!obj->methodp_glLoadTransposeMatrixf) { args.This()->Set(v8::String::NewSymbol("glLoadTransposeMatrixf"), v8::Undefined()); }
		if(!obj->methodp_glLoadTransposeMatrixfARB) { obj->methodp_glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)wglGetProcAddress("glLoadTransposeMatrixfARB"); }
		if(!obj->methodp_glLoadTransposeMatrixfARB) { obj->methodp_glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)GetProcAddress(modOpenGL32, "glLoadTransposeMatrixfARB"); }
		if(!obj->methodp_glLoadTransposeMatrixfARB) { args.This()->Set(v8::String::NewSymbol("glLoadTransposeMatrixfARB"), v8::Undefined()); }
		if(!obj->methodp_glLoadTransposeMatrixxOES) { obj->methodp_glLoadTransposeMatrixxOES = (PFNGLLOADTRANSPOSEMATRIXXOESPROC)wglGetProcAddress("glLoadTransposeMatrixxOES"); }
		if(!obj->methodp_glLoadTransposeMatrixxOES) { obj->methodp_glLoadTransposeMatrixxOES = (PFNGLLOADTRANSPOSEMATRIXXOESPROC)GetProcAddress(modOpenGL32, "glLoadTransposeMatrixxOES"); }
		if(!obj->methodp_glLoadTransposeMatrixxOES) { args.This()->Set(v8::String::NewSymbol("glLoadTransposeMatrixxOES"), v8::Undefined()); }
		if(!obj->methodp_glLockArraysEXT) { obj->methodp_glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)wglGetProcAddress("glLockArraysEXT"); }
		if(!obj->methodp_glLockArraysEXT) { obj->methodp_glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)GetProcAddress(modOpenGL32, "glLockArraysEXT"); }
		if(!obj->methodp_glLockArraysEXT) { args.This()->Set(v8::String::NewSymbol("glLockArraysEXT"), v8::Undefined()); }
		if(!obj->methodp_glLogicOp) { obj->methodp_glLogicOp = (PFNGLLOGICOPPROC)wglGetProcAddress("glLogicOp"); }
		if(!obj->methodp_glLogicOp) { obj->methodp_glLogicOp = (PFNGLLOGICOPPROC)GetProcAddress(modOpenGL32, "glLogicOp"); }
		if(!obj->methodp_glLogicOp) { args.This()->Set(v8::String::NewSymbol("glLogicOp"), v8::Undefined()); }
		if(!obj->methodp_glMakeBufferNonResidentNV) { obj->methodp_glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC)wglGetProcAddress("glMakeBufferNonResidentNV"); }
		if(!obj->methodp_glMakeBufferNonResidentNV) { obj->methodp_glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glMakeBufferNonResidentNV"); }
		if(!obj->methodp_glMakeBufferNonResidentNV) { args.This()->Set(v8::String::NewSymbol("glMakeBufferNonResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glMakeBufferResidentNV) { obj->methodp_glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC)wglGetProcAddress("glMakeBufferResidentNV"); }
		if(!obj->methodp_glMakeBufferResidentNV) { obj->methodp_glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glMakeBufferResidentNV"); }
		if(!obj->methodp_glMakeBufferResidentNV) { args.This()->Set(v8::String::NewSymbol("glMakeBufferResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glMakeImageHandleNonResidentARB) { obj->methodp_glMakeImageHandleNonResidentARB = (PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)wglGetProcAddress("glMakeImageHandleNonResidentARB"); }
		if(!obj->methodp_glMakeImageHandleNonResidentARB) { obj->methodp_glMakeImageHandleNonResidentARB = (PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC)GetProcAddress(modOpenGL32, "glMakeImageHandleNonResidentARB"); }
		if(!obj->methodp_glMakeImageHandleNonResidentARB) { args.This()->Set(v8::String::NewSymbol("glMakeImageHandleNonResidentARB"), v8::Undefined()); }
		if(!obj->methodp_glMakeImageHandleNonResidentNV) { obj->methodp_glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)wglGetProcAddress("glMakeImageHandleNonResidentNV"); }
		if(!obj->methodp_glMakeImageHandleNonResidentNV) { obj->methodp_glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glMakeImageHandleNonResidentNV"); }
		if(!obj->methodp_glMakeImageHandleNonResidentNV) { args.This()->Set(v8::String::NewSymbol("glMakeImageHandleNonResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glMakeImageHandleResidentARB) { obj->methodp_glMakeImageHandleResidentARB = (PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)wglGetProcAddress("glMakeImageHandleResidentARB"); }
		if(!obj->methodp_glMakeImageHandleResidentARB) { obj->methodp_glMakeImageHandleResidentARB = (PFNGLMAKEIMAGEHANDLERESIDENTARBPROC)GetProcAddress(modOpenGL32, "glMakeImageHandleResidentARB"); }
		if(!obj->methodp_glMakeImageHandleResidentARB) { args.This()->Set(v8::String::NewSymbol("glMakeImageHandleResidentARB"), v8::Undefined()); }
		if(!obj->methodp_glMakeImageHandleResidentNV) { obj->methodp_glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)wglGetProcAddress("glMakeImageHandleResidentNV"); }
		if(!obj->methodp_glMakeImageHandleResidentNV) { obj->methodp_glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)GetProcAddress(modOpenGL32, "glMakeImageHandleResidentNV"); }
		if(!obj->methodp_glMakeImageHandleResidentNV) { args.This()->Set(v8::String::NewSymbol("glMakeImageHandleResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glMakeNamedBufferNonResidentNV) { obj->methodp_glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)wglGetProcAddress("glMakeNamedBufferNonResidentNV"); }
		if(!obj->methodp_glMakeNamedBufferNonResidentNV) { obj->methodp_glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glMakeNamedBufferNonResidentNV"); }
		if(!obj->methodp_glMakeNamedBufferNonResidentNV) { args.This()->Set(v8::String::NewSymbol("glMakeNamedBufferNonResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glMakeNamedBufferResidentNV) { obj->methodp_glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)wglGetProcAddress("glMakeNamedBufferResidentNV"); }
		if(!obj->methodp_glMakeNamedBufferResidentNV) { obj->methodp_glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glMakeNamedBufferResidentNV"); }
		if(!obj->methodp_glMakeNamedBufferResidentNV) { args.This()->Set(v8::String::NewSymbol("glMakeNamedBufferResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glMakeTextureHandleNonResidentARB) { obj->methodp_glMakeTextureHandleNonResidentARB = (PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)wglGetProcAddress("glMakeTextureHandleNonResidentARB"); }
		if(!obj->methodp_glMakeTextureHandleNonResidentARB) { obj->methodp_glMakeTextureHandleNonResidentARB = (PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC)GetProcAddress(modOpenGL32, "glMakeTextureHandleNonResidentARB"); }
		if(!obj->methodp_glMakeTextureHandleNonResidentARB) { args.This()->Set(v8::String::NewSymbol("glMakeTextureHandleNonResidentARB"), v8::Undefined()); }
		if(!obj->methodp_glMakeTextureHandleNonResidentNV) { obj->methodp_glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)wglGetProcAddress("glMakeTextureHandleNonResidentNV"); }
		if(!obj->methodp_glMakeTextureHandleNonResidentNV) { obj->methodp_glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)GetProcAddress(modOpenGL32, "glMakeTextureHandleNonResidentNV"); }
		if(!obj->methodp_glMakeTextureHandleNonResidentNV) { args.This()->Set(v8::String::NewSymbol("glMakeTextureHandleNonResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glMakeTextureHandleResidentARB) { obj->methodp_glMakeTextureHandleResidentARB = (PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)wglGetProcAddress("glMakeTextureHandleResidentARB"); }
		if(!obj->methodp_glMakeTextureHandleResidentARB) { obj->methodp_glMakeTextureHandleResidentARB = (PFNGLMAKETEXTUREHANDLERESIDENTARBPROC)GetProcAddress(modOpenGL32, "glMakeTextureHandleResidentARB"); }
		if(!obj->methodp_glMakeTextureHandleResidentARB) { args.This()->Set(v8::String::NewSymbol("glMakeTextureHandleResidentARB"), v8::Undefined()); }
		if(!obj->methodp_glMakeTextureHandleResidentNV) { obj->methodp_glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)wglGetProcAddress("glMakeTextureHandleResidentNV"); }
		if(!obj->methodp_glMakeTextureHandleResidentNV) { obj->methodp_glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)GetProcAddress(modOpenGL32, "glMakeTextureHandleResidentNV"); }
		if(!obj->methodp_glMakeTextureHandleResidentNV) { args.This()->Set(v8::String::NewSymbol("glMakeTextureHandleResidentNV"), v8::Undefined()); }
		if(!obj->methodp_glMap1d) { obj->methodp_glMap1d = (PFNGLMAP1DPROC)wglGetProcAddress("glMap1d"); }
		if(!obj->methodp_glMap1d) { obj->methodp_glMap1d = (PFNGLMAP1DPROC)GetProcAddress(modOpenGL32, "glMap1d"); }
		if(!obj->methodp_glMap1d) { args.This()->Set(v8::String::NewSymbol("glMap1d"), v8::Undefined()); }
		if(!obj->methodp_glMap1f) { obj->methodp_glMap1f = (PFNGLMAP1FPROC)wglGetProcAddress("glMap1f"); }
		if(!obj->methodp_glMap1f) { obj->methodp_glMap1f = (PFNGLMAP1FPROC)GetProcAddress(modOpenGL32, "glMap1f"); }
		if(!obj->methodp_glMap1f) { args.This()->Set(v8::String::NewSymbol("glMap1f"), v8::Undefined()); }
		if(!obj->methodp_glMap1xOES) { obj->methodp_glMap1xOES = (PFNGLMAP1XOESPROC)wglGetProcAddress("glMap1xOES"); }
		if(!obj->methodp_glMap1xOES) { obj->methodp_glMap1xOES = (PFNGLMAP1XOESPROC)GetProcAddress(modOpenGL32, "glMap1xOES"); }
		if(!obj->methodp_glMap1xOES) { args.This()->Set(v8::String::NewSymbol("glMap1xOES"), v8::Undefined()); }
		if(!obj->methodp_glMap2d) { obj->methodp_glMap2d = (PFNGLMAP2DPROC)wglGetProcAddress("glMap2d"); }
		if(!obj->methodp_glMap2d) { obj->methodp_glMap2d = (PFNGLMAP2DPROC)GetProcAddress(modOpenGL32, "glMap2d"); }
		if(!obj->methodp_glMap2d) { args.This()->Set(v8::String::NewSymbol("glMap2d"), v8::Undefined()); }
		if(!obj->methodp_glMap2f) { obj->methodp_glMap2f = (PFNGLMAP2FPROC)wglGetProcAddress("glMap2f"); }
		if(!obj->methodp_glMap2f) { obj->methodp_glMap2f = (PFNGLMAP2FPROC)GetProcAddress(modOpenGL32, "glMap2f"); }
		if(!obj->methodp_glMap2f) { args.This()->Set(v8::String::NewSymbol("glMap2f"), v8::Undefined()); }
		if(!obj->methodp_glMap2xOES) { obj->methodp_glMap2xOES = (PFNGLMAP2XOESPROC)wglGetProcAddress("glMap2xOES"); }
		if(!obj->methodp_glMap2xOES) { obj->methodp_glMap2xOES = (PFNGLMAP2XOESPROC)GetProcAddress(modOpenGL32, "glMap2xOES"); }
		if(!obj->methodp_glMap2xOES) { args.This()->Set(v8::String::NewSymbol("glMap2xOES"), v8::Undefined()); }
		if(!obj->methodp_glMapBuffer) { obj->methodp_glMapBuffer = (PFNGLMAPBUFFERPROC)wglGetProcAddress("glMapBuffer"); }
		if(!obj->methodp_glMapBuffer) { obj->methodp_glMapBuffer = (PFNGLMAPBUFFERPROC)GetProcAddress(modOpenGL32, "glMapBuffer"); }
		if(!obj->methodp_glMapBuffer) { args.This()->Set(v8::String::NewSymbol("glMapBuffer"), v8::Undefined()); }
		if(!obj->methodp_glMapBufferARB) { obj->methodp_glMapBufferARB = (PFNGLMAPBUFFERARBPROC)wglGetProcAddress("glMapBufferARB"); }
		if(!obj->methodp_glMapBufferARB) { obj->methodp_glMapBufferARB = (PFNGLMAPBUFFERARBPROC)GetProcAddress(modOpenGL32, "glMapBufferARB"); }
		if(!obj->methodp_glMapBufferARB) { args.This()->Set(v8::String::NewSymbol("glMapBufferARB"), v8::Undefined()); }
		if(!obj->methodp_glMapBufferOES) { obj->methodp_glMapBufferOES = (PFNGLMAPBUFFEROESPROC)wglGetProcAddress("glMapBufferOES"); }
		if(!obj->methodp_glMapBufferOES) { obj->methodp_glMapBufferOES = (PFNGLMAPBUFFEROESPROC)GetProcAddress(modOpenGL32, "glMapBufferOES"); }
		if(!obj->methodp_glMapBufferOES) { args.This()->Set(v8::String::NewSymbol("glMapBufferOES"), v8::Undefined()); }
		if(!obj->methodp_glMapBufferRange) { obj->methodp_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)wglGetProcAddress("glMapBufferRange"); }
		if(!obj->methodp_glMapBufferRange) { obj->methodp_glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)GetProcAddress(modOpenGL32, "glMapBufferRange"); }
		if(!obj->methodp_glMapBufferRange) { args.This()->Set(v8::String::NewSymbol("glMapBufferRange"), v8::Undefined()); }
		if(!obj->methodp_glMapBufferRangeEXT) { obj->methodp_glMapBufferRangeEXT = (PFNGLMAPBUFFERRANGEEXTPROC)wglGetProcAddress("glMapBufferRangeEXT"); }
		if(!obj->methodp_glMapBufferRangeEXT) { obj->methodp_glMapBufferRangeEXT = (PFNGLMAPBUFFERRANGEEXTPROC)GetProcAddress(modOpenGL32, "glMapBufferRangeEXT"); }
		if(!obj->methodp_glMapBufferRangeEXT) { args.This()->Set(v8::String::NewSymbol("glMapBufferRangeEXT"), v8::Undefined()); }
		if(!obj->methodp_glMapControlPointsNV) { obj->methodp_glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)wglGetProcAddress("glMapControlPointsNV"); }
		if(!obj->methodp_glMapControlPointsNV) { obj->methodp_glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)GetProcAddress(modOpenGL32, "glMapControlPointsNV"); }
		if(!obj->methodp_glMapControlPointsNV) { args.This()->Set(v8::String::NewSymbol("glMapControlPointsNV"), v8::Undefined()); }
		if(!obj->methodp_glMapGrid1d) { obj->methodp_glMapGrid1d = (PFNGLMAPGRID1DPROC)wglGetProcAddress("glMapGrid1d"); }
		if(!obj->methodp_glMapGrid1d) { obj->methodp_glMapGrid1d = (PFNGLMAPGRID1DPROC)GetProcAddress(modOpenGL32, "glMapGrid1d"); }
		if(!obj->methodp_glMapGrid1d) { args.This()->Set(v8::String::NewSymbol("glMapGrid1d"), v8::Undefined()); }
		if(!obj->methodp_glMapGrid1f) { obj->methodp_glMapGrid1f = (PFNGLMAPGRID1FPROC)wglGetProcAddress("glMapGrid1f"); }
		if(!obj->methodp_glMapGrid1f) { obj->methodp_glMapGrid1f = (PFNGLMAPGRID1FPROC)GetProcAddress(modOpenGL32, "glMapGrid1f"); }
		if(!obj->methodp_glMapGrid1f) { args.This()->Set(v8::String::NewSymbol("glMapGrid1f"), v8::Undefined()); }
		if(!obj->methodp_glMapGrid1xOES) { obj->methodp_glMapGrid1xOES = (PFNGLMAPGRID1XOESPROC)wglGetProcAddress("glMapGrid1xOES"); }
		if(!obj->methodp_glMapGrid1xOES) { obj->methodp_glMapGrid1xOES = (PFNGLMAPGRID1XOESPROC)GetProcAddress(modOpenGL32, "glMapGrid1xOES"); }
		if(!obj->methodp_glMapGrid1xOES) { args.This()->Set(v8::String::NewSymbol("glMapGrid1xOES"), v8::Undefined()); }
		if(!obj->methodp_glMapGrid2d) { obj->methodp_glMapGrid2d = (PFNGLMAPGRID2DPROC)wglGetProcAddress("glMapGrid2d"); }
		if(!obj->methodp_glMapGrid2d) { obj->methodp_glMapGrid2d = (PFNGLMAPGRID2DPROC)GetProcAddress(modOpenGL32, "glMapGrid2d"); }
		if(!obj->methodp_glMapGrid2d) { args.This()->Set(v8::String::NewSymbol("glMapGrid2d"), v8::Undefined()); }
		if(!obj->methodp_glMapGrid2f) { obj->methodp_glMapGrid2f = (PFNGLMAPGRID2FPROC)wglGetProcAddress("glMapGrid2f"); }
		if(!obj->methodp_glMapGrid2f) { obj->methodp_glMapGrid2f = (PFNGLMAPGRID2FPROC)GetProcAddress(modOpenGL32, "glMapGrid2f"); }
		if(!obj->methodp_glMapGrid2f) { args.This()->Set(v8::String::NewSymbol("glMapGrid2f"), v8::Undefined()); }
		if(!obj->methodp_glMapGrid2xOES) { obj->methodp_glMapGrid2xOES = (PFNGLMAPGRID2XOESPROC)wglGetProcAddress("glMapGrid2xOES"); }
		if(!obj->methodp_glMapGrid2xOES) { obj->methodp_glMapGrid2xOES = (PFNGLMAPGRID2XOESPROC)GetProcAddress(modOpenGL32, "glMapGrid2xOES"); }
		if(!obj->methodp_glMapGrid2xOES) { args.This()->Set(v8::String::NewSymbol("glMapGrid2xOES"), v8::Undefined()); }
		if(!obj->methodp_glMapNamedBufferEXT) { obj->methodp_glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC)wglGetProcAddress("glMapNamedBufferEXT"); }
		if(!obj->methodp_glMapNamedBufferEXT) { obj->methodp_glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glMapNamedBufferEXT"); }
		if(!obj->methodp_glMapNamedBufferEXT) { args.This()->Set(v8::String::NewSymbol("glMapNamedBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glMapNamedBufferRangeEXT) { obj->methodp_glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC)wglGetProcAddress("glMapNamedBufferRangeEXT"); }
		if(!obj->methodp_glMapNamedBufferRangeEXT) { obj->methodp_glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC)GetProcAddress(modOpenGL32, "glMapNamedBufferRangeEXT"); }
		if(!obj->methodp_glMapNamedBufferRangeEXT) { args.This()->Set(v8::String::NewSymbol("glMapNamedBufferRangeEXT"), v8::Undefined()); }
		if(!obj->methodp_glMapObjectBufferATI) { obj->methodp_glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC)wglGetProcAddress("glMapObjectBufferATI"); }
		if(!obj->methodp_glMapObjectBufferATI) { obj->methodp_glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC)GetProcAddress(modOpenGL32, "glMapObjectBufferATI"); }
		if(!obj->methodp_glMapObjectBufferATI) { args.This()->Set(v8::String::NewSymbol("glMapObjectBufferATI"), v8::Undefined()); }
		if(!obj->methodp_glMapParameterfvNV) { obj->methodp_glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)wglGetProcAddress("glMapParameterfvNV"); }
		if(!obj->methodp_glMapParameterfvNV) { obj->methodp_glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glMapParameterfvNV"); }
		if(!obj->methodp_glMapParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glMapParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glMapParameterivNV) { obj->methodp_glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)wglGetProcAddress("glMapParameterivNV"); }
		if(!obj->methodp_glMapParameterivNV) { obj->methodp_glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glMapParameterivNV"); }
		if(!obj->methodp_glMapParameterivNV) { args.This()->Set(v8::String::NewSymbol("glMapParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glMapTexture2DINTEL) { obj->methodp_glMapTexture2DINTEL = (PFNGLMAPTEXTURE2DINTELPROC)wglGetProcAddress("glMapTexture2DINTEL"); }
		if(!obj->methodp_glMapTexture2DINTEL) { obj->methodp_glMapTexture2DINTEL = (PFNGLMAPTEXTURE2DINTELPROC)GetProcAddress(modOpenGL32, "glMapTexture2DINTEL"); }
		if(!obj->methodp_glMapTexture2DINTEL) { args.This()->Set(v8::String::NewSymbol("glMapTexture2DINTEL"), v8::Undefined()); }
		if(!obj->methodp_glMapVertexAttrib1dAPPLE) { obj->methodp_glMapVertexAttrib1dAPPLE = (PFNGLMAPVERTEXATTRIB1DAPPLEPROC)wglGetProcAddress("glMapVertexAttrib1dAPPLE"); }
		if(!obj->methodp_glMapVertexAttrib1dAPPLE) { obj->methodp_glMapVertexAttrib1dAPPLE = (PFNGLMAPVERTEXATTRIB1DAPPLEPROC)GetProcAddress(modOpenGL32, "glMapVertexAttrib1dAPPLE"); }
		if(!obj->methodp_glMapVertexAttrib1dAPPLE) { args.This()->Set(v8::String::NewSymbol("glMapVertexAttrib1dAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glMapVertexAttrib1fAPPLE) { obj->methodp_glMapVertexAttrib1fAPPLE = (PFNGLMAPVERTEXATTRIB1FAPPLEPROC)wglGetProcAddress("glMapVertexAttrib1fAPPLE"); }
		if(!obj->methodp_glMapVertexAttrib1fAPPLE) { obj->methodp_glMapVertexAttrib1fAPPLE = (PFNGLMAPVERTEXATTRIB1FAPPLEPROC)GetProcAddress(modOpenGL32, "glMapVertexAttrib1fAPPLE"); }
		if(!obj->methodp_glMapVertexAttrib1fAPPLE) { args.This()->Set(v8::String::NewSymbol("glMapVertexAttrib1fAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glMapVertexAttrib2dAPPLE) { obj->methodp_glMapVertexAttrib2dAPPLE = (PFNGLMAPVERTEXATTRIB2DAPPLEPROC)wglGetProcAddress("glMapVertexAttrib2dAPPLE"); }
		if(!obj->methodp_glMapVertexAttrib2dAPPLE) { obj->methodp_glMapVertexAttrib2dAPPLE = (PFNGLMAPVERTEXATTRIB2DAPPLEPROC)GetProcAddress(modOpenGL32, "glMapVertexAttrib2dAPPLE"); }
		if(!obj->methodp_glMapVertexAttrib2dAPPLE) { args.This()->Set(v8::String::NewSymbol("glMapVertexAttrib2dAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glMapVertexAttrib2fAPPLE) { obj->methodp_glMapVertexAttrib2fAPPLE = (PFNGLMAPVERTEXATTRIB2FAPPLEPROC)wglGetProcAddress("glMapVertexAttrib2fAPPLE"); }
		if(!obj->methodp_glMapVertexAttrib2fAPPLE) { obj->methodp_glMapVertexAttrib2fAPPLE = (PFNGLMAPVERTEXATTRIB2FAPPLEPROC)GetProcAddress(modOpenGL32, "glMapVertexAttrib2fAPPLE"); }
		if(!obj->methodp_glMapVertexAttrib2fAPPLE) { args.This()->Set(v8::String::NewSymbol("glMapVertexAttrib2fAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glMaterialf) { obj->methodp_glMaterialf = (PFNGLMATERIALFPROC)wglGetProcAddress("glMaterialf"); }
		if(!obj->methodp_glMaterialf) { obj->methodp_glMaterialf = (PFNGLMATERIALFPROC)GetProcAddress(modOpenGL32, "glMaterialf"); }
		if(!obj->methodp_glMaterialf) { args.This()->Set(v8::String::NewSymbol("glMaterialf"), v8::Undefined()); }
		if(!obj->methodp_glMaterialfv) { obj->methodp_glMaterialfv = (PFNGLMATERIALFVPROC)wglGetProcAddress("glMaterialfv"); }
		if(!obj->methodp_glMaterialfv) { obj->methodp_glMaterialfv = (PFNGLMATERIALFVPROC)GetProcAddress(modOpenGL32, "glMaterialfv"); }
		if(!obj->methodp_glMaterialfv) { args.This()->Set(v8::String::NewSymbol("glMaterialfv"), v8::Undefined()); }
		if(!obj->methodp_glMateriali) { obj->methodp_glMateriali = (PFNGLMATERIALIPROC)wglGetProcAddress("glMateriali"); }
		if(!obj->methodp_glMateriali) { obj->methodp_glMateriali = (PFNGLMATERIALIPROC)GetProcAddress(modOpenGL32, "glMateriali"); }
		if(!obj->methodp_glMateriali) { args.This()->Set(v8::String::NewSymbol("glMateriali"), v8::Undefined()); }
		if(!obj->methodp_glMaterialiv) { obj->methodp_glMaterialiv = (PFNGLMATERIALIVPROC)wglGetProcAddress("glMaterialiv"); }
		if(!obj->methodp_glMaterialiv) { obj->methodp_glMaterialiv = (PFNGLMATERIALIVPROC)GetProcAddress(modOpenGL32, "glMaterialiv"); }
		if(!obj->methodp_glMaterialiv) { args.This()->Set(v8::String::NewSymbol("glMaterialiv"), v8::Undefined()); }
		if(!obj->methodp_glMaterialx) { obj->methodp_glMaterialx = (PFNGLMATERIALXPROC)wglGetProcAddress("glMaterialx"); }
		if(!obj->methodp_glMaterialx) { obj->methodp_glMaterialx = (PFNGLMATERIALXPROC)GetProcAddress(modOpenGL32, "glMaterialx"); }
		if(!obj->methodp_glMaterialx) { args.This()->Set(v8::String::NewSymbol("glMaterialx"), v8::Undefined()); }
		if(!obj->methodp_glMaterialxOES) { obj->methodp_glMaterialxOES = (PFNGLMATERIALXOESPROC)wglGetProcAddress("glMaterialxOES"); }
		if(!obj->methodp_glMaterialxOES) { obj->methodp_glMaterialxOES = (PFNGLMATERIALXOESPROC)GetProcAddress(modOpenGL32, "glMaterialxOES"); }
		if(!obj->methodp_glMaterialxOES) { args.This()->Set(v8::String::NewSymbol("glMaterialxOES"), v8::Undefined()); }
		if(!obj->methodp_glMaterialxv) { obj->methodp_glMaterialxv = (PFNGLMATERIALXVPROC)wglGetProcAddress("glMaterialxv"); }
		if(!obj->methodp_glMaterialxv) { obj->methodp_glMaterialxv = (PFNGLMATERIALXVPROC)GetProcAddress(modOpenGL32, "glMaterialxv"); }
		if(!obj->methodp_glMaterialxv) { args.This()->Set(v8::String::NewSymbol("glMaterialxv"), v8::Undefined()); }
		if(!obj->methodp_glMaterialxvOES) { obj->methodp_glMaterialxvOES = (PFNGLMATERIALXVOESPROC)wglGetProcAddress("glMaterialxvOES"); }
		if(!obj->methodp_glMaterialxvOES) { obj->methodp_glMaterialxvOES = (PFNGLMATERIALXVOESPROC)GetProcAddress(modOpenGL32, "glMaterialxvOES"); }
		if(!obj->methodp_glMaterialxvOES) { args.This()->Set(v8::String::NewSymbol("glMaterialxvOES"), v8::Undefined()); }
		if(!obj->methodp_glMatrixFrustumEXT) { obj->methodp_glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC)wglGetProcAddress("glMatrixFrustumEXT"); }
		if(!obj->methodp_glMatrixFrustumEXT) { obj->methodp_glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC)GetProcAddress(modOpenGL32, "glMatrixFrustumEXT"); }
		if(!obj->methodp_glMatrixFrustumEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixFrustumEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixIndexPointerARB) { obj->methodp_glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC)wglGetProcAddress("glMatrixIndexPointerARB"); }
		if(!obj->methodp_glMatrixIndexPointerARB) { obj->methodp_glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC)GetProcAddress(modOpenGL32, "glMatrixIndexPointerARB"); }
		if(!obj->methodp_glMatrixIndexPointerARB) { args.This()->Set(v8::String::NewSymbol("glMatrixIndexPointerARB"), v8::Undefined()); }
		if(!obj->methodp_glMatrixIndexPointerOES) { obj->methodp_glMatrixIndexPointerOES = (PFNGLMATRIXINDEXPOINTEROESPROC)wglGetProcAddress("glMatrixIndexPointerOES"); }
		if(!obj->methodp_glMatrixIndexPointerOES) { obj->methodp_glMatrixIndexPointerOES = (PFNGLMATRIXINDEXPOINTEROESPROC)GetProcAddress(modOpenGL32, "glMatrixIndexPointerOES"); }
		if(!obj->methodp_glMatrixIndexPointerOES) { args.This()->Set(v8::String::NewSymbol("glMatrixIndexPointerOES"), v8::Undefined()); }
		if(!obj->methodp_glMatrixIndexubvARB) { obj->methodp_glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC)wglGetProcAddress("glMatrixIndexubvARB"); }
		if(!obj->methodp_glMatrixIndexubvARB) { obj->methodp_glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC)GetProcAddress(modOpenGL32, "glMatrixIndexubvARB"); }
		if(!obj->methodp_glMatrixIndexubvARB) { args.This()->Set(v8::String::NewSymbol("glMatrixIndexubvARB"), v8::Undefined()); }
		if(!obj->methodp_glMatrixIndexuivARB) { obj->methodp_glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC)wglGetProcAddress("glMatrixIndexuivARB"); }
		if(!obj->methodp_glMatrixIndexuivARB) { obj->methodp_glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC)GetProcAddress(modOpenGL32, "glMatrixIndexuivARB"); }
		if(!obj->methodp_glMatrixIndexuivARB) { args.This()->Set(v8::String::NewSymbol("glMatrixIndexuivARB"), v8::Undefined()); }
		if(!obj->methodp_glMatrixIndexusvARB) { obj->methodp_glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC)wglGetProcAddress("glMatrixIndexusvARB"); }
		if(!obj->methodp_glMatrixIndexusvARB) { obj->methodp_glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC)GetProcAddress(modOpenGL32, "glMatrixIndexusvARB"); }
		if(!obj->methodp_glMatrixIndexusvARB) { args.This()->Set(v8::String::NewSymbol("glMatrixIndexusvARB"), v8::Undefined()); }
		if(!obj->methodp_glMatrixLoadIdentityEXT) { obj->methodp_glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC)wglGetProcAddress("glMatrixLoadIdentityEXT"); }
		if(!obj->methodp_glMatrixLoadIdentityEXT) { obj->methodp_glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC)GetProcAddress(modOpenGL32, "glMatrixLoadIdentityEXT"); }
		if(!obj->methodp_glMatrixLoadIdentityEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixLoadIdentityEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixLoadTransposedEXT) { obj->methodp_glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC)wglGetProcAddress("glMatrixLoadTransposedEXT"); }
		if(!obj->methodp_glMatrixLoadTransposedEXT) { obj->methodp_glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC)GetProcAddress(modOpenGL32, "glMatrixLoadTransposedEXT"); }
		if(!obj->methodp_glMatrixLoadTransposedEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixLoadTransposedEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixLoadTransposefEXT) { obj->methodp_glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC)wglGetProcAddress("glMatrixLoadTransposefEXT"); }
		if(!obj->methodp_glMatrixLoadTransposefEXT) { obj->methodp_glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC)GetProcAddress(modOpenGL32, "glMatrixLoadTransposefEXT"); }
		if(!obj->methodp_glMatrixLoadTransposefEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixLoadTransposefEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixLoaddEXT) { obj->methodp_glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC)wglGetProcAddress("glMatrixLoaddEXT"); }
		if(!obj->methodp_glMatrixLoaddEXT) { obj->methodp_glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC)GetProcAddress(modOpenGL32, "glMatrixLoaddEXT"); }
		if(!obj->methodp_glMatrixLoaddEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixLoaddEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixLoadfEXT) { obj->methodp_glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC)wglGetProcAddress("glMatrixLoadfEXT"); }
		if(!obj->methodp_glMatrixLoadfEXT) { obj->methodp_glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC)GetProcAddress(modOpenGL32, "glMatrixLoadfEXT"); }
		if(!obj->methodp_glMatrixLoadfEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixLoadfEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixMode) { obj->methodp_glMatrixMode = (PFNGLMATRIXMODEPROC)wglGetProcAddress("glMatrixMode"); }
		if(!obj->methodp_glMatrixMode) { obj->methodp_glMatrixMode = (PFNGLMATRIXMODEPROC)GetProcAddress(modOpenGL32, "glMatrixMode"); }
		if(!obj->methodp_glMatrixMode) { args.This()->Set(v8::String::NewSymbol("glMatrixMode"), v8::Undefined()); }
		if(!obj->methodp_glMatrixMultTransposedEXT) { obj->methodp_glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC)wglGetProcAddress("glMatrixMultTransposedEXT"); }
		if(!obj->methodp_glMatrixMultTransposedEXT) { obj->methodp_glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC)GetProcAddress(modOpenGL32, "glMatrixMultTransposedEXT"); }
		if(!obj->methodp_glMatrixMultTransposedEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixMultTransposedEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixMultTransposefEXT) { obj->methodp_glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC)wglGetProcAddress("glMatrixMultTransposefEXT"); }
		if(!obj->methodp_glMatrixMultTransposefEXT) { obj->methodp_glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC)GetProcAddress(modOpenGL32, "glMatrixMultTransposefEXT"); }
		if(!obj->methodp_glMatrixMultTransposefEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixMultTransposefEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixMultdEXT) { obj->methodp_glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC)wglGetProcAddress("glMatrixMultdEXT"); }
		if(!obj->methodp_glMatrixMultdEXT) { obj->methodp_glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC)GetProcAddress(modOpenGL32, "glMatrixMultdEXT"); }
		if(!obj->methodp_glMatrixMultdEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixMultdEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixMultfEXT) { obj->methodp_glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC)wglGetProcAddress("glMatrixMultfEXT"); }
		if(!obj->methodp_glMatrixMultfEXT) { obj->methodp_glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC)GetProcAddress(modOpenGL32, "glMatrixMultfEXT"); }
		if(!obj->methodp_glMatrixMultfEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixMultfEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixOrthoEXT) { obj->methodp_glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC)wglGetProcAddress("glMatrixOrthoEXT"); }
		if(!obj->methodp_glMatrixOrthoEXT) { obj->methodp_glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC)GetProcAddress(modOpenGL32, "glMatrixOrthoEXT"); }
		if(!obj->methodp_glMatrixOrthoEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixOrthoEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixPopEXT) { obj->methodp_glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC)wglGetProcAddress("glMatrixPopEXT"); }
		if(!obj->methodp_glMatrixPopEXT) { obj->methodp_glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC)GetProcAddress(modOpenGL32, "glMatrixPopEXT"); }
		if(!obj->methodp_glMatrixPopEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixPopEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixPushEXT) { obj->methodp_glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC)wglGetProcAddress("glMatrixPushEXT"); }
		if(!obj->methodp_glMatrixPushEXT) { obj->methodp_glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC)GetProcAddress(modOpenGL32, "glMatrixPushEXT"); }
		if(!obj->methodp_glMatrixPushEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixPushEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixRotatedEXT) { obj->methodp_glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC)wglGetProcAddress("glMatrixRotatedEXT"); }
		if(!obj->methodp_glMatrixRotatedEXT) { obj->methodp_glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC)GetProcAddress(modOpenGL32, "glMatrixRotatedEXT"); }
		if(!obj->methodp_glMatrixRotatedEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixRotatedEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixRotatefEXT) { obj->methodp_glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC)wglGetProcAddress("glMatrixRotatefEXT"); }
		if(!obj->methodp_glMatrixRotatefEXT) { obj->methodp_glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC)GetProcAddress(modOpenGL32, "glMatrixRotatefEXT"); }
		if(!obj->methodp_glMatrixRotatefEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixRotatefEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixScaledEXT) { obj->methodp_glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC)wglGetProcAddress("glMatrixScaledEXT"); }
		if(!obj->methodp_glMatrixScaledEXT) { obj->methodp_glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC)GetProcAddress(modOpenGL32, "glMatrixScaledEXT"); }
		if(!obj->methodp_glMatrixScaledEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixScaledEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixScalefEXT) { obj->methodp_glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC)wglGetProcAddress("glMatrixScalefEXT"); }
		if(!obj->methodp_glMatrixScalefEXT) { obj->methodp_glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC)GetProcAddress(modOpenGL32, "glMatrixScalefEXT"); }
		if(!obj->methodp_glMatrixScalefEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixScalefEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixTranslatedEXT) { obj->methodp_glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC)wglGetProcAddress("glMatrixTranslatedEXT"); }
		if(!obj->methodp_glMatrixTranslatedEXT) { obj->methodp_glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC)GetProcAddress(modOpenGL32, "glMatrixTranslatedEXT"); }
		if(!obj->methodp_glMatrixTranslatedEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixTranslatedEXT"), v8::Undefined()); }
		if(!obj->methodp_glMatrixTranslatefEXT) { obj->methodp_glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC)wglGetProcAddress("glMatrixTranslatefEXT"); }
		if(!obj->methodp_glMatrixTranslatefEXT) { obj->methodp_glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC)GetProcAddress(modOpenGL32, "glMatrixTranslatefEXT"); }
		if(!obj->methodp_glMatrixTranslatefEXT) { args.This()->Set(v8::String::NewSymbol("glMatrixTranslatefEXT"), v8::Undefined()); }
		if(!obj->methodp_glMemoryBarrier) { obj->methodp_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)wglGetProcAddress("glMemoryBarrier"); }
		if(!obj->methodp_glMemoryBarrier) { obj->methodp_glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)GetProcAddress(modOpenGL32, "glMemoryBarrier"); }
		if(!obj->methodp_glMemoryBarrier) { args.This()->Set(v8::String::NewSymbol("glMemoryBarrier"), v8::Undefined()); }
		if(!obj->methodp_glMemoryBarrierByRegion) { obj->methodp_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)wglGetProcAddress("glMemoryBarrierByRegion"); }
		if(!obj->methodp_glMemoryBarrierByRegion) { obj->methodp_glMemoryBarrierByRegion = (PFNGLMEMORYBARRIERBYREGIONPROC)GetProcAddress(modOpenGL32, "glMemoryBarrierByRegion"); }
		if(!obj->methodp_glMemoryBarrierByRegion) { args.This()->Set(v8::String::NewSymbol("glMemoryBarrierByRegion"), v8::Undefined()); }
		if(!obj->methodp_glMemoryBarrierEXT) { obj->methodp_glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC)wglGetProcAddress("glMemoryBarrierEXT"); }
		if(!obj->methodp_glMemoryBarrierEXT) { obj->methodp_glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC)GetProcAddress(modOpenGL32, "glMemoryBarrierEXT"); }
		if(!obj->methodp_glMemoryBarrierEXT) { args.This()->Set(v8::String::NewSymbol("glMemoryBarrierEXT"), v8::Undefined()); }
		if(!obj->methodp_glMinSampleShading) { obj->methodp_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)wglGetProcAddress("glMinSampleShading"); }
		if(!obj->methodp_glMinSampleShading) { obj->methodp_glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)GetProcAddress(modOpenGL32, "glMinSampleShading"); }
		if(!obj->methodp_glMinSampleShading) { args.This()->Set(v8::String::NewSymbol("glMinSampleShading"), v8::Undefined()); }
		if(!obj->methodp_glMinSampleShadingARB) { obj->methodp_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)wglGetProcAddress("glMinSampleShadingARB"); }
		if(!obj->methodp_glMinSampleShadingARB) { obj->methodp_glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)GetProcAddress(modOpenGL32, "glMinSampleShadingARB"); }
		if(!obj->methodp_glMinSampleShadingARB) { args.This()->Set(v8::String::NewSymbol("glMinSampleShadingARB"), v8::Undefined()); }
		if(!obj->methodp_glMinSampleShadingOES) { obj->methodp_glMinSampleShadingOES = (PFNGLMINSAMPLESHADINGOESPROC)wglGetProcAddress("glMinSampleShadingOES"); }
		if(!obj->methodp_glMinSampleShadingOES) { obj->methodp_glMinSampleShadingOES = (PFNGLMINSAMPLESHADINGOESPROC)GetProcAddress(modOpenGL32, "glMinSampleShadingOES"); }
		if(!obj->methodp_glMinSampleShadingOES) { args.This()->Set(v8::String::NewSymbol("glMinSampleShadingOES"), v8::Undefined()); }
		if(!obj->methodp_glMinmax) { obj->methodp_glMinmax = (PFNGLMINMAXPROC)wglGetProcAddress("glMinmax"); }
		if(!obj->methodp_glMinmax) { obj->methodp_glMinmax = (PFNGLMINMAXPROC)GetProcAddress(modOpenGL32, "glMinmax"); }
		if(!obj->methodp_glMinmax) { args.This()->Set(v8::String::NewSymbol("glMinmax"), v8::Undefined()); }
		if(!obj->methodp_glMinmaxEXT) { obj->methodp_glMinmaxEXT = (PFNGLMINMAXEXTPROC)wglGetProcAddress("glMinmaxEXT"); }
		if(!obj->methodp_glMinmaxEXT) { obj->methodp_glMinmaxEXT = (PFNGLMINMAXEXTPROC)GetProcAddress(modOpenGL32, "glMinmaxEXT"); }
		if(!obj->methodp_glMinmaxEXT) { args.This()->Set(v8::String::NewSymbol("glMinmaxEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultMatrixd) { obj->methodp_glMultMatrixd = (PFNGLMULTMATRIXDPROC)wglGetProcAddress("glMultMatrixd"); }
		if(!obj->methodp_glMultMatrixd) { obj->methodp_glMultMatrixd = (PFNGLMULTMATRIXDPROC)GetProcAddress(modOpenGL32, "glMultMatrixd"); }
		if(!obj->methodp_glMultMatrixd) { args.This()->Set(v8::String::NewSymbol("glMultMatrixd"), v8::Undefined()); }
		if(!obj->methodp_glMultMatrixf) { obj->methodp_glMultMatrixf = (PFNGLMULTMATRIXFPROC)wglGetProcAddress("glMultMatrixf"); }
		if(!obj->methodp_glMultMatrixf) { obj->methodp_glMultMatrixf = (PFNGLMULTMATRIXFPROC)GetProcAddress(modOpenGL32, "glMultMatrixf"); }
		if(!obj->methodp_glMultMatrixf) { args.This()->Set(v8::String::NewSymbol("glMultMatrixf"), v8::Undefined()); }
		if(!obj->methodp_glMultMatrixx) { obj->methodp_glMultMatrixx = (PFNGLMULTMATRIXXPROC)wglGetProcAddress("glMultMatrixx"); }
		if(!obj->methodp_glMultMatrixx) { obj->methodp_glMultMatrixx = (PFNGLMULTMATRIXXPROC)GetProcAddress(modOpenGL32, "glMultMatrixx"); }
		if(!obj->methodp_glMultMatrixx) { args.This()->Set(v8::String::NewSymbol("glMultMatrixx"), v8::Undefined()); }
		if(!obj->methodp_glMultMatrixxOES) { obj->methodp_glMultMatrixxOES = (PFNGLMULTMATRIXXOESPROC)wglGetProcAddress("glMultMatrixxOES"); }
		if(!obj->methodp_glMultMatrixxOES) { obj->methodp_glMultMatrixxOES = (PFNGLMULTMATRIXXOESPROC)GetProcAddress(modOpenGL32, "glMultMatrixxOES"); }
		if(!obj->methodp_glMultMatrixxOES) { args.This()->Set(v8::String::NewSymbol("glMultMatrixxOES"), v8::Undefined()); }
		if(!obj->methodp_glMultTransposeMatrixd) { obj->methodp_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)wglGetProcAddress("glMultTransposeMatrixd"); }
		if(!obj->methodp_glMultTransposeMatrixd) { obj->methodp_glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)GetProcAddress(modOpenGL32, "glMultTransposeMatrixd"); }
		if(!obj->methodp_glMultTransposeMatrixd) { args.This()->Set(v8::String::NewSymbol("glMultTransposeMatrixd"), v8::Undefined()); }
		if(!obj->methodp_glMultTransposeMatrixdARB) { obj->methodp_glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)wglGetProcAddress("glMultTransposeMatrixdARB"); }
		if(!obj->methodp_glMultTransposeMatrixdARB) { obj->methodp_glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)GetProcAddress(modOpenGL32, "glMultTransposeMatrixdARB"); }
		if(!obj->methodp_glMultTransposeMatrixdARB) { args.This()->Set(v8::String::NewSymbol("glMultTransposeMatrixdARB"), v8::Undefined()); }
		if(!obj->methodp_glMultTransposeMatrixf) { obj->methodp_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)wglGetProcAddress("glMultTransposeMatrixf"); }
		if(!obj->methodp_glMultTransposeMatrixf) { obj->methodp_glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)GetProcAddress(modOpenGL32, "glMultTransposeMatrixf"); }
		if(!obj->methodp_glMultTransposeMatrixf) { args.This()->Set(v8::String::NewSymbol("glMultTransposeMatrixf"), v8::Undefined()); }
		if(!obj->methodp_glMultTransposeMatrixfARB) { obj->methodp_glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)wglGetProcAddress("glMultTransposeMatrixfARB"); }
		if(!obj->methodp_glMultTransposeMatrixfARB) { obj->methodp_glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)GetProcAddress(modOpenGL32, "glMultTransposeMatrixfARB"); }
		if(!obj->methodp_glMultTransposeMatrixfARB) { args.This()->Set(v8::String::NewSymbol("glMultTransposeMatrixfARB"), v8::Undefined()); }
		if(!obj->methodp_glMultTransposeMatrixxOES) { obj->methodp_glMultTransposeMatrixxOES = (PFNGLMULTTRANSPOSEMATRIXXOESPROC)wglGetProcAddress("glMultTransposeMatrixxOES"); }
		if(!obj->methodp_glMultTransposeMatrixxOES) { obj->methodp_glMultTransposeMatrixxOES = (PFNGLMULTTRANSPOSEMATRIXXOESPROC)GetProcAddress(modOpenGL32, "glMultTransposeMatrixxOES"); }
		if(!obj->methodp_glMultTransposeMatrixxOES) { args.This()->Set(v8::String::NewSymbol("glMultTransposeMatrixxOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawArrays) { obj->methodp_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)wglGetProcAddress("glMultiDrawArrays"); }
		if(!obj->methodp_glMultiDrawArrays) { obj->methodp_glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)GetProcAddress(modOpenGL32, "glMultiDrawArrays"); }
		if(!obj->methodp_glMultiDrawArrays) { args.This()->Set(v8::String::NewSymbol("glMultiDrawArrays"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawArraysEXT) { obj->methodp_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)wglGetProcAddress("glMultiDrawArraysEXT"); }
		if(!obj->methodp_glMultiDrawArraysEXT) { obj->methodp_glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)GetProcAddress(modOpenGL32, "glMultiDrawArraysEXT"); }
		if(!obj->methodp_glMultiDrawArraysEXT) { args.This()->Set(v8::String::NewSymbol("glMultiDrawArraysEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawArraysIndirect) { obj->methodp_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)wglGetProcAddress("glMultiDrawArraysIndirect"); }
		if(!obj->methodp_glMultiDrawArraysIndirect) { obj->methodp_glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)GetProcAddress(modOpenGL32, "glMultiDrawArraysIndirect"); }
		if(!obj->methodp_glMultiDrawArraysIndirect) { args.This()->Set(v8::String::NewSymbol("glMultiDrawArraysIndirect"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawArraysIndirectAMD) { obj->methodp_glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)wglGetProcAddress("glMultiDrawArraysIndirectAMD"); }
		if(!obj->methodp_glMultiDrawArraysIndirectAMD) { obj->methodp_glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)GetProcAddress(modOpenGL32, "glMultiDrawArraysIndirectAMD"); }
		if(!obj->methodp_glMultiDrawArraysIndirectAMD) { args.This()->Set(v8::String::NewSymbol("glMultiDrawArraysIndirectAMD"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawArraysIndirectBindlessNV) { obj->methodp_glMultiDrawArraysIndirectBindlessNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)wglGetProcAddress("glMultiDrawArraysIndirectBindlessNV"); }
		if(!obj->methodp_glMultiDrawArraysIndirectBindlessNV) { obj->methodp_glMultiDrawArraysIndirectBindlessNV = (PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC)GetProcAddress(modOpenGL32, "glMultiDrawArraysIndirectBindlessNV"); }
		if(!obj->methodp_glMultiDrawArraysIndirectBindlessNV) { args.This()->Set(v8::String::NewSymbol("glMultiDrawArraysIndirectBindlessNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawArraysIndirectCountARB) { obj->methodp_glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)wglGetProcAddress("glMultiDrawArraysIndirectCountARB"); }
		if(!obj->methodp_glMultiDrawArraysIndirectCountARB) { obj->methodp_glMultiDrawArraysIndirectCountARB = (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)GetProcAddress(modOpenGL32, "glMultiDrawArraysIndirectCountARB"); }
		if(!obj->methodp_glMultiDrawArraysIndirectCountARB) { args.This()->Set(v8::String::NewSymbol("glMultiDrawArraysIndirectCountARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawElementArrayAPPLE) { obj->methodp_glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)wglGetProcAddress("glMultiDrawElementArrayAPPLE"); }
		if(!obj->methodp_glMultiDrawElementArrayAPPLE) { obj->methodp_glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)GetProcAddress(modOpenGL32, "glMultiDrawElementArrayAPPLE"); }
		if(!obj->methodp_glMultiDrawElementArrayAPPLE) { args.This()->Set(v8::String::NewSymbol("glMultiDrawElementArrayAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawElements) { obj->methodp_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)wglGetProcAddress("glMultiDrawElements"); }
		if(!obj->methodp_glMultiDrawElements) { obj->methodp_glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)GetProcAddress(modOpenGL32, "glMultiDrawElements"); }
		if(!obj->methodp_glMultiDrawElements) { args.This()->Set(v8::String::NewSymbol("glMultiDrawElements"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawElementsBaseVertex) { obj->methodp_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)wglGetProcAddress("glMultiDrawElementsBaseVertex"); }
		if(!obj->methodp_glMultiDrawElementsBaseVertex) { obj->methodp_glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)GetProcAddress(modOpenGL32, "glMultiDrawElementsBaseVertex"); }
		if(!obj->methodp_glMultiDrawElementsBaseVertex) { args.This()->Set(v8::String::NewSymbol("glMultiDrawElementsBaseVertex"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawElementsEXT) { obj->methodp_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)wglGetProcAddress("glMultiDrawElementsEXT"); }
		if(!obj->methodp_glMultiDrawElementsEXT) { obj->methodp_glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)GetProcAddress(modOpenGL32, "glMultiDrawElementsEXT"); }
		if(!obj->methodp_glMultiDrawElementsEXT) { args.This()->Set(v8::String::NewSymbol("glMultiDrawElementsEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawElementsIndirect) { obj->methodp_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)wglGetProcAddress("glMultiDrawElementsIndirect"); }
		if(!obj->methodp_glMultiDrawElementsIndirect) { obj->methodp_glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)GetProcAddress(modOpenGL32, "glMultiDrawElementsIndirect"); }
		if(!obj->methodp_glMultiDrawElementsIndirect) { args.This()->Set(v8::String::NewSymbol("glMultiDrawElementsIndirect"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawElementsIndirectAMD) { obj->methodp_glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)wglGetProcAddress("glMultiDrawElementsIndirectAMD"); }
		if(!obj->methodp_glMultiDrawElementsIndirectAMD) { obj->methodp_glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)GetProcAddress(modOpenGL32, "glMultiDrawElementsIndirectAMD"); }
		if(!obj->methodp_glMultiDrawElementsIndirectAMD) { args.This()->Set(v8::String::NewSymbol("glMultiDrawElementsIndirectAMD"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawElementsIndirectBindlessNV) { obj->methodp_glMultiDrawElementsIndirectBindlessNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)wglGetProcAddress("glMultiDrawElementsIndirectBindlessNV"); }
		if(!obj->methodp_glMultiDrawElementsIndirectBindlessNV) { obj->methodp_glMultiDrawElementsIndirectBindlessNV = (PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC)GetProcAddress(modOpenGL32, "glMultiDrawElementsIndirectBindlessNV"); }
		if(!obj->methodp_glMultiDrawElementsIndirectBindlessNV) { args.This()->Set(v8::String::NewSymbol("glMultiDrawElementsIndirectBindlessNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawElementsIndirectCountARB) { obj->methodp_glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)wglGetProcAddress("glMultiDrawElementsIndirectCountARB"); }
		if(!obj->methodp_glMultiDrawElementsIndirectCountARB) { obj->methodp_glMultiDrawElementsIndirectCountARB = (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)GetProcAddress(modOpenGL32, "glMultiDrawElementsIndirectCountARB"); }
		if(!obj->methodp_glMultiDrawElementsIndirectCountARB) { args.This()->Set(v8::String::NewSymbol("glMultiDrawElementsIndirectCountARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiDrawRangeElementArrayAPPLE) { obj->methodp_glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)wglGetProcAddress("glMultiDrawRangeElementArrayAPPLE"); }
		if(!obj->methodp_glMultiDrawRangeElementArrayAPPLE) { obj->methodp_glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)GetProcAddress(modOpenGL32, "glMultiDrawRangeElementArrayAPPLE"); }
		if(!obj->methodp_glMultiDrawRangeElementArrayAPPLE) { args.This()->Set(v8::String::NewSymbol("glMultiDrawRangeElementArrayAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glMultiModeDrawArraysIBM) { obj->methodp_glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)wglGetProcAddress("glMultiModeDrawArraysIBM"); }
		if(!obj->methodp_glMultiModeDrawArraysIBM) { obj->methodp_glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)GetProcAddress(modOpenGL32, "glMultiModeDrawArraysIBM"); }
		if(!obj->methodp_glMultiModeDrawArraysIBM) { args.This()->Set(v8::String::NewSymbol("glMultiModeDrawArraysIBM"), v8::Undefined()); }
		if(!obj->methodp_glMultiModeDrawElementsIBM) { obj->methodp_glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)wglGetProcAddress("glMultiModeDrawElementsIBM"); }
		if(!obj->methodp_glMultiModeDrawElementsIBM) { obj->methodp_glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)GetProcAddress(modOpenGL32, "glMultiModeDrawElementsIBM"); }
		if(!obj->methodp_glMultiModeDrawElementsIBM) { args.This()->Set(v8::String::NewSymbol("glMultiModeDrawElementsIBM"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexBufferEXT) { obj->methodp_glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC)wglGetProcAddress("glMultiTexBufferEXT"); }
		if(!obj->methodp_glMultiTexBufferEXT) { obj->methodp_glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glMultiTexBufferEXT"); }
		if(!obj->methodp_glMultiTexBufferEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1bOES) { obj->methodp_glMultiTexCoord1bOES = (PFNGLMULTITEXCOORD1BOESPROC)wglGetProcAddress("glMultiTexCoord1bOES"); }
		if(!obj->methodp_glMultiTexCoord1bOES) { obj->methodp_glMultiTexCoord1bOES = (PFNGLMULTITEXCOORD1BOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1bOES"); }
		if(!obj->methodp_glMultiTexCoord1bOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1bOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1bvOES) { obj->methodp_glMultiTexCoord1bvOES = (PFNGLMULTITEXCOORD1BVOESPROC)wglGetProcAddress("glMultiTexCoord1bvOES"); }
		if(!obj->methodp_glMultiTexCoord1bvOES) { obj->methodp_glMultiTexCoord1bvOES = (PFNGLMULTITEXCOORD1BVOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1bvOES"); }
		if(!obj->methodp_glMultiTexCoord1bvOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1bvOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1d) { obj->methodp_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)wglGetProcAddress("glMultiTexCoord1d"); }
		if(!obj->methodp_glMultiTexCoord1d) { obj->methodp_glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1d"); }
		if(!obj->methodp_glMultiTexCoord1d) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1d"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1dARB) { obj->methodp_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)wglGetProcAddress("glMultiTexCoord1dARB"); }
		if(!obj->methodp_glMultiTexCoord1dARB) { obj->methodp_glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1dARB"); }
		if(!obj->methodp_glMultiTexCoord1dARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1dARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1dv) { obj->methodp_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)wglGetProcAddress("glMultiTexCoord1dv"); }
		if(!obj->methodp_glMultiTexCoord1dv) { obj->methodp_glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1dv"); }
		if(!obj->methodp_glMultiTexCoord1dv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1dv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1dvARB) { obj->methodp_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)wglGetProcAddress("glMultiTexCoord1dvARB"); }
		if(!obj->methodp_glMultiTexCoord1dvARB) { obj->methodp_glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1dvARB"); }
		if(!obj->methodp_glMultiTexCoord1dvARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1dvARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1f) { obj->methodp_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)wglGetProcAddress("glMultiTexCoord1f"); }
		if(!obj->methodp_glMultiTexCoord1f) { obj->methodp_glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1f"); }
		if(!obj->methodp_glMultiTexCoord1f) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1f"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1fARB) { obj->methodp_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)wglGetProcAddress("glMultiTexCoord1fARB"); }
		if(!obj->methodp_glMultiTexCoord1fARB) { obj->methodp_glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1fARB"); }
		if(!obj->methodp_glMultiTexCoord1fARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1fARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1fv) { obj->methodp_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)wglGetProcAddress("glMultiTexCoord1fv"); }
		if(!obj->methodp_glMultiTexCoord1fv) { obj->methodp_glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1fv"); }
		if(!obj->methodp_glMultiTexCoord1fv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1fv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1fvARB) { obj->methodp_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)wglGetProcAddress("glMultiTexCoord1fvARB"); }
		if(!obj->methodp_glMultiTexCoord1fvARB) { obj->methodp_glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1fvARB"); }
		if(!obj->methodp_glMultiTexCoord1fvARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1fvARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1hNV) { obj->methodp_glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC)wglGetProcAddress("glMultiTexCoord1hNV"); }
		if(!obj->methodp_glMultiTexCoord1hNV) { obj->methodp_glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1hNV"); }
		if(!obj->methodp_glMultiTexCoord1hNV) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1hNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1hvNV) { obj->methodp_glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC)wglGetProcAddress("glMultiTexCoord1hvNV"); }
		if(!obj->methodp_glMultiTexCoord1hvNV) { obj->methodp_glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1hvNV"); }
		if(!obj->methodp_glMultiTexCoord1hvNV) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1hvNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1i) { obj->methodp_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)wglGetProcAddress("glMultiTexCoord1i"); }
		if(!obj->methodp_glMultiTexCoord1i) { obj->methodp_glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1i"); }
		if(!obj->methodp_glMultiTexCoord1i) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1i"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1iARB) { obj->methodp_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)wglGetProcAddress("glMultiTexCoord1iARB"); }
		if(!obj->methodp_glMultiTexCoord1iARB) { obj->methodp_glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1iARB"); }
		if(!obj->methodp_glMultiTexCoord1iARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1iARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1iv) { obj->methodp_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)wglGetProcAddress("glMultiTexCoord1iv"); }
		if(!obj->methodp_glMultiTexCoord1iv) { obj->methodp_glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1iv"); }
		if(!obj->methodp_glMultiTexCoord1iv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1iv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1ivARB) { obj->methodp_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)wglGetProcAddress("glMultiTexCoord1ivARB"); }
		if(!obj->methodp_glMultiTexCoord1ivARB) { obj->methodp_glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1ivARB"); }
		if(!obj->methodp_glMultiTexCoord1ivARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1ivARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1s) { obj->methodp_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)wglGetProcAddress("glMultiTexCoord1s"); }
		if(!obj->methodp_glMultiTexCoord1s) { obj->methodp_glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1s"); }
		if(!obj->methodp_glMultiTexCoord1s) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1s"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1sARB) { obj->methodp_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)wglGetProcAddress("glMultiTexCoord1sARB"); }
		if(!obj->methodp_glMultiTexCoord1sARB) { obj->methodp_glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1sARB"); }
		if(!obj->methodp_glMultiTexCoord1sARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1sARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1sv) { obj->methodp_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)wglGetProcAddress("glMultiTexCoord1sv"); }
		if(!obj->methodp_glMultiTexCoord1sv) { obj->methodp_glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1sv"); }
		if(!obj->methodp_glMultiTexCoord1sv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1sv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1svARB) { obj->methodp_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)wglGetProcAddress("glMultiTexCoord1svARB"); }
		if(!obj->methodp_glMultiTexCoord1svARB) { obj->methodp_glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1svARB"); }
		if(!obj->methodp_glMultiTexCoord1svARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1svARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1xOES) { obj->methodp_glMultiTexCoord1xOES = (PFNGLMULTITEXCOORD1XOESPROC)wglGetProcAddress("glMultiTexCoord1xOES"); }
		if(!obj->methodp_glMultiTexCoord1xOES) { obj->methodp_glMultiTexCoord1xOES = (PFNGLMULTITEXCOORD1XOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1xOES"); }
		if(!obj->methodp_glMultiTexCoord1xOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1xOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord1xvOES) { obj->methodp_glMultiTexCoord1xvOES = (PFNGLMULTITEXCOORD1XVOESPROC)wglGetProcAddress("glMultiTexCoord1xvOES"); }
		if(!obj->methodp_glMultiTexCoord1xvOES) { obj->methodp_glMultiTexCoord1xvOES = (PFNGLMULTITEXCOORD1XVOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord1xvOES"); }
		if(!obj->methodp_glMultiTexCoord1xvOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord1xvOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2bOES) { obj->methodp_glMultiTexCoord2bOES = (PFNGLMULTITEXCOORD2BOESPROC)wglGetProcAddress("glMultiTexCoord2bOES"); }
		if(!obj->methodp_glMultiTexCoord2bOES) { obj->methodp_glMultiTexCoord2bOES = (PFNGLMULTITEXCOORD2BOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2bOES"); }
		if(!obj->methodp_glMultiTexCoord2bOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2bOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2bvOES) { obj->methodp_glMultiTexCoord2bvOES = (PFNGLMULTITEXCOORD2BVOESPROC)wglGetProcAddress("glMultiTexCoord2bvOES"); }
		if(!obj->methodp_glMultiTexCoord2bvOES) { obj->methodp_glMultiTexCoord2bvOES = (PFNGLMULTITEXCOORD2BVOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2bvOES"); }
		if(!obj->methodp_glMultiTexCoord2bvOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2bvOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2d) { obj->methodp_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)wglGetProcAddress("glMultiTexCoord2d"); }
		if(!obj->methodp_glMultiTexCoord2d) { obj->methodp_glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2d"); }
		if(!obj->methodp_glMultiTexCoord2d) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2d"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2dARB) { obj->methodp_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)wglGetProcAddress("glMultiTexCoord2dARB"); }
		if(!obj->methodp_glMultiTexCoord2dARB) { obj->methodp_glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2dARB"); }
		if(!obj->methodp_glMultiTexCoord2dARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2dARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2dv) { obj->methodp_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)wglGetProcAddress("glMultiTexCoord2dv"); }
		if(!obj->methodp_glMultiTexCoord2dv) { obj->methodp_glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2dv"); }
		if(!obj->methodp_glMultiTexCoord2dv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2dv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2dvARB) { obj->methodp_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)wglGetProcAddress("glMultiTexCoord2dvARB"); }
		if(!obj->methodp_glMultiTexCoord2dvARB) { obj->methodp_glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2dvARB"); }
		if(!obj->methodp_glMultiTexCoord2dvARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2dvARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2f) { obj->methodp_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)wglGetProcAddress("glMultiTexCoord2f"); }
		if(!obj->methodp_glMultiTexCoord2f) { obj->methodp_glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2f"); }
		if(!obj->methodp_glMultiTexCoord2f) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2f"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2fARB) { obj->methodp_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)wglGetProcAddress("glMultiTexCoord2fARB"); }
		if(!obj->methodp_glMultiTexCoord2fARB) { obj->methodp_glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2fARB"); }
		if(!obj->methodp_glMultiTexCoord2fARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2fARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2fv) { obj->methodp_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)wglGetProcAddress("glMultiTexCoord2fv"); }
		if(!obj->methodp_glMultiTexCoord2fv) { obj->methodp_glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2fv"); }
		if(!obj->methodp_glMultiTexCoord2fv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2fv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2fvARB) { obj->methodp_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)wglGetProcAddress("glMultiTexCoord2fvARB"); }
		if(!obj->methodp_glMultiTexCoord2fvARB) { obj->methodp_glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2fvARB"); }
		if(!obj->methodp_glMultiTexCoord2fvARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2fvARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2hNV) { obj->methodp_glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC)wglGetProcAddress("glMultiTexCoord2hNV"); }
		if(!obj->methodp_glMultiTexCoord2hNV) { obj->methodp_glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2hNV"); }
		if(!obj->methodp_glMultiTexCoord2hNV) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2hNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2hvNV) { obj->methodp_glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC)wglGetProcAddress("glMultiTexCoord2hvNV"); }
		if(!obj->methodp_glMultiTexCoord2hvNV) { obj->methodp_glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2hvNV"); }
		if(!obj->methodp_glMultiTexCoord2hvNV) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2hvNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2i) { obj->methodp_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)wglGetProcAddress("glMultiTexCoord2i"); }
		if(!obj->methodp_glMultiTexCoord2i) { obj->methodp_glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2i"); }
		if(!obj->methodp_glMultiTexCoord2i) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2i"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2iARB) { obj->methodp_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)wglGetProcAddress("glMultiTexCoord2iARB"); }
		if(!obj->methodp_glMultiTexCoord2iARB) { obj->methodp_glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2iARB"); }
		if(!obj->methodp_glMultiTexCoord2iARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2iARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2iv) { obj->methodp_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)wglGetProcAddress("glMultiTexCoord2iv"); }
		if(!obj->methodp_glMultiTexCoord2iv) { obj->methodp_glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2iv"); }
		if(!obj->methodp_glMultiTexCoord2iv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2iv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2ivARB) { obj->methodp_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)wglGetProcAddress("glMultiTexCoord2ivARB"); }
		if(!obj->methodp_glMultiTexCoord2ivARB) { obj->methodp_glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2ivARB"); }
		if(!obj->methodp_glMultiTexCoord2ivARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2ivARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2s) { obj->methodp_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)wglGetProcAddress("glMultiTexCoord2s"); }
		if(!obj->methodp_glMultiTexCoord2s) { obj->methodp_glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2s"); }
		if(!obj->methodp_glMultiTexCoord2s) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2s"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2sARB) { obj->methodp_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)wglGetProcAddress("glMultiTexCoord2sARB"); }
		if(!obj->methodp_glMultiTexCoord2sARB) { obj->methodp_glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2sARB"); }
		if(!obj->methodp_glMultiTexCoord2sARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2sARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2sv) { obj->methodp_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)wglGetProcAddress("glMultiTexCoord2sv"); }
		if(!obj->methodp_glMultiTexCoord2sv) { obj->methodp_glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2sv"); }
		if(!obj->methodp_glMultiTexCoord2sv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2sv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2svARB) { obj->methodp_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)wglGetProcAddress("glMultiTexCoord2svARB"); }
		if(!obj->methodp_glMultiTexCoord2svARB) { obj->methodp_glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2svARB"); }
		if(!obj->methodp_glMultiTexCoord2svARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2svARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2xOES) { obj->methodp_glMultiTexCoord2xOES = (PFNGLMULTITEXCOORD2XOESPROC)wglGetProcAddress("glMultiTexCoord2xOES"); }
		if(!obj->methodp_glMultiTexCoord2xOES) { obj->methodp_glMultiTexCoord2xOES = (PFNGLMULTITEXCOORD2XOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2xOES"); }
		if(!obj->methodp_glMultiTexCoord2xOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2xOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord2xvOES) { obj->methodp_glMultiTexCoord2xvOES = (PFNGLMULTITEXCOORD2XVOESPROC)wglGetProcAddress("glMultiTexCoord2xvOES"); }
		if(!obj->methodp_glMultiTexCoord2xvOES) { obj->methodp_glMultiTexCoord2xvOES = (PFNGLMULTITEXCOORD2XVOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord2xvOES"); }
		if(!obj->methodp_glMultiTexCoord2xvOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord2xvOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3bOES) { obj->methodp_glMultiTexCoord3bOES = (PFNGLMULTITEXCOORD3BOESPROC)wglGetProcAddress("glMultiTexCoord3bOES"); }
		if(!obj->methodp_glMultiTexCoord3bOES) { obj->methodp_glMultiTexCoord3bOES = (PFNGLMULTITEXCOORD3BOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3bOES"); }
		if(!obj->methodp_glMultiTexCoord3bOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3bOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3bvOES) { obj->methodp_glMultiTexCoord3bvOES = (PFNGLMULTITEXCOORD3BVOESPROC)wglGetProcAddress("glMultiTexCoord3bvOES"); }
		if(!obj->methodp_glMultiTexCoord3bvOES) { obj->methodp_glMultiTexCoord3bvOES = (PFNGLMULTITEXCOORD3BVOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3bvOES"); }
		if(!obj->methodp_glMultiTexCoord3bvOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3bvOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3d) { obj->methodp_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)wglGetProcAddress("glMultiTexCoord3d"); }
		if(!obj->methodp_glMultiTexCoord3d) { obj->methodp_glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3d"); }
		if(!obj->methodp_glMultiTexCoord3d) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3d"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3dARB) { obj->methodp_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)wglGetProcAddress("glMultiTexCoord3dARB"); }
		if(!obj->methodp_glMultiTexCoord3dARB) { obj->methodp_glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3dARB"); }
		if(!obj->methodp_glMultiTexCoord3dARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3dARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3dv) { obj->methodp_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)wglGetProcAddress("glMultiTexCoord3dv"); }
		if(!obj->methodp_glMultiTexCoord3dv) { obj->methodp_glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3dv"); }
		if(!obj->methodp_glMultiTexCoord3dv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3dv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3dvARB) { obj->methodp_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)wglGetProcAddress("glMultiTexCoord3dvARB"); }
		if(!obj->methodp_glMultiTexCoord3dvARB) { obj->methodp_glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3dvARB"); }
		if(!obj->methodp_glMultiTexCoord3dvARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3dvARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3f) { obj->methodp_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)wglGetProcAddress("glMultiTexCoord3f"); }
		if(!obj->methodp_glMultiTexCoord3f) { obj->methodp_glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3f"); }
		if(!obj->methodp_glMultiTexCoord3f) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3f"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3fARB) { obj->methodp_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)wglGetProcAddress("glMultiTexCoord3fARB"); }
		if(!obj->methodp_glMultiTexCoord3fARB) { obj->methodp_glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3fARB"); }
		if(!obj->methodp_glMultiTexCoord3fARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3fARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3fv) { obj->methodp_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)wglGetProcAddress("glMultiTexCoord3fv"); }
		if(!obj->methodp_glMultiTexCoord3fv) { obj->methodp_glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3fv"); }
		if(!obj->methodp_glMultiTexCoord3fv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3fv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3fvARB) { obj->methodp_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)wglGetProcAddress("glMultiTexCoord3fvARB"); }
		if(!obj->methodp_glMultiTexCoord3fvARB) { obj->methodp_glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3fvARB"); }
		if(!obj->methodp_glMultiTexCoord3fvARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3fvARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3hNV) { obj->methodp_glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC)wglGetProcAddress("glMultiTexCoord3hNV"); }
		if(!obj->methodp_glMultiTexCoord3hNV) { obj->methodp_glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3hNV"); }
		if(!obj->methodp_glMultiTexCoord3hNV) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3hNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3hvNV) { obj->methodp_glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC)wglGetProcAddress("glMultiTexCoord3hvNV"); }
		if(!obj->methodp_glMultiTexCoord3hvNV) { obj->methodp_glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3hvNV"); }
		if(!obj->methodp_glMultiTexCoord3hvNV) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3hvNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3i) { obj->methodp_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)wglGetProcAddress("glMultiTexCoord3i"); }
		if(!obj->methodp_glMultiTexCoord3i) { obj->methodp_glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3i"); }
		if(!obj->methodp_glMultiTexCoord3i) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3i"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3iARB) { obj->methodp_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)wglGetProcAddress("glMultiTexCoord3iARB"); }
		if(!obj->methodp_glMultiTexCoord3iARB) { obj->methodp_glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3iARB"); }
		if(!obj->methodp_glMultiTexCoord3iARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3iARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3iv) { obj->methodp_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)wglGetProcAddress("glMultiTexCoord3iv"); }
		if(!obj->methodp_glMultiTexCoord3iv) { obj->methodp_glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3iv"); }
		if(!obj->methodp_glMultiTexCoord3iv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3iv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3ivARB) { obj->methodp_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)wglGetProcAddress("glMultiTexCoord3ivARB"); }
		if(!obj->methodp_glMultiTexCoord3ivARB) { obj->methodp_glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3ivARB"); }
		if(!obj->methodp_glMultiTexCoord3ivARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3ivARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3s) { obj->methodp_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)wglGetProcAddress("glMultiTexCoord3s"); }
		if(!obj->methodp_glMultiTexCoord3s) { obj->methodp_glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3s"); }
		if(!obj->methodp_glMultiTexCoord3s) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3s"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3sARB) { obj->methodp_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)wglGetProcAddress("glMultiTexCoord3sARB"); }
		if(!obj->methodp_glMultiTexCoord3sARB) { obj->methodp_glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3sARB"); }
		if(!obj->methodp_glMultiTexCoord3sARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3sARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3sv) { obj->methodp_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)wglGetProcAddress("glMultiTexCoord3sv"); }
		if(!obj->methodp_glMultiTexCoord3sv) { obj->methodp_glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3sv"); }
		if(!obj->methodp_glMultiTexCoord3sv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3sv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3svARB) { obj->methodp_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)wglGetProcAddress("glMultiTexCoord3svARB"); }
		if(!obj->methodp_glMultiTexCoord3svARB) { obj->methodp_glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3svARB"); }
		if(!obj->methodp_glMultiTexCoord3svARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3svARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3xOES) { obj->methodp_glMultiTexCoord3xOES = (PFNGLMULTITEXCOORD3XOESPROC)wglGetProcAddress("glMultiTexCoord3xOES"); }
		if(!obj->methodp_glMultiTexCoord3xOES) { obj->methodp_glMultiTexCoord3xOES = (PFNGLMULTITEXCOORD3XOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3xOES"); }
		if(!obj->methodp_glMultiTexCoord3xOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3xOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord3xvOES) { obj->methodp_glMultiTexCoord3xvOES = (PFNGLMULTITEXCOORD3XVOESPROC)wglGetProcAddress("glMultiTexCoord3xvOES"); }
		if(!obj->methodp_glMultiTexCoord3xvOES) { obj->methodp_glMultiTexCoord3xvOES = (PFNGLMULTITEXCOORD3XVOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord3xvOES"); }
		if(!obj->methodp_glMultiTexCoord3xvOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord3xvOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4bOES) { obj->methodp_glMultiTexCoord4bOES = (PFNGLMULTITEXCOORD4BOESPROC)wglGetProcAddress("glMultiTexCoord4bOES"); }
		if(!obj->methodp_glMultiTexCoord4bOES) { obj->methodp_glMultiTexCoord4bOES = (PFNGLMULTITEXCOORD4BOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4bOES"); }
		if(!obj->methodp_glMultiTexCoord4bOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4bOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4bvOES) { obj->methodp_glMultiTexCoord4bvOES = (PFNGLMULTITEXCOORD4BVOESPROC)wglGetProcAddress("glMultiTexCoord4bvOES"); }
		if(!obj->methodp_glMultiTexCoord4bvOES) { obj->methodp_glMultiTexCoord4bvOES = (PFNGLMULTITEXCOORD4BVOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4bvOES"); }
		if(!obj->methodp_glMultiTexCoord4bvOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4bvOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4d) { obj->methodp_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)wglGetProcAddress("glMultiTexCoord4d"); }
		if(!obj->methodp_glMultiTexCoord4d) { obj->methodp_glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4d"); }
		if(!obj->methodp_glMultiTexCoord4d) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4d"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4dARB) { obj->methodp_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)wglGetProcAddress("glMultiTexCoord4dARB"); }
		if(!obj->methodp_glMultiTexCoord4dARB) { obj->methodp_glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4dARB"); }
		if(!obj->methodp_glMultiTexCoord4dARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4dARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4dv) { obj->methodp_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)wglGetProcAddress("glMultiTexCoord4dv"); }
		if(!obj->methodp_glMultiTexCoord4dv) { obj->methodp_glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4dv"); }
		if(!obj->methodp_glMultiTexCoord4dv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4dv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4dvARB) { obj->methodp_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)wglGetProcAddress("glMultiTexCoord4dvARB"); }
		if(!obj->methodp_glMultiTexCoord4dvARB) { obj->methodp_glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4dvARB"); }
		if(!obj->methodp_glMultiTexCoord4dvARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4dvARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4f) { obj->methodp_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)wglGetProcAddress("glMultiTexCoord4f"); }
		if(!obj->methodp_glMultiTexCoord4f) { obj->methodp_glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4f"); }
		if(!obj->methodp_glMultiTexCoord4f) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4f"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4fARB) { obj->methodp_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)wglGetProcAddress("glMultiTexCoord4fARB"); }
		if(!obj->methodp_glMultiTexCoord4fARB) { obj->methodp_glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4fARB"); }
		if(!obj->methodp_glMultiTexCoord4fARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4fARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4fv) { obj->methodp_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)wglGetProcAddress("glMultiTexCoord4fv"); }
		if(!obj->methodp_glMultiTexCoord4fv) { obj->methodp_glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4fv"); }
		if(!obj->methodp_glMultiTexCoord4fv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4fv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4fvARB) { obj->methodp_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)wglGetProcAddress("glMultiTexCoord4fvARB"); }
		if(!obj->methodp_glMultiTexCoord4fvARB) { obj->methodp_glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4fvARB"); }
		if(!obj->methodp_glMultiTexCoord4fvARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4fvARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4hNV) { obj->methodp_glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC)wglGetProcAddress("glMultiTexCoord4hNV"); }
		if(!obj->methodp_glMultiTexCoord4hNV) { obj->methodp_glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4hNV"); }
		if(!obj->methodp_glMultiTexCoord4hNV) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4hNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4hvNV) { obj->methodp_glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC)wglGetProcAddress("glMultiTexCoord4hvNV"); }
		if(!obj->methodp_glMultiTexCoord4hvNV) { obj->methodp_glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4hvNV"); }
		if(!obj->methodp_glMultiTexCoord4hvNV) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4hvNV"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4i) { obj->methodp_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)wglGetProcAddress("glMultiTexCoord4i"); }
		if(!obj->methodp_glMultiTexCoord4i) { obj->methodp_glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4i"); }
		if(!obj->methodp_glMultiTexCoord4i) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4i"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4iARB) { obj->methodp_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)wglGetProcAddress("glMultiTexCoord4iARB"); }
		if(!obj->methodp_glMultiTexCoord4iARB) { obj->methodp_glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4iARB"); }
		if(!obj->methodp_glMultiTexCoord4iARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4iARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4iv) { obj->methodp_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)wglGetProcAddress("glMultiTexCoord4iv"); }
		if(!obj->methodp_glMultiTexCoord4iv) { obj->methodp_glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4iv"); }
		if(!obj->methodp_glMultiTexCoord4iv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4iv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4ivARB) { obj->methodp_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)wglGetProcAddress("glMultiTexCoord4ivARB"); }
		if(!obj->methodp_glMultiTexCoord4ivARB) { obj->methodp_glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4ivARB"); }
		if(!obj->methodp_glMultiTexCoord4ivARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4ivARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4s) { obj->methodp_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)wglGetProcAddress("glMultiTexCoord4s"); }
		if(!obj->methodp_glMultiTexCoord4s) { obj->methodp_glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4s"); }
		if(!obj->methodp_glMultiTexCoord4s) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4s"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4sARB) { obj->methodp_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)wglGetProcAddress("glMultiTexCoord4sARB"); }
		if(!obj->methodp_glMultiTexCoord4sARB) { obj->methodp_glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4sARB"); }
		if(!obj->methodp_glMultiTexCoord4sARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4sARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4sv) { obj->methodp_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)wglGetProcAddress("glMultiTexCoord4sv"); }
		if(!obj->methodp_glMultiTexCoord4sv) { obj->methodp_glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4sv"); }
		if(!obj->methodp_glMultiTexCoord4sv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4sv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4svARB) { obj->methodp_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)wglGetProcAddress("glMultiTexCoord4svARB"); }
		if(!obj->methodp_glMultiTexCoord4svARB) { obj->methodp_glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4svARB"); }
		if(!obj->methodp_glMultiTexCoord4svARB) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4svARB"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4x) { obj->methodp_glMultiTexCoord4x = (PFNGLMULTITEXCOORD4XPROC)wglGetProcAddress("glMultiTexCoord4x"); }
		if(!obj->methodp_glMultiTexCoord4x) { obj->methodp_glMultiTexCoord4x = (PFNGLMULTITEXCOORD4XPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4x"); }
		if(!obj->methodp_glMultiTexCoord4x) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4x"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4xOES) { obj->methodp_glMultiTexCoord4xOES = (PFNGLMULTITEXCOORD4XOESPROC)wglGetProcAddress("glMultiTexCoord4xOES"); }
		if(!obj->methodp_glMultiTexCoord4xOES) { obj->methodp_glMultiTexCoord4xOES = (PFNGLMULTITEXCOORD4XOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4xOES"); }
		if(!obj->methodp_glMultiTexCoord4xOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4xOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoord4xvOES) { obj->methodp_glMultiTexCoord4xvOES = (PFNGLMULTITEXCOORD4XVOESPROC)wglGetProcAddress("glMultiTexCoord4xvOES"); }
		if(!obj->methodp_glMultiTexCoord4xvOES) { obj->methodp_glMultiTexCoord4xvOES = (PFNGLMULTITEXCOORD4XVOESPROC)GetProcAddress(modOpenGL32, "glMultiTexCoord4xvOES"); }
		if(!obj->methodp_glMultiTexCoord4xvOES) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoord4xvOES"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordP1ui) { obj->methodp_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)wglGetProcAddress("glMultiTexCoordP1ui"); }
		if(!obj->methodp_glMultiTexCoordP1ui) { obj->methodp_glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordP1ui"); }
		if(!obj->methodp_glMultiTexCoordP1ui) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordP1ui"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordP1uiv) { obj->methodp_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)wglGetProcAddress("glMultiTexCoordP1uiv"); }
		if(!obj->methodp_glMultiTexCoordP1uiv) { obj->methodp_glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordP1uiv"); }
		if(!obj->methodp_glMultiTexCoordP1uiv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordP1uiv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordP2ui) { obj->methodp_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)wglGetProcAddress("glMultiTexCoordP2ui"); }
		if(!obj->methodp_glMultiTexCoordP2ui) { obj->methodp_glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordP2ui"); }
		if(!obj->methodp_glMultiTexCoordP2ui) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordP2ui"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordP2uiv) { obj->methodp_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)wglGetProcAddress("glMultiTexCoordP2uiv"); }
		if(!obj->methodp_glMultiTexCoordP2uiv) { obj->methodp_glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordP2uiv"); }
		if(!obj->methodp_glMultiTexCoordP2uiv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordP2uiv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordP3ui) { obj->methodp_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)wglGetProcAddress("glMultiTexCoordP3ui"); }
		if(!obj->methodp_glMultiTexCoordP3ui) { obj->methodp_glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordP3ui"); }
		if(!obj->methodp_glMultiTexCoordP3ui) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordP3ui"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordP3uiv) { obj->methodp_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)wglGetProcAddress("glMultiTexCoordP3uiv"); }
		if(!obj->methodp_glMultiTexCoordP3uiv) { obj->methodp_glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordP3uiv"); }
		if(!obj->methodp_glMultiTexCoordP3uiv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordP3uiv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordP4ui) { obj->methodp_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)wglGetProcAddress("glMultiTexCoordP4ui"); }
		if(!obj->methodp_glMultiTexCoordP4ui) { obj->methodp_glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordP4ui"); }
		if(!obj->methodp_glMultiTexCoordP4ui) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordP4ui"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordP4uiv) { obj->methodp_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)wglGetProcAddress("glMultiTexCoordP4uiv"); }
		if(!obj->methodp_glMultiTexCoordP4uiv) { obj->methodp_glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordP4uiv"); }
		if(!obj->methodp_glMultiTexCoordP4uiv) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordP4uiv"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexCoordPointerEXT) { obj->methodp_glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC)wglGetProcAddress("glMultiTexCoordPointerEXT"); }
		if(!obj->methodp_glMultiTexCoordPointerEXT) { obj->methodp_glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glMultiTexCoordPointerEXT"); }
		if(!obj->methodp_glMultiTexCoordPointerEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexCoordPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexEnvfEXT) { obj->methodp_glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC)wglGetProcAddress("glMultiTexEnvfEXT"); }
		if(!obj->methodp_glMultiTexEnvfEXT) { obj->methodp_glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexEnvfEXT"); }
		if(!obj->methodp_glMultiTexEnvfEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexEnvfEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexEnvfvEXT) { obj->methodp_glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC)wglGetProcAddress("glMultiTexEnvfvEXT"); }
		if(!obj->methodp_glMultiTexEnvfvEXT) { obj->methodp_glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexEnvfvEXT"); }
		if(!obj->methodp_glMultiTexEnvfvEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexEnvfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexEnviEXT) { obj->methodp_glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC)wglGetProcAddress("glMultiTexEnviEXT"); }
		if(!obj->methodp_glMultiTexEnviEXT) { obj->methodp_glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexEnviEXT"); }
		if(!obj->methodp_glMultiTexEnviEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexEnviEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexEnvivEXT) { obj->methodp_glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC)wglGetProcAddress("glMultiTexEnvivEXT"); }
		if(!obj->methodp_glMultiTexEnvivEXT) { obj->methodp_glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexEnvivEXT"); }
		if(!obj->methodp_glMultiTexEnvivEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexEnvivEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexGendEXT) { obj->methodp_glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC)wglGetProcAddress("glMultiTexGendEXT"); }
		if(!obj->methodp_glMultiTexGendEXT) { obj->methodp_glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexGendEXT"); }
		if(!obj->methodp_glMultiTexGendEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexGendEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexGendvEXT) { obj->methodp_glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC)wglGetProcAddress("glMultiTexGendvEXT"); }
		if(!obj->methodp_glMultiTexGendvEXT) { obj->methodp_glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexGendvEXT"); }
		if(!obj->methodp_glMultiTexGendvEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexGendvEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexGenfEXT) { obj->methodp_glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC)wglGetProcAddress("glMultiTexGenfEXT"); }
		if(!obj->methodp_glMultiTexGenfEXT) { obj->methodp_glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexGenfEXT"); }
		if(!obj->methodp_glMultiTexGenfEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexGenfEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexGenfvEXT) { obj->methodp_glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC)wglGetProcAddress("glMultiTexGenfvEXT"); }
		if(!obj->methodp_glMultiTexGenfvEXT) { obj->methodp_glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexGenfvEXT"); }
		if(!obj->methodp_glMultiTexGenfvEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexGenfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexGeniEXT) { obj->methodp_glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC)wglGetProcAddress("glMultiTexGeniEXT"); }
		if(!obj->methodp_glMultiTexGeniEXT) { obj->methodp_glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexGeniEXT"); }
		if(!obj->methodp_glMultiTexGeniEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexGeniEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexGenivEXT) { obj->methodp_glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC)wglGetProcAddress("glMultiTexGenivEXT"); }
		if(!obj->methodp_glMultiTexGenivEXT) { obj->methodp_glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexGenivEXT"); }
		if(!obj->methodp_glMultiTexGenivEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexGenivEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexImage1DEXT) { obj->methodp_glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC)wglGetProcAddress("glMultiTexImage1DEXT"); }
		if(!obj->methodp_glMultiTexImage1DEXT) { obj->methodp_glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexImage1DEXT"); }
		if(!obj->methodp_glMultiTexImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexImage2DEXT) { obj->methodp_glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC)wglGetProcAddress("glMultiTexImage2DEXT"); }
		if(!obj->methodp_glMultiTexImage2DEXT) { obj->methodp_glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexImage2DEXT"); }
		if(!obj->methodp_glMultiTexImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexImage3DEXT) { obj->methodp_glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC)wglGetProcAddress("glMultiTexImage3DEXT"); }
		if(!obj->methodp_glMultiTexImage3DEXT) { obj->methodp_glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexImage3DEXT"); }
		if(!obj->methodp_glMultiTexImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexParameterIivEXT) { obj->methodp_glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC)wglGetProcAddress("glMultiTexParameterIivEXT"); }
		if(!obj->methodp_glMultiTexParameterIivEXT) { obj->methodp_glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexParameterIivEXT"); }
		if(!obj->methodp_glMultiTexParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexParameterIuivEXT) { obj->methodp_glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC)wglGetProcAddress("glMultiTexParameterIuivEXT"); }
		if(!obj->methodp_glMultiTexParameterIuivEXT) { obj->methodp_glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexParameterIuivEXT"); }
		if(!obj->methodp_glMultiTexParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexParameterfEXT) { obj->methodp_glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC)wglGetProcAddress("glMultiTexParameterfEXT"); }
		if(!obj->methodp_glMultiTexParameterfEXT) { obj->methodp_glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexParameterfEXT"); }
		if(!obj->methodp_glMultiTexParameterfEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexParameterfEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexParameterfvEXT) { obj->methodp_glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC)wglGetProcAddress("glMultiTexParameterfvEXT"); }
		if(!obj->methodp_glMultiTexParameterfvEXT) { obj->methodp_glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexParameterfvEXT"); }
		if(!obj->methodp_glMultiTexParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexParameteriEXT) { obj->methodp_glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC)wglGetProcAddress("glMultiTexParameteriEXT"); }
		if(!obj->methodp_glMultiTexParameteriEXT) { obj->methodp_glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexParameteriEXT"); }
		if(!obj->methodp_glMultiTexParameteriEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexParameteriEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexParameterivEXT) { obj->methodp_glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC)wglGetProcAddress("glMultiTexParameterivEXT"); }
		if(!obj->methodp_glMultiTexParameterivEXT) { obj->methodp_glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexParameterivEXT"); }
		if(!obj->methodp_glMultiTexParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexRenderbufferEXT) { obj->methodp_glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC)wglGetProcAddress("glMultiTexRenderbufferEXT"); }
		if(!obj->methodp_glMultiTexRenderbufferEXT) { obj->methodp_glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glMultiTexRenderbufferEXT"); }
		if(!obj->methodp_glMultiTexRenderbufferEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexRenderbufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexSubImage1DEXT) { obj->methodp_glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC)wglGetProcAddress("glMultiTexSubImage1DEXT"); }
		if(!obj->methodp_glMultiTexSubImage1DEXT) { obj->methodp_glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexSubImage1DEXT"); }
		if(!obj->methodp_glMultiTexSubImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexSubImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexSubImage2DEXT) { obj->methodp_glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC)wglGetProcAddress("glMultiTexSubImage2DEXT"); }
		if(!obj->methodp_glMultiTexSubImage2DEXT) { obj->methodp_glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexSubImage2DEXT"); }
		if(!obj->methodp_glMultiTexSubImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexSubImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glMultiTexSubImage3DEXT) { obj->methodp_glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC)wglGetProcAddress("glMultiTexSubImage3DEXT"); }
		if(!obj->methodp_glMultiTexSubImage3DEXT) { obj->methodp_glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glMultiTexSubImage3DEXT"); }
		if(!obj->methodp_glMultiTexSubImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glMultiTexSubImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedBufferDataEXT) { obj->methodp_glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC)wglGetProcAddress("glNamedBufferDataEXT"); }
		if(!obj->methodp_glNamedBufferDataEXT) { obj->methodp_glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC)GetProcAddress(modOpenGL32, "glNamedBufferDataEXT"); }
		if(!obj->methodp_glNamedBufferDataEXT) { args.This()->Set(v8::String::NewSymbol("glNamedBufferDataEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedBufferStorageEXT) { obj->methodp_glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC)wglGetProcAddress("glNamedBufferStorageEXT"); }
		if(!obj->methodp_glNamedBufferStorageEXT) { obj->methodp_glNamedBufferStorageEXT = (PFNGLNAMEDBUFFERSTORAGEEXTPROC)GetProcAddress(modOpenGL32, "glNamedBufferStorageEXT"); }
		if(!obj->methodp_glNamedBufferStorageEXT) { args.This()->Set(v8::String::NewSymbol("glNamedBufferStorageEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedBufferSubDataEXT) { obj->methodp_glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC)wglGetProcAddress("glNamedBufferSubDataEXT"); }
		if(!obj->methodp_glNamedBufferSubDataEXT) { obj->methodp_glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC)GetProcAddress(modOpenGL32, "glNamedBufferSubDataEXT"); }
		if(!obj->methodp_glNamedBufferSubDataEXT) { args.This()->Set(v8::String::NewSymbol("glNamedBufferSubDataEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedCopyBufferSubDataEXT) { obj->methodp_glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)wglGetProcAddress("glNamedCopyBufferSubDataEXT"); }
		if(!obj->methodp_glNamedCopyBufferSubDataEXT) { obj->methodp_glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)GetProcAddress(modOpenGL32, "glNamedCopyBufferSubDataEXT"); }
		if(!obj->methodp_glNamedCopyBufferSubDataEXT) { args.This()->Set(v8::String::NewSymbol("glNamedCopyBufferSubDataEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedFramebufferParameteriEXT) { obj->methodp_glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)wglGetProcAddress("glNamedFramebufferParameteriEXT"); }
		if(!obj->methodp_glNamedFramebufferParameteriEXT) { obj->methodp_glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)GetProcAddress(modOpenGL32, "glNamedFramebufferParameteriEXT"); }
		if(!obj->methodp_glNamedFramebufferParameteriEXT) { args.This()->Set(v8::String::NewSymbol("glNamedFramebufferParameteriEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedFramebufferRenderbufferEXT) { obj->methodp_glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)wglGetProcAddress("glNamedFramebufferRenderbufferEXT"); }
		if(!obj->methodp_glNamedFramebufferRenderbufferEXT) { obj->methodp_glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glNamedFramebufferRenderbufferEXT"); }
		if(!obj->methodp_glNamedFramebufferRenderbufferEXT) { args.This()->Set(v8::String::NewSymbol("glNamedFramebufferRenderbufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedFramebufferTexture1DEXT) { obj->methodp_glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)wglGetProcAddress("glNamedFramebufferTexture1DEXT"); }
		if(!obj->methodp_glNamedFramebufferTexture1DEXT) { obj->methodp_glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)GetProcAddress(modOpenGL32, "glNamedFramebufferTexture1DEXT"); }
		if(!obj->methodp_glNamedFramebufferTexture1DEXT) { args.This()->Set(v8::String::NewSymbol("glNamedFramebufferTexture1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedFramebufferTexture2DEXT) { obj->methodp_glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)wglGetProcAddress("glNamedFramebufferTexture2DEXT"); }
		if(!obj->methodp_glNamedFramebufferTexture2DEXT) { obj->methodp_glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)GetProcAddress(modOpenGL32, "glNamedFramebufferTexture2DEXT"); }
		if(!obj->methodp_glNamedFramebufferTexture2DEXT) { args.This()->Set(v8::String::NewSymbol("glNamedFramebufferTexture2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedFramebufferTexture3DEXT) { obj->methodp_glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)wglGetProcAddress("glNamedFramebufferTexture3DEXT"); }
		if(!obj->methodp_glNamedFramebufferTexture3DEXT) { obj->methodp_glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)GetProcAddress(modOpenGL32, "glNamedFramebufferTexture3DEXT"); }
		if(!obj->methodp_glNamedFramebufferTexture3DEXT) { args.This()->Set(v8::String::NewSymbol("glNamedFramebufferTexture3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedFramebufferTextureEXT) { obj->methodp_glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)wglGetProcAddress("glNamedFramebufferTextureEXT"); }
		if(!obj->methodp_glNamedFramebufferTextureEXT) { obj->methodp_glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)GetProcAddress(modOpenGL32, "glNamedFramebufferTextureEXT"); }
		if(!obj->methodp_glNamedFramebufferTextureEXT) { args.This()->Set(v8::String::NewSymbol("glNamedFramebufferTextureEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedFramebufferTextureFaceEXT) { obj->methodp_glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)wglGetProcAddress("glNamedFramebufferTextureFaceEXT"); }
		if(!obj->methodp_glNamedFramebufferTextureFaceEXT) { obj->methodp_glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)GetProcAddress(modOpenGL32, "glNamedFramebufferTextureFaceEXT"); }
		if(!obj->methodp_glNamedFramebufferTextureFaceEXT) { args.This()->Set(v8::String::NewSymbol("glNamedFramebufferTextureFaceEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedFramebufferTextureLayerEXT) { obj->methodp_glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)wglGetProcAddress("glNamedFramebufferTextureLayerEXT"); }
		if(!obj->methodp_glNamedFramebufferTextureLayerEXT) { obj->methodp_glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)GetProcAddress(modOpenGL32, "glNamedFramebufferTextureLayerEXT"); }
		if(!obj->methodp_glNamedFramebufferTextureLayerEXT) { args.This()->Set(v8::String::NewSymbol("glNamedFramebufferTextureLayerEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameter4dEXT) { obj->methodp_glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)wglGetProcAddress("glNamedProgramLocalParameter4dEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameter4dEXT) { obj->methodp_glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameter4dEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameter4dEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameter4dEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameter4dvEXT) { obj->methodp_glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)wglGetProcAddress("glNamedProgramLocalParameter4dvEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameter4dvEXT) { obj->methodp_glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameter4dvEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameter4dvEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameter4dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameter4fEXT) { obj->methodp_glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)wglGetProcAddress("glNamedProgramLocalParameter4fEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameter4fEXT) { obj->methodp_glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameter4fEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameter4fEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameter4fEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameter4fvEXT) { obj->methodp_glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)wglGetProcAddress("glNamedProgramLocalParameter4fvEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameter4fvEXT) { obj->methodp_glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameter4fvEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameter4fvEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameter4fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameterI4iEXT) { obj->methodp_glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)wglGetProcAddress("glNamedProgramLocalParameterI4iEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameterI4iEXT) { obj->methodp_glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameterI4iEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameterI4iEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameterI4iEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameterI4ivEXT) { obj->methodp_glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)wglGetProcAddress("glNamedProgramLocalParameterI4ivEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameterI4ivEXT) { obj->methodp_glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameterI4ivEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameterI4ivEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameterI4ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameterI4uiEXT) { obj->methodp_glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)wglGetProcAddress("glNamedProgramLocalParameterI4uiEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameterI4uiEXT) { obj->methodp_glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameterI4uiEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameterI4uiEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameterI4uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameterI4uivEXT) { obj->methodp_glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)wglGetProcAddress("glNamedProgramLocalParameterI4uivEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameterI4uivEXT) { obj->methodp_glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameterI4uivEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameterI4uivEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameterI4uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParameters4fvEXT) { obj->methodp_glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)wglGetProcAddress("glNamedProgramLocalParameters4fvEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameters4fvEXT) { obj->methodp_glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParameters4fvEXT"); }
		if(!obj->methodp_glNamedProgramLocalParameters4fvEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParameters4fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParametersI4ivEXT) { obj->methodp_glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)wglGetProcAddress("glNamedProgramLocalParametersI4ivEXT"); }
		if(!obj->methodp_glNamedProgramLocalParametersI4ivEXT) { obj->methodp_glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParametersI4ivEXT"); }
		if(!obj->methodp_glNamedProgramLocalParametersI4ivEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParametersI4ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramLocalParametersI4uivEXT) { obj->methodp_glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)wglGetProcAddress("glNamedProgramLocalParametersI4uivEXT"); }
		if(!obj->methodp_glNamedProgramLocalParametersI4uivEXT) { obj->methodp_glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramLocalParametersI4uivEXT"); }
		if(!obj->methodp_glNamedProgramLocalParametersI4uivEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramLocalParametersI4uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedProgramStringEXT) { obj->methodp_glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC)wglGetProcAddress("glNamedProgramStringEXT"); }
		if(!obj->methodp_glNamedProgramStringEXT) { obj->methodp_glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC)GetProcAddress(modOpenGL32, "glNamedProgramStringEXT"); }
		if(!obj->methodp_glNamedProgramStringEXT) { args.This()->Set(v8::String::NewSymbol("glNamedProgramStringEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedRenderbufferStorageEXT) { obj->methodp_glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)wglGetProcAddress("glNamedRenderbufferStorageEXT"); }
		if(!obj->methodp_glNamedRenderbufferStorageEXT) { obj->methodp_glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)GetProcAddress(modOpenGL32, "glNamedRenderbufferStorageEXT"); }
		if(!obj->methodp_glNamedRenderbufferStorageEXT) { args.This()->Set(v8::String::NewSymbol("glNamedRenderbufferStorageEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedRenderbufferStorageMultisampleCoverageEXT) { obj->methodp_glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)wglGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT"); }
		if(!obj->methodp_glNamedRenderbufferStorageMultisampleCoverageEXT) { obj->methodp_glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)GetProcAddress(modOpenGL32, "glNamedRenderbufferStorageMultisampleCoverageEXT"); }
		if(!obj->methodp_glNamedRenderbufferStorageMultisampleCoverageEXT) { args.This()->Set(v8::String::NewSymbol("glNamedRenderbufferStorageMultisampleCoverageEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedRenderbufferStorageMultisampleEXT) { obj->methodp_glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)wglGetProcAddress("glNamedRenderbufferStorageMultisampleEXT"); }
		if(!obj->methodp_glNamedRenderbufferStorageMultisampleEXT) { obj->methodp_glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)GetProcAddress(modOpenGL32, "glNamedRenderbufferStorageMultisampleEXT"); }
		if(!obj->methodp_glNamedRenderbufferStorageMultisampleEXT) { args.This()->Set(v8::String::NewSymbol("glNamedRenderbufferStorageMultisampleEXT"), v8::Undefined()); }
		if(!obj->methodp_glNamedStringARB) { obj->methodp_glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC)wglGetProcAddress("glNamedStringARB"); }
		if(!obj->methodp_glNamedStringARB) { obj->methodp_glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC)GetProcAddress(modOpenGL32, "glNamedStringARB"); }
		if(!obj->methodp_glNamedStringARB) { args.This()->Set(v8::String::NewSymbol("glNamedStringARB"), v8::Undefined()); }
		if(!obj->methodp_glNewList) { obj->methodp_glNewList = (PFNGLNEWLISTPROC)wglGetProcAddress("glNewList"); }
		if(!obj->methodp_glNewList) { obj->methodp_glNewList = (PFNGLNEWLISTPROC)GetProcAddress(modOpenGL32, "glNewList"); }
		if(!obj->methodp_glNewList) { args.This()->Set(v8::String::NewSymbol("glNewList"), v8::Undefined()); }
		if(!obj->methodp_glNewObjectBufferATI) { obj->methodp_glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC)wglGetProcAddress("glNewObjectBufferATI"); }
		if(!obj->methodp_glNewObjectBufferATI) { obj->methodp_glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC)GetProcAddress(modOpenGL32, "glNewObjectBufferATI"); }
		if(!obj->methodp_glNewObjectBufferATI) { args.This()->Set(v8::String::NewSymbol("glNewObjectBufferATI"), v8::Undefined()); }
		if(!obj->methodp_glNormal3b) { obj->methodp_glNormal3b = (PFNGLNORMAL3BPROC)wglGetProcAddress("glNormal3b"); }
		if(!obj->methodp_glNormal3b) { obj->methodp_glNormal3b = (PFNGLNORMAL3BPROC)GetProcAddress(modOpenGL32, "glNormal3b"); }
		if(!obj->methodp_glNormal3b) { args.This()->Set(v8::String::NewSymbol("glNormal3b"), v8::Undefined()); }
		if(!obj->methodp_glNormal3bv) { obj->methodp_glNormal3bv = (PFNGLNORMAL3BVPROC)wglGetProcAddress("glNormal3bv"); }
		if(!obj->methodp_glNormal3bv) { obj->methodp_glNormal3bv = (PFNGLNORMAL3BVPROC)GetProcAddress(modOpenGL32, "glNormal3bv"); }
		if(!obj->methodp_glNormal3bv) { args.This()->Set(v8::String::NewSymbol("glNormal3bv"), v8::Undefined()); }
		if(!obj->methodp_glNormal3d) { obj->methodp_glNormal3d = (PFNGLNORMAL3DPROC)wglGetProcAddress("glNormal3d"); }
		if(!obj->methodp_glNormal3d) { obj->methodp_glNormal3d = (PFNGLNORMAL3DPROC)GetProcAddress(modOpenGL32, "glNormal3d"); }
		if(!obj->methodp_glNormal3d) { args.This()->Set(v8::String::NewSymbol("glNormal3d"), v8::Undefined()); }
		if(!obj->methodp_glNormal3dv) { obj->methodp_glNormal3dv = (PFNGLNORMAL3DVPROC)wglGetProcAddress("glNormal3dv"); }
		if(!obj->methodp_glNormal3dv) { obj->methodp_glNormal3dv = (PFNGLNORMAL3DVPROC)GetProcAddress(modOpenGL32, "glNormal3dv"); }
		if(!obj->methodp_glNormal3dv) { args.This()->Set(v8::String::NewSymbol("glNormal3dv"), v8::Undefined()); }
		if(!obj->methodp_glNormal3f) { obj->methodp_glNormal3f = (PFNGLNORMAL3FPROC)wglGetProcAddress("glNormal3f"); }
		if(!obj->methodp_glNormal3f) { obj->methodp_glNormal3f = (PFNGLNORMAL3FPROC)GetProcAddress(modOpenGL32, "glNormal3f"); }
		if(!obj->methodp_glNormal3f) { args.This()->Set(v8::String::NewSymbol("glNormal3f"), v8::Undefined()); }
		if(!obj->methodp_glNormal3fVertex3fSUN) { obj->methodp_glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC)wglGetProcAddress("glNormal3fVertex3fSUN"); }
		if(!obj->methodp_glNormal3fVertex3fSUN) { obj->methodp_glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glNormal3fVertex3fSUN"); }
		if(!obj->methodp_glNormal3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glNormal3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glNormal3fVertex3fvSUN) { obj->methodp_glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC)wglGetProcAddress("glNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glNormal3fVertex3fvSUN) { obj->methodp_glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glNormal3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glNormal3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glNormal3fv) { obj->methodp_glNormal3fv = (PFNGLNORMAL3FVPROC)wglGetProcAddress("glNormal3fv"); }
		if(!obj->methodp_glNormal3fv) { obj->methodp_glNormal3fv = (PFNGLNORMAL3FVPROC)GetProcAddress(modOpenGL32, "glNormal3fv"); }
		if(!obj->methodp_glNormal3fv) { args.This()->Set(v8::String::NewSymbol("glNormal3fv"), v8::Undefined()); }
		if(!obj->methodp_glNormal3hNV) { obj->methodp_glNormal3hNV = (PFNGLNORMAL3HNVPROC)wglGetProcAddress("glNormal3hNV"); }
		if(!obj->methodp_glNormal3hNV) { obj->methodp_glNormal3hNV = (PFNGLNORMAL3HNVPROC)GetProcAddress(modOpenGL32, "glNormal3hNV"); }
		if(!obj->methodp_glNormal3hNV) { args.This()->Set(v8::String::NewSymbol("glNormal3hNV"), v8::Undefined()); }
		if(!obj->methodp_glNormal3hvNV) { obj->methodp_glNormal3hvNV = (PFNGLNORMAL3HVNVPROC)wglGetProcAddress("glNormal3hvNV"); }
		if(!obj->methodp_glNormal3hvNV) { obj->methodp_glNormal3hvNV = (PFNGLNORMAL3HVNVPROC)GetProcAddress(modOpenGL32, "glNormal3hvNV"); }
		if(!obj->methodp_glNormal3hvNV) { args.This()->Set(v8::String::NewSymbol("glNormal3hvNV"), v8::Undefined()); }
		if(!obj->methodp_glNormal3i) { obj->methodp_glNormal3i = (PFNGLNORMAL3IPROC)wglGetProcAddress("glNormal3i"); }
		if(!obj->methodp_glNormal3i) { obj->methodp_glNormal3i = (PFNGLNORMAL3IPROC)GetProcAddress(modOpenGL32, "glNormal3i"); }
		if(!obj->methodp_glNormal3i) { args.This()->Set(v8::String::NewSymbol("glNormal3i"), v8::Undefined()); }
		if(!obj->methodp_glNormal3iv) { obj->methodp_glNormal3iv = (PFNGLNORMAL3IVPROC)wglGetProcAddress("glNormal3iv"); }
		if(!obj->methodp_glNormal3iv) { obj->methodp_glNormal3iv = (PFNGLNORMAL3IVPROC)GetProcAddress(modOpenGL32, "glNormal3iv"); }
		if(!obj->methodp_glNormal3iv) { args.This()->Set(v8::String::NewSymbol("glNormal3iv"), v8::Undefined()); }
		if(!obj->methodp_glNormal3s) { obj->methodp_glNormal3s = (PFNGLNORMAL3SPROC)wglGetProcAddress("glNormal3s"); }
		if(!obj->methodp_glNormal3s) { obj->methodp_glNormal3s = (PFNGLNORMAL3SPROC)GetProcAddress(modOpenGL32, "glNormal3s"); }
		if(!obj->methodp_glNormal3s) { args.This()->Set(v8::String::NewSymbol("glNormal3s"), v8::Undefined()); }
		if(!obj->methodp_glNormal3sv) { obj->methodp_glNormal3sv = (PFNGLNORMAL3SVPROC)wglGetProcAddress("glNormal3sv"); }
		if(!obj->methodp_glNormal3sv) { obj->methodp_glNormal3sv = (PFNGLNORMAL3SVPROC)GetProcAddress(modOpenGL32, "glNormal3sv"); }
		if(!obj->methodp_glNormal3sv) { args.This()->Set(v8::String::NewSymbol("glNormal3sv"), v8::Undefined()); }
		if(!obj->methodp_glNormal3x) { obj->methodp_glNormal3x = (PFNGLNORMAL3XPROC)wglGetProcAddress("glNormal3x"); }
		if(!obj->methodp_glNormal3x) { obj->methodp_glNormal3x = (PFNGLNORMAL3XPROC)GetProcAddress(modOpenGL32, "glNormal3x"); }
		if(!obj->methodp_glNormal3x) { args.This()->Set(v8::String::NewSymbol("glNormal3x"), v8::Undefined()); }
		if(!obj->methodp_glNormal3xOES) { obj->methodp_glNormal3xOES = (PFNGLNORMAL3XOESPROC)wglGetProcAddress("glNormal3xOES"); }
		if(!obj->methodp_glNormal3xOES) { obj->methodp_glNormal3xOES = (PFNGLNORMAL3XOESPROC)GetProcAddress(modOpenGL32, "glNormal3xOES"); }
		if(!obj->methodp_glNormal3xOES) { args.This()->Set(v8::String::NewSymbol("glNormal3xOES"), v8::Undefined()); }
		if(!obj->methodp_glNormal3xvOES) { obj->methodp_glNormal3xvOES = (PFNGLNORMAL3XVOESPROC)wglGetProcAddress("glNormal3xvOES"); }
		if(!obj->methodp_glNormal3xvOES) { obj->methodp_glNormal3xvOES = (PFNGLNORMAL3XVOESPROC)GetProcAddress(modOpenGL32, "glNormal3xvOES"); }
		if(!obj->methodp_glNormal3xvOES) { args.This()->Set(v8::String::NewSymbol("glNormal3xvOES"), v8::Undefined()); }
		if(!obj->methodp_glNormalFormatNV) { obj->methodp_glNormalFormatNV = (PFNGLNORMALFORMATNVPROC)wglGetProcAddress("glNormalFormatNV"); }
		if(!obj->methodp_glNormalFormatNV) { obj->methodp_glNormalFormatNV = (PFNGLNORMALFORMATNVPROC)GetProcAddress(modOpenGL32, "glNormalFormatNV"); }
		if(!obj->methodp_glNormalFormatNV) { args.This()->Set(v8::String::NewSymbol("glNormalFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glNormalP3ui) { obj->methodp_glNormalP3ui = (PFNGLNORMALP3UIPROC)wglGetProcAddress("glNormalP3ui"); }
		if(!obj->methodp_glNormalP3ui) { obj->methodp_glNormalP3ui = (PFNGLNORMALP3UIPROC)GetProcAddress(modOpenGL32, "glNormalP3ui"); }
		if(!obj->methodp_glNormalP3ui) { args.This()->Set(v8::String::NewSymbol("glNormalP3ui"), v8::Undefined()); }
		if(!obj->methodp_glNormalP3uiv) { obj->methodp_glNormalP3uiv = (PFNGLNORMALP3UIVPROC)wglGetProcAddress("glNormalP3uiv"); }
		if(!obj->methodp_glNormalP3uiv) { obj->methodp_glNormalP3uiv = (PFNGLNORMALP3UIVPROC)GetProcAddress(modOpenGL32, "glNormalP3uiv"); }
		if(!obj->methodp_glNormalP3uiv) { args.This()->Set(v8::String::NewSymbol("glNormalP3uiv"), v8::Undefined()); }
		if(!obj->methodp_glNormalPointer) { obj->methodp_glNormalPointer = (PFNGLNORMALPOINTERPROC)wglGetProcAddress("glNormalPointer"); }
		if(!obj->methodp_glNormalPointer) { obj->methodp_glNormalPointer = (PFNGLNORMALPOINTERPROC)GetProcAddress(modOpenGL32, "glNormalPointer"); }
		if(!obj->methodp_glNormalPointer) { args.This()->Set(v8::String::NewSymbol("glNormalPointer"), v8::Undefined()); }
		if(!obj->methodp_glNormalPointerEXT) { obj->methodp_glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)wglGetProcAddress("glNormalPointerEXT"); }
		if(!obj->methodp_glNormalPointerEXT) { obj->methodp_glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glNormalPointerEXT"); }
		if(!obj->methodp_glNormalPointerEXT) { args.This()->Set(v8::String::NewSymbol("glNormalPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glNormalPointerListIBM) { obj->methodp_glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC)wglGetProcAddress("glNormalPointerListIBM"); }
		if(!obj->methodp_glNormalPointerListIBM) { obj->methodp_glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC)GetProcAddress(modOpenGL32, "glNormalPointerListIBM"); }
		if(!obj->methodp_glNormalPointerListIBM) { args.This()->Set(v8::String::NewSymbol("glNormalPointerListIBM"), v8::Undefined()); }
		if(!obj->methodp_glNormalPointervINTEL) { obj->methodp_glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC)wglGetProcAddress("glNormalPointervINTEL"); }
		if(!obj->methodp_glNormalPointervINTEL) { obj->methodp_glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC)GetProcAddress(modOpenGL32, "glNormalPointervINTEL"); }
		if(!obj->methodp_glNormalPointervINTEL) { args.This()->Set(v8::String::NewSymbol("glNormalPointervINTEL"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3bATI) { obj->methodp_glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC)wglGetProcAddress("glNormalStream3bATI"); }
		if(!obj->methodp_glNormalStream3bATI) { obj->methodp_glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3bATI"); }
		if(!obj->methodp_glNormalStream3bATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3bATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3bvATI) { obj->methodp_glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC)wglGetProcAddress("glNormalStream3bvATI"); }
		if(!obj->methodp_glNormalStream3bvATI) { obj->methodp_glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3bvATI"); }
		if(!obj->methodp_glNormalStream3bvATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3bvATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3dATI) { obj->methodp_glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC)wglGetProcAddress("glNormalStream3dATI"); }
		if(!obj->methodp_glNormalStream3dATI) { obj->methodp_glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3dATI"); }
		if(!obj->methodp_glNormalStream3dATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3dATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3dvATI) { obj->methodp_glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC)wglGetProcAddress("glNormalStream3dvATI"); }
		if(!obj->methodp_glNormalStream3dvATI) { obj->methodp_glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3dvATI"); }
		if(!obj->methodp_glNormalStream3dvATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3dvATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3fATI) { obj->methodp_glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC)wglGetProcAddress("glNormalStream3fATI"); }
		if(!obj->methodp_glNormalStream3fATI) { obj->methodp_glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3fATI"); }
		if(!obj->methodp_glNormalStream3fATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3fATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3fvATI) { obj->methodp_glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC)wglGetProcAddress("glNormalStream3fvATI"); }
		if(!obj->methodp_glNormalStream3fvATI) { obj->methodp_glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3fvATI"); }
		if(!obj->methodp_glNormalStream3fvATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3fvATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3iATI) { obj->methodp_glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC)wglGetProcAddress("glNormalStream3iATI"); }
		if(!obj->methodp_glNormalStream3iATI) { obj->methodp_glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3iATI"); }
		if(!obj->methodp_glNormalStream3iATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3iATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3ivATI) { obj->methodp_glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC)wglGetProcAddress("glNormalStream3ivATI"); }
		if(!obj->methodp_glNormalStream3ivATI) { obj->methodp_glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3ivATI"); }
		if(!obj->methodp_glNormalStream3ivATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3ivATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3sATI) { obj->methodp_glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC)wglGetProcAddress("glNormalStream3sATI"); }
		if(!obj->methodp_glNormalStream3sATI) { obj->methodp_glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3sATI"); }
		if(!obj->methodp_glNormalStream3sATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3sATI"), v8::Undefined()); }
		if(!obj->methodp_glNormalStream3svATI) { obj->methodp_glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC)wglGetProcAddress("glNormalStream3svATI"); }
		if(!obj->methodp_glNormalStream3svATI) { obj->methodp_glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC)GetProcAddress(modOpenGL32, "glNormalStream3svATI"); }
		if(!obj->methodp_glNormalStream3svATI) { args.This()->Set(v8::String::NewSymbol("glNormalStream3svATI"), v8::Undefined()); }
		if(!obj->methodp_glObjectLabel) { obj->methodp_glObjectLabel = (PFNGLOBJECTLABELPROC)wglGetProcAddress("glObjectLabel"); }
		if(!obj->methodp_glObjectLabel) { obj->methodp_glObjectLabel = (PFNGLOBJECTLABELPROC)GetProcAddress(modOpenGL32, "glObjectLabel"); }
		if(!obj->methodp_glObjectLabel) { args.This()->Set(v8::String::NewSymbol("glObjectLabel"), v8::Undefined()); }
		if(!obj->methodp_glObjectLabelKHR) { obj->methodp_glObjectLabelKHR = (PFNGLOBJECTLABELKHRPROC)wglGetProcAddress("glObjectLabelKHR"); }
		if(!obj->methodp_glObjectLabelKHR) { obj->methodp_glObjectLabelKHR = (PFNGLOBJECTLABELKHRPROC)GetProcAddress(modOpenGL32, "glObjectLabelKHR"); }
		if(!obj->methodp_glObjectLabelKHR) { args.This()->Set(v8::String::NewSymbol("glObjectLabelKHR"), v8::Undefined()); }
		if(!obj->methodp_glObjectPtrLabel) { obj->methodp_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)wglGetProcAddress("glObjectPtrLabel"); }
		if(!obj->methodp_glObjectPtrLabel) { obj->methodp_glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)GetProcAddress(modOpenGL32, "glObjectPtrLabel"); }
		if(!obj->methodp_glObjectPtrLabel) { args.This()->Set(v8::String::NewSymbol("glObjectPtrLabel"), v8::Undefined()); }
		if(!obj->methodp_glObjectPtrLabelKHR) { obj->methodp_glObjectPtrLabelKHR = (PFNGLOBJECTPTRLABELKHRPROC)wglGetProcAddress("glObjectPtrLabelKHR"); }
		if(!obj->methodp_glObjectPtrLabelKHR) { obj->methodp_glObjectPtrLabelKHR = (PFNGLOBJECTPTRLABELKHRPROC)GetProcAddress(modOpenGL32, "glObjectPtrLabelKHR"); }
		if(!obj->methodp_glObjectPtrLabelKHR) { args.This()->Set(v8::String::NewSymbol("glObjectPtrLabelKHR"), v8::Undefined()); }
		if(!obj->methodp_glObjectPurgeableAPPLE) { obj->methodp_glObjectPurgeableAPPLE = (PFNGLOBJECTPURGEABLEAPPLEPROC)wglGetProcAddress("glObjectPurgeableAPPLE"); }
		if(!obj->methodp_glObjectPurgeableAPPLE) { obj->methodp_glObjectPurgeableAPPLE = (PFNGLOBJECTPURGEABLEAPPLEPROC)GetProcAddress(modOpenGL32, "glObjectPurgeableAPPLE"); }
		if(!obj->methodp_glObjectPurgeableAPPLE) { args.This()->Set(v8::String::NewSymbol("glObjectPurgeableAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glObjectUnpurgeableAPPLE) { obj->methodp_glObjectUnpurgeableAPPLE = (PFNGLOBJECTUNPURGEABLEAPPLEPROC)wglGetProcAddress("glObjectUnpurgeableAPPLE"); }
		if(!obj->methodp_glObjectUnpurgeableAPPLE) { obj->methodp_glObjectUnpurgeableAPPLE = (PFNGLOBJECTUNPURGEABLEAPPLEPROC)GetProcAddress(modOpenGL32, "glObjectUnpurgeableAPPLE"); }
		if(!obj->methodp_glObjectUnpurgeableAPPLE) { args.This()->Set(v8::String::NewSymbol("glObjectUnpurgeableAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glOrtho) { obj->methodp_glOrtho = (PFNGLORTHOPROC)wglGetProcAddress("glOrtho"); }
		if(!obj->methodp_glOrtho) { obj->methodp_glOrtho = (PFNGLORTHOPROC)GetProcAddress(modOpenGL32, "glOrtho"); }
		if(!obj->methodp_glOrtho) { args.This()->Set(v8::String::NewSymbol("glOrtho"), v8::Undefined()); }
		if(!obj->methodp_glOrthof) { obj->methodp_glOrthof = (PFNGLORTHOFPROC)wglGetProcAddress("glOrthof"); }
		if(!obj->methodp_glOrthof) { obj->methodp_glOrthof = (PFNGLORTHOFPROC)GetProcAddress(modOpenGL32, "glOrthof"); }
		if(!obj->methodp_glOrthof) { args.This()->Set(v8::String::NewSymbol("glOrthof"), v8::Undefined()); }
		if(!obj->methodp_glOrthofOES) { obj->methodp_glOrthofOES = (PFNGLORTHOFOESPROC)wglGetProcAddress("glOrthofOES"); }
		if(!obj->methodp_glOrthofOES) { obj->methodp_glOrthofOES = (PFNGLORTHOFOESPROC)GetProcAddress(modOpenGL32, "glOrthofOES"); }
		if(!obj->methodp_glOrthofOES) { args.This()->Set(v8::String::NewSymbol("glOrthofOES"), v8::Undefined()); }
		if(!obj->methodp_glOrthox) { obj->methodp_glOrthox = (PFNGLORTHOXPROC)wglGetProcAddress("glOrthox"); }
		if(!obj->methodp_glOrthox) { obj->methodp_glOrthox = (PFNGLORTHOXPROC)GetProcAddress(modOpenGL32, "glOrthox"); }
		if(!obj->methodp_glOrthox) { args.This()->Set(v8::String::NewSymbol("glOrthox"), v8::Undefined()); }
		if(!obj->methodp_glOrthoxOES) { obj->methodp_glOrthoxOES = (PFNGLORTHOXOESPROC)wglGetProcAddress("glOrthoxOES"); }
		if(!obj->methodp_glOrthoxOES) { obj->methodp_glOrthoxOES = (PFNGLORTHOXOESPROC)GetProcAddress(modOpenGL32, "glOrthoxOES"); }
		if(!obj->methodp_glOrthoxOES) { args.This()->Set(v8::String::NewSymbol("glOrthoxOES"), v8::Undefined()); }
		if(!obj->methodp_glPNTrianglesfATI) { obj->methodp_glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC)wglGetProcAddress("glPNTrianglesfATI"); }
		if(!obj->methodp_glPNTrianglesfATI) { obj->methodp_glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC)GetProcAddress(modOpenGL32, "glPNTrianglesfATI"); }
		if(!obj->methodp_glPNTrianglesfATI) { args.This()->Set(v8::String::NewSymbol("glPNTrianglesfATI"), v8::Undefined()); }
		if(!obj->methodp_glPNTrianglesiATI) { obj->methodp_glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC)wglGetProcAddress("glPNTrianglesiATI"); }
		if(!obj->methodp_glPNTrianglesiATI) { obj->methodp_glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC)GetProcAddress(modOpenGL32, "glPNTrianglesiATI"); }
		if(!obj->methodp_glPNTrianglesiATI) { args.This()->Set(v8::String::NewSymbol("glPNTrianglesiATI"), v8::Undefined()); }
		if(!obj->methodp_glPassTexCoordATI) { obj->methodp_glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC)wglGetProcAddress("glPassTexCoordATI"); }
		if(!obj->methodp_glPassTexCoordATI) { obj->methodp_glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC)GetProcAddress(modOpenGL32, "glPassTexCoordATI"); }
		if(!obj->methodp_glPassTexCoordATI) { args.This()->Set(v8::String::NewSymbol("glPassTexCoordATI"), v8::Undefined()); }
		if(!obj->methodp_glPassThrough) { obj->methodp_glPassThrough = (PFNGLPASSTHROUGHPROC)wglGetProcAddress("glPassThrough"); }
		if(!obj->methodp_glPassThrough) { obj->methodp_glPassThrough = (PFNGLPASSTHROUGHPROC)GetProcAddress(modOpenGL32, "glPassThrough"); }
		if(!obj->methodp_glPassThrough) { args.This()->Set(v8::String::NewSymbol("glPassThrough"), v8::Undefined()); }
		if(!obj->methodp_glPassThroughxOES) { obj->methodp_glPassThroughxOES = (PFNGLPASSTHROUGHXOESPROC)wglGetProcAddress("glPassThroughxOES"); }
		if(!obj->methodp_glPassThroughxOES) { obj->methodp_glPassThroughxOES = (PFNGLPASSTHROUGHXOESPROC)GetProcAddress(modOpenGL32, "glPassThroughxOES"); }
		if(!obj->methodp_glPassThroughxOES) { args.This()->Set(v8::String::NewSymbol("glPassThroughxOES"), v8::Undefined()); }
		if(!obj->methodp_glPatchParameterfv) { obj->methodp_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)wglGetProcAddress("glPatchParameterfv"); }
		if(!obj->methodp_glPatchParameterfv) { obj->methodp_glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glPatchParameterfv"); }
		if(!obj->methodp_glPatchParameterfv) { args.This()->Set(v8::String::NewSymbol("glPatchParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glPatchParameteri) { obj->methodp_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)wglGetProcAddress("glPatchParameteri"); }
		if(!obj->methodp_glPatchParameteri) { obj->methodp_glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)GetProcAddress(modOpenGL32, "glPatchParameteri"); }
		if(!obj->methodp_glPatchParameteri) { args.This()->Set(v8::String::NewSymbol("glPatchParameteri"), v8::Undefined()); }
		if(!obj->methodp_glPatchParameteriEXT) { obj->methodp_glPatchParameteriEXT = (PFNGLPATCHPARAMETERIEXTPROC)wglGetProcAddress("glPatchParameteriEXT"); }
		if(!obj->methodp_glPatchParameteriEXT) { obj->methodp_glPatchParameteriEXT = (PFNGLPATCHPARAMETERIEXTPROC)GetProcAddress(modOpenGL32, "glPatchParameteriEXT"); }
		if(!obj->methodp_glPatchParameteriEXT) { args.This()->Set(v8::String::NewSymbol("glPatchParameteriEXT"), v8::Undefined()); }
		if(!obj->methodp_glPathColorGenNV) { obj->methodp_glPathColorGenNV = (PFNGLPATHCOLORGENNVPROC)wglGetProcAddress("glPathColorGenNV"); }
		if(!obj->methodp_glPathColorGenNV) { obj->methodp_glPathColorGenNV = (PFNGLPATHCOLORGENNVPROC)GetProcAddress(modOpenGL32, "glPathColorGenNV"); }
		if(!obj->methodp_glPathColorGenNV) { args.This()->Set(v8::String::NewSymbol("glPathColorGenNV"), v8::Undefined()); }
		if(!obj->methodp_glPathCommandsNV) { obj->methodp_glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC)wglGetProcAddress("glPathCommandsNV"); }
		if(!obj->methodp_glPathCommandsNV) { obj->methodp_glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC)GetProcAddress(modOpenGL32, "glPathCommandsNV"); }
		if(!obj->methodp_glPathCommandsNV) { args.This()->Set(v8::String::NewSymbol("glPathCommandsNV"), v8::Undefined()); }
		if(!obj->methodp_glPathCoordsNV) { obj->methodp_glPathCoordsNV = (PFNGLPATHCOORDSNVPROC)wglGetProcAddress("glPathCoordsNV"); }
		if(!obj->methodp_glPathCoordsNV) { obj->methodp_glPathCoordsNV = (PFNGLPATHCOORDSNVPROC)GetProcAddress(modOpenGL32, "glPathCoordsNV"); }
		if(!obj->methodp_glPathCoordsNV) { args.This()->Set(v8::String::NewSymbol("glPathCoordsNV"), v8::Undefined()); }
		if(!obj->methodp_glPathCoverDepthFuncNV) { obj->methodp_glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC)wglGetProcAddress("glPathCoverDepthFuncNV"); }
		if(!obj->methodp_glPathCoverDepthFuncNV) { obj->methodp_glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC)GetProcAddress(modOpenGL32, "glPathCoverDepthFuncNV"); }
		if(!obj->methodp_glPathCoverDepthFuncNV) { args.This()->Set(v8::String::NewSymbol("glPathCoverDepthFuncNV"), v8::Undefined()); }
		if(!obj->methodp_glPathDashArrayNV) { obj->methodp_glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC)wglGetProcAddress("glPathDashArrayNV"); }
		if(!obj->methodp_glPathDashArrayNV) { obj->methodp_glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC)GetProcAddress(modOpenGL32, "glPathDashArrayNV"); }
		if(!obj->methodp_glPathDashArrayNV) { args.This()->Set(v8::String::NewSymbol("glPathDashArrayNV"), v8::Undefined()); }
		if(!obj->methodp_glPathFogGenNV) { obj->methodp_glPathFogGenNV = (PFNGLPATHFOGGENNVPROC)wglGetProcAddress("glPathFogGenNV"); }
		if(!obj->methodp_glPathFogGenNV) { obj->methodp_glPathFogGenNV = (PFNGLPATHFOGGENNVPROC)GetProcAddress(modOpenGL32, "glPathFogGenNV"); }
		if(!obj->methodp_glPathFogGenNV) { args.This()->Set(v8::String::NewSymbol("glPathFogGenNV"), v8::Undefined()); }
		if(!obj->methodp_glPathGlyphRangeNV) { obj->methodp_glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC)wglGetProcAddress("glPathGlyphRangeNV"); }
		if(!obj->methodp_glPathGlyphRangeNV) { obj->methodp_glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC)GetProcAddress(modOpenGL32, "glPathGlyphRangeNV"); }
		if(!obj->methodp_glPathGlyphRangeNV) { args.This()->Set(v8::String::NewSymbol("glPathGlyphRangeNV"), v8::Undefined()); }
		if(!obj->methodp_glPathGlyphsNV) { obj->methodp_glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC)wglGetProcAddress("glPathGlyphsNV"); }
		if(!obj->methodp_glPathGlyphsNV) { obj->methodp_glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC)GetProcAddress(modOpenGL32, "glPathGlyphsNV"); }
		if(!obj->methodp_glPathGlyphsNV) { args.This()->Set(v8::String::NewSymbol("glPathGlyphsNV"), v8::Undefined()); }
		if(!obj->methodp_glPathParameterfNV) { obj->methodp_glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC)wglGetProcAddress("glPathParameterfNV"); }
		if(!obj->methodp_glPathParameterfNV) { obj->methodp_glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC)GetProcAddress(modOpenGL32, "glPathParameterfNV"); }
		if(!obj->methodp_glPathParameterfNV) { args.This()->Set(v8::String::NewSymbol("glPathParameterfNV"), v8::Undefined()); }
		if(!obj->methodp_glPathParameterfvNV) { obj->methodp_glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC)wglGetProcAddress("glPathParameterfvNV"); }
		if(!obj->methodp_glPathParameterfvNV) { obj->methodp_glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glPathParameterfvNV"); }
		if(!obj->methodp_glPathParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glPathParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glPathParameteriNV) { obj->methodp_glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC)wglGetProcAddress("glPathParameteriNV"); }
		if(!obj->methodp_glPathParameteriNV) { obj->methodp_glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC)GetProcAddress(modOpenGL32, "glPathParameteriNV"); }
		if(!obj->methodp_glPathParameteriNV) { args.This()->Set(v8::String::NewSymbol("glPathParameteriNV"), v8::Undefined()); }
		if(!obj->methodp_glPathParameterivNV) { obj->methodp_glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC)wglGetProcAddress("glPathParameterivNV"); }
		if(!obj->methodp_glPathParameterivNV) { obj->methodp_glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glPathParameterivNV"); }
		if(!obj->methodp_glPathParameterivNV) { args.This()->Set(v8::String::NewSymbol("glPathParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glPathStencilDepthOffsetNV) { obj->methodp_glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC)wglGetProcAddress("glPathStencilDepthOffsetNV"); }
		if(!obj->methodp_glPathStencilDepthOffsetNV) { obj->methodp_glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC)GetProcAddress(modOpenGL32, "glPathStencilDepthOffsetNV"); }
		if(!obj->methodp_glPathStencilDepthOffsetNV) { args.This()->Set(v8::String::NewSymbol("glPathStencilDepthOffsetNV"), v8::Undefined()); }
		if(!obj->methodp_glPathStencilFuncNV) { obj->methodp_glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC)wglGetProcAddress("glPathStencilFuncNV"); }
		if(!obj->methodp_glPathStencilFuncNV) { obj->methodp_glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC)GetProcAddress(modOpenGL32, "glPathStencilFuncNV"); }
		if(!obj->methodp_glPathStencilFuncNV) { args.This()->Set(v8::String::NewSymbol("glPathStencilFuncNV"), v8::Undefined()); }
		if(!obj->methodp_glPathStringNV) { obj->methodp_glPathStringNV = (PFNGLPATHSTRINGNVPROC)wglGetProcAddress("glPathStringNV"); }
		if(!obj->methodp_glPathStringNV) { obj->methodp_glPathStringNV = (PFNGLPATHSTRINGNVPROC)GetProcAddress(modOpenGL32, "glPathStringNV"); }
		if(!obj->methodp_glPathStringNV) { args.This()->Set(v8::String::NewSymbol("glPathStringNV"), v8::Undefined()); }
		if(!obj->methodp_glPathSubCommandsNV) { obj->methodp_glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC)wglGetProcAddress("glPathSubCommandsNV"); }
		if(!obj->methodp_glPathSubCommandsNV) { obj->methodp_glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC)GetProcAddress(modOpenGL32, "glPathSubCommandsNV"); }
		if(!obj->methodp_glPathSubCommandsNV) { args.This()->Set(v8::String::NewSymbol("glPathSubCommandsNV"), v8::Undefined()); }
		if(!obj->methodp_glPathSubCoordsNV) { obj->methodp_glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC)wglGetProcAddress("glPathSubCoordsNV"); }
		if(!obj->methodp_glPathSubCoordsNV) { obj->methodp_glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC)GetProcAddress(modOpenGL32, "glPathSubCoordsNV"); }
		if(!obj->methodp_glPathSubCoordsNV) { args.This()->Set(v8::String::NewSymbol("glPathSubCoordsNV"), v8::Undefined()); }
		if(!obj->methodp_glPathTexGenNV) { obj->methodp_glPathTexGenNV = (PFNGLPATHTEXGENNVPROC)wglGetProcAddress("glPathTexGenNV"); }
		if(!obj->methodp_glPathTexGenNV) { obj->methodp_glPathTexGenNV = (PFNGLPATHTEXGENNVPROC)GetProcAddress(modOpenGL32, "glPathTexGenNV"); }
		if(!obj->methodp_glPathTexGenNV) { args.This()->Set(v8::String::NewSymbol("glPathTexGenNV"), v8::Undefined()); }
		if(!obj->methodp_glPauseTransformFeedback) { obj->methodp_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)wglGetProcAddress("glPauseTransformFeedback"); }
		if(!obj->methodp_glPauseTransformFeedback) { obj->methodp_glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)GetProcAddress(modOpenGL32, "glPauseTransformFeedback"); }
		if(!obj->methodp_glPauseTransformFeedback) { args.This()->Set(v8::String::NewSymbol("glPauseTransformFeedback"), v8::Undefined()); }
		if(!obj->methodp_glPauseTransformFeedbackNV) { obj->methodp_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC)wglGetProcAddress("glPauseTransformFeedbackNV"); }
		if(!obj->methodp_glPauseTransformFeedbackNV) { obj->methodp_glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC)GetProcAddress(modOpenGL32, "glPauseTransformFeedbackNV"); }
		if(!obj->methodp_glPauseTransformFeedbackNV) { args.This()->Set(v8::String::NewSymbol("glPauseTransformFeedbackNV"), v8::Undefined()); }
		if(!obj->methodp_glPixelDataRangeNV) { obj->methodp_glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC)wglGetProcAddress("glPixelDataRangeNV"); }
		if(!obj->methodp_glPixelDataRangeNV) { obj->methodp_glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC)GetProcAddress(modOpenGL32, "glPixelDataRangeNV"); }
		if(!obj->methodp_glPixelDataRangeNV) { args.This()->Set(v8::String::NewSymbol("glPixelDataRangeNV"), v8::Undefined()); }
		if(!obj->methodp_glPixelMapfv) { obj->methodp_glPixelMapfv = (PFNGLPIXELMAPFVPROC)wglGetProcAddress("glPixelMapfv"); }
		if(!obj->methodp_glPixelMapfv) { obj->methodp_glPixelMapfv = (PFNGLPIXELMAPFVPROC)GetProcAddress(modOpenGL32, "glPixelMapfv"); }
		if(!obj->methodp_glPixelMapfv) { args.This()->Set(v8::String::NewSymbol("glPixelMapfv"), v8::Undefined()); }
		if(!obj->methodp_glPixelMapuiv) { obj->methodp_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC)wglGetProcAddress("glPixelMapuiv"); }
		if(!obj->methodp_glPixelMapuiv) { obj->methodp_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC)GetProcAddress(modOpenGL32, "glPixelMapuiv"); }
		if(!obj->methodp_glPixelMapuiv) { args.This()->Set(v8::String::NewSymbol("glPixelMapuiv"), v8::Undefined()); }
		if(!obj->methodp_glPixelMapusv) { obj->methodp_glPixelMapusv = (PFNGLPIXELMAPUSVPROC)wglGetProcAddress("glPixelMapusv"); }
		if(!obj->methodp_glPixelMapusv) { obj->methodp_glPixelMapusv = (PFNGLPIXELMAPUSVPROC)GetProcAddress(modOpenGL32, "glPixelMapusv"); }
		if(!obj->methodp_glPixelMapusv) { args.This()->Set(v8::String::NewSymbol("glPixelMapusv"), v8::Undefined()); }
		if(!obj->methodp_glPixelMapx) { obj->methodp_glPixelMapx = (PFNGLPIXELMAPXPROC)wglGetProcAddress("glPixelMapx"); }
		if(!obj->methodp_glPixelMapx) { obj->methodp_glPixelMapx = (PFNGLPIXELMAPXPROC)GetProcAddress(modOpenGL32, "glPixelMapx"); }
		if(!obj->methodp_glPixelMapx) { args.This()->Set(v8::String::NewSymbol("glPixelMapx"), v8::Undefined()); }
		if(!obj->methodp_glPixelStoref) { obj->methodp_glPixelStoref = (PFNGLPIXELSTOREFPROC)wglGetProcAddress("glPixelStoref"); }
		if(!obj->methodp_glPixelStoref) { obj->methodp_glPixelStoref = (PFNGLPIXELSTOREFPROC)GetProcAddress(modOpenGL32, "glPixelStoref"); }
		if(!obj->methodp_glPixelStoref) { args.This()->Set(v8::String::NewSymbol("glPixelStoref"), v8::Undefined()); }
		if(!obj->methodp_glPixelStorei) { obj->methodp_glPixelStorei = (PFNGLPIXELSTOREIPROC)wglGetProcAddress("glPixelStorei"); }
		if(!obj->methodp_glPixelStorei) { obj->methodp_glPixelStorei = (PFNGLPIXELSTOREIPROC)GetProcAddress(modOpenGL32, "glPixelStorei"); }
		if(!obj->methodp_glPixelStorei) { args.This()->Set(v8::String::NewSymbol("glPixelStorei"), v8::Undefined()); }
		if(!obj->methodp_glPixelStorex) { obj->methodp_glPixelStorex = (PFNGLPIXELSTOREXPROC)wglGetProcAddress("glPixelStorex"); }
		if(!obj->methodp_glPixelStorex) { obj->methodp_glPixelStorex = (PFNGLPIXELSTOREXPROC)GetProcAddress(modOpenGL32, "glPixelStorex"); }
		if(!obj->methodp_glPixelStorex) { args.This()->Set(v8::String::NewSymbol("glPixelStorex"), v8::Undefined()); }
		if(!obj->methodp_glPixelTexGenParameterfSGIS) { obj->methodp_glPixelTexGenParameterfSGIS = (PFNGLPIXELTEXGENPARAMETERFSGISPROC)wglGetProcAddress("glPixelTexGenParameterfSGIS"); }
		if(!obj->methodp_glPixelTexGenParameterfSGIS) { obj->methodp_glPixelTexGenParameterfSGIS = (PFNGLPIXELTEXGENPARAMETERFSGISPROC)GetProcAddress(modOpenGL32, "glPixelTexGenParameterfSGIS"); }
		if(!obj->methodp_glPixelTexGenParameterfSGIS) { args.This()->Set(v8::String::NewSymbol("glPixelTexGenParameterfSGIS"), v8::Undefined()); }
		if(!obj->methodp_glPixelTexGenParameterfvSGIS) { obj->methodp_glPixelTexGenParameterfvSGIS = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC)wglGetProcAddress("glPixelTexGenParameterfvSGIS"); }
		if(!obj->methodp_glPixelTexGenParameterfvSGIS) { obj->methodp_glPixelTexGenParameterfvSGIS = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC)GetProcAddress(modOpenGL32, "glPixelTexGenParameterfvSGIS"); }
		if(!obj->methodp_glPixelTexGenParameterfvSGIS) { args.This()->Set(v8::String::NewSymbol("glPixelTexGenParameterfvSGIS"), v8::Undefined()); }
		if(!obj->methodp_glPixelTexGenParameteriSGIS) { obj->methodp_glPixelTexGenParameteriSGIS = (PFNGLPIXELTEXGENPARAMETERISGISPROC)wglGetProcAddress("glPixelTexGenParameteriSGIS"); }
		if(!obj->methodp_glPixelTexGenParameteriSGIS) { obj->methodp_glPixelTexGenParameteriSGIS = (PFNGLPIXELTEXGENPARAMETERISGISPROC)GetProcAddress(modOpenGL32, "glPixelTexGenParameteriSGIS"); }
		if(!obj->methodp_glPixelTexGenParameteriSGIS) { args.This()->Set(v8::String::NewSymbol("glPixelTexGenParameteriSGIS"), v8::Undefined()); }
		if(!obj->methodp_glPixelTexGenParameterivSGIS) { obj->methodp_glPixelTexGenParameterivSGIS = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC)wglGetProcAddress("glPixelTexGenParameterivSGIS"); }
		if(!obj->methodp_glPixelTexGenParameterivSGIS) { obj->methodp_glPixelTexGenParameterivSGIS = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC)GetProcAddress(modOpenGL32, "glPixelTexGenParameterivSGIS"); }
		if(!obj->methodp_glPixelTexGenParameterivSGIS) { args.This()->Set(v8::String::NewSymbol("glPixelTexGenParameterivSGIS"), v8::Undefined()); }
		if(!obj->methodp_glPixelTexGenSGIX) { obj->methodp_glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC)wglGetProcAddress("glPixelTexGenSGIX"); }
		if(!obj->methodp_glPixelTexGenSGIX) { obj->methodp_glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC)GetProcAddress(modOpenGL32, "glPixelTexGenSGIX"); }
		if(!obj->methodp_glPixelTexGenSGIX) { args.This()->Set(v8::String::NewSymbol("glPixelTexGenSGIX"), v8::Undefined()); }
		if(!obj->methodp_glPixelTransferf) { obj->methodp_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC)wglGetProcAddress("glPixelTransferf"); }
		if(!obj->methodp_glPixelTransferf) { obj->methodp_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC)GetProcAddress(modOpenGL32, "glPixelTransferf"); }
		if(!obj->methodp_glPixelTransferf) { args.This()->Set(v8::String::NewSymbol("glPixelTransferf"), v8::Undefined()); }
		if(!obj->methodp_glPixelTransferi) { obj->methodp_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC)wglGetProcAddress("glPixelTransferi"); }
		if(!obj->methodp_glPixelTransferi) { obj->methodp_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC)GetProcAddress(modOpenGL32, "glPixelTransferi"); }
		if(!obj->methodp_glPixelTransferi) { args.This()->Set(v8::String::NewSymbol("glPixelTransferi"), v8::Undefined()); }
		if(!obj->methodp_glPixelTransferxOES) { obj->methodp_glPixelTransferxOES = (PFNGLPIXELTRANSFERXOESPROC)wglGetProcAddress("glPixelTransferxOES"); }
		if(!obj->methodp_glPixelTransferxOES) { obj->methodp_glPixelTransferxOES = (PFNGLPIXELTRANSFERXOESPROC)GetProcAddress(modOpenGL32, "glPixelTransferxOES"); }
		if(!obj->methodp_glPixelTransferxOES) { args.This()->Set(v8::String::NewSymbol("glPixelTransferxOES"), v8::Undefined()); }
		if(!obj->methodp_glPixelTransformParameterfEXT) { obj->methodp_glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)wglGetProcAddress("glPixelTransformParameterfEXT"); }
		if(!obj->methodp_glPixelTransformParameterfEXT) { obj->methodp_glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)GetProcAddress(modOpenGL32, "glPixelTransformParameterfEXT"); }
		if(!obj->methodp_glPixelTransformParameterfEXT) { args.This()->Set(v8::String::NewSymbol("glPixelTransformParameterfEXT"), v8::Undefined()); }
		if(!obj->methodp_glPixelTransformParameterfvEXT) { obj->methodp_glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)wglGetProcAddress("glPixelTransformParameterfvEXT"); }
		if(!obj->methodp_glPixelTransformParameterfvEXT) { obj->methodp_glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glPixelTransformParameterfvEXT"); }
		if(!obj->methodp_glPixelTransformParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glPixelTransformParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glPixelTransformParameteriEXT) { obj->methodp_glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)wglGetProcAddress("glPixelTransformParameteriEXT"); }
		if(!obj->methodp_glPixelTransformParameteriEXT) { obj->methodp_glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)GetProcAddress(modOpenGL32, "glPixelTransformParameteriEXT"); }
		if(!obj->methodp_glPixelTransformParameteriEXT) { args.This()->Set(v8::String::NewSymbol("glPixelTransformParameteriEXT"), v8::Undefined()); }
		if(!obj->methodp_glPixelTransformParameterivEXT) { obj->methodp_glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)wglGetProcAddress("glPixelTransformParameterivEXT"); }
		if(!obj->methodp_glPixelTransformParameterivEXT) { obj->methodp_glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glPixelTransformParameterivEXT"); }
		if(!obj->methodp_glPixelTransformParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glPixelTransformParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glPixelZoom) { obj->methodp_glPixelZoom = (PFNGLPIXELZOOMPROC)wglGetProcAddress("glPixelZoom"); }
		if(!obj->methodp_glPixelZoom) { obj->methodp_glPixelZoom = (PFNGLPIXELZOOMPROC)GetProcAddress(modOpenGL32, "glPixelZoom"); }
		if(!obj->methodp_glPixelZoom) { args.This()->Set(v8::String::NewSymbol("glPixelZoom"), v8::Undefined()); }
		if(!obj->methodp_glPixelZoomxOES) { obj->methodp_glPixelZoomxOES = (PFNGLPIXELZOOMXOESPROC)wglGetProcAddress("glPixelZoomxOES"); }
		if(!obj->methodp_glPixelZoomxOES) { obj->methodp_glPixelZoomxOES = (PFNGLPIXELZOOMXOESPROC)GetProcAddress(modOpenGL32, "glPixelZoomxOES"); }
		if(!obj->methodp_glPixelZoomxOES) { args.This()->Set(v8::String::NewSymbol("glPixelZoomxOES"), v8::Undefined()); }
		if(!obj->methodp_glPointAlongPathNV) { obj->methodp_glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC)wglGetProcAddress("glPointAlongPathNV"); }
		if(!obj->methodp_glPointAlongPathNV) { obj->methodp_glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC)GetProcAddress(modOpenGL32, "glPointAlongPathNV"); }
		if(!obj->methodp_glPointAlongPathNV) { args.This()->Set(v8::String::NewSymbol("glPointAlongPathNV"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterf) { obj->methodp_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)wglGetProcAddress("glPointParameterf"); }
		if(!obj->methodp_glPointParameterf) { obj->methodp_glPointParameterf = (PFNGLPOINTPARAMETERFPROC)GetProcAddress(modOpenGL32, "glPointParameterf"); }
		if(!obj->methodp_glPointParameterf) { args.This()->Set(v8::String::NewSymbol("glPointParameterf"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterfARB) { obj->methodp_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)wglGetProcAddress("glPointParameterfARB"); }
		if(!obj->methodp_glPointParameterfARB) { obj->methodp_glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)GetProcAddress(modOpenGL32, "glPointParameterfARB"); }
		if(!obj->methodp_glPointParameterfARB) { args.This()->Set(v8::String::NewSymbol("glPointParameterfARB"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterfEXT) { obj->methodp_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)wglGetProcAddress("glPointParameterfEXT"); }
		if(!obj->methodp_glPointParameterfEXT) { obj->methodp_glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)GetProcAddress(modOpenGL32, "glPointParameterfEXT"); }
		if(!obj->methodp_glPointParameterfEXT) { args.This()->Set(v8::String::NewSymbol("glPointParameterfEXT"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterfSGIS) { obj->methodp_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)wglGetProcAddress("glPointParameterfSGIS"); }
		if(!obj->methodp_glPointParameterfSGIS) { obj->methodp_glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)GetProcAddress(modOpenGL32, "glPointParameterfSGIS"); }
		if(!obj->methodp_glPointParameterfSGIS) { args.This()->Set(v8::String::NewSymbol("glPointParameterfSGIS"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterfv) { obj->methodp_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)wglGetProcAddress("glPointParameterfv"); }
		if(!obj->methodp_glPointParameterfv) { obj->methodp_glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glPointParameterfv"); }
		if(!obj->methodp_glPointParameterfv) { args.This()->Set(v8::String::NewSymbol("glPointParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterfvARB) { obj->methodp_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)wglGetProcAddress("glPointParameterfvARB"); }
		if(!obj->methodp_glPointParameterfvARB) { obj->methodp_glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)GetProcAddress(modOpenGL32, "glPointParameterfvARB"); }
		if(!obj->methodp_glPointParameterfvARB) { args.This()->Set(v8::String::NewSymbol("glPointParameterfvARB"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterfvEXT) { obj->methodp_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)wglGetProcAddress("glPointParameterfvEXT"); }
		if(!obj->methodp_glPointParameterfvEXT) { obj->methodp_glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glPointParameterfvEXT"); }
		if(!obj->methodp_glPointParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glPointParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterfvSGIS) { obj->methodp_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)wglGetProcAddress("glPointParameterfvSGIS"); }
		if(!obj->methodp_glPointParameterfvSGIS) { obj->methodp_glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)GetProcAddress(modOpenGL32, "glPointParameterfvSGIS"); }
		if(!obj->methodp_glPointParameterfvSGIS) { args.This()->Set(v8::String::NewSymbol("glPointParameterfvSGIS"), v8::Undefined()); }
		if(!obj->methodp_glPointParameteri) { obj->methodp_glPointParameteri = (PFNGLPOINTPARAMETERIPROC)wglGetProcAddress("glPointParameteri"); }
		if(!obj->methodp_glPointParameteri) { obj->methodp_glPointParameteri = (PFNGLPOINTPARAMETERIPROC)GetProcAddress(modOpenGL32, "glPointParameteri"); }
		if(!obj->methodp_glPointParameteri) { args.This()->Set(v8::String::NewSymbol("glPointParameteri"), v8::Undefined()); }
		if(!obj->methodp_glPointParameteriNV) { obj->methodp_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)wglGetProcAddress("glPointParameteriNV"); }
		if(!obj->methodp_glPointParameteriNV) { obj->methodp_glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)GetProcAddress(modOpenGL32, "glPointParameteriNV"); }
		if(!obj->methodp_glPointParameteriNV) { args.This()->Set(v8::String::NewSymbol("glPointParameteriNV"), v8::Undefined()); }
		if(!obj->methodp_glPointParameteriv) { obj->methodp_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)wglGetProcAddress("glPointParameteriv"); }
		if(!obj->methodp_glPointParameteriv) { obj->methodp_glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glPointParameteriv"); }
		if(!obj->methodp_glPointParameteriv) { args.This()->Set(v8::String::NewSymbol("glPointParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterivNV) { obj->methodp_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)wglGetProcAddress("glPointParameterivNV"); }
		if(!obj->methodp_glPointParameterivNV) { obj->methodp_glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glPointParameterivNV"); }
		if(!obj->methodp_glPointParameterivNV) { args.This()->Set(v8::String::NewSymbol("glPointParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterx) { obj->methodp_glPointParameterx = (PFNGLPOINTPARAMETERXPROC)wglGetProcAddress("glPointParameterx"); }
		if(!obj->methodp_glPointParameterx) { obj->methodp_glPointParameterx = (PFNGLPOINTPARAMETERXPROC)GetProcAddress(modOpenGL32, "glPointParameterx"); }
		if(!obj->methodp_glPointParameterx) { args.This()->Set(v8::String::NewSymbol("glPointParameterx"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterxOES) { obj->methodp_glPointParameterxOES = (PFNGLPOINTPARAMETERXOESPROC)wglGetProcAddress("glPointParameterxOES"); }
		if(!obj->methodp_glPointParameterxOES) { obj->methodp_glPointParameterxOES = (PFNGLPOINTPARAMETERXOESPROC)GetProcAddress(modOpenGL32, "glPointParameterxOES"); }
		if(!obj->methodp_glPointParameterxOES) { args.This()->Set(v8::String::NewSymbol("glPointParameterxOES"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterxv) { obj->methodp_glPointParameterxv = (PFNGLPOINTPARAMETERXVPROC)wglGetProcAddress("glPointParameterxv"); }
		if(!obj->methodp_glPointParameterxv) { obj->methodp_glPointParameterxv = (PFNGLPOINTPARAMETERXVPROC)GetProcAddress(modOpenGL32, "glPointParameterxv"); }
		if(!obj->methodp_glPointParameterxv) { args.This()->Set(v8::String::NewSymbol("glPointParameterxv"), v8::Undefined()); }
		if(!obj->methodp_glPointParameterxvOES) { obj->methodp_glPointParameterxvOES = (PFNGLPOINTPARAMETERXVOESPROC)wglGetProcAddress("glPointParameterxvOES"); }
		if(!obj->methodp_glPointParameterxvOES) { obj->methodp_glPointParameterxvOES = (PFNGLPOINTPARAMETERXVOESPROC)GetProcAddress(modOpenGL32, "glPointParameterxvOES"); }
		if(!obj->methodp_glPointParameterxvOES) { args.This()->Set(v8::String::NewSymbol("glPointParameterxvOES"), v8::Undefined()); }
		if(!obj->methodp_glPointSize) { obj->methodp_glPointSize = (PFNGLPOINTSIZEPROC)wglGetProcAddress("glPointSize"); }
		if(!obj->methodp_glPointSize) { obj->methodp_glPointSize = (PFNGLPOINTSIZEPROC)GetProcAddress(modOpenGL32, "glPointSize"); }
		if(!obj->methodp_glPointSize) { args.This()->Set(v8::String::NewSymbol("glPointSize"), v8::Undefined()); }
		if(!obj->methodp_glPointSizePointerOES) { obj->methodp_glPointSizePointerOES = (PFNGLPOINTSIZEPOINTEROESPROC)wglGetProcAddress("glPointSizePointerOES"); }
		if(!obj->methodp_glPointSizePointerOES) { obj->methodp_glPointSizePointerOES = (PFNGLPOINTSIZEPOINTEROESPROC)GetProcAddress(modOpenGL32, "glPointSizePointerOES"); }
		if(!obj->methodp_glPointSizePointerOES) { args.This()->Set(v8::String::NewSymbol("glPointSizePointerOES"), v8::Undefined()); }
		if(!obj->methodp_glPointSizex) { obj->methodp_glPointSizex = (PFNGLPOINTSIZEXPROC)wglGetProcAddress("glPointSizex"); }
		if(!obj->methodp_glPointSizex) { obj->methodp_glPointSizex = (PFNGLPOINTSIZEXPROC)GetProcAddress(modOpenGL32, "glPointSizex"); }
		if(!obj->methodp_glPointSizex) { args.This()->Set(v8::String::NewSymbol("glPointSizex"), v8::Undefined()); }
		if(!obj->methodp_glPointSizexOES) { obj->methodp_glPointSizexOES = (PFNGLPOINTSIZEXOESPROC)wglGetProcAddress("glPointSizexOES"); }
		if(!obj->methodp_glPointSizexOES) { obj->methodp_glPointSizexOES = (PFNGLPOINTSIZEXOESPROC)GetProcAddress(modOpenGL32, "glPointSizexOES"); }
		if(!obj->methodp_glPointSizexOES) { args.This()->Set(v8::String::NewSymbol("glPointSizexOES"), v8::Undefined()); }
		if(!obj->methodp_glPollAsyncSGIX) { obj->methodp_glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC)wglGetProcAddress("glPollAsyncSGIX"); }
		if(!obj->methodp_glPollAsyncSGIX) { obj->methodp_glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC)GetProcAddress(modOpenGL32, "glPollAsyncSGIX"); }
		if(!obj->methodp_glPollAsyncSGIX) { args.This()->Set(v8::String::NewSymbol("glPollAsyncSGIX"), v8::Undefined()); }
		if(!obj->methodp_glPollInstrumentsSGIX) { obj->methodp_glPollInstrumentsSGIX = (PFNGLPOLLINSTRUMENTSSGIXPROC)wglGetProcAddress("glPollInstrumentsSGIX"); }
		if(!obj->methodp_glPollInstrumentsSGIX) { obj->methodp_glPollInstrumentsSGIX = (PFNGLPOLLINSTRUMENTSSGIXPROC)GetProcAddress(modOpenGL32, "glPollInstrumentsSGIX"); }
		if(!obj->methodp_glPollInstrumentsSGIX) { args.This()->Set(v8::String::NewSymbol("glPollInstrumentsSGIX"), v8::Undefined()); }
		if(!obj->methodp_glPolygonMode) { obj->methodp_glPolygonMode = (PFNGLPOLYGONMODEPROC)wglGetProcAddress("glPolygonMode"); }
		if(!obj->methodp_glPolygonMode) { obj->methodp_glPolygonMode = (PFNGLPOLYGONMODEPROC)GetProcAddress(modOpenGL32, "glPolygonMode"); }
		if(!obj->methodp_glPolygonMode) { args.This()->Set(v8::String::NewSymbol("glPolygonMode"), v8::Undefined()); }
		if(!obj->methodp_glPolygonOffset) { obj->methodp_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)wglGetProcAddress("glPolygonOffset"); }
		if(!obj->methodp_glPolygonOffset) { obj->methodp_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC)GetProcAddress(modOpenGL32, "glPolygonOffset"); }
		if(!obj->methodp_glPolygonOffset) { args.This()->Set(v8::String::NewSymbol("glPolygonOffset"), v8::Undefined()); }
		if(!obj->methodp_glPolygonOffsetEXT) { obj->methodp_glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC)wglGetProcAddress("glPolygonOffsetEXT"); }
		if(!obj->methodp_glPolygonOffsetEXT) { obj->methodp_glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glPolygonOffsetEXT"); }
		if(!obj->methodp_glPolygonOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glPolygonOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glPolygonOffsetx) { obj->methodp_glPolygonOffsetx = (PFNGLPOLYGONOFFSETXPROC)wglGetProcAddress("glPolygonOffsetx"); }
		if(!obj->methodp_glPolygonOffsetx) { obj->methodp_glPolygonOffsetx = (PFNGLPOLYGONOFFSETXPROC)GetProcAddress(modOpenGL32, "glPolygonOffsetx"); }
		if(!obj->methodp_glPolygonOffsetx) { args.This()->Set(v8::String::NewSymbol("glPolygonOffsetx"), v8::Undefined()); }
		if(!obj->methodp_glPolygonOffsetxOES) { obj->methodp_glPolygonOffsetxOES = (PFNGLPOLYGONOFFSETXOESPROC)wglGetProcAddress("glPolygonOffsetxOES"); }
		if(!obj->methodp_glPolygonOffsetxOES) { obj->methodp_glPolygonOffsetxOES = (PFNGLPOLYGONOFFSETXOESPROC)GetProcAddress(modOpenGL32, "glPolygonOffsetxOES"); }
		if(!obj->methodp_glPolygonOffsetxOES) { args.This()->Set(v8::String::NewSymbol("glPolygonOffsetxOES"), v8::Undefined()); }
		if(!obj->methodp_glPolygonStipple) { obj->methodp_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC)wglGetProcAddress("glPolygonStipple"); }
		if(!obj->methodp_glPolygonStipple) { obj->methodp_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC)GetProcAddress(modOpenGL32, "glPolygonStipple"); }
		if(!obj->methodp_glPolygonStipple) { args.This()->Set(v8::String::NewSymbol("glPolygonStipple"), v8::Undefined()); }
		if(!obj->methodp_glPopAttrib) { obj->methodp_glPopAttrib = (PFNGLPOPATTRIBPROC)wglGetProcAddress("glPopAttrib"); }
		if(!obj->methodp_glPopAttrib) { obj->methodp_glPopAttrib = (PFNGLPOPATTRIBPROC)GetProcAddress(modOpenGL32, "glPopAttrib"); }
		if(!obj->methodp_glPopAttrib) { args.This()->Set(v8::String::NewSymbol("glPopAttrib"), v8::Undefined()); }
		if(!obj->methodp_glPopClientAttrib) { obj->methodp_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC)wglGetProcAddress("glPopClientAttrib"); }
		if(!obj->methodp_glPopClientAttrib) { obj->methodp_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC)GetProcAddress(modOpenGL32, "glPopClientAttrib"); }
		if(!obj->methodp_glPopClientAttrib) { args.This()->Set(v8::String::NewSymbol("glPopClientAttrib"), v8::Undefined()); }
		if(!obj->methodp_glPopDebugGroup) { obj->methodp_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)wglGetProcAddress("glPopDebugGroup"); }
		if(!obj->methodp_glPopDebugGroup) { obj->methodp_glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)GetProcAddress(modOpenGL32, "glPopDebugGroup"); }
		if(!obj->methodp_glPopDebugGroup) { args.This()->Set(v8::String::NewSymbol("glPopDebugGroup"), v8::Undefined()); }
		if(!obj->methodp_glPopDebugGroupKHR) { obj->methodp_glPopDebugGroupKHR = (PFNGLPOPDEBUGGROUPKHRPROC)wglGetProcAddress("glPopDebugGroupKHR"); }
		if(!obj->methodp_glPopDebugGroupKHR) { obj->methodp_glPopDebugGroupKHR = (PFNGLPOPDEBUGGROUPKHRPROC)GetProcAddress(modOpenGL32, "glPopDebugGroupKHR"); }
		if(!obj->methodp_glPopDebugGroupKHR) { args.This()->Set(v8::String::NewSymbol("glPopDebugGroupKHR"), v8::Undefined()); }
		if(!obj->methodp_glPopGroupMarkerEXT) { obj->methodp_glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC)wglGetProcAddress("glPopGroupMarkerEXT"); }
		if(!obj->methodp_glPopGroupMarkerEXT) { obj->methodp_glPopGroupMarkerEXT = (PFNGLPOPGROUPMARKEREXTPROC)GetProcAddress(modOpenGL32, "glPopGroupMarkerEXT"); }
		if(!obj->methodp_glPopGroupMarkerEXT) { args.This()->Set(v8::String::NewSymbol("glPopGroupMarkerEXT"), v8::Undefined()); }
		if(!obj->methodp_glPopMatrix) { obj->methodp_glPopMatrix = (PFNGLPOPMATRIXPROC)wglGetProcAddress("glPopMatrix"); }
		if(!obj->methodp_glPopMatrix) { obj->methodp_glPopMatrix = (PFNGLPOPMATRIXPROC)GetProcAddress(modOpenGL32, "glPopMatrix"); }
		if(!obj->methodp_glPopMatrix) { args.This()->Set(v8::String::NewSymbol("glPopMatrix"), v8::Undefined()); }
		if(!obj->methodp_glPopName) { obj->methodp_glPopName = (PFNGLPOPNAMEPROC)wglGetProcAddress("glPopName"); }
		if(!obj->methodp_glPopName) { obj->methodp_glPopName = (PFNGLPOPNAMEPROC)GetProcAddress(modOpenGL32, "glPopName"); }
		if(!obj->methodp_glPopName) { args.This()->Set(v8::String::NewSymbol("glPopName"), v8::Undefined()); }
		if(!obj->methodp_glPresentFrameDualFillNV) { obj->methodp_glPresentFrameDualFillNV = (PFNGLPRESENTFRAMEDUALFILLNVPROC)wglGetProcAddress("glPresentFrameDualFillNV"); }
		if(!obj->methodp_glPresentFrameDualFillNV) { obj->methodp_glPresentFrameDualFillNV = (PFNGLPRESENTFRAMEDUALFILLNVPROC)GetProcAddress(modOpenGL32, "glPresentFrameDualFillNV"); }
		if(!obj->methodp_glPresentFrameDualFillNV) { args.This()->Set(v8::String::NewSymbol("glPresentFrameDualFillNV"), v8::Undefined()); }
		if(!obj->methodp_glPresentFrameKeyedNV) { obj->methodp_glPresentFrameKeyedNV = (PFNGLPRESENTFRAMEKEYEDNVPROC)wglGetProcAddress("glPresentFrameKeyedNV"); }
		if(!obj->methodp_glPresentFrameKeyedNV) { obj->methodp_glPresentFrameKeyedNV = (PFNGLPRESENTFRAMEKEYEDNVPROC)GetProcAddress(modOpenGL32, "glPresentFrameKeyedNV"); }
		if(!obj->methodp_glPresentFrameKeyedNV) { args.This()->Set(v8::String::NewSymbol("glPresentFrameKeyedNV"), v8::Undefined()); }
		if(!obj->methodp_glPrimitiveRestartIndex) { obj->methodp_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)wglGetProcAddress("glPrimitiveRestartIndex"); }
		if(!obj->methodp_glPrimitiveRestartIndex) { obj->methodp_glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)GetProcAddress(modOpenGL32, "glPrimitiveRestartIndex"); }
		if(!obj->methodp_glPrimitiveRestartIndex) { args.This()->Set(v8::String::NewSymbol("glPrimitiveRestartIndex"), v8::Undefined()); }
		if(!obj->methodp_glPrimitiveRestartIndexNV) { obj->methodp_glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC)wglGetProcAddress("glPrimitiveRestartIndexNV"); }
		if(!obj->methodp_glPrimitiveRestartIndexNV) { obj->methodp_glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC)GetProcAddress(modOpenGL32, "glPrimitiveRestartIndexNV"); }
		if(!obj->methodp_glPrimitiveRestartIndexNV) { args.This()->Set(v8::String::NewSymbol("glPrimitiveRestartIndexNV"), v8::Undefined()); }
		if(!obj->methodp_glPrimitiveRestartNV) { obj->methodp_glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC)wglGetProcAddress("glPrimitiveRestartNV"); }
		if(!obj->methodp_glPrimitiveRestartNV) { obj->methodp_glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC)GetProcAddress(modOpenGL32, "glPrimitiveRestartNV"); }
		if(!obj->methodp_glPrimitiveRestartNV) { args.This()->Set(v8::String::NewSymbol("glPrimitiveRestartNV"), v8::Undefined()); }
		if(!obj->methodp_glPrioritizeTextures) { obj->methodp_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)wglGetProcAddress("glPrioritizeTextures"); }
		if(!obj->methodp_glPrioritizeTextures) { obj->methodp_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC)GetProcAddress(modOpenGL32, "glPrioritizeTextures"); }
		if(!obj->methodp_glPrioritizeTextures) { args.This()->Set(v8::String::NewSymbol("glPrioritizeTextures"), v8::Undefined()); }
		if(!obj->methodp_glPrimitiveBoundingBoxEXT) { obj->methodp_glPrimitiveBoundingBoxEXT = (PFNGLPRIMITIVEBOUNDINGBOXEXTPROC)wglGetProcAddress("glPrimitiveBoundingBoxEXT"); }
		if(!obj->methodp_glPrimitiveBoundingBoxEXT) { obj->methodp_glPrimitiveBoundingBoxEXT = (PFNGLPRIMITIVEBOUNDINGBOXEXTPROC)GetProcAddress(modOpenGL32, "glPrimitiveBoundingBoxEXT"); }
		if(!obj->methodp_glPrimitiveBoundingBoxEXT) { args.This()->Set(v8::String::NewSymbol("glPrimitiveBoundingBoxEXT"), v8::Undefined()); }
		if(!obj->methodp_glPrioritizeTexturesEXT) { obj->methodp_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)wglGetProcAddress("glPrioritizeTexturesEXT"); }
		if(!obj->methodp_glPrioritizeTexturesEXT) { obj->methodp_glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)GetProcAddress(modOpenGL32, "glPrioritizeTexturesEXT"); }
		if(!obj->methodp_glPrioritizeTexturesEXT) { args.This()->Set(v8::String::NewSymbol("glPrioritizeTexturesEXT"), v8::Undefined()); }
		if(!obj->methodp_glPrioritizeTexturesxOES) { obj->methodp_glPrioritizeTexturesxOES = (PFNGLPRIORITIZETEXTURESXOESPROC)wglGetProcAddress("glPrioritizeTexturesxOES"); }
		if(!obj->methodp_glPrioritizeTexturesxOES) { obj->methodp_glPrioritizeTexturesxOES = (PFNGLPRIORITIZETEXTURESXOESPROC)GetProcAddress(modOpenGL32, "glPrioritizeTexturesxOES"); }
		if(!obj->methodp_glPrioritizeTexturesxOES) { args.This()->Set(v8::String::NewSymbol("glPrioritizeTexturesxOES"), v8::Undefined()); }
		if(!obj->methodp_glProgramBinary) { obj->methodp_glProgramBinary = (PFNGLPROGRAMBINARYPROC)wglGetProcAddress("glProgramBinary"); }
		if(!obj->methodp_glProgramBinary) { obj->methodp_glProgramBinary = (PFNGLPROGRAMBINARYPROC)GetProcAddress(modOpenGL32, "glProgramBinary"); }
		if(!obj->methodp_glProgramBinary) { args.This()->Set(v8::String::NewSymbol("glProgramBinary"), v8::Undefined()); }
		if(!obj->methodp_glProgramBinaryOES) { obj->methodp_glProgramBinaryOES = (PFNGLPROGRAMBINARYOESPROC)wglGetProcAddress("glProgramBinaryOES"); }
		if(!obj->methodp_glProgramBinaryOES) { obj->methodp_glProgramBinaryOES = (PFNGLPROGRAMBINARYOESPROC)GetProcAddress(modOpenGL32, "glProgramBinaryOES"); }
		if(!obj->methodp_glProgramBinaryOES) { args.This()->Set(v8::String::NewSymbol("glProgramBinaryOES"), v8::Undefined()); }
		if(!obj->methodp_glProgramBufferParametersIivNV) { obj->methodp_glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)wglGetProcAddress("glProgramBufferParametersIivNV"); }
		if(!obj->methodp_glProgramBufferParametersIivNV) { obj->methodp_glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)GetProcAddress(modOpenGL32, "glProgramBufferParametersIivNV"); }
		if(!obj->methodp_glProgramBufferParametersIivNV) { args.This()->Set(v8::String::NewSymbol("glProgramBufferParametersIivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramBufferParametersIuivNV) { obj->methodp_glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)wglGetProcAddress("glProgramBufferParametersIuivNV"); }
		if(!obj->methodp_glProgramBufferParametersIuivNV) { obj->methodp_glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)GetProcAddress(modOpenGL32, "glProgramBufferParametersIuivNV"); }
		if(!obj->methodp_glProgramBufferParametersIuivNV) { args.This()->Set(v8::String::NewSymbol("glProgramBufferParametersIuivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramBufferParametersfvNV) { obj->methodp_glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)wglGetProcAddress("glProgramBufferParametersfvNV"); }
		if(!obj->methodp_glProgramBufferParametersfvNV) { obj->methodp_glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)GetProcAddress(modOpenGL32, "glProgramBufferParametersfvNV"); }
		if(!obj->methodp_glProgramBufferParametersfvNV) { args.This()->Set(v8::String::NewSymbol("glProgramBufferParametersfvNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameter4dARB) { obj->methodp_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)wglGetProcAddress("glProgramEnvParameter4dARB"); }
		if(!obj->methodp_glProgramEnvParameter4dARB) { obj->methodp_glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameter4dARB"); }
		if(!obj->methodp_glProgramEnvParameter4dARB) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameter4dARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameter4dvARB) { obj->methodp_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)wglGetProcAddress("glProgramEnvParameter4dvARB"); }
		if(!obj->methodp_glProgramEnvParameter4dvARB) { obj->methodp_glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameter4dvARB"); }
		if(!obj->methodp_glProgramEnvParameter4dvARB) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameter4dvARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameter4fARB) { obj->methodp_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)wglGetProcAddress("glProgramEnvParameter4fARB"); }
		if(!obj->methodp_glProgramEnvParameter4fARB) { obj->methodp_glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameter4fARB"); }
		if(!obj->methodp_glProgramEnvParameter4fARB) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameter4fARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameter4fvARB) { obj->methodp_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)wglGetProcAddress("glProgramEnvParameter4fvARB"); }
		if(!obj->methodp_glProgramEnvParameter4fvARB) { obj->methodp_glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameter4fvARB"); }
		if(!obj->methodp_glProgramEnvParameter4fvARB) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameter4fvARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameterI4iNV) { obj->methodp_glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC)wglGetProcAddress("glProgramEnvParameterI4iNV"); }
		if(!obj->methodp_glProgramEnvParameterI4iNV) { obj->methodp_glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameterI4iNV"); }
		if(!obj->methodp_glProgramEnvParameterI4iNV) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameterI4iNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameterI4ivNV) { obj->methodp_glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)wglGetProcAddress("glProgramEnvParameterI4ivNV"); }
		if(!obj->methodp_glProgramEnvParameterI4ivNV) { obj->methodp_glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameterI4ivNV"); }
		if(!obj->methodp_glProgramEnvParameterI4ivNV) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameterI4ivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameterI4uiNV) { obj->methodp_glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)wglGetProcAddress("glProgramEnvParameterI4uiNV"); }
		if(!obj->methodp_glProgramEnvParameterI4uiNV) { obj->methodp_glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameterI4uiNV"); }
		if(!obj->methodp_glProgramEnvParameterI4uiNV) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameterI4uiNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameterI4uivNV) { obj->methodp_glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)wglGetProcAddress("glProgramEnvParameterI4uivNV"); }
		if(!obj->methodp_glProgramEnvParameterI4uivNV) { obj->methodp_glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameterI4uivNV"); }
		if(!obj->methodp_glProgramEnvParameterI4uivNV) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameterI4uivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParameters4fvEXT) { obj->methodp_glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)wglGetProcAddress("glProgramEnvParameters4fvEXT"); }
		if(!obj->methodp_glProgramEnvParameters4fvEXT) { obj->methodp_glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramEnvParameters4fvEXT"); }
		if(!obj->methodp_glProgramEnvParameters4fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParameters4fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParametersI4ivNV) { obj->methodp_glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)wglGetProcAddress("glProgramEnvParametersI4ivNV"); }
		if(!obj->methodp_glProgramEnvParametersI4ivNV) { obj->methodp_glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)GetProcAddress(modOpenGL32, "glProgramEnvParametersI4ivNV"); }
		if(!obj->methodp_glProgramEnvParametersI4ivNV) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParametersI4ivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramEnvParametersI4uivNV) { obj->methodp_glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)wglGetProcAddress("glProgramEnvParametersI4uivNV"); }
		if(!obj->methodp_glProgramEnvParametersI4uivNV) { obj->methodp_glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)GetProcAddress(modOpenGL32, "glProgramEnvParametersI4uivNV"); }
		if(!obj->methodp_glProgramEnvParametersI4uivNV) { args.This()->Set(v8::String::NewSymbol("glProgramEnvParametersI4uivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameter4dARB) { obj->methodp_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)wglGetProcAddress("glProgramLocalParameter4dARB"); }
		if(!obj->methodp_glProgramLocalParameter4dARB) { obj->methodp_glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameter4dARB"); }
		if(!obj->methodp_glProgramLocalParameter4dARB) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameter4dARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameter4dvARB) { obj->methodp_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)wglGetProcAddress("glProgramLocalParameter4dvARB"); }
		if(!obj->methodp_glProgramLocalParameter4dvARB) { obj->methodp_glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameter4dvARB"); }
		if(!obj->methodp_glProgramLocalParameter4dvARB) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameter4dvARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameter4fARB) { obj->methodp_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)wglGetProcAddress("glProgramLocalParameter4fARB"); }
		if(!obj->methodp_glProgramLocalParameter4fARB) { obj->methodp_glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameter4fARB"); }
		if(!obj->methodp_glProgramLocalParameter4fARB) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameter4fARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameter4fvARB) { obj->methodp_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)wglGetProcAddress("glProgramLocalParameter4fvARB"); }
		if(!obj->methodp_glProgramLocalParameter4fvARB) { obj->methodp_glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameter4fvARB"); }
		if(!obj->methodp_glProgramLocalParameter4fvARB) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameter4fvARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameterI4iNV) { obj->methodp_glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)wglGetProcAddress("glProgramLocalParameterI4iNV"); }
		if(!obj->methodp_glProgramLocalParameterI4iNV) { obj->methodp_glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameterI4iNV"); }
		if(!obj->methodp_glProgramLocalParameterI4iNV) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameterI4iNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameterI4ivNV) { obj->methodp_glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)wglGetProcAddress("glProgramLocalParameterI4ivNV"); }
		if(!obj->methodp_glProgramLocalParameterI4ivNV) { obj->methodp_glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameterI4ivNV"); }
		if(!obj->methodp_glProgramLocalParameterI4ivNV) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameterI4ivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameterI4uiNV) { obj->methodp_glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)wglGetProcAddress("glProgramLocalParameterI4uiNV"); }
		if(!obj->methodp_glProgramLocalParameterI4uiNV) { obj->methodp_glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameterI4uiNV"); }
		if(!obj->methodp_glProgramLocalParameterI4uiNV) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameterI4uiNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameterI4uivNV) { obj->methodp_glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)wglGetProcAddress("glProgramLocalParameterI4uivNV"); }
		if(!obj->methodp_glProgramLocalParameterI4uivNV) { obj->methodp_glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameterI4uivNV"); }
		if(!obj->methodp_glProgramLocalParameterI4uivNV) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameterI4uivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParameters4fvEXT) { obj->methodp_glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)wglGetProcAddress("glProgramLocalParameters4fvEXT"); }
		if(!obj->methodp_glProgramLocalParameters4fvEXT) { obj->methodp_glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramLocalParameters4fvEXT"); }
		if(!obj->methodp_glProgramLocalParameters4fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParameters4fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParametersI4ivNV) { obj->methodp_glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)wglGetProcAddress("glProgramLocalParametersI4ivNV"); }
		if(!obj->methodp_glProgramLocalParametersI4ivNV) { obj->methodp_glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)GetProcAddress(modOpenGL32, "glProgramLocalParametersI4ivNV"); }
		if(!obj->methodp_glProgramLocalParametersI4ivNV) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParametersI4ivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramLocalParametersI4uivNV) { obj->methodp_glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)wglGetProcAddress("glProgramLocalParametersI4uivNV"); }
		if(!obj->methodp_glProgramLocalParametersI4uivNV) { obj->methodp_glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)GetProcAddress(modOpenGL32, "glProgramLocalParametersI4uivNV"); }
		if(!obj->methodp_glProgramLocalParametersI4uivNV) { args.This()->Set(v8::String::NewSymbol("glProgramLocalParametersI4uivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramNamedParameter4dNV) { obj->methodp_glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)wglGetProcAddress("glProgramNamedParameter4dNV"); }
		if(!obj->methodp_glProgramNamedParameter4dNV) { obj->methodp_glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)GetProcAddress(modOpenGL32, "glProgramNamedParameter4dNV"); }
		if(!obj->methodp_glProgramNamedParameter4dNV) { args.This()->Set(v8::String::NewSymbol("glProgramNamedParameter4dNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramNamedParameter4dvNV) { obj->methodp_glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)wglGetProcAddress("glProgramNamedParameter4dvNV"); }
		if(!obj->methodp_glProgramNamedParameter4dvNV) { obj->methodp_glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)GetProcAddress(modOpenGL32, "glProgramNamedParameter4dvNV"); }
		if(!obj->methodp_glProgramNamedParameter4dvNV) { args.This()->Set(v8::String::NewSymbol("glProgramNamedParameter4dvNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramNamedParameter4fNV) { obj->methodp_glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)wglGetProcAddress("glProgramNamedParameter4fNV"); }
		if(!obj->methodp_glProgramNamedParameter4fNV) { obj->methodp_glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)GetProcAddress(modOpenGL32, "glProgramNamedParameter4fNV"); }
		if(!obj->methodp_glProgramNamedParameter4fNV) { args.This()->Set(v8::String::NewSymbol("glProgramNamedParameter4fNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramNamedParameter4fvNV) { obj->methodp_glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)wglGetProcAddress("glProgramNamedParameter4fvNV"); }
		if(!obj->methodp_glProgramNamedParameter4fvNV) { obj->methodp_glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)GetProcAddress(modOpenGL32, "glProgramNamedParameter4fvNV"); }
		if(!obj->methodp_glProgramNamedParameter4fvNV) { args.This()->Set(v8::String::NewSymbol("glProgramNamedParameter4fvNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameter4dNV) { obj->methodp_glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)wglGetProcAddress("glProgramParameter4dNV"); }
		if(!obj->methodp_glProgramParameter4dNV) { obj->methodp_glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)GetProcAddress(modOpenGL32, "glProgramParameter4dNV"); }
		if(!obj->methodp_glProgramParameter4dNV) { args.This()->Set(v8::String::NewSymbol("glProgramParameter4dNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameter4dvNV) { obj->methodp_glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)wglGetProcAddress("glProgramParameter4dvNV"); }
		if(!obj->methodp_glProgramParameter4dvNV) { obj->methodp_glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)GetProcAddress(modOpenGL32, "glProgramParameter4dvNV"); }
		if(!obj->methodp_glProgramParameter4dvNV) { args.This()->Set(v8::String::NewSymbol("glProgramParameter4dvNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameter4fNV) { obj->methodp_glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)wglGetProcAddress("glProgramParameter4fNV"); }
		if(!obj->methodp_glProgramParameter4fNV) { obj->methodp_glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)GetProcAddress(modOpenGL32, "glProgramParameter4fNV"); }
		if(!obj->methodp_glProgramParameter4fNV) { args.This()->Set(v8::String::NewSymbol("glProgramParameter4fNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameter4fvNV) { obj->methodp_glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)wglGetProcAddress("glProgramParameter4fvNV"); }
		if(!obj->methodp_glProgramParameter4fvNV) { obj->methodp_glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)GetProcAddress(modOpenGL32, "glProgramParameter4fvNV"); }
		if(!obj->methodp_glProgramParameter4fvNV) { args.This()->Set(v8::String::NewSymbol("glProgramParameter4fvNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameteri) { obj->methodp_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)wglGetProcAddress("glProgramParameteri"); }
		if(!obj->methodp_glProgramParameteri) { obj->methodp_glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)GetProcAddress(modOpenGL32, "glProgramParameteri"); }
		if(!obj->methodp_glProgramParameteri) { args.This()->Set(v8::String::NewSymbol("glProgramParameteri"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameteriARB) { obj->methodp_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)wglGetProcAddress("glProgramParameteriARB"); }
		if(!obj->methodp_glProgramParameteriARB) { obj->methodp_glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)GetProcAddress(modOpenGL32, "glProgramParameteriARB"); }
		if(!obj->methodp_glProgramParameteriARB) { args.This()->Set(v8::String::NewSymbol("glProgramParameteriARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameteriEXT) { obj->methodp_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)wglGetProcAddress("glProgramParameteriEXT"); }
		if(!obj->methodp_glProgramParameteriEXT) { obj->methodp_glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)GetProcAddress(modOpenGL32, "glProgramParameteriEXT"); }
		if(!obj->methodp_glProgramParameteriEXT) { args.This()->Set(v8::String::NewSymbol("glProgramParameteriEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameters4dvNV) { obj->methodp_glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)wglGetProcAddress("glProgramParameters4dvNV"); }
		if(!obj->methodp_glProgramParameters4dvNV) { obj->methodp_glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)GetProcAddress(modOpenGL32, "glProgramParameters4dvNV"); }
		if(!obj->methodp_glProgramParameters4dvNV) { args.This()->Set(v8::String::NewSymbol("glProgramParameters4dvNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramParameters4fvNV) { obj->methodp_glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)wglGetProcAddress("glProgramParameters4fvNV"); }
		if(!obj->methodp_glProgramParameters4fvNV) { obj->methodp_glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)GetProcAddress(modOpenGL32, "glProgramParameters4fvNV"); }
		if(!obj->methodp_glProgramParameters4fvNV) { args.This()->Set(v8::String::NewSymbol("glProgramParameters4fvNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramStringARB) { obj->methodp_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)wglGetProcAddress("glProgramStringARB"); }
		if(!obj->methodp_glProgramStringARB) { obj->methodp_glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)GetProcAddress(modOpenGL32, "glProgramStringARB"); }
		if(!obj->methodp_glProgramStringARB) { args.This()->Set(v8::String::NewSymbol("glProgramStringARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramSubroutineParametersuivNV) { obj->methodp_glProgramSubroutineParametersuivNV = (PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)wglGetProcAddress("glProgramSubroutineParametersuivNV"); }
		if(!obj->methodp_glProgramSubroutineParametersuivNV) { obj->methodp_glProgramSubroutineParametersuivNV = (PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)GetProcAddress(modOpenGL32, "glProgramSubroutineParametersuivNV"); }
		if(!obj->methodp_glProgramSubroutineParametersuivNV) { args.This()->Set(v8::String::NewSymbol("glProgramSubroutineParametersuivNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1d) { obj->methodp_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)wglGetProcAddress("glProgramUniform1d"); }
		if(!obj->methodp_glProgramUniform1d) { obj->methodp_glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)GetProcAddress(modOpenGL32, "glProgramUniform1d"); }
		if(!obj->methodp_glProgramUniform1d) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1d"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1dEXT) { obj->methodp_glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC)wglGetProcAddress("glProgramUniform1dEXT"); }
		if(!obj->methodp_glProgramUniform1dEXT) { obj->methodp_glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform1dEXT"); }
		if(!obj->methodp_glProgramUniform1dEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1dEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1dv) { obj->methodp_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)wglGetProcAddress("glProgramUniform1dv"); }
		if(!obj->methodp_glProgramUniform1dv) { obj->methodp_glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)GetProcAddress(modOpenGL32, "glProgramUniform1dv"); }
		if(!obj->methodp_glProgramUniform1dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1dvEXT) { obj->methodp_glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC)wglGetProcAddress("glProgramUniform1dvEXT"); }
		if(!obj->methodp_glProgramUniform1dvEXT) { obj->methodp_glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform1dvEXT"); }
		if(!obj->methodp_glProgramUniform1dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1f) { obj->methodp_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)wglGetProcAddress("glProgramUniform1f"); }
		if(!obj->methodp_glProgramUniform1f) { obj->methodp_glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)GetProcAddress(modOpenGL32, "glProgramUniform1f"); }
		if(!obj->methodp_glProgramUniform1f) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1f"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1fEXT) { obj->methodp_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)wglGetProcAddress("glProgramUniform1fEXT"); }
		if(!obj->methodp_glProgramUniform1fEXT) { obj->methodp_glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform1fEXT"); }
		if(!obj->methodp_glProgramUniform1fEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1fEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1fv) { obj->methodp_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)wglGetProcAddress("glProgramUniform1fv"); }
		if(!obj->methodp_glProgramUniform1fv) { obj->methodp_glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)GetProcAddress(modOpenGL32, "glProgramUniform1fv"); }
		if(!obj->methodp_glProgramUniform1fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1fvEXT) { obj->methodp_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)wglGetProcAddress("glProgramUniform1fvEXT"); }
		if(!obj->methodp_glProgramUniform1fvEXT) { obj->methodp_glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform1fvEXT"); }
		if(!obj->methodp_glProgramUniform1fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1i) { obj->methodp_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)wglGetProcAddress("glProgramUniform1i"); }
		if(!obj->methodp_glProgramUniform1i) { obj->methodp_glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)GetProcAddress(modOpenGL32, "glProgramUniform1i"); }
		if(!obj->methodp_glProgramUniform1i) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1i"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1i64NV) { obj->methodp_glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC)wglGetProcAddress("glProgramUniform1i64NV"); }
		if(!obj->methodp_glProgramUniform1i64NV) { obj->methodp_glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniform1i64NV"); }
		if(!obj->methodp_glProgramUniform1i64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1i64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1i64vNV) { obj->methodp_glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC)wglGetProcAddress("glProgramUniform1i64vNV"); }
		if(!obj->methodp_glProgramUniform1i64vNV) { obj->methodp_glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniform1i64vNV"); }
		if(!obj->methodp_glProgramUniform1i64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1iEXT) { obj->methodp_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)wglGetProcAddress("glProgramUniform1iEXT"); }
		if(!obj->methodp_glProgramUniform1iEXT) { obj->methodp_glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform1iEXT"); }
		if(!obj->methodp_glProgramUniform1iEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1iEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1iv) { obj->methodp_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)wglGetProcAddress("glProgramUniform1iv"); }
		if(!obj->methodp_glProgramUniform1iv) { obj->methodp_glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)GetProcAddress(modOpenGL32, "glProgramUniform1iv"); }
		if(!obj->methodp_glProgramUniform1iv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1iv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1ivEXT) { obj->methodp_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)wglGetProcAddress("glProgramUniform1ivEXT"); }
		if(!obj->methodp_glProgramUniform1ivEXT) { obj->methodp_glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform1ivEXT"); }
		if(!obj->methodp_glProgramUniform1ivEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1ui) { obj->methodp_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)wglGetProcAddress("glProgramUniform1ui"); }
		if(!obj->methodp_glProgramUniform1ui) { obj->methodp_glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)GetProcAddress(modOpenGL32, "glProgramUniform1ui"); }
		if(!obj->methodp_glProgramUniform1ui) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1ui"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1ui64NV) { obj->methodp_glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC)wglGetProcAddress("glProgramUniform1ui64NV"); }
		if(!obj->methodp_glProgramUniform1ui64NV) { obj->methodp_glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniform1ui64NV"); }
		if(!obj->methodp_glProgramUniform1ui64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1ui64vNV) { obj->methodp_glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC)wglGetProcAddress("glProgramUniform1ui64vNV"); }
		if(!obj->methodp_glProgramUniform1ui64vNV) { obj->methodp_glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniform1ui64vNV"); }
		if(!obj->methodp_glProgramUniform1ui64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1uiEXT) { obj->methodp_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)wglGetProcAddress("glProgramUniform1uiEXT"); }
		if(!obj->methodp_glProgramUniform1uiEXT) { obj->methodp_glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform1uiEXT"); }
		if(!obj->methodp_glProgramUniform1uiEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1uiv) { obj->methodp_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)wglGetProcAddress("glProgramUniform1uiv"); }
		if(!obj->methodp_glProgramUniform1uiv) { obj->methodp_glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)GetProcAddress(modOpenGL32, "glProgramUniform1uiv"); }
		if(!obj->methodp_glProgramUniform1uiv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1uiv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform1uivEXT) { obj->methodp_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)wglGetProcAddress("glProgramUniform1uivEXT"); }
		if(!obj->methodp_glProgramUniform1uivEXT) { obj->methodp_glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform1uivEXT"); }
		if(!obj->methodp_glProgramUniform1uivEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform1uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2d) { obj->methodp_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)wglGetProcAddress("glProgramUniform2d"); }
		if(!obj->methodp_glProgramUniform2d) { obj->methodp_glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)GetProcAddress(modOpenGL32, "glProgramUniform2d"); }
		if(!obj->methodp_glProgramUniform2d) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2d"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2dEXT) { obj->methodp_glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC)wglGetProcAddress("glProgramUniform2dEXT"); }
		if(!obj->methodp_glProgramUniform2dEXT) { obj->methodp_glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform2dEXT"); }
		if(!obj->methodp_glProgramUniform2dEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2dEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2dv) { obj->methodp_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)wglGetProcAddress("glProgramUniform2dv"); }
		if(!obj->methodp_glProgramUniform2dv) { obj->methodp_glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)GetProcAddress(modOpenGL32, "glProgramUniform2dv"); }
		if(!obj->methodp_glProgramUniform2dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2dvEXT) { obj->methodp_glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC)wglGetProcAddress("glProgramUniform2dvEXT"); }
		if(!obj->methodp_glProgramUniform2dvEXT) { obj->methodp_glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform2dvEXT"); }
		if(!obj->methodp_glProgramUniform2dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2f) { obj->methodp_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)wglGetProcAddress("glProgramUniform2f"); }
		if(!obj->methodp_glProgramUniform2f) { obj->methodp_glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)GetProcAddress(modOpenGL32, "glProgramUniform2f"); }
		if(!obj->methodp_glProgramUniform2f) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2f"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2fEXT) { obj->methodp_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)wglGetProcAddress("glProgramUniform2fEXT"); }
		if(!obj->methodp_glProgramUniform2fEXT) { obj->methodp_glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform2fEXT"); }
		if(!obj->methodp_glProgramUniform2fEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2fEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2fv) { obj->methodp_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)wglGetProcAddress("glProgramUniform2fv"); }
		if(!obj->methodp_glProgramUniform2fv) { obj->methodp_glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)GetProcAddress(modOpenGL32, "glProgramUniform2fv"); }
		if(!obj->methodp_glProgramUniform2fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2fvEXT) { obj->methodp_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)wglGetProcAddress("glProgramUniform2fvEXT"); }
		if(!obj->methodp_glProgramUniform2fvEXT) { obj->methodp_glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform2fvEXT"); }
		if(!obj->methodp_glProgramUniform2fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2i) { obj->methodp_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)wglGetProcAddress("glProgramUniform2i"); }
		if(!obj->methodp_glProgramUniform2i) { obj->methodp_glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)GetProcAddress(modOpenGL32, "glProgramUniform2i"); }
		if(!obj->methodp_glProgramUniform2i) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2i"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2i64NV) { obj->methodp_glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC)wglGetProcAddress("glProgramUniform2i64NV"); }
		if(!obj->methodp_glProgramUniform2i64NV) { obj->methodp_glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniform2i64NV"); }
		if(!obj->methodp_glProgramUniform2i64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2i64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2i64vNV) { obj->methodp_glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC)wglGetProcAddress("glProgramUniform2i64vNV"); }
		if(!obj->methodp_glProgramUniform2i64vNV) { obj->methodp_glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniform2i64vNV"); }
		if(!obj->methodp_glProgramUniform2i64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2iEXT) { obj->methodp_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)wglGetProcAddress("glProgramUniform2iEXT"); }
		if(!obj->methodp_glProgramUniform2iEXT) { obj->methodp_glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform2iEXT"); }
		if(!obj->methodp_glProgramUniform2iEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2iEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2iv) { obj->methodp_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)wglGetProcAddress("glProgramUniform2iv"); }
		if(!obj->methodp_glProgramUniform2iv) { obj->methodp_glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)GetProcAddress(modOpenGL32, "glProgramUniform2iv"); }
		if(!obj->methodp_glProgramUniform2iv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2iv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2ivEXT) { obj->methodp_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)wglGetProcAddress("glProgramUniform2ivEXT"); }
		if(!obj->methodp_glProgramUniform2ivEXT) { obj->methodp_glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform2ivEXT"); }
		if(!obj->methodp_glProgramUniform2ivEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2ui) { obj->methodp_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)wglGetProcAddress("glProgramUniform2ui"); }
		if(!obj->methodp_glProgramUniform2ui) { obj->methodp_glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)GetProcAddress(modOpenGL32, "glProgramUniform2ui"); }
		if(!obj->methodp_glProgramUniform2ui) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2ui"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2ui64NV) { obj->methodp_glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC)wglGetProcAddress("glProgramUniform2ui64NV"); }
		if(!obj->methodp_glProgramUniform2ui64NV) { obj->methodp_glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniform2ui64NV"); }
		if(!obj->methodp_glProgramUniform2ui64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2ui64vNV) { obj->methodp_glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC)wglGetProcAddress("glProgramUniform2ui64vNV"); }
		if(!obj->methodp_glProgramUniform2ui64vNV) { obj->methodp_glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniform2ui64vNV"); }
		if(!obj->methodp_glProgramUniform2ui64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2uiEXT) { obj->methodp_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)wglGetProcAddress("glProgramUniform2uiEXT"); }
		if(!obj->methodp_glProgramUniform2uiEXT) { obj->methodp_glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform2uiEXT"); }
		if(!obj->methodp_glProgramUniform2uiEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2uiv) { obj->methodp_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)wglGetProcAddress("glProgramUniform2uiv"); }
		if(!obj->methodp_glProgramUniform2uiv) { obj->methodp_glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)GetProcAddress(modOpenGL32, "glProgramUniform2uiv"); }
		if(!obj->methodp_glProgramUniform2uiv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2uiv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform2uivEXT) { obj->methodp_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)wglGetProcAddress("glProgramUniform2uivEXT"); }
		if(!obj->methodp_glProgramUniform2uivEXT) { obj->methodp_glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform2uivEXT"); }
		if(!obj->methodp_glProgramUniform2uivEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform2uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3d) { obj->methodp_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)wglGetProcAddress("glProgramUniform3d"); }
		if(!obj->methodp_glProgramUniform3d) { obj->methodp_glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)GetProcAddress(modOpenGL32, "glProgramUniform3d"); }
		if(!obj->methodp_glProgramUniform3d) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3d"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3dEXT) { obj->methodp_glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC)wglGetProcAddress("glProgramUniform3dEXT"); }
		if(!obj->methodp_glProgramUniform3dEXT) { obj->methodp_glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform3dEXT"); }
		if(!obj->methodp_glProgramUniform3dEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3dEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3dv) { obj->methodp_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)wglGetProcAddress("glProgramUniform3dv"); }
		if(!obj->methodp_glProgramUniform3dv) { obj->methodp_glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)GetProcAddress(modOpenGL32, "glProgramUniform3dv"); }
		if(!obj->methodp_glProgramUniform3dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3dvEXT) { obj->methodp_glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC)wglGetProcAddress("glProgramUniform3dvEXT"); }
		if(!obj->methodp_glProgramUniform3dvEXT) { obj->methodp_glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform3dvEXT"); }
		if(!obj->methodp_glProgramUniform3dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3f) { obj->methodp_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)wglGetProcAddress("glProgramUniform3f"); }
		if(!obj->methodp_glProgramUniform3f) { obj->methodp_glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)GetProcAddress(modOpenGL32, "glProgramUniform3f"); }
		if(!obj->methodp_glProgramUniform3f) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3f"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3fEXT) { obj->methodp_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)wglGetProcAddress("glProgramUniform3fEXT"); }
		if(!obj->methodp_glProgramUniform3fEXT) { obj->methodp_glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform3fEXT"); }
		if(!obj->methodp_glProgramUniform3fEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3fEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3fv) { obj->methodp_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)wglGetProcAddress("glProgramUniform3fv"); }
		if(!obj->methodp_glProgramUniform3fv) { obj->methodp_glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)GetProcAddress(modOpenGL32, "glProgramUniform3fv"); }
		if(!obj->methodp_glProgramUniform3fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3fvEXT) { obj->methodp_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)wglGetProcAddress("glProgramUniform3fvEXT"); }
		if(!obj->methodp_glProgramUniform3fvEXT) { obj->methodp_glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform3fvEXT"); }
		if(!obj->methodp_glProgramUniform3fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3i) { obj->methodp_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)wglGetProcAddress("glProgramUniform3i"); }
		if(!obj->methodp_glProgramUniform3i) { obj->methodp_glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)GetProcAddress(modOpenGL32, "glProgramUniform3i"); }
		if(!obj->methodp_glProgramUniform3i) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3i"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3i64NV) { obj->methodp_glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC)wglGetProcAddress("glProgramUniform3i64NV"); }
		if(!obj->methodp_glProgramUniform3i64NV) { obj->methodp_glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniform3i64NV"); }
		if(!obj->methodp_glProgramUniform3i64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3i64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3i64vNV) { obj->methodp_glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC)wglGetProcAddress("glProgramUniform3i64vNV"); }
		if(!obj->methodp_glProgramUniform3i64vNV) { obj->methodp_glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniform3i64vNV"); }
		if(!obj->methodp_glProgramUniform3i64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3iEXT) { obj->methodp_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)wglGetProcAddress("glProgramUniform3iEXT"); }
		if(!obj->methodp_glProgramUniform3iEXT) { obj->methodp_glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform3iEXT"); }
		if(!obj->methodp_glProgramUniform3iEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3iEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3iv) { obj->methodp_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)wglGetProcAddress("glProgramUniform3iv"); }
		if(!obj->methodp_glProgramUniform3iv) { obj->methodp_glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)GetProcAddress(modOpenGL32, "glProgramUniform3iv"); }
		if(!obj->methodp_glProgramUniform3iv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3iv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3ivEXT) { obj->methodp_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)wglGetProcAddress("glProgramUniform3ivEXT"); }
		if(!obj->methodp_glProgramUniform3ivEXT) { obj->methodp_glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform3ivEXT"); }
		if(!obj->methodp_glProgramUniform3ivEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3ui) { obj->methodp_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)wglGetProcAddress("glProgramUniform3ui"); }
		if(!obj->methodp_glProgramUniform3ui) { obj->methodp_glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)GetProcAddress(modOpenGL32, "glProgramUniform3ui"); }
		if(!obj->methodp_glProgramUniform3ui) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3ui"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3ui64NV) { obj->methodp_glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC)wglGetProcAddress("glProgramUniform3ui64NV"); }
		if(!obj->methodp_glProgramUniform3ui64NV) { obj->methodp_glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniform3ui64NV"); }
		if(!obj->methodp_glProgramUniform3ui64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3ui64vNV) { obj->methodp_glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC)wglGetProcAddress("glProgramUniform3ui64vNV"); }
		if(!obj->methodp_glProgramUniform3ui64vNV) { obj->methodp_glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniform3ui64vNV"); }
		if(!obj->methodp_glProgramUniform3ui64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3uiEXT) { obj->methodp_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)wglGetProcAddress("glProgramUniform3uiEXT"); }
		if(!obj->methodp_glProgramUniform3uiEXT) { obj->methodp_glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform3uiEXT"); }
		if(!obj->methodp_glProgramUniform3uiEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3uiv) { obj->methodp_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)wglGetProcAddress("glProgramUniform3uiv"); }
		if(!obj->methodp_glProgramUniform3uiv) { obj->methodp_glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)GetProcAddress(modOpenGL32, "glProgramUniform3uiv"); }
		if(!obj->methodp_glProgramUniform3uiv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3uiv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform3uivEXT) { obj->methodp_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)wglGetProcAddress("glProgramUniform3uivEXT"); }
		if(!obj->methodp_glProgramUniform3uivEXT) { obj->methodp_glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform3uivEXT"); }
		if(!obj->methodp_glProgramUniform3uivEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform3uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4d) { obj->methodp_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)wglGetProcAddress("glProgramUniform4d"); }
		if(!obj->methodp_glProgramUniform4d) { obj->methodp_glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)GetProcAddress(modOpenGL32, "glProgramUniform4d"); }
		if(!obj->methodp_glProgramUniform4d) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4d"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4dEXT) { obj->methodp_glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC)wglGetProcAddress("glProgramUniform4dEXT"); }
		if(!obj->methodp_glProgramUniform4dEXT) { obj->methodp_glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform4dEXT"); }
		if(!obj->methodp_glProgramUniform4dEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4dEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4dv) { obj->methodp_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)wglGetProcAddress("glProgramUniform4dv"); }
		if(!obj->methodp_glProgramUniform4dv) { obj->methodp_glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)GetProcAddress(modOpenGL32, "glProgramUniform4dv"); }
		if(!obj->methodp_glProgramUniform4dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4dvEXT) { obj->methodp_glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC)wglGetProcAddress("glProgramUniform4dvEXT"); }
		if(!obj->methodp_glProgramUniform4dvEXT) { obj->methodp_glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform4dvEXT"); }
		if(!obj->methodp_glProgramUniform4dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4f) { obj->methodp_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)wglGetProcAddress("glProgramUniform4f"); }
		if(!obj->methodp_glProgramUniform4f) { obj->methodp_glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)GetProcAddress(modOpenGL32, "glProgramUniform4f"); }
		if(!obj->methodp_glProgramUniform4f) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4f"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4fEXT) { obj->methodp_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)wglGetProcAddress("glProgramUniform4fEXT"); }
		if(!obj->methodp_glProgramUniform4fEXT) { obj->methodp_glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform4fEXT"); }
		if(!obj->methodp_glProgramUniform4fEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4fEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4fv) { obj->methodp_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)wglGetProcAddress("glProgramUniform4fv"); }
		if(!obj->methodp_glProgramUniform4fv) { obj->methodp_glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)GetProcAddress(modOpenGL32, "glProgramUniform4fv"); }
		if(!obj->methodp_glProgramUniform4fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4fvEXT) { obj->methodp_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)wglGetProcAddress("glProgramUniform4fvEXT"); }
		if(!obj->methodp_glProgramUniform4fvEXT) { obj->methodp_glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform4fvEXT"); }
		if(!obj->methodp_glProgramUniform4fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4i) { obj->methodp_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)wglGetProcAddress("glProgramUniform4i"); }
		if(!obj->methodp_glProgramUniform4i) { obj->methodp_glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)GetProcAddress(modOpenGL32, "glProgramUniform4i"); }
		if(!obj->methodp_glProgramUniform4i) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4i"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4i64NV) { obj->methodp_glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC)wglGetProcAddress("glProgramUniform4i64NV"); }
		if(!obj->methodp_glProgramUniform4i64NV) { obj->methodp_glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniform4i64NV"); }
		if(!obj->methodp_glProgramUniform4i64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4i64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4i64vNV) { obj->methodp_glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC)wglGetProcAddress("glProgramUniform4i64vNV"); }
		if(!obj->methodp_glProgramUniform4i64vNV) { obj->methodp_glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniform4i64vNV"); }
		if(!obj->methodp_glProgramUniform4i64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4iEXT) { obj->methodp_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)wglGetProcAddress("glProgramUniform4iEXT"); }
		if(!obj->methodp_glProgramUniform4iEXT) { obj->methodp_glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform4iEXT"); }
		if(!obj->methodp_glProgramUniform4iEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4iEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4iv) { obj->methodp_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)wglGetProcAddress("glProgramUniform4iv"); }
		if(!obj->methodp_glProgramUniform4iv) { obj->methodp_glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)GetProcAddress(modOpenGL32, "glProgramUniform4iv"); }
		if(!obj->methodp_glProgramUniform4iv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4iv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4ivEXT) { obj->methodp_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)wglGetProcAddress("glProgramUniform4ivEXT"); }
		if(!obj->methodp_glProgramUniform4ivEXT) { obj->methodp_glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform4ivEXT"); }
		if(!obj->methodp_glProgramUniform4ivEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4ui) { obj->methodp_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)wglGetProcAddress("glProgramUniform4ui"); }
		if(!obj->methodp_glProgramUniform4ui) { obj->methodp_glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)GetProcAddress(modOpenGL32, "glProgramUniform4ui"); }
		if(!obj->methodp_glProgramUniform4ui) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4ui"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4ui64NV) { obj->methodp_glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC)wglGetProcAddress("glProgramUniform4ui64NV"); }
		if(!obj->methodp_glProgramUniform4ui64NV) { obj->methodp_glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniform4ui64NV"); }
		if(!obj->methodp_glProgramUniform4ui64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4ui64vNV) { obj->methodp_glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC)wglGetProcAddress("glProgramUniform4ui64vNV"); }
		if(!obj->methodp_glProgramUniform4ui64vNV) { obj->methodp_glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniform4ui64vNV"); }
		if(!obj->methodp_glProgramUniform4ui64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4uiEXT) { obj->methodp_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)wglGetProcAddress("glProgramUniform4uiEXT"); }
		if(!obj->methodp_glProgramUniform4uiEXT) { obj->methodp_glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform4uiEXT"); }
		if(!obj->methodp_glProgramUniform4uiEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4uiv) { obj->methodp_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)wglGetProcAddress("glProgramUniform4uiv"); }
		if(!obj->methodp_glProgramUniform4uiv) { obj->methodp_glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)GetProcAddress(modOpenGL32, "glProgramUniform4uiv"); }
		if(!obj->methodp_glProgramUniform4uiv) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4uiv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniform4uivEXT) { obj->methodp_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)wglGetProcAddress("glProgramUniform4uivEXT"); }
		if(!obj->methodp_glProgramUniform4uivEXT) { obj->methodp_glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniform4uivEXT"); }
		if(!obj->methodp_glProgramUniform4uivEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniform4uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformHandleui64ARB) { obj->methodp_glProgramUniformHandleui64ARB = (PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)wglGetProcAddress("glProgramUniformHandleui64ARB"); }
		if(!obj->methodp_glProgramUniformHandleui64ARB) { obj->methodp_glProgramUniformHandleui64ARB = (PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC)GetProcAddress(modOpenGL32, "glProgramUniformHandleui64ARB"); }
		if(!obj->methodp_glProgramUniformHandleui64ARB) { args.This()->Set(v8::String::NewSymbol("glProgramUniformHandleui64ARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformHandleui64NV) { obj->methodp_glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)wglGetProcAddress("glProgramUniformHandleui64NV"); }
		if(!obj->methodp_glProgramUniformHandleui64NV) { obj->methodp_glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniformHandleui64NV"); }
		if(!obj->methodp_glProgramUniformHandleui64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniformHandleui64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformHandleui64vARB) { obj->methodp_glProgramUniformHandleui64vARB = (PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)wglGetProcAddress("glProgramUniformHandleui64vARB"); }
		if(!obj->methodp_glProgramUniformHandleui64vARB) { obj->methodp_glProgramUniformHandleui64vARB = (PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC)GetProcAddress(modOpenGL32, "glProgramUniformHandleui64vARB"); }
		if(!obj->methodp_glProgramUniformHandleui64vARB) { args.This()->Set(v8::String::NewSymbol("glProgramUniformHandleui64vARB"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformHandleui64vNV) { obj->methodp_glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)wglGetProcAddress("glProgramUniformHandleui64vNV"); }
		if(!obj->methodp_glProgramUniformHandleui64vNV) { obj->methodp_glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniformHandleui64vNV"); }
		if(!obj->methodp_glProgramUniformHandleui64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniformHandleui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2dv) { obj->methodp_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)wglGetProcAddress("glProgramUniformMatrix2dv"); }
		if(!obj->methodp_glProgramUniformMatrix2dv) { obj->methodp_glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2dv"); }
		if(!obj->methodp_glProgramUniformMatrix2dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2dvEXT) { obj->methodp_glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix2dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2dvEXT) { obj->methodp_glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2fv) { obj->methodp_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)wglGetProcAddress("glProgramUniformMatrix2fv"); }
		if(!obj->methodp_glProgramUniformMatrix2fv) { obj->methodp_glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2fv"); }
		if(!obj->methodp_glProgramUniformMatrix2fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2fvEXT) { obj->methodp_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix2fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2fvEXT) { obj->methodp_glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2x3dv) { obj->methodp_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)wglGetProcAddress("glProgramUniformMatrix2x3dv"); }
		if(!obj->methodp_glProgramUniformMatrix2x3dv) { obj->methodp_glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2x3dv"); }
		if(!obj->methodp_glProgramUniformMatrix2x3dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2x3dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2x3dvEXT) { obj->methodp_glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix2x3dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2x3dvEXT) { obj->methodp_glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2x3dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2x3dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2x3dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2x3fv) { obj->methodp_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)wglGetProcAddress("glProgramUniformMatrix2x3fv"); }
		if(!obj->methodp_glProgramUniformMatrix2x3fv) { obj->methodp_glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2x3fv"); }
		if(!obj->methodp_glProgramUniformMatrix2x3fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2x3fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2x3fvEXT) { obj->methodp_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix2x3fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2x3fvEXT) { obj->methodp_glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2x3fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2x3fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2x3fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2x4dv) { obj->methodp_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)wglGetProcAddress("glProgramUniformMatrix2x4dv"); }
		if(!obj->methodp_glProgramUniformMatrix2x4dv) { obj->methodp_glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2x4dv"); }
		if(!obj->methodp_glProgramUniformMatrix2x4dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2x4dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2x4dvEXT) { obj->methodp_glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix2x4dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2x4dvEXT) { obj->methodp_glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2x4dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2x4dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2x4dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2x4fv) { obj->methodp_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)wglGetProcAddress("glProgramUniformMatrix2x4fv"); }
		if(!obj->methodp_glProgramUniformMatrix2x4fv) { obj->methodp_glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2x4fv"); }
		if(!obj->methodp_glProgramUniformMatrix2x4fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2x4fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix2x4fvEXT) { obj->methodp_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix2x4fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2x4fvEXT) { obj->methodp_glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix2x4fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix2x4fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix2x4fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3dv) { obj->methodp_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)wglGetProcAddress("glProgramUniformMatrix3dv"); }
		if(!obj->methodp_glProgramUniformMatrix3dv) { obj->methodp_glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3dv"); }
		if(!obj->methodp_glProgramUniformMatrix3dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3dvEXT) { obj->methodp_glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix3dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3dvEXT) { obj->methodp_glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3fv) { obj->methodp_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)wglGetProcAddress("glProgramUniformMatrix3fv"); }
		if(!obj->methodp_glProgramUniformMatrix3fv) { obj->methodp_glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3fv"); }
		if(!obj->methodp_glProgramUniformMatrix3fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3fvEXT) { obj->methodp_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix3fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3fvEXT) { obj->methodp_glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3x2dv) { obj->methodp_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)wglGetProcAddress("glProgramUniformMatrix3x2dv"); }
		if(!obj->methodp_glProgramUniformMatrix3x2dv) { obj->methodp_glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3x2dv"); }
		if(!obj->methodp_glProgramUniformMatrix3x2dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3x2dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3x2dvEXT) { obj->methodp_glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix3x2dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3x2dvEXT) { obj->methodp_glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3x2dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3x2dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3x2dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3x2fv) { obj->methodp_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)wglGetProcAddress("glProgramUniformMatrix3x2fv"); }
		if(!obj->methodp_glProgramUniformMatrix3x2fv) { obj->methodp_glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3x2fv"); }
		if(!obj->methodp_glProgramUniformMatrix3x2fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3x2fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3x2fvEXT) { obj->methodp_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix3x2fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3x2fvEXT) { obj->methodp_glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3x2fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3x2fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3x2fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3x4dv) { obj->methodp_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)wglGetProcAddress("glProgramUniformMatrix3x4dv"); }
		if(!obj->methodp_glProgramUniformMatrix3x4dv) { obj->methodp_glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3x4dv"); }
		if(!obj->methodp_glProgramUniformMatrix3x4dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3x4dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3x4dvEXT) { obj->methodp_glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix3x4dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3x4dvEXT) { obj->methodp_glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3x4dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3x4dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3x4dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3x4fv) { obj->methodp_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)wglGetProcAddress("glProgramUniformMatrix3x4fv"); }
		if(!obj->methodp_glProgramUniformMatrix3x4fv) { obj->methodp_glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3x4fv"); }
		if(!obj->methodp_glProgramUniformMatrix3x4fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3x4fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix3x4fvEXT) { obj->methodp_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix3x4fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3x4fvEXT) { obj->methodp_glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix3x4fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix3x4fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix3x4fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4dv) { obj->methodp_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)wglGetProcAddress("glProgramUniformMatrix4dv"); }
		if(!obj->methodp_glProgramUniformMatrix4dv) { obj->methodp_glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4dv"); }
		if(!obj->methodp_glProgramUniformMatrix4dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4dvEXT) { obj->methodp_glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix4dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4dvEXT) { obj->methodp_glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4fv) { obj->methodp_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)wglGetProcAddress("glProgramUniformMatrix4fv"); }
		if(!obj->methodp_glProgramUniformMatrix4fv) { obj->methodp_glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4fv"); }
		if(!obj->methodp_glProgramUniformMatrix4fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4fvEXT) { obj->methodp_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix4fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4fvEXT) { obj->methodp_glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4x2dv) { obj->methodp_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)wglGetProcAddress("glProgramUniformMatrix4x2dv"); }
		if(!obj->methodp_glProgramUniformMatrix4x2dv) { obj->methodp_glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4x2dv"); }
		if(!obj->methodp_glProgramUniformMatrix4x2dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4x2dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4x2dvEXT) { obj->methodp_glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix4x2dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4x2dvEXT) { obj->methodp_glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4x2dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4x2dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4x2dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4x2fv) { obj->methodp_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)wglGetProcAddress("glProgramUniformMatrix4x2fv"); }
		if(!obj->methodp_glProgramUniformMatrix4x2fv) { obj->methodp_glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4x2fv"); }
		if(!obj->methodp_glProgramUniformMatrix4x2fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4x2fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4x2fvEXT) { obj->methodp_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix4x2fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4x2fvEXT) { obj->methodp_glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4x2fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4x2fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4x2fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4x3dv) { obj->methodp_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)wglGetProcAddress("glProgramUniformMatrix4x3dv"); }
		if(!obj->methodp_glProgramUniformMatrix4x3dv) { obj->methodp_glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4x3dv"); }
		if(!obj->methodp_glProgramUniformMatrix4x3dv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4x3dv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4x3dvEXT) { obj->methodp_glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)wglGetProcAddress("glProgramUniformMatrix4x3dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4x3dvEXT) { obj->methodp_glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4x3dvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4x3dvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4x3dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4x3fv) { obj->methodp_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)wglGetProcAddress("glProgramUniformMatrix4x3fv"); }
		if(!obj->methodp_glProgramUniformMatrix4x3fv) { obj->methodp_glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4x3fv"); }
		if(!obj->methodp_glProgramUniformMatrix4x3fv) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4x3fv"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformMatrix4x3fvEXT) { obj->methodp_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)wglGetProcAddress("glProgramUniformMatrix4x3fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4x3fvEXT) { obj->methodp_glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)GetProcAddress(modOpenGL32, "glProgramUniformMatrix4x3fvEXT"); }
		if(!obj->methodp_glProgramUniformMatrix4x3fvEXT) { args.This()->Set(v8::String::NewSymbol("glProgramUniformMatrix4x3fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformui64NV) { obj->methodp_glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC)wglGetProcAddress("glProgramUniformui64NV"); }
		if(!obj->methodp_glProgramUniformui64NV) { obj->methodp_glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC)GetProcAddress(modOpenGL32, "glProgramUniformui64NV"); }
		if(!obj->methodp_glProgramUniformui64NV) { args.This()->Set(v8::String::NewSymbol("glProgramUniformui64NV"), v8::Undefined()); }
		if(!obj->methodp_glProgramUniformui64vNV) { obj->methodp_glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC)wglGetProcAddress("glProgramUniformui64vNV"); }
		if(!obj->methodp_glProgramUniformui64vNV) { obj->methodp_glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC)GetProcAddress(modOpenGL32, "glProgramUniformui64vNV"); }
		if(!obj->methodp_glProgramUniformui64vNV) { args.This()->Set(v8::String::NewSymbol("glProgramUniformui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glProgramVertexLimitNV) { obj->methodp_glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC)wglGetProcAddress("glProgramVertexLimitNV"); }
		if(!obj->methodp_glProgramVertexLimitNV) { obj->methodp_glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC)GetProcAddress(modOpenGL32, "glProgramVertexLimitNV"); }
		if(!obj->methodp_glProgramVertexLimitNV) { args.This()->Set(v8::String::NewSymbol("glProgramVertexLimitNV"), v8::Undefined()); }
		if(!obj->methodp_glProvokingVertex) { obj->methodp_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)wglGetProcAddress("glProvokingVertex"); }
		if(!obj->methodp_glProvokingVertex) { obj->methodp_glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)GetProcAddress(modOpenGL32, "glProvokingVertex"); }
		if(!obj->methodp_glProvokingVertex) { args.This()->Set(v8::String::NewSymbol("glProvokingVertex"), v8::Undefined()); }
		if(!obj->methodp_glProvokingVertexEXT) { obj->methodp_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)wglGetProcAddress("glProvokingVertexEXT"); }
		if(!obj->methodp_glProvokingVertexEXT) { obj->methodp_glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)GetProcAddress(modOpenGL32, "glProvokingVertexEXT"); }
		if(!obj->methodp_glProvokingVertexEXT) { args.This()->Set(v8::String::NewSymbol("glProvokingVertexEXT"), v8::Undefined()); }
		if(!obj->methodp_glPushAttrib) { obj->methodp_glPushAttrib = (PFNGLPUSHATTRIBPROC)wglGetProcAddress("glPushAttrib"); }
		if(!obj->methodp_glPushAttrib) { obj->methodp_glPushAttrib = (PFNGLPUSHATTRIBPROC)GetProcAddress(modOpenGL32, "glPushAttrib"); }
		if(!obj->methodp_glPushAttrib) { args.This()->Set(v8::String::NewSymbol("glPushAttrib"), v8::Undefined()); }
		if(!obj->methodp_glPushClientAttrib) { obj->methodp_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC)wglGetProcAddress("glPushClientAttrib"); }
		if(!obj->methodp_glPushClientAttrib) { obj->methodp_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC)GetProcAddress(modOpenGL32, "glPushClientAttrib"); }
		if(!obj->methodp_glPushClientAttrib) { args.This()->Set(v8::String::NewSymbol("glPushClientAttrib"), v8::Undefined()); }
		if(!obj->methodp_glPushClientAttribDefaultEXT) { obj->methodp_glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)wglGetProcAddress("glPushClientAttribDefaultEXT"); }
		if(!obj->methodp_glPushClientAttribDefaultEXT) { obj->methodp_glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)GetProcAddress(modOpenGL32, "glPushClientAttribDefaultEXT"); }
		if(!obj->methodp_glPushClientAttribDefaultEXT) { args.This()->Set(v8::String::NewSymbol("glPushClientAttribDefaultEXT"), v8::Undefined()); }
		if(!obj->methodp_glPushDebugGroup) { obj->methodp_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)wglGetProcAddress("glPushDebugGroup"); }
		if(!obj->methodp_glPushDebugGroup) { obj->methodp_glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)GetProcAddress(modOpenGL32, "glPushDebugGroup"); }
		if(!obj->methodp_glPushDebugGroup) { args.This()->Set(v8::String::NewSymbol("glPushDebugGroup"), v8::Undefined()); }
		if(!obj->methodp_glPushDebugGroupKHR) { obj->methodp_glPushDebugGroupKHR = (PFNGLPUSHDEBUGGROUPKHRPROC)wglGetProcAddress("glPushDebugGroupKHR"); }
		if(!obj->methodp_glPushDebugGroupKHR) { obj->methodp_glPushDebugGroupKHR = (PFNGLPUSHDEBUGGROUPKHRPROC)GetProcAddress(modOpenGL32, "glPushDebugGroupKHR"); }
		if(!obj->methodp_glPushDebugGroupKHR) { args.This()->Set(v8::String::NewSymbol("glPushDebugGroupKHR"), v8::Undefined()); }
		if(!obj->methodp_glPushGroupMarkerEXT) { obj->methodp_glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC)wglGetProcAddress("glPushGroupMarkerEXT"); }
		if(!obj->methodp_glPushGroupMarkerEXT) { obj->methodp_glPushGroupMarkerEXT = (PFNGLPUSHGROUPMARKEREXTPROC)GetProcAddress(modOpenGL32, "glPushGroupMarkerEXT"); }
		if(!obj->methodp_glPushGroupMarkerEXT) { args.This()->Set(v8::String::NewSymbol("glPushGroupMarkerEXT"), v8::Undefined()); }
		if(!obj->methodp_glPushMatrix) { obj->methodp_glPushMatrix = (PFNGLPUSHMATRIXPROC)wglGetProcAddress("glPushMatrix"); }
		if(!obj->methodp_glPushMatrix) { obj->methodp_glPushMatrix = (PFNGLPUSHMATRIXPROC)GetProcAddress(modOpenGL32, "glPushMatrix"); }
		if(!obj->methodp_glPushMatrix) { args.This()->Set(v8::String::NewSymbol("glPushMatrix"), v8::Undefined()); }
		if(!obj->methodp_glPushName) { obj->methodp_glPushName = (PFNGLPUSHNAMEPROC)wglGetProcAddress("glPushName"); }
		if(!obj->methodp_glPushName) { obj->methodp_glPushName = (PFNGLPUSHNAMEPROC)GetProcAddress(modOpenGL32, "glPushName"); }
		if(!obj->methodp_glPushName) { args.This()->Set(v8::String::NewSymbol("glPushName"), v8::Undefined()); }
		if(!obj->methodp_glQueryCounter) { obj->methodp_glQueryCounter = (PFNGLQUERYCOUNTERPROC)wglGetProcAddress("glQueryCounter"); }
		if(!obj->methodp_glQueryCounter) { obj->methodp_glQueryCounter = (PFNGLQUERYCOUNTERPROC)GetProcAddress(modOpenGL32, "glQueryCounter"); }
		if(!obj->methodp_glQueryCounter) { args.This()->Set(v8::String::NewSymbol("glQueryCounter"), v8::Undefined()); }
		if(!obj->methodp_glQueryCounterEXT) { obj->methodp_glQueryCounterEXT = (PFNGLQUERYCOUNTEREXTPROC)wglGetProcAddress("glQueryCounterEXT"); }
		if(!obj->methodp_glQueryCounterEXT) { obj->methodp_glQueryCounterEXT = (PFNGLQUERYCOUNTEREXTPROC)GetProcAddress(modOpenGL32, "glQueryCounterEXT"); }
		if(!obj->methodp_glQueryCounterEXT) { args.This()->Set(v8::String::NewSymbol("glQueryCounterEXT"), v8::Undefined()); }
		if(!obj->methodp_glQueryMatrixxOES) { obj->methodp_glQueryMatrixxOES = (PFNGLQUERYMATRIXXOESPROC)wglGetProcAddress("glQueryMatrixxOES"); }
		if(!obj->methodp_glQueryMatrixxOES) { obj->methodp_glQueryMatrixxOES = (PFNGLQUERYMATRIXXOESPROC)GetProcAddress(modOpenGL32, "glQueryMatrixxOES"); }
		if(!obj->methodp_glQueryMatrixxOES) { args.This()->Set(v8::String::NewSymbol("glQueryMatrixxOES"), v8::Undefined()); }
		if(!obj->methodp_glQueryObjectParameteruiAMD) { obj->methodp_glQueryObjectParameteruiAMD = (PFNGLQUERYOBJECTPARAMETERUIAMDPROC)wglGetProcAddress("glQueryObjectParameteruiAMD"); }
		if(!obj->methodp_glQueryObjectParameteruiAMD) { obj->methodp_glQueryObjectParameteruiAMD = (PFNGLQUERYOBJECTPARAMETERUIAMDPROC)GetProcAddress(modOpenGL32, "glQueryObjectParameteruiAMD"); }
		if(!obj->methodp_glQueryObjectParameteruiAMD) { args.This()->Set(v8::String::NewSymbol("glQueryObjectParameteruiAMD"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2d) { obj->methodp_glRasterPos2d = (PFNGLRASTERPOS2DPROC)wglGetProcAddress("glRasterPos2d"); }
		if(!obj->methodp_glRasterPos2d) { obj->methodp_glRasterPos2d = (PFNGLRASTERPOS2DPROC)GetProcAddress(modOpenGL32, "glRasterPos2d"); }
		if(!obj->methodp_glRasterPos2d) { args.This()->Set(v8::String::NewSymbol("glRasterPos2d"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2dv) { obj->methodp_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC)wglGetProcAddress("glRasterPos2dv"); }
		if(!obj->methodp_glRasterPos2dv) { obj->methodp_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC)GetProcAddress(modOpenGL32, "glRasterPos2dv"); }
		if(!obj->methodp_glRasterPos2dv) { args.This()->Set(v8::String::NewSymbol("glRasterPos2dv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2f) { obj->methodp_glRasterPos2f = (PFNGLRASTERPOS2FPROC)wglGetProcAddress("glRasterPos2f"); }
		if(!obj->methodp_glRasterPos2f) { obj->methodp_glRasterPos2f = (PFNGLRASTERPOS2FPROC)GetProcAddress(modOpenGL32, "glRasterPos2f"); }
		if(!obj->methodp_glRasterPos2f) { args.This()->Set(v8::String::NewSymbol("glRasterPos2f"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2fv) { obj->methodp_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC)wglGetProcAddress("glRasterPos2fv"); }
		if(!obj->methodp_glRasterPos2fv) { obj->methodp_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC)GetProcAddress(modOpenGL32, "glRasterPos2fv"); }
		if(!obj->methodp_glRasterPos2fv) { args.This()->Set(v8::String::NewSymbol("glRasterPos2fv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2i) { obj->methodp_glRasterPos2i = (PFNGLRASTERPOS2IPROC)wglGetProcAddress("glRasterPos2i"); }
		if(!obj->methodp_glRasterPos2i) { obj->methodp_glRasterPos2i = (PFNGLRASTERPOS2IPROC)GetProcAddress(modOpenGL32, "glRasterPos2i"); }
		if(!obj->methodp_glRasterPos2i) { args.This()->Set(v8::String::NewSymbol("glRasterPos2i"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2iv) { obj->methodp_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC)wglGetProcAddress("glRasterPos2iv"); }
		if(!obj->methodp_glRasterPos2iv) { obj->methodp_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC)GetProcAddress(modOpenGL32, "glRasterPos2iv"); }
		if(!obj->methodp_glRasterPos2iv) { args.This()->Set(v8::String::NewSymbol("glRasterPos2iv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2s) { obj->methodp_glRasterPos2s = (PFNGLRASTERPOS2SPROC)wglGetProcAddress("glRasterPos2s"); }
		if(!obj->methodp_glRasterPos2s) { obj->methodp_glRasterPos2s = (PFNGLRASTERPOS2SPROC)GetProcAddress(modOpenGL32, "glRasterPos2s"); }
		if(!obj->methodp_glRasterPos2s) { args.This()->Set(v8::String::NewSymbol("glRasterPos2s"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2sv) { obj->methodp_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC)wglGetProcAddress("glRasterPos2sv"); }
		if(!obj->methodp_glRasterPos2sv) { obj->methodp_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC)GetProcAddress(modOpenGL32, "glRasterPos2sv"); }
		if(!obj->methodp_glRasterPos2sv) { args.This()->Set(v8::String::NewSymbol("glRasterPos2sv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2xOES) { obj->methodp_glRasterPos2xOES = (PFNGLRASTERPOS2XOESPROC)wglGetProcAddress("glRasterPos2xOES"); }
		if(!obj->methodp_glRasterPos2xOES) { obj->methodp_glRasterPos2xOES = (PFNGLRASTERPOS2XOESPROC)GetProcAddress(modOpenGL32, "glRasterPos2xOES"); }
		if(!obj->methodp_glRasterPos2xOES) { args.This()->Set(v8::String::NewSymbol("glRasterPos2xOES"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos2xvOES) { obj->methodp_glRasterPos2xvOES = (PFNGLRASTERPOS2XVOESPROC)wglGetProcAddress("glRasterPos2xvOES"); }
		if(!obj->methodp_glRasterPos2xvOES) { obj->methodp_glRasterPos2xvOES = (PFNGLRASTERPOS2XVOESPROC)GetProcAddress(modOpenGL32, "glRasterPos2xvOES"); }
		if(!obj->methodp_glRasterPos2xvOES) { args.This()->Set(v8::String::NewSymbol("glRasterPos2xvOES"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3d) { obj->methodp_glRasterPos3d = (PFNGLRASTERPOS3DPROC)wglGetProcAddress("glRasterPos3d"); }
		if(!obj->methodp_glRasterPos3d) { obj->methodp_glRasterPos3d = (PFNGLRASTERPOS3DPROC)GetProcAddress(modOpenGL32, "glRasterPos3d"); }
		if(!obj->methodp_glRasterPos3d) { args.This()->Set(v8::String::NewSymbol("glRasterPos3d"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3dv) { obj->methodp_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC)wglGetProcAddress("glRasterPos3dv"); }
		if(!obj->methodp_glRasterPos3dv) { obj->methodp_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC)GetProcAddress(modOpenGL32, "glRasterPos3dv"); }
		if(!obj->methodp_glRasterPos3dv) { args.This()->Set(v8::String::NewSymbol("glRasterPos3dv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3f) { obj->methodp_glRasterPos3f = (PFNGLRASTERPOS3FPROC)wglGetProcAddress("glRasterPos3f"); }
		if(!obj->methodp_glRasterPos3f) { obj->methodp_glRasterPos3f = (PFNGLRASTERPOS3FPROC)GetProcAddress(modOpenGL32, "glRasterPos3f"); }
		if(!obj->methodp_glRasterPos3f) { args.This()->Set(v8::String::NewSymbol("glRasterPos3f"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3fv) { obj->methodp_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC)wglGetProcAddress("glRasterPos3fv"); }
		if(!obj->methodp_glRasterPos3fv) { obj->methodp_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC)GetProcAddress(modOpenGL32, "glRasterPos3fv"); }
		if(!obj->methodp_glRasterPos3fv) { args.This()->Set(v8::String::NewSymbol("glRasterPos3fv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3i) { obj->methodp_glRasterPos3i = (PFNGLRASTERPOS3IPROC)wglGetProcAddress("glRasterPos3i"); }
		if(!obj->methodp_glRasterPos3i) { obj->methodp_glRasterPos3i = (PFNGLRASTERPOS3IPROC)GetProcAddress(modOpenGL32, "glRasterPos3i"); }
		if(!obj->methodp_glRasterPos3i) { args.This()->Set(v8::String::NewSymbol("glRasterPos3i"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3iv) { obj->methodp_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC)wglGetProcAddress("glRasterPos3iv"); }
		if(!obj->methodp_glRasterPos3iv) { obj->methodp_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC)GetProcAddress(modOpenGL32, "glRasterPos3iv"); }
		if(!obj->methodp_glRasterPos3iv) { args.This()->Set(v8::String::NewSymbol("glRasterPos3iv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3s) { obj->methodp_glRasterPos3s = (PFNGLRASTERPOS3SPROC)wglGetProcAddress("glRasterPos3s"); }
		if(!obj->methodp_glRasterPos3s) { obj->methodp_glRasterPos3s = (PFNGLRASTERPOS3SPROC)GetProcAddress(modOpenGL32, "glRasterPos3s"); }
		if(!obj->methodp_glRasterPos3s) { args.This()->Set(v8::String::NewSymbol("glRasterPos3s"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3sv) { obj->methodp_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC)wglGetProcAddress("glRasterPos3sv"); }
		if(!obj->methodp_glRasterPos3sv) { obj->methodp_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC)GetProcAddress(modOpenGL32, "glRasterPos3sv"); }
		if(!obj->methodp_glRasterPos3sv) { args.This()->Set(v8::String::NewSymbol("glRasterPos3sv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3xOES) { obj->methodp_glRasterPos3xOES = (PFNGLRASTERPOS3XOESPROC)wglGetProcAddress("glRasterPos3xOES"); }
		if(!obj->methodp_glRasterPos3xOES) { obj->methodp_glRasterPos3xOES = (PFNGLRASTERPOS3XOESPROC)GetProcAddress(modOpenGL32, "glRasterPos3xOES"); }
		if(!obj->methodp_glRasterPos3xOES) { args.This()->Set(v8::String::NewSymbol("glRasterPos3xOES"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos3xvOES) { obj->methodp_glRasterPos3xvOES = (PFNGLRASTERPOS3XVOESPROC)wglGetProcAddress("glRasterPos3xvOES"); }
		if(!obj->methodp_glRasterPos3xvOES) { obj->methodp_glRasterPos3xvOES = (PFNGLRASTERPOS3XVOESPROC)GetProcAddress(modOpenGL32, "glRasterPos3xvOES"); }
		if(!obj->methodp_glRasterPos3xvOES) { args.This()->Set(v8::String::NewSymbol("glRasterPos3xvOES"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4d) { obj->methodp_glRasterPos4d = (PFNGLRASTERPOS4DPROC)wglGetProcAddress("glRasterPos4d"); }
		if(!obj->methodp_glRasterPos4d) { obj->methodp_glRasterPos4d = (PFNGLRASTERPOS4DPROC)GetProcAddress(modOpenGL32, "glRasterPos4d"); }
		if(!obj->methodp_glRasterPos4d) { args.This()->Set(v8::String::NewSymbol("glRasterPos4d"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4dv) { obj->methodp_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC)wglGetProcAddress("glRasterPos4dv"); }
		if(!obj->methodp_glRasterPos4dv) { obj->methodp_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC)GetProcAddress(modOpenGL32, "glRasterPos4dv"); }
		if(!obj->methodp_glRasterPos4dv) { args.This()->Set(v8::String::NewSymbol("glRasterPos4dv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4f) { obj->methodp_glRasterPos4f = (PFNGLRASTERPOS4FPROC)wglGetProcAddress("glRasterPos4f"); }
		if(!obj->methodp_glRasterPos4f) { obj->methodp_glRasterPos4f = (PFNGLRASTERPOS4FPROC)GetProcAddress(modOpenGL32, "glRasterPos4f"); }
		if(!obj->methodp_glRasterPos4f) { args.This()->Set(v8::String::NewSymbol("glRasterPos4f"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4fv) { obj->methodp_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC)wglGetProcAddress("glRasterPos4fv"); }
		if(!obj->methodp_glRasterPos4fv) { obj->methodp_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC)GetProcAddress(modOpenGL32, "glRasterPos4fv"); }
		if(!obj->methodp_glRasterPos4fv) { args.This()->Set(v8::String::NewSymbol("glRasterPos4fv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4i) { obj->methodp_glRasterPos4i = (PFNGLRASTERPOS4IPROC)wglGetProcAddress("glRasterPos4i"); }
		if(!obj->methodp_glRasterPos4i) { obj->methodp_glRasterPos4i = (PFNGLRASTERPOS4IPROC)GetProcAddress(modOpenGL32, "glRasterPos4i"); }
		if(!obj->methodp_glRasterPos4i) { args.This()->Set(v8::String::NewSymbol("glRasterPos4i"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4iv) { obj->methodp_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC)wglGetProcAddress("glRasterPos4iv"); }
		if(!obj->methodp_glRasterPos4iv) { obj->methodp_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC)GetProcAddress(modOpenGL32, "glRasterPos4iv"); }
		if(!obj->methodp_glRasterPos4iv) { args.This()->Set(v8::String::NewSymbol("glRasterPos4iv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4s) { obj->methodp_glRasterPos4s = (PFNGLRASTERPOS4SPROC)wglGetProcAddress("glRasterPos4s"); }
		if(!obj->methodp_glRasterPos4s) { obj->methodp_glRasterPos4s = (PFNGLRASTERPOS4SPROC)GetProcAddress(modOpenGL32, "glRasterPos4s"); }
		if(!obj->methodp_glRasterPos4s) { args.This()->Set(v8::String::NewSymbol("glRasterPos4s"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4sv) { obj->methodp_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC)wglGetProcAddress("glRasterPos4sv"); }
		if(!obj->methodp_glRasterPos4sv) { obj->methodp_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC)GetProcAddress(modOpenGL32, "glRasterPos4sv"); }
		if(!obj->methodp_glRasterPos4sv) { args.This()->Set(v8::String::NewSymbol("glRasterPos4sv"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4xOES) { obj->methodp_glRasterPos4xOES = (PFNGLRASTERPOS4XOESPROC)wglGetProcAddress("glRasterPos4xOES"); }
		if(!obj->methodp_glRasterPos4xOES) { obj->methodp_glRasterPos4xOES = (PFNGLRASTERPOS4XOESPROC)GetProcAddress(modOpenGL32, "glRasterPos4xOES"); }
		if(!obj->methodp_glRasterPos4xOES) { args.This()->Set(v8::String::NewSymbol("glRasterPos4xOES"), v8::Undefined()); }
		if(!obj->methodp_glRasterPos4xvOES) { obj->methodp_glRasterPos4xvOES = (PFNGLRASTERPOS4XVOESPROC)wglGetProcAddress("glRasterPos4xvOES"); }
		if(!obj->methodp_glRasterPos4xvOES) { obj->methodp_glRasterPos4xvOES = (PFNGLRASTERPOS4XVOESPROC)GetProcAddress(modOpenGL32, "glRasterPos4xvOES"); }
		if(!obj->methodp_glRasterPos4xvOES) { args.This()->Set(v8::String::NewSymbol("glRasterPos4xvOES"), v8::Undefined()); }
		if(!obj->methodp_glReadBuffer) { obj->methodp_glReadBuffer = (PFNGLREADBUFFERPROC)wglGetProcAddress("glReadBuffer"); }
		if(!obj->methodp_glReadBuffer) { obj->methodp_glReadBuffer = (PFNGLREADBUFFERPROC)GetProcAddress(modOpenGL32, "glReadBuffer"); }
		if(!obj->methodp_glReadBuffer) { args.This()->Set(v8::String::NewSymbol("glReadBuffer"), v8::Undefined()); }
		if(!obj->methodp_glReadBufferIndexedEXT) { obj->methodp_glReadBufferIndexedEXT = (PFNGLREADBUFFERINDEXEDEXTPROC)wglGetProcAddress("glReadBufferIndexedEXT"); }
		if(!obj->methodp_glReadBufferIndexedEXT) { obj->methodp_glReadBufferIndexedEXT = (PFNGLREADBUFFERINDEXEDEXTPROC)GetProcAddress(modOpenGL32, "glReadBufferIndexedEXT"); }
		if(!obj->methodp_glReadBufferIndexedEXT) { args.This()->Set(v8::String::NewSymbol("glReadBufferIndexedEXT"), v8::Undefined()); }
		if(!obj->methodp_glReadBufferNV) { obj->methodp_glReadBufferNV = (PFNGLREADBUFFERNVPROC)wglGetProcAddress("glReadBufferNV"); }
		if(!obj->methodp_glReadBufferNV) { obj->methodp_glReadBufferNV = (PFNGLREADBUFFERNVPROC)GetProcAddress(modOpenGL32, "glReadBufferNV"); }
		if(!obj->methodp_glReadBufferNV) { args.This()->Set(v8::String::NewSymbol("glReadBufferNV"), v8::Undefined()); }
		if(!obj->methodp_glReadInstrumentsSGIX) { obj->methodp_glReadInstrumentsSGIX = (PFNGLREADINSTRUMENTSSGIXPROC)wglGetProcAddress("glReadInstrumentsSGIX"); }
		if(!obj->methodp_glReadInstrumentsSGIX) { obj->methodp_glReadInstrumentsSGIX = (PFNGLREADINSTRUMENTSSGIXPROC)GetProcAddress(modOpenGL32, "glReadInstrumentsSGIX"); }
		if(!obj->methodp_glReadInstrumentsSGIX) { args.This()->Set(v8::String::NewSymbol("glReadInstrumentsSGIX"), v8::Undefined()); }
		if(!obj->methodp_glReadPixels) { obj->methodp_glReadPixels = (PFNGLREADPIXELSPROC)wglGetProcAddress("glReadPixels"); }
		if(!obj->methodp_glReadPixels) { obj->methodp_glReadPixels = (PFNGLREADPIXELSPROC)GetProcAddress(modOpenGL32, "glReadPixels"); }
		if(!obj->methodp_glReadPixels) { args.This()->Set(v8::String::NewSymbol("glReadPixels"), v8::Undefined()); }
		if(!obj->methodp_glReadnPixelsARB) { obj->methodp_glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)wglGetProcAddress("glReadnPixelsARB"); }
		if(!obj->methodp_glReadnPixelsARB) { obj->methodp_glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)GetProcAddress(modOpenGL32, "glReadnPixelsARB"); }
		if(!obj->methodp_glReadnPixelsARB) { args.This()->Set(v8::String::NewSymbol("glReadnPixelsARB"), v8::Undefined()); }
		if(!obj->methodp_glReadnPixelsEXT) { obj->methodp_glReadnPixelsEXT = (PFNGLREADNPIXELSEXTPROC)wglGetProcAddress("glReadnPixelsEXT"); }
		if(!obj->methodp_glReadnPixelsEXT) { obj->methodp_glReadnPixelsEXT = (PFNGLREADNPIXELSEXTPROC)GetProcAddress(modOpenGL32, "glReadnPixelsEXT"); }
		if(!obj->methodp_glReadnPixelsEXT) { args.This()->Set(v8::String::NewSymbol("glReadnPixelsEXT"), v8::Undefined()); }
		if(!obj->methodp_glRectd) { obj->methodp_glRectd = (PFNGLRECTDPROC)wglGetProcAddress("glRectd"); }
		if(!obj->methodp_glRectd) { obj->methodp_glRectd = (PFNGLRECTDPROC)GetProcAddress(modOpenGL32, "glRectd"); }
		if(!obj->methodp_glRectd) { args.This()->Set(v8::String::NewSymbol("glRectd"), v8::Undefined()); }
		if(!obj->methodp_glRectdv) { obj->methodp_glRectdv = (PFNGLRECTDVPROC)wglGetProcAddress("glRectdv"); }
		if(!obj->methodp_glRectdv) { obj->methodp_glRectdv = (PFNGLRECTDVPROC)GetProcAddress(modOpenGL32, "glRectdv"); }
		if(!obj->methodp_glRectdv) { args.This()->Set(v8::String::NewSymbol("glRectdv"), v8::Undefined()); }
		if(!obj->methodp_glRectf) { obj->methodp_glRectf = (PFNGLRECTFPROC)wglGetProcAddress("glRectf"); }
		if(!obj->methodp_glRectf) { obj->methodp_glRectf = (PFNGLRECTFPROC)GetProcAddress(modOpenGL32, "glRectf"); }
		if(!obj->methodp_glRectf) { args.This()->Set(v8::String::NewSymbol("glRectf"), v8::Undefined()); }
		if(!obj->methodp_glRectfv) { obj->methodp_glRectfv = (PFNGLRECTFVPROC)wglGetProcAddress("glRectfv"); }
		if(!obj->methodp_glRectfv) { obj->methodp_glRectfv = (PFNGLRECTFVPROC)GetProcAddress(modOpenGL32, "glRectfv"); }
		if(!obj->methodp_glRectfv) { args.This()->Set(v8::String::NewSymbol("glRectfv"), v8::Undefined()); }
		if(!obj->methodp_glRecti) { obj->methodp_glRecti = (PFNGLRECTIPROC)wglGetProcAddress("glRecti"); }
		if(!obj->methodp_glRecti) { obj->methodp_glRecti = (PFNGLRECTIPROC)GetProcAddress(modOpenGL32, "glRecti"); }
		if(!obj->methodp_glRecti) { args.This()->Set(v8::String::NewSymbol("glRecti"), v8::Undefined()); }
		if(!obj->methodp_glRectiv) { obj->methodp_glRectiv = (PFNGLRECTIVPROC)wglGetProcAddress("glRectiv"); }
		if(!obj->methodp_glRectiv) { obj->methodp_glRectiv = (PFNGLRECTIVPROC)GetProcAddress(modOpenGL32, "glRectiv"); }
		if(!obj->methodp_glRectiv) { args.This()->Set(v8::String::NewSymbol("glRectiv"), v8::Undefined()); }
		if(!obj->methodp_glRects) { obj->methodp_glRects = (PFNGLRECTSPROC)wglGetProcAddress("glRects"); }
		if(!obj->methodp_glRects) { obj->methodp_glRects = (PFNGLRECTSPROC)GetProcAddress(modOpenGL32, "glRects"); }
		if(!obj->methodp_glRects) { args.This()->Set(v8::String::NewSymbol("glRects"), v8::Undefined()); }
		if(!obj->methodp_glRectsv) { obj->methodp_glRectsv = (PFNGLRECTSVPROC)wglGetProcAddress("glRectsv"); }
		if(!obj->methodp_glRectsv) { obj->methodp_glRectsv = (PFNGLRECTSVPROC)GetProcAddress(modOpenGL32, "glRectsv"); }
		if(!obj->methodp_glRectsv) { args.This()->Set(v8::String::NewSymbol("glRectsv"), v8::Undefined()); }
		if(!obj->methodp_glRectxOES) { obj->methodp_glRectxOES = (PFNGLRECTXOESPROC)wglGetProcAddress("glRectxOES"); }
		if(!obj->methodp_glRectxOES) { obj->methodp_glRectxOES = (PFNGLRECTXOESPROC)GetProcAddress(modOpenGL32, "glRectxOES"); }
		if(!obj->methodp_glRectxOES) { args.This()->Set(v8::String::NewSymbol("glRectxOES"), v8::Undefined()); }
		if(!obj->methodp_glRectxvOES) { obj->methodp_glRectxvOES = (PFNGLRECTXVOESPROC)wglGetProcAddress("glRectxvOES"); }
		if(!obj->methodp_glRectxvOES) { obj->methodp_glRectxvOES = (PFNGLRECTXVOESPROC)GetProcAddress(modOpenGL32, "glRectxvOES"); }
		if(!obj->methodp_glRectxvOES) { args.This()->Set(v8::String::NewSymbol("glRectxvOES"), v8::Undefined()); }
		if(!obj->methodp_glReferencePlaneSGIX) { obj->methodp_glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC)wglGetProcAddress("glReferencePlaneSGIX"); }
		if(!obj->methodp_glReferencePlaneSGIX) { obj->methodp_glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC)GetProcAddress(modOpenGL32, "glReferencePlaneSGIX"); }
		if(!obj->methodp_glReferencePlaneSGIX) { args.This()->Set(v8::String::NewSymbol("glReferencePlaneSGIX"), v8::Undefined()); }
		if(!obj->methodp_glReleaseShaderCompiler) { obj->methodp_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)wglGetProcAddress("glReleaseShaderCompiler"); }
		if(!obj->methodp_glReleaseShaderCompiler) { obj->methodp_glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)GetProcAddress(modOpenGL32, "glReleaseShaderCompiler"); }
		if(!obj->methodp_glReleaseShaderCompiler) { args.This()->Set(v8::String::NewSymbol("glReleaseShaderCompiler"), v8::Undefined()); }
		if(!obj->methodp_glRenderMode) { obj->methodp_glRenderMode = (PFNGLRENDERMODEPROC)wglGetProcAddress("glRenderMode"); }
		if(!obj->methodp_glRenderMode) { obj->methodp_glRenderMode = (PFNGLRENDERMODEPROC)GetProcAddress(modOpenGL32, "glRenderMode"); }
		if(!obj->methodp_glRenderMode) { args.This()->Set(v8::String::NewSymbol("glRenderMode"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorage) { obj->methodp_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)wglGetProcAddress("glRenderbufferStorage"); }
		if(!obj->methodp_glRenderbufferStorage) { obj->methodp_glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorage"); }
		if(!obj->methodp_glRenderbufferStorage) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorage"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageEXT) { obj->methodp_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)wglGetProcAddress("glRenderbufferStorageEXT"); }
		if(!obj->methodp_glRenderbufferStorageEXT) { obj->methodp_glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageEXT"); }
		if(!obj->methodp_glRenderbufferStorageEXT) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageEXT"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageMultisample) { obj->methodp_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)wglGetProcAddress("glRenderbufferStorageMultisample"); }
		if(!obj->methodp_glRenderbufferStorageMultisample) { obj->methodp_glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageMultisample"); }
		if(!obj->methodp_glRenderbufferStorageMultisample) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageMultisample"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageMultisampleANGLE) { obj->methodp_glRenderbufferStorageMultisampleANGLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC)wglGetProcAddress("glRenderbufferStorageMultisampleANGLE"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleANGLE) { obj->methodp_glRenderbufferStorageMultisampleANGLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageMultisampleANGLE"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleANGLE) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageMultisampleANGLE"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageMultisampleAPPLE) { obj->methodp_glRenderbufferStorageMultisampleAPPLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC)wglGetProcAddress("glRenderbufferStorageMultisampleAPPLE"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleAPPLE) { obj->methodp_glRenderbufferStorageMultisampleAPPLE = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageMultisampleAPPLE"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleAPPLE) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageMultisampleAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageMultisampleCoverageNV) { obj->methodp_glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)wglGetProcAddress("glRenderbufferStorageMultisampleCoverageNV"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleCoverageNV) { obj->methodp_glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageMultisampleCoverageNV"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleCoverageNV) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageMultisampleCoverageNV"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageMultisampleEXT) { obj->methodp_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)wglGetProcAddress("glRenderbufferStorageMultisampleEXT"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleEXT) { obj->methodp_glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageMultisampleEXT"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleEXT) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageMultisampleEXT"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageMultisampleIMG) { obj->methodp_glRenderbufferStorageMultisampleIMG = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC)wglGetProcAddress("glRenderbufferStorageMultisampleIMG"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleIMG) { obj->methodp_glRenderbufferStorageMultisampleIMG = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageMultisampleIMG"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleIMG) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageMultisampleIMG"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageMultisampleNV) { obj->methodp_glRenderbufferStorageMultisampleNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC)wglGetProcAddress("glRenderbufferStorageMultisampleNV"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleNV) { obj->methodp_glRenderbufferStorageMultisampleNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageMultisampleNV"); }
		if(!obj->methodp_glRenderbufferStorageMultisampleNV) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageMultisampleNV"), v8::Undefined()); }
		if(!obj->methodp_glRenderbufferStorageOES) { obj->methodp_glRenderbufferStorageOES = (PFNGLRENDERBUFFERSTORAGEOESPROC)wglGetProcAddress("glRenderbufferStorageOES"); }
		if(!obj->methodp_glRenderbufferStorageOES) { obj->methodp_glRenderbufferStorageOES = (PFNGLRENDERBUFFERSTORAGEOESPROC)GetProcAddress(modOpenGL32, "glRenderbufferStorageOES"); }
		if(!obj->methodp_glRenderbufferStorageOES) { args.This()->Set(v8::String::NewSymbol("glRenderbufferStorageOES"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodePointerSUN) { obj->methodp_glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)wglGetProcAddress("glReplacementCodePointerSUN"); }
		if(!obj->methodp_glReplacementCodePointerSUN) { obj->methodp_glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodePointerSUN"); }
		if(!obj->methodp_glReplacementCodePointerSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodePointerSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeubSUN) { obj->methodp_glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC)wglGetProcAddress("glReplacementCodeubSUN"); }
		if(!obj->methodp_glReplacementCodeubSUN) { obj->methodp_glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeubSUN"); }
		if(!obj->methodp_glReplacementCodeubSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeubSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeubvSUN) { obj->methodp_glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC)wglGetProcAddress("glReplacementCodeubvSUN"); }
		if(!obj->methodp_glReplacementCodeubvSUN) { obj->methodp_glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeubvSUN"); }
		if(!obj->methodp_glReplacementCodeubvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeubvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiColor3fVertex3fSUN) { obj->methodp_glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)wglGetProcAddress("glReplacementCodeuiColor3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor3fVertex3fSUN) { obj->methodp_glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiColor3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiColor3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiColor3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)wglGetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiColor3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiColor3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fSUN) { obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)wglGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fSUN) { obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiColor4fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiColor4fNormal3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)wglGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiColor4fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor4fNormal3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiColor4ubVertex3fSUN) { obj->methodp_glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)wglGetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor4ubVertex3fSUN) { obj->methodp_glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiColor4ubVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor4ubVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiColor4ubVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiColor4ubVertex3fvSUN) { obj->methodp_glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)wglGetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor4ubVertex3fvSUN) { obj->methodp_glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiColor4ubVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiColor4ubVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiColor4ubVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiNormal3fVertex3fSUN) { obj->methodp_glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)wglGetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiNormal3fVertex3fSUN) { obj->methodp_glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiNormal3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiNormal3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiNormal3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiNormal3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)wglGetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiNormal3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiNormal3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiNormal3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiSUN) { obj->methodp_glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC)wglGetProcAddress("glReplacementCodeuiSUN"); }
		if(!obj->methodp_glReplacementCodeuiSUN) { obj->methodp_glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiSUN"); }
		if(!obj->methodp_glReplacementCodeuiSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) { obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)wglGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) { obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)wglGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) { obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)wglGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) { obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)wglGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) { obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fVertex3fSUN) { obj->methodp_glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)wglGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fVertex3fSUN) { obj->methodp_glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiTexCoord2fVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiTexCoord2fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fVertex3fvSUN) { obj->methodp_glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)wglGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fVertex3fvSUN) { obj->methodp_glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiTexCoord2fVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiTexCoord2fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiTexCoord2fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiVertex3fSUN) { obj->methodp_glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)wglGetProcAddress("glReplacementCodeuiVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiVertex3fSUN) { obj->methodp_glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiVertex3fSUN"); }
		if(!obj->methodp_glReplacementCodeuiVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuiVertex3fvSUN) { obj->methodp_glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)wglGetProcAddress("glReplacementCodeuiVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiVertex3fvSUN) { obj->methodp_glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuiVertex3fvSUN"); }
		if(!obj->methodp_glReplacementCodeuiVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuiVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeuivSUN) { obj->methodp_glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC)wglGetProcAddress("glReplacementCodeuivSUN"); }
		if(!obj->methodp_glReplacementCodeuivSUN) { obj->methodp_glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeuivSUN"); }
		if(!obj->methodp_glReplacementCodeuivSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeuivSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeusSUN) { obj->methodp_glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC)wglGetProcAddress("glReplacementCodeusSUN"); }
		if(!obj->methodp_glReplacementCodeusSUN) { obj->methodp_glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeusSUN"); }
		if(!obj->methodp_glReplacementCodeusSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeusSUN"), v8::Undefined()); }
		if(!obj->methodp_glReplacementCodeusvSUN) { obj->methodp_glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC)wglGetProcAddress("glReplacementCodeusvSUN"); }
		if(!obj->methodp_glReplacementCodeusvSUN) { obj->methodp_glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC)GetProcAddress(modOpenGL32, "glReplacementCodeusvSUN"); }
		if(!obj->methodp_glReplacementCodeusvSUN) { args.This()->Set(v8::String::NewSymbol("glReplacementCodeusvSUN"), v8::Undefined()); }
		if(!obj->methodp_glRequestResidentProgramsNV) { obj->methodp_glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)wglGetProcAddress("glRequestResidentProgramsNV"); }
		if(!obj->methodp_glRequestResidentProgramsNV) { obj->methodp_glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)GetProcAddress(modOpenGL32, "glRequestResidentProgramsNV"); }
		if(!obj->methodp_glRequestResidentProgramsNV) { args.This()->Set(v8::String::NewSymbol("glRequestResidentProgramsNV"), v8::Undefined()); }
		if(!obj->methodp_glResetHistogram) { obj->methodp_glResetHistogram = (PFNGLRESETHISTOGRAMPROC)wglGetProcAddress("glResetHistogram"); }
		if(!obj->methodp_glResetHistogram) { obj->methodp_glResetHistogram = (PFNGLRESETHISTOGRAMPROC)GetProcAddress(modOpenGL32, "glResetHistogram"); }
		if(!obj->methodp_glResetHistogram) { args.This()->Set(v8::String::NewSymbol("glResetHistogram"), v8::Undefined()); }
		if(!obj->methodp_glResetHistogramEXT) { obj->methodp_glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)wglGetProcAddress("glResetHistogramEXT"); }
		if(!obj->methodp_glResetHistogramEXT) { obj->methodp_glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)GetProcAddress(modOpenGL32, "glResetHistogramEXT"); }
		if(!obj->methodp_glResetHistogramEXT) { args.This()->Set(v8::String::NewSymbol("glResetHistogramEXT"), v8::Undefined()); }
		if(!obj->methodp_glResetMinmax) { obj->methodp_glResetMinmax = (PFNGLRESETMINMAXPROC)wglGetProcAddress("glResetMinmax"); }
		if(!obj->methodp_glResetMinmax) { obj->methodp_glResetMinmax = (PFNGLRESETMINMAXPROC)GetProcAddress(modOpenGL32, "glResetMinmax"); }
		if(!obj->methodp_glResetMinmax) { args.This()->Set(v8::String::NewSymbol("glResetMinmax"), v8::Undefined()); }
		if(!obj->methodp_glResetMinmaxEXT) { obj->methodp_glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)wglGetProcAddress("glResetMinmaxEXT"); }
		if(!obj->methodp_glResetMinmaxEXT) { obj->methodp_glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)GetProcAddress(modOpenGL32, "glResetMinmaxEXT"); }
		if(!obj->methodp_glResetMinmaxEXT) { args.This()->Set(v8::String::NewSymbol("glResetMinmaxEXT"), v8::Undefined()); }
		if(!obj->methodp_glResizeBuffersMESA) { obj->methodp_glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC)wglGetProcAddress("glResizeBuffersMESA"); }
		if(!obj->methodp_glResizeBuffersMESA) { obj->methodp_glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC)GetProcAddress(modOpenGL32, "glResizeBuffersMESA"); }
		if(!obj->methodp_glResizeBuffersMESA) { args.This()->Set(v8::String::NewSymbol("glResizeBuffersMESA"), v8::Undefined()); }
		if(!obj->methodp_glResolveMultisampleFramebufferAPPLE) { obj->methodp_glResolveMultisampleFramebufferAPPLE = (PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC)wglGetProcAddress("glResolveMultisampleFramebufferAPPLE"); }
		if(!obj->methodp_glResolveMultisampleFramebufferAPPLE) { obj->methodp_glResolveMultisampleFramebufferAPPLE = (PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC)GetProcAddress(modOpenGL32, "glResolveMultisampleFramebufferAPPLE"); }
		if(!obj->methodp_glResolveMultisampleFramebufferAPPLE) { args.This()->Set(v8::String::NewSymbol("glResolveMultisampleFramebufferAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glResumeTransformFeedback) { obj->methodp_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)wglGetProcAddress("glResumeTransformFeedback"); }
		if(!obj->methodp_glResumeTransformFeedback) { obj->methodp_glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)GetProcAddress(modOpenGL32, "glResumeTransformFeedback"); }
		if(!obj->methodp_glResumeTransformFeedback) { args.This()->Set(v8::String::NewSymbol("glResumeTransformFeedback"), v8::Undefined()); }
		if(!obj->methodp_glResumeTransformFeedbackNV) { obj->methodp_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC)wglGetProcAddress("glResumeTransformFeedbackNV"); }
		if(!obj->methodp_glResumeTransformFeedbackNV) { obj->methodp_glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC)GetProcAddress(modOpenGL32, "glResumeTransformFeedbackNV"); }
		if(!obj->methodp_glResumeTransformFeedbackNV) { args.This()->Set(v8::String::NewSymbol("glResumeTransformFeedbackNV"), v8::Undefined()); }
		if(!obj->methodp_glRotated) { obj->methodp_glRotated = (PFNGLROTATEDPROC)wglGetProcAddress("glRotated"); }
		if(!obj->methodp_glRotated) { obj->methodp_glRotated = (PFNGLROTATEDPROC)GetProcAddress(modOpenGL32, "glRotated"); }
		if(!obj->methodp_glRotated) { args.This()->Set(v8::String::NewSymbol("glRotated"), v8::Undefined()); }
		if(!obj->methodp_glRotatef) { obj->methodp_glRotatef = (PFNGLROTATEFPROC)wglGetProcAddress("glRotatef"); }
		if(!obj->methodp_glRotatef) { obj->methodp_glRotatef = (PFNGLROTATEFPROC)GetProcAddress(modOpenGL32, "glRotatef"); }
		if(!obj->methodp_glRotatef) { args.This()->Set(v8::String::NewSymbol("glRotatef"), v8::Undefined()); }
		if(!obj->methodp_glRotatex) { obj->methodp_glRotatex = (PFNGLROTATEXPROC)wglGetProcAddress("glRotatex"); }
		if(!obj->methodp_glRotatex) { obj->methodp_glRotatex = (PFNGLROTATEXPROC)GetProcAddress(modOpenGL32, "glRotatex"); }
		if(!obj->methodp_glRotatex) { args.This()->Set(v8::String::NewSymbol("glRotatex"), v8::Undefined()); }
		if(!obj->methodp_glRotatexOES) { obj->methodp_glRotatexOES = (PFNGLROTATEXOESPROC)wglGetProcAddress("glRotatexOES"); }
		if(!obj->methodp_glRotatexOES) { obj->methodp_glRotatexOES = (PFNGLROTATEXOESPROC)GetProcAddress(modOpenGL32, "glRotatexOES"); }
		if(!obj->methodp_glRotatexOES) { args.This()->Set(v8::String::NewSymbol("glRotatexOES"), v8::Undefined()); }
		if(!obj->methodp_glSampleCoverage) { obj->methodp_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)wglGetProcAddress("glSampleCoverage"); }
		if(!obj->methodp_glSampleCoverage) { obj->methodp_glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)GetProcAddress(modOpenGL32, "glSampleCoverage"); }
		if(!obj->methodp_glSampleCoverage) { args.This()->Set(v8::String::NewSymbol("glSampleCoverage"), v8::Undefined()); }
		if(!obj->methodp_glSampleCoverageARB) { obj->methodp_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)wglGetProcAddress("glSampleCoverageARB"); }
		if(!obj->methodp_glSampleCoverageARB) { obj->methodp_glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)GetProcAddress(modOpenGL32, "glSampleCoverageARB"); }
		if(!obj->methodp_glSampleCoverageARB) { args.This()->Set(v8::String::NewSymbol("glSampleCoverageARB"), v8::Undefined()); }
		if(!obj->methodp_glSampleCoverageOES) { obj->methodp_glSampleCoverageOES = (PFNGLSAMPLECOVERAGEOESPROC)wglGetProcAddress("glSampleCoverageOES"); }
		if(!obj->methodp_glSampleCoverageOES) { obj->methodp_glSampleCoverageOES = (PFNGLSAMPLECOVERAGEOESPROC)GetProcAddress(modOpenGL32, "glSampleCoverageOES"); }
		if(!obj->methodp_glSampleCoverageOES) { args.This()->Set(v8::String::NewSymbol("glSampleCoverageOES"), v8::Undefined()); }
		if(!obj->methodp_glSampleCoveragex) { obj->methodp_glSampleCoveragex = (PFNGLSAMPLECOVERAGEXPROC)wglGetProcAddress("glSampleCoveragex"); }
		if(!obj->methodp_glSampleCoveragex) { obj->methodp_glSampleCoveragex = (PFNGLSAMPLECOVERAGEXPROC)GetProcAddress(modOpenGL32, "glSampleCoveragex"); }
		if(!obj->methodp_glSampleCoveragex) { args.This()->Set(v8::String::NewSymbol("glSampleCoveragex"), v8::Undefined()); }
		if(!obj->methodp_glSampleCoveragexOES) { obj->methodp_glSampleCoveragexOES = (PFNGLSAMPLECOVERAGEXOESPROC)wglGetProcAddress("glSampleCoveragexOES"); }
		if(!obj->methodp_glSampleCoveragexOES) { obj->methodp_glSampleCoveragexOES = (PFNGLSAMPLECOVERAGEXOESPROC)GetProcAddress(modOpenGL32, "glSampleCoveragexOES"); }
		if(!obj->methodp_glSampleCoveragexOES) { args.This()->Set(v8::String::NewSymbol("glSampleCoveragexOES"), v8::Undefined()); }
		if(!obj->methodp_glSampleMapATI) { obj->methodp_glSampleMapATI = (PFNGLSAMPLEMAPATIPROC)wglGetProcAddress("glSampleMapATI"); }
		if(!obj->methodp_glSampleMapATI) { obj->methodp_glSampleMapATI = (PFNGLSAMPLEMAPATIPROC)GetProcAddress(modOpenGL32, "glSampleMapATI"); }
		if(!obj->methodp_glSampleMapATI) { args.This()->Set(v8::String::NewSymbol("glSampleMapATI"), v8::Undefined()); }
		if(!obj->methodp_glSampleMaskEXT) { obj->methodp_glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)wglGetProcAddress("glSampleMaskEXT"); }
		if(!obj->methodp_glSampleMaskEXT) { obj->methodp_glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)GetProcAddress(modOpenGL32, "glSampleMaskEXT"); }
		if(!obj->methodp_glSampleMaskEXT) { args.This()->Set(v8::String::NewSymbol("glSampleMaskEXT"), v8::Undefined()); }
		if(!obj->methodp_glSampleMaskIndexedNV) { obj->methodp_glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC)wglGetProcAddress("glSampleMaskIndexedNV"); }
		if(!obj->methodp_glSampleMaskIndexedNV) { obj->methodp_glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC)GetProcAddress(modOpenGL32, "glSampleMaskIndexedNV"); }
		if(!obj->methodp_glSampleMaskIndexedNV) { args.This()->Set(v8::String::NewSymbol("glSampleMaskIndexedNV"), v8::Undefined()); }
		if(!obj->methodp_glSampleMaskSGIS) { obj->methodp_glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)wglGetProcAddress("glSampleMaskSGIS"); }
		if(!obj->methodp_glSampleMaskSGIS) { obj->methodp_glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)GetProcAddress(modOpenGL32, "glSampleMaskSGIS"); }
		if(!obj->methodp_glSampleMaskSGIS) { args.This()->Set(v8::String::NewSymbol("glSampleMaskSGIS"), v8::Undefined()); }
		if(!obj->methodp_glSampleMaski) { obj->methodp_glSampleMaski = (PFNGLSAMPLEMASKIPROC)wglGetProcAddress("glSampleMaski"); }
		if(!obj->methodp_glSampleMaski) { obj->methodp_glSampleMaski = (PFNGLSAMPLEMASKIPROC)GetProcAddress(modOpenGL32, "glSampleMaski"); }
		if(!obj->methodp_glSampleMaski) { args.This()->Set(v8::String::NewSymbol("glSampleMaski"), v8::Undefined()); }
		if(!obj->methodp_glSamplePatternEXT) { obj->methodp_glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)wglGetProcAddress("glSamplePatternEXT"); }
		if(!obj->methodp_glSamplePatternEXT) { obj->methodp_glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)GetProcAddress(modOpenGL32, "glSamplePatternEXT"); }
		if(!obj->methodp_glSamplePatternEXT) { args.This()->Set(v8::String::NewSymbol("glSamplePatternEXT"), v8::Undefined()); }
		if(!obj->methodp_glSamplePatternSGIS) { obj->methodp_glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)wglGetProcAddress("glSamplePatternSGIS"); }
		if(!obj->methodp_glSamplePatternSGIS) { obj->methodp_glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)GetProcAddress(modOpenGL32, "glSamplePatternSGIS"); }
		if(!obj->methodp_glSamplePatternSGIS) { args.This()->Set(v8::String::NewSymbol("glSamplePatternSGIS"), v8::Undefined()); }
		if(!obj->methodp_glSamplerParameterIiv) { obj->methodp_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)wglGetProcAddress("glSamplerParameterIiv"); }
		if(!obj->methodp_glSamplerParameterIiv) { obj->methodp_glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)GetProcAddress(modOpenGL32, "glSamplerParameterIiv"); }
		if(!obj->methodp_glSamplerParameterIiv) { args.This()->Set(v8::String::NewSymbol("glSamplerParameterIiv"), v8::Undefined()); }
		if(!obj->methodp_glSamplerParameterIivEXT) { obj->methodp_glSamplerParameterIivEXT = (PFNGLSAMPLERPARAMETERIIVEXTPROC)wglGetProcAddress("glSamplerParameterIivEXT"); }
		if(!obj->methodp_glSamplerParameterIivEXT) { obj->methodp_glSamplerParameterIivEXT = (PFNGLSAMPLERPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glSamplerParameterIivEXT"); }
		if(!obj->methodp_glSamplerParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glSamplerParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glSamplerParameterIuiv) { obj->methodp_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)wglGetProcAddress("glSamplerParameterIuiv"); }
		if(!obj->methodp_glSamplerParameterIuiv) { obj->methodp_glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)GetProcAddress(modOpenGL32, "glSamplerParameterIuiv"); }
		if(!obj->methodp_glSamplerParameterIuiv) { args.This()->Set(v8::String::NewSymbol("glSamplerParameterIuiv"), v8::Undefined()); }
		if(!obj->methodp_glSamplerParameterIuivEXT) { obj->methodp_glSamplerParameterIuivEXT = (PFNGLSAMPLERPARAMETERIUIVEXTPROC)wglGetProcAddress("glSamplerParameterIuivEXT"); }
		if(!obj->methodp_glSamplerParameterIuivEXT) { obj->methodp_glSamplerParameterIuivEXT = (PFNGLSAMPLERPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glSamplerParameterIuivEXT"); }
		if(!obj->methodp_glSamplerParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glSamplerParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glSamplerParameterf) { obj->methodp_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)wglGetProcAddress("glSamplerParameterf"); }
		if(!obj->methodp_glSamplerParameterf) { obj->methodp_glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)GetProcAddress(modOpenGL32, "glSamplerParameterf"); }
		if(!obj->methodp_glSamplerParameterf) { args.This()->Set(v8::String::NewSymbol("glSamplerParameterf"), v8::Undefined()); }
		if(!obj->methodp_glSamplerParameterfv) { obj->methodp_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)wglGetProcAddress("glSamplerParameterfv"); }
		if(!obj->methodp_glSamplerParameterfv) { obj->methodp_glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glSamplerParameterfv"); }
		if(!obj->methodp_glSamplerParameterfv) { args.This()->Set(v8::String::NewSymbol("glSamplerParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glSamplerParameteri) { obj->methodp_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)wglGetProcAddress("glSamplerParameteri"); }
		if(!obj->methodp_glSamplerParameteri) { obj->methodp_glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)GetProcAddress(modOpenGL32, "glSamplerParameteri"); }
		if(!obj->methodp_glSamplerParameteri) { args.This()->Set(v8::String::NewSymbol("glSamplerParameteri"), v8::Undefined()); }
		if(!obj->methodp_glSamplerParameteriv) { obj->methodp_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)wglGetProcAddress("glSamplerParameteriv"); }
		if(!obj->methodp_glSamplerParameteriv) { obj->methodp_glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glSamplerParameteriv"); }
		if(!obj->methodp_glSamplerParameteriv) { args.This()->Set(v8::String::NewSymbol("glSamplerParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glScaled) { obj->methodp_glScaled = (PFNGLSCALEDPROC)wglGetProcAddress("glScaled"); }
		if(!obj->methodp_glScaled) { obj->methodp_glScaled = (PFNGLSCALEDPROC)GetProcAddress(modOpenGL32, "glScaled"); }
		if(!obj->methodp_glScaled) { args.This()->Set(v8::String::NewSymbol("glScaled"), v8::Undefined()); }
		if(!obj->methodp_glScalef) { obj->methodp_glScalef = (PFNGLSCALEFPROC)wglGetProcAddress("glScalef"); }
		if(!obj->methodp_glScalef) { obj->methodp_glScalef = (PFNGLSCALEFPROC)GetProcAddress(modOpenGL32, "glScalef"); }
		if(!obj->methodp_glScalef) { args.This()->Set(v8::String::NewSymbol("glScalef"), v8::Undefined()); }
		if(!obj->methodp_glScalex) { obj->methodp_glScalex = (PFNGLSCALEXPROC)wglGetProcAddress("glScalex"); }
		if(!obj->methodp_glScalex) { obj->methodp_glScalex = (PFNGLSCALEXPROC)GetProcAddress(modOpenGL32, "glScalex"); }
		if(!obj->methodp_glScalex) { args.This()->Set(v8::String::NewSymbol("glScalex"), v8::Undefined()); }
		if(!obj->methodp_glScalexOES) { obj->methodp_glScalexOES = (PFNGLSCALEXOESPROC)wglGetProcAddress("glScalexOES"); }
		if(!obj->methodp_glScalexOES) { obj->methodp_glScalexOES = (PFNGLSCALEXOESPROC)GetProcAddress(modOpenGL32, "glScalexOES"); }
		if(!obj->methodp_glScalexOES) { args.This()->Set(v8::String::NewSymbol("glScalexOES"), v8::Undefined()); }
		if(!obj->methodp_glScissor) { obj->methodp_glScissor = (PFNGLSCISSORPROC)wglGetProcAddress("glScissor"); }
		if(!obj->methodp_glScissor) { obj->methodp_glScissor = (PFNGLSCISSORPROC)GetProcAddress(modOpenGL32, "glScissor"); }
		if(!obj->methodp_glScissor) { args.This()->Set(v8::String::NewSymbol("glScissor"), v8::Undefined()); }
		if(!obj->methodp_glScissorArrayv) { obj->methodp_glScissorArrayv = (PFNGLSCISSORARRAYVPROC)wglGetProcAddress("glScissorArrayv"); }
		if(!obj->methodp_glScissorArrayv) { obj->methodp_glScissorArrayv = (PFNGLSCISSORARRAYVPROC)GetProcAddress(modOpenGL32, "glScissorArrayv"); }
		if(!obj->methodp_glScissorArrayv) { args.This()->Set(v8::String::NewSymbol("glScissorArrayv"), v8::Undefined()); }
		if(!obj->methodp_glScissorIndexed) { obj->methodp_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)wglGetProcAddress("glScissorIndexed"); }
		if(!obj->methodp_glScissorIndexed) { obj->methodp_glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)GetProcAddress(modOpenGL32, "glScissorIndexed"); }
		if(!obj->methodp_glScissorIndexed) { args.This()->Set(v8::String::NewSymbol("glScissorIndexed"), v8::Undefined()); }
		if(!obj->methodp_glScissorIndexedv) { obj->methodp_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)wglGetProcAddress("glScissorIndexedv"); }
		if(!obj->methodp_glScissorIndexedv) { obj->methodp_glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)GetProcAddress(modOpenGL32, "glScissorIndexedv"); }
		if(!obj->methodp_glScissorIndexedv) { args.This()->Set(v8::String::NewSymbol("glScissorIndexedv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3b) { obj->methodp_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)wglGetProcAddress("glSecondaryColor3b"); }
		if(!obj->methodp_glSecondaryColor3b) { obj->methodp_glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3b"); }
		if(!obj->methodp_glSecondaryColor3b) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3b"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3bEXT) { obj->methodp_glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)wglGetProcAddress("glSecondaryColor3bEXT"); }
		if(!obj->methodp_glSecondaryColor3bEXT) { obj->methodp_glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3bEXT"); }
		if(!obj->methodp_glSecondaryColor3bEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3bEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3bv) { obj->methodp_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)wglGetProcAddress("glSecondaryColor3bv"); }
		if(!obj->methodp_glSecondaryColor3bv) { obj->methodp_glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3bv"); }
		if(!obj->methodp_glSecondaryColor3bv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3bv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3bvEXT) { obj->methodp_glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)wglGetProcAddress("glSecondaryColor3bvEXT"); }
		if(!obj->methodp_glSecondaryColor3bvEXT) { obj->methodp_glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3bvEXT"); }
		if(!obj->methodp_glSecondaryColor3bvEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3bvEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3d) { obj->methodp_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)wglGetProcAddress("glSecondaryColor3d"); }
		if(!obj->methodp_glSecondaryColor3d) { obj->methodp_glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3d"); }
		if(!obj->methodp_glSecondaryColor3d) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3d"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3dEXT) { obj->methodp_glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)wglGetProcAddress("glSecondaryColor3dEXT"); }
		if(!obj->methodp_glSecondaryColor3dEXT) { obj->methodp_glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3dEXT"); }
		if(!obj->methodp_glSecondaryColor3dEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3dEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3dv) { obj->methodp_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)wglGetProcAddress("glSecondaryColor3dv"); }
		if(!obj->methodp_glSecondaryColor3dv) { obj->methodp_glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3dv"); }
		if(!obj->methodp_glSecondaryColor3dv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3dv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3dvEXT) { obj->methodp_glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)wglGetProcAddress("glSecondaryColor3dvEXT"); }
		if(!obj->methodp_glSecondaryColor3dvEXT) { obj->methodp_glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3dvEXT"); }
		if(!obj->methodp_glSecondaryColor3dvEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3f) { obj->methodp_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)wglGetProcAddress("glSecondaryColor3f"); }
		if(!obj->methodp_glSecondaryColor3f) { obj->methodp_glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3f"); }
		if(!obj->methodp_glSecondaryColor3f) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3f"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3fEXT) { obj->methodp_glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)wglGetProcAddress("glSecondaryColor3fEXT"); }
		if(!obj->methodp_glSecondaryColor3fEXT) { obj->methodp_glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3fEXT"); }
		if(!obj->methodp_glSecondaryColor3fEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3fEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3fv) { obj->methodp_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)wglGetProcAddress("glSecondaryColor3fv"); }
		if(!obj->methodp_glSecondaryColor3fv) { obj->methodp_glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3fv"); }
		if(!obj->methodp_glSecondaryColor3fv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3fv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3fvEXT) { obj->methodp_glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)wglGetProcAddress("glSecondaryColor3fvEXT"); }
		if(!obj->methodp_glSecondaryColor3fvEXT) { obj->methodp_glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3fvEXT"); }
		if(!obj->methodp_glSecondaryColor3fvEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3hNV) { obj->methodp_glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC)wglGetProcAddress("glSecondaryColor3hNV"); }
		if(!obj->methodp_glSecondaryColor3hNV) { obj->methodp_glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3hNV"); }
		if(!obj->methodp_glSecondaryColor3hNV) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3hNV"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3hvNV) { obj->methodp_glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC)wglGetProcAddress("glSecondaryColor3hvNV"); }
		if(!obj->methodp_glSecondaryColor3hvNV) { obj->methodp_glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3hvNV"); }
		if(!obj->methodp_glSecondaryColor3hvNV) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3hvNV"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3i) { obj->methodp_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)wglGetProcAddress("glSecondaryColor3i"); }
		if(!obj->methodp_glSecondaryColor3i) { obj->methodp_glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3i"); }
		if(!obj->methodp_glSecondaryColor3i) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3i"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3iEXT) { obj->methodp_glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)wglGetProcAddress("glSecondaryColor3iEXT"); }
		if(!obj->methodp_glSecondaryColor3iEXT) { obj->methodp_glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3iEXT"); }
		if(!obj->methodp_glSecondaryColor3iEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3iEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3iv) { obj->methodp_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)wglGetProcAddress("glSecondaryColor3iv"); }
		if(!obj->methodp_glSecondaryColor3iv) { obj->methodp_glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3iv"); }
		if(!obj->methodp_glSecondaryColor3iv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3iv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3ivEXT) { obj->methodp_glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)wglGetProcAddress("glSecondaryColor3ivEXT"); }
		if(!obj->methodp_glSecondaryColor3ivEXT) { obj->methodp_glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3ivEXT"); }
		if(!obj->methodp_glSecondaryColor3ivEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3s) { obj->methodp_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)wglGetProcAddress("glSecondaryColor3s"); }
		if(!obj->methodp_glSecondaryColor3s) { obj->methodp_glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3s"); }
		if(!obj->methodp_glSecondaryColor3s) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3s"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3sEXT) { obj->methodp_glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)wglGetProcAddress("glSecondaryColor3sEXT"); }
		if(!obj->methodp_glSecondaryColor3sEXT) { obj->methodp_glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3sEXT"); }
		if(!obj->methodp_glSecondaryColor3sEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3sEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3sv) { obj->methodp_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)wglGetProcAddress("glSecondaryColor3sv"); }
		if(!obj->methodp_glSecondaryColor3sv) { obj->methodp_glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3sv"); }
		if(!obj->methodp_glSecondaryColor3sv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3sv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3svEXT) { obj->methodp_glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)wglGetProcAddress("glSecondaryColor3svEXT"); }
		if(!obj->methodp_glSecondaryColor3svEXT) { obj->methodp_glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3svEXT"); }
		if(!obj->methodp_glSecondaryColor3svEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3svEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3ub) { obj->methodp_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)wglGetProcAddress("glSecondaryColor3ub"); }
		if(!obj->methodp_glSecondaryColor3ub) { obj->methodp_glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3ub"); }
		if(!obj->methodp_glSecondaryColor3ub) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3ub"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3ubEXT) { obj->methodp_glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)wglGetProcAddress("glSecondaryColor3ubEXT"); }
		if(!obj->methodp_glSecondaryColor3ubEXT) { obj->methodp_glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3ubEXT"); }
		if(!obj->methodp_glSecondaryColor3ubEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3ubEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3ubv) { obj->methodp_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)wglGetProcAddress("glSecondaryColor3ubv"); }
		if(!obj->methodp_glSecondaryColor3ubv) { obj->methodp_glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3ubv"); }
		if(!obj->methodp_glSecondaryColor3ubv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3ubv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3ubvEXT) { obj->methodp_glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)wglGetProcAddress("glSecondaryColor3ubvEXT"); }
		if(!obj->methodp_glSecondaryColor3ubvEXT) { obj->methodp_glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3ubvEXT"); }
		if(!obj->methodp_glSecondaryColor3ubvEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3ubvEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3ui) { obj->methodp_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)wglGetProcAddress("glSecondaryColor3ui"); }
		if(!obj->methodp_glSecondaryColor3ui) { obj->methodp_glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3ui"); }
		if(!obj->methodp_glSecondaryColor3ui) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3ui"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3uiEXT) { obj->methodp_glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)wglGetProcAddress("glSecondaryColor3uiEXT"); }
		if(!obj->methodp_glSecondaryColor3uiEXT) { obj->methodp_glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3uiEXT"); }
		if(!obj->methodp_glSecondaryColor3uiEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3uiv) { obj->methodp_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)wglGetProcAddress("glSecondaryColor3uiv"); }
		if(!obj->methodp_glSecondaryColor3uiv) { obj->methodp_glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3uiv"); }
		if(!obj->methodp_glSecondaryColor3uiv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3uiv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3uivEXT) { obj->methodp_glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)wglGetProcAddress("glSecondaryColor3uivEXT"); }
		if(!obj->methodp_glSecondaryColor3uivEXT) { obj->methodp_glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3uivEXT"); }
		if(!obj->methodp_glSecondaryColor3uivEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3us) { obj->methodp_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)wglGetProcAddress("glSecondaryColor3us"); }
		if(!obj->methodp_glSecondaryColor3us) { obj->methodp_glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3us"); }
		if(!obj->methodp_glSecondaryColor3us) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3us"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3usEXT) { obj->methodp_glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)wglGetProcAddress("glSecondaryColor3usEXT"); }
		if(!obj->methodp_glSecondaryColor3usEXT) { obj->methodp_glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3usEXT"); }
		if(!obj->methodp_glSecondaryColor3usEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3usEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3usv) { obj->methodp_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)wglGetProcAddress("glSecondaryColor3usv"); }
		if(!obj->methodp_glSecondaryColor3usv) { obj->methodp_glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3usv"); }
		if(!obj->methodp_glSecondaryColor3usv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3usv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColor3usvEXT) { obj->methodp_glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)wglGetProcAddress("glSecondaryColor3usvEXT"); }
		if(!obj->methodp_glSecondaryColor3usvEXT) { obj->methodp_glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColor3usvEXT"); }
		if(!obj->methodp_glSecondaryColor3usvEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColor3usvEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColorFormatNV) { obj->methodp_glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC)wglGetProcAddress("glSecondaryColorFormatNV"); }
		if(!obj->methodp_glSecondaryColorFormatNV) { obj->methodp_glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC)GetProcAddress(modOpenGL32, "glSecondaryColorFormatNV"); }
		if(!obj->methodp_glSecondaryColorFormatNV) { args.This()->Set(v8::String::NewSymbol("glSecondaryColorFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColorP3ui) { obj->methodp_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)wglGetProcAddress("glSecondaryColorP3ui"); }
		if(!obj->methodp_glSecondaryColorP3ui) { obj->methodp_glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)GetProcAddress(modOpenGL32, "glSecondaryColorP3ui"); }
		if(!obj->methodp_glSecondaryColorP3ui) { args.This()->Set(v8::String::NewSymbol("glSecondaryColorP3ui"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColorP3uiv) { obj->methodp_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)wglGetProcAddress("glSecondaryColorP3uiv"); }
		if(!obj->methodp_glSecondaryColorP3uiv) { obj->methodp_glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)GetProcAddress(modOpenGL32, "glSecondaryColorP3uiv"); }
		if(!obj->methodp_glSecondaryColorP3uiv) { args.This()->Set(v8::String::NewSymbol("glSecondaryColorP3uiv"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColorPointer) { obj->methodp_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)wglGetProcAddress("glSecondaryColorPointer"); }
		if(!obj->methodp_glSecondaryColorPointer) { obj->methodp_glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)GetProcAddress(modOpenGL32, "glSecondaryColorPointer"); }
		if(!obj->methodp_glSecondaryColorPointer) { args.This()->Set(v8::String::NewSymbol("glSecondaryColorPointer"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColorPointerEXT) { obj->methodp_glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)wglGetProcAddress("glSecondaryColorPointerEXT"); }
		if(!obj->methodp_glSecondaryColorPointerEXT) { obj->methodp_glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glSecondaryColorPointerEXT"); }
		if(!obj->methodp_glSecondaryColorPointerEXT) { args.This()->Set(v8::String::NewSymbol("glSecondaryColorPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glSecondaryColorPointerListIBM) { obj->methodp_glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)wglGetProcAddress("glSecondaryColorPointerListIBM"); }
		if(!obj->methodp_glSecondaryColorPointerListIBM) { obj->methodp_glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)GetProcAddress(modOpenGL32, "glSecondaryColorPointerListIBM"); }
		if(!obj->methodp_glSecondaryColorPointerListIBM) { args.This()->Set(v8::String::NewSymbol("glSecondaryColorPointerListIBM"), v8::Undefined()); }
		if(!obj->methodp_glSelectBuffer) { obj->methodp_glSelectBuffer = (PFNGLSELECTBUFFERPROC)wglGetProcAddress("glSelectBuffer"); }
		if(!obj->methodp_glSelectBuffer) { obj->methodp_glSelectBuffer = (PFNGLSELECTBUFFERPROC)GetProcAddress(modOpenGL32, "glSelectBuffer"); }
		if(!obj->methodp_glSelectBuffer) { args.This()->Set(v8::String::NewSymbol("glSelectBuffer"), v8::Undefined()); }
		if(!obj->methodp_glSelectPerfMonitorCountersAMD) { obj->methodp_glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)wglGetProcAddress("glSelectPerfMonitorCountersAMD"); }
		if(!obj->methodp_glSelectPerfMonitorCountersAMD) { obj->methodp_glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)GetProcAddress(modOpenGL32, "glSelectPerfMonitorCountersAMD"); }
		if(!obj->methodp_glSelectPerfMonitorCountersAMD) { args.This()->Set(v8::String::NewSymbol("glSelectPerfMonitorCountersAMD"), v8::Undefined()); }
		if(!obj->methodp_glSeparableFilter2D) { obj->methodp_glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)wglGetProcAddress("glSeparableFilter2D"); }
		if(!obj->methodp_glSeparableFilter2D) { obj->methodp_glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)GetProcAddress(modOpenGL32, "glSeparableFilter2D"); }
		if(!obj->methodp_glSeparableFilter2D) { args.This()->Set(v8::String::NewSymbol("glSeparableFilter2D"), v8::Undefined()); }
		if(!obj->methodp_glSeparableFilter2DEXT) { obj->methodp_glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)wglGetProcAddress("glSeparableFilter2DEXT"); }
		if(!obj->methodp_glSeparableFilter2DEXT) { obj->methodp_glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)GetProcAddress(modOpenGL32, "glSeparableFilter2DEXT"); }
		if(!obj->methodp_glSeparableFilter2DEXT) { args.This()->Set(v8::String::NewSymbol("glSeparableFilter2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glSetFenceAPPLE) { obj->methodp_glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC)wglGetProcAddress("glSetFenceAPPLE"); }
		if(!obj->methodp_glSetFenceAPPLE) { obj->methodp_glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC)GetProcAddress(modOpenGL32, "glSetFenceAPPLE"); }
		if(!obj->methodp_glSetFenceAPPLE) { args.This()->Set(v8::String::NewSymbol("glSetFenceAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glSetFenceNV) { obj->methodp_glSetFenceNV = (PFNGLSETFENCENVPROC)wglGetProcAddress("glSetFenceNV"); }
		if(!obj->methodp_glSetFenceNV) { obj->methodp_glSetFenceNV = (PFNGLSETFENCENVPROC)GetProcAddress(modOpenGL32, "glSetFenceNV"); }
		if(!obj->methodp_glSetFenceNV) { args.This()->Set(v8::String::NewSymbol("glSetFenceNV"), v8::Undefined()); }
		if(!obj->methodp_glSetFragmentShaderConstantATI) { obj->methodp_glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)wglGetProcAddress("glSetFragmentShaderConstantATI"); }
		if(!obj->methodp_glSetFragmentShaderConstantATI) { obj->methodp_glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)GetProcAddress(modOpenGL32, "glSetFragmentShaderConstantATI"); }
		if(!obj->methodp_glSetFragmentShaderConstantATI) { args.This()->Set(v8::String::NewSymbol("glSetFragmentShaderConstantATI"), v8::Undefined()); }
		if(!obj->methodp_glSetInvariantEXT) { obj->methodp_glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC)wglGetProcAddress("glSetInvariantEXT"); }
		if(!obj->methodp_glSetInvariantEXT) { obj->methodp_glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC)GetProcAddress(modOpenGL32, "glSetInvariantEXT"); }
		if(!obj->methodp_glSetInvariantEXT) { args.This()->Set(v8::String::NewSymbol("glSetInvariantEXT"), v8::Undefined()); }
		if(!obj->methodp_glSetLocalConstantEXT) { obj->methodp_glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC)wglGetProcAddress("glSetLocalConstantEXT"); }
		if(!obj->methodp_glSetLocalConstantEXT) { obj->methodp_glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC)GetProcAddress(modOpenGL32, "glSetLocalConstantEXT"); }
		if(!obj->methodp_glSetLocalConstantEXT) { args.This()->Set(v8::String::NewSymbol("glSetLocalConstantEXT"), v8::Undefined()); }
		if(!obj->methodp_glSetMultisamplefvAMD) { obj->methodp_glSetMultisamplefvAMD = (PFNGLSETMULTISAMPLEFVAMDPROC)wglGetProcAddress("glSetMultisamplefvAMD"); }
		if(!obj->methodp_glSetMultisamplefvAMD) { obj->methodp_glSetMultisamplefvAMD = (PFNGLSETMULTISAMPLEFVAMDPROC)GetProcAddress(modOpenGL32, "glSetMultisamplefvAMD"); }
		if(!obj->methodp_glSetMultisamplefvAMD) { args.This()->Set(v8::String::NewSymbol("glSetMultisamplefvAMD"), v8::Undefined()); }
		if(!obj->methodp_glShadeModel) { obj->methodp_glShadeModel = (PFNGLSHADEMODELPROC)wglGetProcAddress("glShadeModel"); }
		if(!obj->methodp_glShadeModel) { obj->methodp_glShadeModel = (PFNGLSHADEMODELPROC)GetProcAddress(modOpenGL32, "glShadeModel"); }
		if(!obj->methodp_glShadeModel) { args.This()->Set(v8::String::NewSymbol("glShadeModel"), v8::Undefined()); }
		if(!obj->methodp_glShaderBinary) { obj->methodp_glShaderBinary = (PFNGLSHADERBINARYPROC)wglGetProcAddress("glShaderBinary"); }
		if(!obj->methodp_glShaderBinary) { obj->methodp_glShaderBinary = (PFNGLSHADERBINARYPROC)GetProcAddress(modOpenGL32, "glShaderBinary"); }
		if(!obj->methodp_glShaderBinary) { args.This()->Set(v8::String::NewSymbol("glShaderBinary"), v8::Undefined()); }
		if(!obj->methodp_glShaderOp1EXT) { obj->methodp_glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC)wglGetProcAddress("glShaderOp1EXT"); }
		if(!obj->methodp_glShaderOp1EXT) { obj->methodp_glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC)GetProcAddress(modOpenGL32, "glShaderOp1EXT"); }
		if(!obj->methodp_glShaderOp1EXT) { args.This()->Set(v8::String::NewSymbol("glShaderOp1EXT"), v8::Undefined()); }
		if(!obj->methodp_glShaderOp2EXT) { obj->methodp_glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC)wglGetProcAddress("glShaderOp2EXT"); }
		if(!obj->methodp_glShaderOp2EXT) { obj->methodp_glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC)GetProcAddress(modOpenGL32, "glShaderOp2EXT"); }
		if(!obj->methodp_glShaderOp2EXT) { args.This()->Set(v8::String::NewSymbol("glShaderOp2EXT"), v8::Undefined()); }
		if(!obj->methodp_glShaderOp3EXT) { obj->methodp_glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC)wglGetProcAddress("glShaderOp3EXT"); }
		if(!obj->methodp_glShaderOp3EXT) { obj->methodp_glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC)GetProcAddress(modOpenGL32, "glShaderOp3EXT"); }
		if(!obj->methodp_glShaderOp3EXT) { args.This()->Set(v8::String::NewSymbol("glShaderOp3EXT"), v8::Undefined()); }
		if(!obj->methodp_glShaderSource) { obj->methodp_glShaderSource = (PFNGLSHADERSOURCEPROC)wglGetProcAddress("glShaderSource"); }
		if(!obj->methodp_glShaderSource) { obj->methodp_glShaderSource = (PFNGLSHADERSOURCEPROC)GetProcAddress(modOpenGL32, "glShaderSource"); }
		if(!obj->methodp_glShaderSource) { args.This()->Set(v8::String::NewSymbol("glShaderSource"), v8::Undefined()); }
		if(!obj->methodp_glShaderSourceARB) { obj->methodp_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)wglGetProcAddress("glShaderSourceARB"); }
		if(!obj->methodp_glShaderSourceARB) { obj->methodp_glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)GetProcAddress(modOpenGL32, "glShaderSourceARB"); }
		if(!obj->methodp_glShaderSourceARB) { args.This()->Set(v8::String::NewSymbol("glShaderSourceARB"), v8::Undefined()); }
		if(!obj->methodp_glShaderStorageBlockBinding) { obj->methodp_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)wglGetProcAddress("glShaderStorageBlockBinding"); }
		if(!obj->methodp_glShaderStorageBlockBinding) { obj->methodp_glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)GetProcAddress(modOpenGL32, "glShaderStorageBlockBinding"); }
		if(!obj->methodp_glShaderStorageBlockBinding) { args.This()->Set(v8::String::NewSymbol("glShaderStorageBlockBinding"), v8::Undefined()); }
		if(!obj->methodp_glSharpenTexFuncSGIS) { obj->methodp_glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC)wglGetProcAddress("glSharpenTexFuncSGIS"); }
		if(!obj->methodp_glSharpenTexFuncSGIS) { obj->methodp_glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC)GetProcAddress(modOpenGL32, "glSharpenTexFuncSGIS"); }
		if(!obj->methodp_glSharpenTexFuncSGIS) { args.This()->Set(v8::String::NewSymbol("glSharpenTexFuncSGIS"), v8::Undefined()); }
		if(!obj->methodp_glSpriteParameterfSGIX) { obj->methodp_glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC)wglGetProcAddress("glSpriteParameterfSGIX"); }
		if(!obj->methodp_glSpriteParameterfSGIX) { obj->methodp_glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC)GetProcAddress(modOpenGL32, "glSpriteParameterfSGIX"); }
		if(!obj->methodp_glSpriteParameterfSGIX) { args.This()->Set(v8::String::NewSymbol("glSpriteParameterfSGIX"), v8::Undefined()); }
		if(!obj->methodp_glSpriteParameterfvSGIX) { obj->methodp_glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC)wglGetProcAddress("glSpriteParameterfvSGIX"); }
		if(!obj->methodp_glSpriteParameterfvSGIX) { obj->methodp_glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC)GetProcAddress(modOpenGL32, "glSpriteParameterfvSGIX"); }
		if(!obj->methodp_glSpriteParameterfvSGIX) { args.This()->Set(v8::String::NewSymbol("glSpriteParameterfvSGIX"), v8::Undefined()); }
		if(!obj->methodp_glSpriteParameteriSGIX) { obj->methodp_glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC)wglGetProcAddress("glSpriteParameteriSGIX"); }
		if(!obj->methodp_glSpriteParameteriSGIX) { obj->methodp_glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC)GetProcAddress(modOpenGL32, "glSpriteParameteriSGIX"); }
		if(!obj->methodp_glSpriteParameteriSGIX) { args.This()->Set(v8::String::NewSymbol("glSpriteParameteriSGIX"), v8::Undefined()); }
		if(!obj->methodp_glSpriteParameterivSGIX) { obj->methodp_glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC)wglGetProcAddress("glSpriteParameterivSGIX"); }
		if(!obj->methodp_glSpriteParameterivSGIX) { obj->methodp_glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC)GetProcAddress(modOpenGL32, "glSpriteParameterivSGIX"); }
		if(!obj->methodp_glSpriteParameterivSGIX) { args.This()->Set(v8::String::NewSymbol("glSpriteParameterivSGIX"), v8::Undefined()); }
		if(!obj->methodp_glStartInstrumentsSGIX) { obj->methodp_glStartInstrumentsSGIX = (PFNGLSTARTINSTRUMENTSSGIXPROC)wglGetProcAddress("glStartInstrumentsSGIX"); }
		if(!obj->methodp_glStartInstrumentsSGIX) { obj->methodp_glStartInstrumentsSGIX = (PFNGLSTARTINSTRUMENTSSGIXPROC)GetProcAddress(modOpenGL32, "glStartInstrumentsSGIX"); }
		if(!obj->methodp_glStartInstrumentsSGIX) { args.This()->Set(v8::String::NewSymbol("glStartInstrumentsSGIX"), v8::Undefined()); }
		if(!obj->methodp_glStartTilingQCOM) { obj->methodp_glStartTilingQCOM = (PFNGLSTARTTILINGQCOMPROC)wglGetProcAddress("glStartTilingQCOM"); }
		if(!obj->methodp_glStartTilingQCOM) { obj->methodp_glStartTilingQCOM = (PFNGLSTARTTILINGQCOMPROC)GetProcAddress(modOpenGL32, "glStartTilingQCOM"); }
		if(!obj->methodp_glStartTilingQCOM) { args.This()->Set(v8::String::NewSymbol("glStartTilingQCOM"), v8::Undefined()); }
		if(!obj->methodp_glStencilClearTagEXT) { obj->methodp_glStencilClearTagEXT = (PFNGLSTENCILCLEARTAGEXTPROC)wglGetProcAddress("glStencilClearTagEXT"); }
		if(!obj->methodp_glStencilClearTagEXT) { obj->methodp_glStencilClearTagEXT = (PFNGLSTENCILCLEARTAGEXTPROC)GetProcAddress(modOpenGL32, "glStencilClearTagEXT"); }
		if(!obj->methodp_glStencilClearTagEXT) { args.This()->Set(v8::String::NewSymbol("glStencilClearTagEXT"), v8::Undefined()); }
		if(!obj->methodp_glStencilFillPathInstancedNV) { obj->methodp_glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC)wglGetProcAddress("glStencilFillPathInstancedNV"); }
		if(!obj->methodp_glStencilFillPathInstancedNV) { obj->methodp_glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC)GetProcAddress(modOpenGL32, "glStencilFillPathInstancedNV"); }
		if(!obj->methodp_glStencilFillPathInstancedNV) { args.This()->Set(v8::String::NewSymbol("glStencilFillPathInstancedNV"), v8::Undefined()); }
		if(!obj->methodp_glStencilFillPathNV) { obj->methodp_glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC)wglGetProcAddress("glStencilFillPathNV"); }
		if(!obj->methodp_glStencilFillPathNV) { obj->methodp_glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC)GetProcAddress(modOpenGL32, "glStencilFillPathNV"); }
		if(!obj->methodp_glStencilFillPathNV) { args.This()->Set(v8::String::NewSymbol("glStencilFillPathNV"), v8::Undefined()); }
		if(!obj->methodp_glStencilFunc) { obj->methodp_glStencilFunc = (PFNGLSTENCILFUNCPROC)wglGetProcAddress("glStencilFunc"); }
		if(!obj->methodp_glStencilFunc) { obj->methodp_glStencilFunc = (PFNGLSTENCILFUNCPROC)GetProcAddress(modOpenGL32, "glStencilFunc"); }
		if(!obj->methodp_glStencilFunc) { args.This()->Set(v8::String::NewSymbol("glStencilFunc"), v8::Undefined()); }
		if(!obj->methodp_glStencilFuncSeparate) { obj->methodp_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)wglGetProcAddress("glStencilFuncSeparate"); }
		if(!obj->methodp_glStencilFuncSeparate) { obj->methodp_glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)GetProcAddress(modOpenGL32, "glStencilFuncSeparate"); }
		if(!obj->methodp_glStencilFuncSeparate) { args.This()->Set(v8::String::NewSymbol("glStencilFuncSeparate"), v8::Undefined()); }
		if(!obj->methodp_glStencilFuncSeparateATI) { obj->methodp_glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC)wglGetProcAddress("glStencilFuncSeparateATI"); }
		if(!obj->methodp_glStencilFuncSeparateATI) { obj->methodp_glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC)GetProcAddress(modOpenGL32, "glStencilFuncSeparateATI"); }
		if(!obj->methodp_glStencilFuncSeparateATI) { args.This()->Set(v8::String::NewSymbol("glStencilFuncSeparateATI"), v8::Undefined()); }
		if(!obj->methodp_glStencilMask) { obj->methodp_glStencilMask = (PFNGLSTENCILMASKPROC)wglGetProcAddress("glStencilMask"); }
		if(!obj->methodp_glStencilMask) { obj->methodp_glStencilMask = (PFNGLSTENCILMASKPROC)GetProcAddress(modOpenGL32, "glStencilMask"); }
		if(!obj->methodp_glStencilMask) { args.This()->Set(v8::String::NewSymbol("glStencilMask"), v8::Undefined()); }
		if(!obj->methodp_glStencilMaskSeparate) { obj->methodp_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)wglGetProcAddress("glStencilMaskSeparate"); }
		if(!obj->methodp_glStencilMaskSeparate) { obj->methodp_glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)GetProcAddress(modOpenGL32, "glStencilMaskSeparate"); }
		if(!obj->methodp_glStencilMaskSeparate) { args.This()->Set(v8::String::NewSymbol("glStencilMaskSeparate"), v8::Undefined()); }
		if(!obj->methodp_glStencilOp) { obj->methodp_glStencilOp = (PFNGLSTENCILOPPROC)wglGetProcAddress("glStencilOp"); }
		if(!obj->methodp_glStencilOp) { obj->methodp_glStencilOp = (PFNGLSTENCILOPPROC)GetProcAddress(modOpenGL32, "glStencilOp"); }
		if(!obj->methodp_glStencilOp) { args.This()->Set(v8::String::NewSymbol("glStencilOp"), v8::Undefined()); }
		if(!obj->methodp_glStencilOpSeparate) { obj->methodp_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)wglGetProcAddress("glStencilOpSeparate"); }
		if(!obj->methodp_glStencilOpSeparate) { obj->methodp_glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)GetProcAddress(modOpenGL32, "glStencilOpSeparate"); }
		if(!obj->methodp_glStencilOpSeparate) { args.This()->Set(v8::String::NewSymbol("glStencilOpSeparate"), v8::Undefined()); }
		if(!obj->methodp_glStencilOpSeparateATI) { obj->methodp_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)wglGetProcAddress("glStencilOpSeparateATI"); }
		if(!obj->methodp_glStencilOpSeparateATI) { obj->methodp_glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)GetProcAddress(modOpenGL32, "glStencilOpSeparateATI"); }
		if(!obj->methodp_glStencilOpSeparateATI) { args.This()->Set(v8::String::NewSymbol("glStencilOpSeparateATI"), v8::Undefined()); }
		if(!obj->methodp_glStencilOpValueAMD) { obj->methodp_glStencilOpValueAMD = (PFNGLSTENCILOPVALUEAMDPROC)wglGetProcAddress("glStencilOpValueAMD"); }
		if(!obj->methodp_glStencilOpValueAMD) { obj->methodp_glStencilOpValueAMD = (PFNGLSTENCILOPVALUEAMDPROC)GetProcAddress(modOpenGL32, "glStencilOpValueAMD"); }
		if(!obj->methodp_glStencilOpValueAMD) { args.This()->Set(v8::String::NewSymbol("glStencilOpValueAMD"), v8::Undefined()); }
		if(!obj->methodp_glStencilStrokePathInstancedNV) { obj->methodp_glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)wglGetProcAddress("glStencilStrokePathInstancedNV"); }
		if(!obj->methodp_glStencilStrokePathInstancedNV) { obj->methodp_glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)GetProcAddress(modOpenGL32, "glStencilStrokePathInstancedNV"); }
		if(!obj->methodp_glStencilStrokePathInstancedNV) { args.This()->Set(v8::String::NewSymbol("glStencilStrokePathInstancedNV"), v8::Undefined()); }
		if(!obj->methodp_glStencilStrokePathNV) { obj->methodp_glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC)wglGetProcAddress("glStencilStrokePathNV"); }
		if(!obj->methodp_glStencilStrokePathNV) { obj->methodp_glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC)GetProcAddress(modOpenGL32, "glStencilStrokePathNV"); }
		if(!obj->methodp_glStencilStrokePathNV) { args.This()->Set(v8::String::NewSymbol("glStencilStrokePathNV"), v8::Undefined()); }
		if(!obj->methodp_glStopInstrumentsSGIX) { obj->methodp_glStopInstrumentsSGIX = (PFNGLSTOPINSTRUMENTSSGIXPROC)wglGetProcAddress("glStopInstrumentsSGIX"); }
		if(!obj->methodp_glStopInstrumentsSGIX) { obj->methodp_glStopInstrumentsSGIX = (PFNGLSTOPINSTRUMENTSSGIXPROC)GetProcAddress(modOpenGL32, "glStopInstrumentsSGIX"); }
		if(!obj->methodp_glStopInstrumentsSGIX) { args.This()->Set(v8::String::NewSymbol("glStopInstrumentsSGIX"), v8::Undefined()); }
		if(!obj->methodp_glStringMarkerGREMEDY) { obj->methodp_glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC)wglGetProcAddress("glStringMarkerGREMEDY"); }
		if(!obj->methodp_glStringMarkerGREMEDY) { obj->methodp_glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC)GetProcAddress(modOpenGL32, "glStringMarkerGREMEDY"); }
		if(!obj->methodp_glStringMarkerGREMEDY) { args.This()->Set(v8::String::NewSymbol("glStringMarkerGREMEDY"), v8::Undefined()); }
		if(!obj->methodp_glSwizzleEXT) { obj->methodp_glSwizzleEXT = (PFNGLSWIZZLEEXTPROC)wglGetProcAddress("glSwizzleEXT"); }
		if(!obj->methodp_glSwizzleEXT) { obj->methodp_glSwizzleEXT = (PFNGLSWIZZLEEXTPROC)GetProcAddress(modOpenGL32, "glSwizzleEXT"); }
		if(!obj->methodp_glSwizzleEXT) { args.This()->Set(v8::String::NewSymbol("glSwizzleEXT"), v8::Undefined()); }
		if(!obj->methodp_glSyncTextureINTEL) { obj->methodp_glSyncTextureINTEL = (PFNGLSYNCTEXTUREINTELPROC)wglGetProcAddress("glSyncTextureINTEL"); }
		if(!obj->methodp_glSyncTextureINTEL) { obj->methodp_glSyncTextureINTEL = (PFNGLSYNCTEXTUREINTELPROC)GetProcAddress(modOpenGL32, "glSyncTextureINTEL"); }
		if(!obj->methodp_glSyncTextureINTEL) { args.This()->Set(v8::String::NewSymbol("glSyncTextureINTEL"), v8::Undefined()); }
		if(!obj->methodp_glTagSampleBufferSGIX) { obj->methodp_glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC)wglGetProcAddress("glTagSampleBufferSGIX"); }
		if(!obj->methodp_glTagSampleBufferSGIX) { obj->methodp_glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC)GetProcAddress(modOpenGL32, "glTagSampleBufferSGIX"); }
		if(!obj->methodp_glTagSampleBufferSGIX) { args.This()->Set(v8::String::NewSymbol("glTagSampleBufferSGIX"), v8::Undefined()); }
		if(!obj->methodp_glTangent3bEXT) { obj->methodp_glTangent3bEXT = (PFNGLTANGENT3BEXTPROC)wglGetProcAddress("glTangent3bEXT"); }
		if(!obj->methodp_glTangent3bEXT) { obj->methodp_glTangent3bEXT = (PFNGLTANGENT3BEXTPROC)GetProcAddress(modOpenGL32, "glTangent3bEXT"); }
		if(!obj->methodp_glTangent3bEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3bEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3bvEXT) { obj->methodp_glTangent3bvEXT = (PFNGLTANGENT3BVEXTPROC)wglGetProcAddress("glTangent3bvEXT"); }
		if(!obj->methodp_glTangent3bvEXT) { obj->methodp_glTangent3bvEXT = (PFNGLTANGENT3BVEXTPROC)GetProcAddress(modOpenGL32, "glTangent3bvEXT"); }
		if(!obj->methodp_glTangent3bvEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3bvEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3dEXT) { obj->methodp_glTangent3dEXT = (PFNGLTANGENT3DEXTPROC)wglGetProcAddress("glTangent3dEXT"); }
		if(!obj->methodp_glTangent3dEXT) { obj->methodp_glTangent3dEXT = (PFNGLTANGENT3DEXTPROC)GetProcAddress(modOpenGL32, "glTangent3dEXT"); }
		if(!obj->methodp_glTangent3dEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3dEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3dvEXT) { obj->methodp_glTangent3dvEXT = (PFNGLTANGENT3DVEXTPROC)wglGetProcAddress("glTangent3dvEXT"); }
		if(!obj->methodp_glTangent3dvEXT) { obj->methodp_glTangent3dvEXT = (PFNGLTANGENT3DVEXTPROC)GetProcAddress(modOpenGL32, "glTangent3dvEXT"); }
		if(!obj->methodp_glTangent3dvEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3fEXT) { obj->methodp_glTangent3fEXT = (PFNGLTANGENT3FEXTPROC)wglGetProcAddress("glTangent3fEXT"); }
		if(!obj->methodp_glTangent3fEXT) { obj->methodp_glTangent3fEXT = (PFNGLTANGENT3FEXTPROC)GetProcAddress(modOpenGL32, "glTangent3fEXT"); }
		if(!obj->methodp_glTangent3fEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3fEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3fvEXT) { obj->methodp_glTangent3fvEXT = (PFNGLTANGENT3FVEXTPROC)wglGetProcAddress("glTangent3fvEXT"); }
		if(!obj->methodp_glTangent3fvEXT) { obj->methodp_glTangent3fvEXT = (PFNGLTANGENT3FVEXTPROC)GetProcAddress(modOpenGL32, "glTangent3fvEXT"); }
		if(!obj->methodp_glTangent3fvEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3fvEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3iEXT) { obj->methodp_glTangent3iEXT = (PFNGLTANGENT3IEXTPROC)wglGetProcAddress("glTangent3iEXT"); }
		if(!obj->methodp_glTangent3iEXT) { obj->methodp_glTangent3iEXT = (PFNGLTANGENT3IEXTPROC)GetProcAddress(modOpenGL32, "glTangent3iEXT"); }
		if(!obj->methodp_glTangent3iEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3iEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3ivEXT) { obj->methodp_glTangent3ivEXT = (PFNGLTANGENT3IVEXTPROC)wglGetProcAddress("glTangent3ivEXT"); }
		if(!obj->methodp_glTangent3ivEXT) { obj->methodp_glTangent3ivEXT = (PFNGLTANGENT3IVEXTPROC)GetProcAddress(modOpenGL32, "glTangent3ivEXT"); }
		if(!obj->methodp_glTangent3ivEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3sEXT) { obj->methodp_glTangent3sEXT = (PFNGLTANGENT3SEXTPROC)wglGetProcAddress("glTangent3sEXT"); }
		if(!obj->methodp_glTangent3sEXT) { obj->methodp_glTangent3sEXT = (PFNGLTANGENT3SEXTPROC)GetProcAddress(modOpenGL32, "glTangent3sEXT"); }
		if(!obj->methodp_glTangent3sEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3sEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangent3svEXT) { obj->methodp_glTangent3svEXT = (PFNGLTANGENT3SVEXTPROC)wglGetProcAddress("glTangent3svEXT"); }
		if(!obj->methodp_glTangent3svEXT) { obj->methodp_glTangent3svEXT = (PFNGLTANGENT3SVEXTPROC)GetProcAddress(modOpenGL32, "glTangent3svEXT"); }
		if(!obj->methodp_glTangent3svEXT) { args.This()->Set(v8::String::NewSymbol("glTangent3svEXT"), v8::Undefined()); }
		if(!obj->methodp_glTangentPointerEXT) { obj->methodp_glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC)wglGetProcAddress("glTangentPointerEXT"); }
		if(!obj->methodp_glTangentPointerEXT) { obj->methodp_glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glTangentPointerEXT"); }
		if(!obj->methodp_glTangentPointerEXT) { args.This()->Set(v8::String::NewSymbol("glTangentPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glTbufferMask3DFX) { obj->methodp_glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC)wglGetProcAddress("glTbufferMask3DFX"); }
		if(!obj->methodp_glTbufferMask3DFX) { obj->methodp_glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC)GetProcAddress(modOpenGL32, "glTbufferMask3DFX"); }
		if(!obj->methodp_glTbufferMask3DFX) { args.This()->Set(v8::String::NewSymbol("glTbufferMask3DFX"), v8::Undefined()); }
		if(!obj->methodp_glTessellationFactorAMD) { obj->methodp_glTessellationFactorAMD = (PFNGLTESSELLATIONFACTORAMDPROC)wglGetProcAddress("glTessellationFactorAMD"); }
		if(!obj->methodp_glTessellationFactorAMD) { obj->methodp_glTessellationFactorAMD = (PFNGLTESSELLATIONFACTORAMDPROC)GetProcAddress(modOpenGL32, "glTessellationFactorAMD"); }
		if(!obj->methodp_glTessellationFactorAMD) { args.This()->Set(v8::String::NewSymbol("glTessellationFactorAMD"), v8::Undefined()); }
		if(!obj->methodp_glTessellationModeAMD) { obj->methodp_glTessellationModeAMD = (PFNGLTESSELLATIONMODEAMDPROC)wglGetProcAddress("glTessellationModeAMD"); }
		if(!obj->methodp_glTessellationModeAMD) { obj->methodp_glTessellationModeAMD = (PFNGLTESSELLATIONMODEAMDPROC)GetProcAddress(modOpenGL32, "glTessellationModeAMD"); }
		if(!obj->methodp_glTessellationModeAMD) { args.This()->Set(v8::String::NewSymbol("glTessellationModeAMD"), v8::Undefined()); }
		if(!obj->methodp_glTestFenceAPPLE) { obj->methodp_glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC)wglGetProcAddress("glTestFenceAPPLE"); }
		if(!obj->methodp_glTestFenceAPPLE) { obj->methodp_glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC)GetProcAddress(modOpenGL32, "glTestFenceAPPLE"); }
		if(!obj->methodp_glTestFenceAPPLE) { args.This()->Set(v8::String::NewSymbol("glTestFenceAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glTestFenceNV) { obj->methodp_glTestFenceNV = (PFNGLTESTFENCENVPROC)wglGetProcAddress("glTestFenceNV"); }
		if(!obj->methodp_glTestFenceNV) { obj->methodp_glTestFenceNV = (PFNGLTESTFENCENVPROC)GetProcAddress(modOpenGL32, "glTestFenceNV"); }
		if(!obj->methodp_glTestFenceNV) { args.This()->Set(v8::String::NewSymbol("glTestFenceNV"), v8::Undefined()); }
		if(!obj->methodp_glTestObjectAPPLE) { obj->methodp_glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC)wglGetProcAddress("glTestObjectAPPLE"); }
		if(!obj->methodp_glTestObjectAPPLE) { obj->methodp_glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC)GetProcAddress(modOpenGL32, "glTestObjectAPPLE"); }
		if(!obj->methodp_glTestObjectAPPLE) { args.This()->Set(v8::String::NewSymbol("glTestObjectAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glTexBuffer) { obj->methodp_glTexBuffer = (PFNGLTEXBUFFERPROC)wglGetProcAddress("glTexBuffer"); }
		if(!obj->methodp_glTexBuffer) { obj->methodp_glTexBuffer = (PFNGLTEXBUFFERPROC)GetProcAddress(modOpenGL32, "glTexBuffer"); }
		if(!obj->methodp_glTexBuffer) { args.This()->Set(v8::String::NewSymbol("glTexBuffer"), v8::Undefined()); }
		if(!obj->methodp_glTexBufferARB) { obj->methodp_glTexBufferARB = (PFNGLTEXBUFFERARBPROC)wglGetProcAddress("glTexBufferARB"); }
		if(!obj->methodp_glTexBufferARB) { obj->methodp_glTexBufferARB = (PFNGLTEXBUFFERARBPROC)GetProcAddress(modOpenGL32, "glTexBufferARB"); }
		if(!obj->methodp_glTexBufferARB) { args.This()->Set(v8::String::NewSymbol("glTexBufferARB"), v8::Undefined()); }
		if(!obj->methodp_glTexBufferEXT) { obj->methodp_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)wglGetProcAddress("glTexBufferEXT"); }
		if(!obj->methodp_glTexBufferEXT) { obj->methodp_glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glTexBufferEXT"); }
		if(!obj->methodp_glTexBufferEXT) { args.This()->Set(v8::String::NewSymbol("glTexBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexBufferRange) { obj->methodp_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)wglGetProcAddress("glTexBufferRange"); }
		if(!obj->methodp_glTexBufferRange) { obj->methodp_glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)GetProcAddress(modOpenGL32, "glTexBufferRange"); }
		if(!obj->methodp_glTexBufferRange) { args.This()->Set(v8::String::NewSymbol("glTexBufferRange"), v8::Undefined()); }
		if(!obj->methodp_glTexBufferRangeEXT) { obj->methodp_glTexBufferRangeEXT = (PFNGLTEXBUFFERRANGEEXTPROC)wglGetProcAddress("glTexBufferRangeEXT"); }
		if(!obj->methodp_glTexBufferRangeEXT) { obj->methodp_glTexBufferRangeEXT = (PFNGLTEXBUFFERRANGEEXTPROC)GetProcAddress(modOpenGL32, "glTexBufferRangeEXT"); }
		if(!obj->methodp_glTexBufferRangeEXT) { args.This()->Set(v8::String::NewSymbol("glTexBufferRangeEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexBumpParameterfvATI) { obj->methodp_glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC)wglGetProcAddress("glTexBumpParameterfvATI"); }
		if(!obj->methodp_glTexBumpParameterfvATI) { obj->methodp_glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC)GetProcAddress(modOpenGL32, "glTexBumpParameterfvATI"); }
		if(!obj->methodp_glTexBumpParameterfvATI) { args.This()->Set(v8::String::NewSymbol("glTexBumpParameterfvATI"), v8::Undefined()); }
		if(!obj->methodp_glTexBumpParameterivATI) { obj->methodp_glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC)wglGetProcAddress("glTexBumpParameterivATI"); }
		if(!obj->methodp_glTexBumpParameterivATI) { obj->methodp_glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC)GetProcAddress(modOpenGL32, "glTexBumpParameterivATI"); }
		if(!obj->methodp_glTexBumpParameterivATI) { args.This()->Set(v8::String::NewSymbol("glTexBumpParameterivATI"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1bOES) { obj->methodp_glTexCoord1bOES = (PFNGLTEXCOORD1BOESPROC)wglGetProcAddress("glTexCoord1bOES"); }
		if(!obj->methodp_glTexCoord1bOES) { obj->methodp_glTexCoord1bOES = (PFNGLTEXCOORD1BOESPROC)GetProcAddress(modOpenGL32, "glTexCoord1bOES"); }
		if(!obj->methodp_glTexCoord1bOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord1bOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1bvOES) { obj->methodp_glTexCoord1bvOES = (PFNGLTEXCOORD1BVOESPROC)wglGetProcAddress("glTexCoord1bvOES"); }
		if(!obj->methodp_glTexCoord1bvOES) { obj->methodp_glTexCoord1bvOES = (PFNGLTEXCOORD1BVOESPROC)GetProcAddress(modOpenGL32, "glTexCoord1bvOES"); }
		if(!obj->methodp_glTexCoord1bvOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord1bvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1d) { obj->methodp_glTexCoord1d = (PFNGLTEXCOORD1DPROC)wglGetProcAddress("glTexCoord1d"); }
		if(!obj->methodp_glTexCoord1d) { obj->methodp_glTexCoord1d = (PFNGLTEXCOORD1DPROC)GetProcAddress(modOpenGL32, "glTexCoord1d"); }
		if(!obj->methodp_glTexCoord1d) { args.This()->Set(v8::String::NewSymbol("glTexCoord1d"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1dv) { obj->methodp_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC)wglGetProcAddress("glTexCoord1dv"); }
		if(!obj->methodp_glTexCoord1dv) { obj->methodp_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC)GetProcAddress(modOpenGL32, "glTexCoord1dv"); }
		if(!obj->methodp_glTexCoord1dv) { args.This()->Set(v8::String::NewSymbol("glTexCoord1dv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1f) { obj->methodp_glTexCoord1f = (PFNGLTEXCOORD1FPROC)wglGetProcAddress("glTexCoord1f"); }
		if(!obj->methodp_glTexCoord1f) { obj->methodp_glTexCoord1f = (PFNGLTEXCOORD1FPROC)GetProcAddress(modOpenGL32, "glTexCoord1f"); }
		if(!obj->methodp_glTexCoord1f) { args.This()->Set(v8::String::NewSymbol("glTexCoord1f"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1fv) { obj->methodp_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC)wglGetProcAddress("glTexCoord1fv"); }
		if(!obj->methodp_glTexCoord1fv) { obj->methodp_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC)GetProcAddress(modOpenGL32, "glTexCoord1fv"); }
		if(!obj->methodp_glTexCoord1fv) { args.This()->Set(v8::String::NewSymbol("glTexCoord1fv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1hNV) { obj->methodp_glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC)wglGetProcAddress("glTexCoord1hNV"); }
		if(!obj->methodp_glTexCoord1hNV) { obj->methodp_glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC)GetProcAddress(modOpenGL32, "glTexCoord1hNV"); }
		if(!obj->methodp_glTexCoord1hNV) { args.This()->Set(v8::String::NewSymbol("glTexCoord1hNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1hvNV) { obj->methodp_glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC)wglGetProcAddress("glTexCoord1hvNV"); }
		if(!obj->methodp_glTexCoord1hvNV) { obj->methodp_glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC)GetProcAddress(modOpenGL32, "glTexCoord1hvNV"); }
		if(!obj->methodp_glTexCoord1hvNV) { args.This()->Set(v8::String::NewSymbol("glTexCoord1hvNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1i) { obj->methodp_glTexCoord1i = (PFNGLTEXCOORD1IPROC)wglGetProcAddress("glTexCoord1i"); }
		if(!obj->methodp_glTexCoord1i) { obj->methodp_glTexCoord1i = (PFNGLTEXCOORD1IPROC)GetProcAddress(modOpenGL32, "glTexCoord1i"); }
		if(!obj->methodp_glTexCoord1i) { args.This()->Set(v8::String::NewSymbol("glTexCoord1i"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1iv) { obj->methodp_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC)wglGetProcAddress("glTexCoord1iv"); }
		if(!obj->methodp_glTexCoord1iv) { obj->methodp_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC)GetProcAddress(modOpenGL32, "glTexCoord1iv"); }
		if(!obj->methodp_glTexCoord1iv) { args.This()->Set(v8::String::NewSymbol("glTexCoord1iv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1s) { obj->methodp_glTexCoord1s = (PFNGLTEXCOORD1SPROC)wglGetProcAddress("glTexCoord1s"); }
		if(!obj->methodp_glTexCoord1s) { obj->methodp_glTexCoord1s = (PFNGLTEXCOORD1SPROC)GetProcAddress(modOpenGL32, "glTexCoord1s"); }
		if(!obj->methodp_glTexCoord1s) { args.This()->Set(v8::String::NewSymbol("glTexCoord1s"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1sv) { obj->methodp_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC)wglGetProcAddress("glTexCoord1sv"); }
		if(!obj->methodp_glTexCoord1sv) { obj->methodp_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC)GetProcAddress(modOpenGL32, "glTexCoord1sv"); }
		if(!obj->methodp_glTexCoord1sv) { args.This()->Set(v8::String::NewSymbol("glTexCoord1sv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1xOES) { obj->methodp_glTexCoord1xOES = (PFNGLTEXCOORD1XOESPROC)wglGetProcAddress("glTexCoord1xOES"); }
		if(!obj->methodp_glTexCoord1xOES) { obj->methodp_glTexCoord1xOES = (PFNGLTEXCOORD1XOESPROC)GetProcAddress(modOpenGL32, "glTexCoord1xOES"); }
		if(!obj->methodp_glTexCoord1xOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord1xOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord1xvOES) { obj->methodp_glTexCoord1xvOES = (PFNGLTEXCOORD1XVOESPROC)wglGetProcAddress("glTexCoord1xvOES"); }
		if(!obj->methodp_glTexCoord1xvOES) { obj->methodp_glTexCoord1xvOES = (PFNGLTEXCOORD1XVOESPROC)GetProcAddress(modOpenGL32, "glTexCoord1xvOES"); }
		if(!obj->methodp_glTexCoord1xvOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord1xvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2bOES) { obj->methodp_glTexCoord2bOES = (PFNGLTEXCOORD2BOESPROC)wglGetProcAddress("glTexCoord2bOES"); }
		if(!obj->methodp_glTexCoord2bOES) { obj->methodp_glTexCoord2bOES = (PFNGLTEXCOORD2BOESPROC)GetProcAddress(modOpenGL32, "glTexCoord2bOES"); }
		if(!obj->methodp_glTexCoord2bOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord2bOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2bvOES) { obj->methodp_glTexCoord2bvOES = (PFNGLTEXCOORD2BVOESPROC)wglGetProcAddress("glTexCoord2bvOES"); }
		if(!obj->methodp_glTexCoord2bvOES) { obj->methodp_glTexCoord2bvOES = (PFNGLTEXCOORD2BVOESPROC)GetProcAddress(modOpenGL32, "glTexCoord2bvOES"); }
		if(!obj->methodp_glTexCoord2bvOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord2bvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2d) { obj->methodp_glTexCoord2d = (PFNGLTEXCOORD2DPROC)wglGetProcAddress("glTexCoord2d"); }
		if(!obj->methodp_glTexCoord2d) { obj->methodp_glTexCoord2d = (PFNGLTEXCOORD2DPROC)GetProcAddress(modOpenGL32, "glTexCoord2d"); }
		if(!obj->methodp_glTexCoord2d) { args.This()->Set(v8::String::NewSymbol("glTexCoord2d"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2dv) { obj->methodp_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC)wglGetProcAddress("glTexCoord2dv"); }
		if(!obj->methodp_glTexCoord2dv) { obj->methodp_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC)GetProcAddress(modOpenGL32, "glTexCoord2dv"); }
		if(!obj->methodp_glTexCoord2dv) { args.This()->Set(v8::String::NewSymbol("glTexCoord2dv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2f) { obj->methodp_glTexCoord2f = (PFNGLTEXCOORD2FPROC)wglGetProcAddress("glTexCoord2f"); }
		if(!obj->methodp_glTexCoord2f) { obj->methodp_glTexCoord2f = (PFNGLTEXCOORD2FPROC)GetProcAddress(modOpenGL32, "glTexCoord2f"); }
		if(!obj->methodp_glTexCoord2f) { args.This()->Set(v8::String::NewSymbol("glTexCoord2f"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fColor3fVertex3fSUN) { obj->methodp_glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)wglGetProcAddress("glTexCoord2fColor3fVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fColor3fVertex3fSUN) { obj->methodp_glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fColor3fVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fColor3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fColor3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fColor3fVertex3fvSUN) { obj->methodp_glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)wglGetProcAddress("glTexCoord2fColor3fVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fColor3fVertex3fvSUN) { obj->methodp_glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fColor3fVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fColor3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fColor3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fColor4fNormal3fVertex3fSUN) { obj->methodp_glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)wglGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fColor4fNormal3fVertex3fSUN) { obj->methodp_glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fColor4fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fColor4fNormal3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fColor4fNormal3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fColor4fNormal3fVertex3fvSUN) { obj->methodp_glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)wglGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fColor4fNormal3fVertex3fvSUN) { obj->methodp_glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fColor4fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fColor4fNormal3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fColor4fNormal3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fColor4ubVertex3fSUN) { obj->methodp_glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)wglGetProcAddress("glTexCoord2fColor4ubVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fColor4ubVertex3fSUN) { obj->methodp_glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fColor4ubVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fColor4ubVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fColor4ubVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fColor4ubVertex3fvSUN) { obj->methodp_glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)wglGetProcAddress("glTexCoord2fColor4ubVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fColor4ubVertex3fvSUN) { obj->methodp_glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fColor4ubVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fColor4ubVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fColor4ubVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fNormal3fVertex3fSUN) { obj->methodp_glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)wglGetProcAddress("glTexCoord2fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fNormal3fVertex3fSUN) { obj->methodp_glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fNormal3fVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fNormal3fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fNormal3fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fNormal3fVertex3fvSUN) { obj->methodp_glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)wglGetProcAddress("glTexCoord2fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fNormal3fVertex3fvSUN) { obj->methodp_glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fNormal3fVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fNormal3fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fNormal3fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fVertex3fSUN) { obj->methodp_glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)wglGetProcAddress("glTexCoord2fVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fVertex3fSUN) { obj->methodp_glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fVertex3fSUN"); }
		if(!obj->methodp_glTexCoord2fVertex3fSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fVertex3fSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fVertex3fvSUN) { obj->methodp_glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)wglGetProcAddress("glTexCoord2fVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fVertex3fvSUN) { obj->methodp_glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord2fVertex3fvSUN"); }
		if(!obj->methodp_glTexCoord2fVertex3fvSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fVertex3fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2fv) { obj->methodp_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC)wglGetProcAddress("glTexCoord2fv"); }
		if(!obj->methodp_glTexCoord2fv) { obj->methodp_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC)GetProcAddress(modOpenGL32, "glTexCoord2fv"); }
		if(!obj->methodp_glTexCoord2fv) { args.This()->Set(v8::String::NewSymbol("glTexCoord2fv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2hNV) { obj->methodp_glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC)wglGetProcAddress("glTexCoord2hNV"); }
		if(!obj->methodp_glTexCoord2hNV) { obj->methodp_glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC)GetProcAddress(modOpenGL32, "glTexCoord2hNV"); }
		if(!obj->methodp_glTexCoord2hNV) { args.This()->Set(v8::String::NewSymbol("glTexCoord2hNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2hvNV) { obj->methodp_glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC)wglGetProcAddress("glTexCoord2hvNV"); }
		if(!obj->methodp_glTexCoord2hvNV) { obj->methodp_glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC)GetProcAddress(modOpenGL32, "glTexCoord2hvNV"); }
		if(!obj->methodp_glTexCoord2hvNV) { args.This()->Set(v8::String::NewSymbol("glTexCoord2hvNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2i) { obj->methodp_glTexCoord2i = (PFNGLTEXCOORD2IPROC)wglGetProcAddress("glTexCoord2i"); }
		if(!obj->methodp_glTexCoord2i) { obj->methodp_glTexCoord2i = (PFNGLTEXCOORD2IPROC)GetProcAddress(modOpenGL32, "glTexCoord2i"); }
		if(!obj->methodp_glTexCoord2i) { args.This()->Set(v8::String::NewSymbol("glTexCoord2i"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2iv) { obj->methodp_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC)wglGetProcAddress("glTexCoord2iv"); }
		if(!obj->methodp_glTexCoord2iv) { obj->methodp_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC)GetProcAddress(modOpenGL32, "glTexCoord2iv"); }
		if(!obj->methodp_glTexCoord2iv) { args.This()->Set(v8::String::NewSymbol("glTexCoord2iv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2s) { obj->methodp_glTexCoord2s = (PFNGLTEXCOORD2SPROC)wglGetProcAddress("glTexCoord2s"); }
		if(!obj->methodp_glTexCoord2s) { obj->methodp_glTexCoord2s = (PFNGLTEXCOORD2SPROC)GetProcAddress(modOpenGL32, "glTexCoord2s"); }
		if(!obj->methodp_glTexCoord2s) { args.This()->Set(v8::String::NewSymbol("glTexCoord2s"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2sv) { obj->methodp_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC)wglGetProcAddress("glTexCoord2sv"); }
		if(!obj->methodp_glTexCoord2sv) { obj->methodp_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC)GetProcAddress(modOpenGL32, "glTexCoord2sv"); }
		if(!obj->methodp_glTexCoord2sv) { args.This()->Set(v8::String::NewSymbol("glTexCoord2sv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2xOES) { obj->methodp_glTexCoord2xOES = (PFNGLTEXCOORD2XOESPROC)wglGetProcAddress("glTexCoord2xOES"); }
		if(!obj->methodp_glTexCoord2xOES) { obj->methodp_glTexCoord2xOES = (PFNGLTEXCOORD2XOESPROC)GetProcAddress(modOpenGL32, "glTexCoord2xOES"); }
		if(!obj->methodp_glTexCoord2xOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord2xOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord2xvOES) { obj->methodp_glTexCoord2xvOES = (PFNGLTEXCOORD2XVOESPROC)wglGetProcAddress("glTexCoord2xvOES"); }
		if(!obj->methodp_glTexCoord2xvOES) { obj->methodp_glTexCoord2xvOES = (PFNGLTEXCOORD2XVOESPROC)GetProcAddress(modOpenGL32, "glTexCoord2xvOES"); }
		if(!obj->methodp_glTexCoord2xvOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord2xvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3bOES) { obj->methodp_glTexCoord3bOES = (PFNGLTEXCOORD3BOESPROC)wglGetProcAddress("glTexCoord3bOES"); }
		if(!obj->methodp_glTexCoord3bOES) { obj->methodp_glTexCoord3bOES = (PFNGLTEXCOORD3BOESPROC)GetProcAddress(modOpenGL32, "glTexCoord3bOES"); }
		if(!obj->methodp_glTexCoord3bOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord3bOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3bvOES) { obj->methodp_glTexCoord3bvOES = (PFNGLTEXCOORD3BVOESPROC)wglGetProcAddress("glTexCoord3bvOES"); }
		if(!obj->methodp_glTexCoord3bvOES) { obj->methodp_glTexCoord3bvOES = (PFNGLTEXCOORD3BVOESPROC)GetProcAddress(modOpenGL32, "glTexCoord3bvOES"); }
		if(!obj->methodp_glTexCoord3bvOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord3bvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3d) { obj->methodp_glTexCoord3d = (PFNGLTEXCOORD3DPROC)wglGetProcAddress("glTexCoord3d"); }
		if(!obj->methodp_glTexCoord3d) { obj->methodp_glTexCoord3d = (PFNGLTEXCOORD3DPROC)GetProcAddress(modOpenGL32, "glTexCoord3d"); }
		if(!obj->methodp_glTexCoord3d) { args.This()->Set(v8::String::NewSymbol("glTexCoord3d"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3dv) { obj->methodp_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC)wglGetProcAddress("glTexCoord3dv"); }
		if(!obj->methodp_glTexCoord3dv) { obj->methodp_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC)GetProcAddress(modOpenGL32, "glTexCoord3dv"); }
		if(!obj->methodp_glTexCoord3dv) { args.This()->Set(v8::String::NewSymbol("glTexCoord3dv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3f) { obj->methodp_glTexCoord3f = (PFNGLTEXCOORD3FPROC)wglGetProcAddress("glTexCoord3f"); }
		if(!obj->methodp_glTexCoord3f) { obj->methodp_glTexCoord3f = (PFNGLTEXCOORD3FPROC)GetProcAddress(modOpenGL32, "glTexCoord3f"); }
		if(!obj->methodp_glTexCoord3f) { args.This()->Set(v8::String::NewSymbol("glTexCoord3f"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3fv) { obj->methodp_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC)wglGetProcAddress("glTexCoord3fv"); }
		if(!obj->methodp_glTexCoord3fv) { obj->methodp_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC)GetProcAddress(modOpenGL32, "glTexCoord3fv"); }
		if(!obj->methodp_glTexCoord3fv) { args.This()->Set(v8::String::NewSymbol("glTexCoord3fv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3hNV) { obj->methodp_glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC)wglGetProcAddress("glTexCoord3hNV"); }
		if(!obj->methodp_glTexCoord3hNV) { obj->methodp_glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC)GetProcAddress(modOpenGL32, "glTexCoord3hNV"); }
		if(!obj->methodp_glTexCoord3hNV) { args.This()->Set(v8::String::NewSymbol("glTexCoord3hNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3hvNV) { obj->methodp_glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC)wglGetProcAddress("glTexCoord3hvNV"); }
		if(!obj->methodp_glTexCoord3hvNV) { obj->methodp_glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC)GetProcAddress(modOpenGL32, "glTexCoord3hvNV"); }
		if(!obj->methodp_glTexCoord3hvNV) { args.This()->Set(v8::String::NewSymbol("glTexCoord3hvNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3i) { obj->methodp_glTexCoord3i = (PFNGLTEXCOORD3IPROC)wglGetProcAddress("glTexCoord3i"); }
		if(!obj->methodp_glTexCoord3i) { obj->methodp_glTexCoord3i = (PFNGLTEXCOORD3IPROC)GetProcAddress(modOpenGL32, "glTexCoord3i"); }
		if(!obj->methodp_glTexCoord3i) { args.This()->Set(v8::String::NewSymbol("glTexCoord3i"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3iv) { obj->methodp_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC)wglGetProcAddress("glTexCoord3iv"); }
		if(!obj->methodp_glTexCoord3iv) { obj->methodp_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC)GetProcAddress(modOpenGL32, "glTexCoord3iv"); }
		if(!obj->methodp_glTexCoord3iv) { args.This()->Set(v8::String::NewSymbol("glTexCoord3iv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3s) { obj->methodp_glTexCoord3s = (PFNGLTEXCOORD3SPROC)wglGetProcAddress("glTexCoord3s"); }
		if(!obj->methodp_glTexCoord3s) { obj->methodp_glTexCoord3s = (PFNGLTEXCOORD3SPROC)GetProcAddress(modOpenGL32, "glTexCoord3s"); }
		if(!obj->methodp_glTexCoord3s) { args.This()->Set(v8::String::NewSymbol("glTexCoord3s"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3sv) { obj->methodp_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC)wglGetProcAddress("glTexCoord3sv"); }
		if(!obj->methodp_glTexCoord3sv) { obj->methodp_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC)GetProcAddress(modOpenGL32, "glTexCoord3sv"); }
		if(!obj->methodp_glTexCoord3sv) { args.This()->Set(v8::String::NewSymbol("glTexCoord3sv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3xOES) { obj->methodp_glTexCoord3xOES = (PFNGLTEXCOORD3XOESPROC)wglGetProcAddress("glTexCoord3xOES"); }
		if(!obj->methodp_glTexCoord3xOES) { obj->methodp_glTexCoord3xOES = (PFNGLTEXCOORD3XOESPROC)GetProcAddress(modOpenGL32, "glTexCoord3xOES"); }
		if(!obj->methodp_glTexCoord3xOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord3xOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord3xvOES) { obj->methodp_glTexCoord3xvOES = (PFNGLTEXCOORD3XVOESPROC)wglGetProcAddress("glTexCoord3xvOES"); }
		if(!obj->methodp_glTexCoord3xvOES) { obj->methodp_glTexCoord3xvOES = (PFNGLTEXCOORD3XVOESPROC)GetProcAddress(modOpenGL32, "glTexCoord3xvOES"); }
		if(!obj->methodp_glTexCoord3xvOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord3xvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4bOES) { obj->methodp_glTexCoord4bOES = (PFNGLTEXCOORD4BOESPROC)wglGetProcAddress("glTexCoord4bOES"); }
		if(!obj->methodp_glTexCoord4bOES) { obj->methodp_glTexCoord4bOES = (PFNGLTEXCOORD4BOESPROC)GetProcAddress(modOpenGL32, "glTexCoord4bOES"); }
		if(!obj->methodp_glTexCoord4bOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord4bOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4bvOES) { obj->methodp_glTexCoord4bvOES = (PFNGLTEXCOORD4BVOESPROC)wglGetProcAddress("glTexCoord4bvOES"); }
		if(!obj->methodp_glTexCoord4bvOES) { obj->methodp_glTexCoord4bvOES = (PFNGLTEXCOORD4BVOESPROC)GetProcAddress(modOpenGL32, "glTexCoord4bvOES"); }
		if(!obj->methodp_glTexCoord4bvOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord4bvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4d) { obj->methodp_glTexCoord4d = (PFNGLTEXCOORD4DPROC)wglGetProcAddress("glTexCoord4d"); }
		if(!obj->methodp_glTexCoord4d) { obj->methodp_glTexCoord4d = (PFNGLTEXCOORD4DPROC)GetProcAddress(modOpenGL32, "glTexCoord4d"); }
		if(!obj->methodp_glTexCoord4d) { args.This()->Set(v8::String::NewSymbol("glTexCoord4d"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4dv) { obj->methodp_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC)wglGetProcAddress("glTexCoord4dv"); }
		if(!obj->methodp_glTexCoord4dv) { obj->methodp_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC)GetProcAddress(modOpenGL32, "glTexCoord4dv"); }
		if(!obj->methodp_glTexCoord4dv) { args.This()->Set(v8::String::NewSymbol("glTexCoord4dv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4f) { obj->methodp_glTexCoord4f = (PFNGLTEXCOORD4FPROC)wglGetProcAddress("glTexCoord4f"); }
		if(!obj->methodp_glTexCoord4f) { obj->methodp_glTexCoord4f = (PFNGLTEXCOORD4FPROC)GetProcAddress(modOpenGL32, "glTexCoord4f"); }
		if(!obj->methodp_glTexCoord4f) { args.This()->Set(v8::String::NewSymbol("glTexCoord4f"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4fColor4fNormal3fVertex4fSUN) { obj->methodp_glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)wglGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN"); }
		if(!obj->methodp_glTexCoord4fColor4fNormal3fVertex4fSUN) { obj->methodp_glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord4fColor4fNormal3fVertex4fSUN"); }
		if(!obj->methodp_glTexCoord4fColor4fNormal3fVertex4fSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord4fColor4fNormal3fVertex4fSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4fColor4fNormal3fVertex4fvSUN) { obj->methodp_glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)wglGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN"); }
		if(!obj->methodp_glTexCoord4fColor4fNormal3fVertex4fvSUN) { obj->methodp_glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord4fColor4fNormal3fVertex4fvSUN"); }
		if(!obj->methodp_glTexCoord4fColor4fNormal3fVertex4fvSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord4fColor4fNormal3fVertex4fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4fVertex4fSUN) { obj->methodp_glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)wglGetProcAddress("glTexCoord4fVertex4fSUN"); }
		if(!obj->methodp_glTexCoord4fVertex4fSUN) { obj->methodp_glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord4fVertex4fSUN"); }
		if(!obj->methodp_glTexCoord4fVertex4fSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord4fVertex4fSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4fVertex4fvSUN) { obj->methodp_glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)wglGetProcAddress("glTexCoord4fVertex4fvSUN"); }
		if(!obj->methodp_glTexCoord4fVertex4fvSUN) { obj->methodp_glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)GetProcAddress(modOpenGL32, "glTexCoord4fVertex4fvSUN"); }
		if(!obj->methodp_glTexCoord4fVertex4fvSUN) { args.This()->Set(v8::String::NewSymbol("glTexCoord4fVertex4fvSUN"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4fv) { obj->methodp_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC)wglGetProcAddress("glTexCoord4fv"); }
		if(!obj->methodp_glTexCoord4fv) { obj->methodp_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC)GetProcAddress(modOpenGL32, "glTexCoord4fv"); }
		if(!obj->methodp_glTexCoord4fv) { args.This()->Set(v8::String::NewSymbol("glTexCoord4fv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4hNV) { obj->methodp_glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC)wglGetProcAddress("glTexCoord4hNV"); }
		if(!obj->methodp_glTexCoord4hNV) { obj->methodp_glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC)GetProcAddress(modOpenGL32, "glTexCoord4hNV"); }
		if(!obj->methodp_glTexCoord4hNV) { args.This()->Set(v8::String::NewSymbol("glTexCoord4hNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4hvNV) { obj->methodp_glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC)wglGetProcAddress("glTexCoord4hvNV"); }
		if(!obj->methodp_glTexCoord4hvNV) { obj->methodp_glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC)GetProcAddress(modOpenGL32, "glTexCoord4hvNV"); }
		if(!obj->methodp_glTexCoord4hvNV) { args.This()->Set(v8::String::NewSymbol("glTexCoord4hvNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4i) { obj->methodp_glTexCoord4i = (PFNGLTEXCOORD4IPROC)wglGetProcAddress("glTexCoord4i"); }
		if(!obj->methodp_glTexCoord4i) { obj->methodp_glTexCoord4i = (PFNGLTEXCOORD4IPROC)GetProcAddress(modOpenGL32, "glTexCoord4i"); }
		if(!obj->methodp_glTexCoord4i) { args.This()->Set(v8::String::NewSymbol("glTexCoord4i"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4iv) { obj->methodp_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC)wglGetProcAddress("glTexCoord4iv"); }
		if(!obj->methodp_glTexCoord4iv) { obj->methodp_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC)GetProcAddress(modOpenGL32, "glTexCoord4iv"); }
		if(!obj->methodp_glTexCoord4iv) { args.This()->Set(v8::String::NewSymbol("glTexCoord4iv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4s) { obj->methodp_glTexCoord4s = (PFNGLTEXCOORD4SPROC)wglGetProcAddress("glTexCoord4s"); }
		if(!obj->methodp_glTexCoord4s) { obj->methodp_glTexCoord4s = (PFNGLTEXCOORD4SPROC)GetProcAddress(modOpenGL32, "glTexCoord4s"); }
		if(!obj->methodp_glTexCoord4s) { args.This()->Set(v8::String::NewSymbol("glTexCoord4s"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4sv) { obj->methodp_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC)wglGetProcAddress("glTexCoord4sv"); }
		if(!obj->methodp_glTexCoord4sv) { obj->methodp_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC)GetProcAddress(modOpenGL32, "glTexCoord4sv"); }
		if(!obj->methodp_glTexCoord4sv) { args.This()->Set(v8::String::NewSymbol("glTexCoord4sv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4xOES) { obj->methodp_glTexCoord4xOES = (PFNGLTEXCOORD4XOESPROC)wglGetProcAddress("glTexCoord4xOES"); }
		if(!obj->methodp_glTexCoord4xOES) { obj->methodp_glTexCoord4xOES = (PFNGLTEXCOORD4XOESPROC)GetProcAddress(modOpenGL32, "glTexCoord4xOES"); }
		if(!obj->methodp_glTexCoord4xOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord4xOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoord4xvOES) { obj->methodp_glTexCoord4xvOES = (PFNGLTEXCOORD4XVOESPROC)wglGetProcAddress("glTexCoord4xvOES"); }
		if(!obj->methodp_glTexCoord4xvOES) { obj->methodp_glTexCoord4xvOES = (PFNGLTEXCOORD4XVOESPROC)GetProcAddress(modOpenGL32, "glTexCoord4xvOES"); }
		if(!obj->methodp_glTexCoord4xvOES) { args.This()->Set(v8::String::NewSymbol("glTexCoord4xvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordFormatNV) { obj->methodp_glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC)wglGetProcAddress("glTexCoordFormatNV"); }
		if(!obj->methodp_glTexCoordFormatNV) { obj->methodp_glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC)GetProcAddress(modOpenGL32, "glTexCoordFormatNV"); }
		if(!obj->methodp_glTexCoordFormatNV) { args.This()->Set(v8::String::NewSymbol("glTexCoordFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordP1ui) { obj->methodp_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)wglGetProcAddress("glTexCoordP1ui"); }
		if(!obj->methodp_glTexCoordP1ui) { obj->methodp_glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)GetProcAddress(modOpenGL32, "glTexCoordP1ui"); }
		if(!obj->methodp_glTexCoordP1ui) { args.This()->Set(v8::String::NewSymbol("glTexCoordP1ui"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordP1uiv) { obj->methodp_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)wglGetProcAddress("glTexCoordP1uiv"); }
		if(!obj->methodp_glTexCoordP1uiv) { obj->methodp_glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)GetProcAddress(modOpenGL32, "glTexCoordP1uiv"); }
		if(!obj->methodp_glTexCoordP1uiv) { args.This()->Set(v8::String::NewSymbol("glTexCoordP1uiv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordP2ui) { obj->methodp_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)wglGetProcAddress("glTexCoordP2ui"); }
		if(!obj->methodp_glTexCoordP2ui) { obj->methodp_glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)GetProcAddress(modOpenGL32, "glTexCoordP2ui"); }
		if(!obj->methodp_glTexCoordP2ui) { args.This()->Set(v8::String::NewSymbol("glTexCoordP2ui"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordP2uiv) { obj->methodp_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)wglGetProcAddress("glTexCoordP2uiv"); }
		if(!obj->methodp_glTexCoordP2uiv) { obj->methodp_glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)GetProcAddress(modOpenGL32, "glTexCoordP2uiv"); }
		if(!obj->methodp_glTexCoordP2uiv) { args.This()->Set(v8::String::NewSymbol("glTexCoordP2uiv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordP3ui) { obj->methodp_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)wglGetProcAddress("glTexCoordP3ui"); }
		if(!obj->methodp_glTexCoordP3ui) { obj->methodp_glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)GetProcAddress(modOpenGL32, "glTexCoordP3ui"); }
		if(!obj->methodp_glTexCoordP3ui) { args.This()->Set(v8::String::NewSymbol("glTexCoordP3ui"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordP3uiv) { obj->methodp_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)wglGetProcAddress("glTexCoordP3uiv"); }
		if(!obj->methodp_glTexCoordP3uiv) { obj->methodp_glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)GetProcAddress(modOpenGL32, "glTexCoordP3uiv"); }
		if(!obj->methodp_glTexCoordP3uiv) { args.This()->Set(v8::String::NewSymbol("glTexCoordP3uiv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordP4ui) { obj->methodp_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)wglGetProcAddress("glTexCoordP4ui"); }
		if(!obj->methodp_glTexCoordP4ui) { obj->methodp_glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)GetProcAddress(modOpenGL32, "glTexCoordP4ui"); }
		if(!obj->methodp_glTexCoordP4ui) { args.This()->Set(v8::String::NewSymbol("glTexCoordP4ui"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordP4uiv) { obj->methodp_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)wglGetProcAddress("glTexCoordP4uiv"); }
		if(!obj->methodp_glTexCoordP4uiv) { obj->methodp_glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)GetProcAddress(modOpenGL32, "glTexCoordP4uiv"); }
		if(!obj->methodp_glTexCoordP4uiv) { args.This()->Set(v8::String::NewSymbol("glTexCoordP4uiv"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordPointer) { obj->methodp_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC)wglGetProcAddress("glTexCoordPointer"); }
		if(!obj->methodp_glTexCoordPointer) { obj->methodp_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC)GetProcAddress(modOpenGL32, "glTexCoordPointer"); }
		if(!obj->methodp_glTexCoordPointer) { args.This()->Set(v8::String::NewSymbol("glTexCoordPointer"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordPointerEXT) { obj->methodp_glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)wglGetProcAddress("glTexCoordPointerEXT"); }
		if(!obj->methodp_glTexCoordPointerEXT) { obj->methodp_glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glTexCoordPointerEXT"); }
		if(!obj->methodp_glTexCoordPointerEXT) { args.This()->Set(v8::String::NewSymbol("glTexCoordPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordPointerListIBM) { obj->methodp_glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC)wglGetProcAddress("glTexCoordPointerListIBM"); }
		if(!obj->methodp_glTexCoordPointerListIBM) { obj->methodp_glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC)GetProcAddress(modOpenGL32, "glTexCoordPointerListIBM"); }
		if(!obj->methodp_glTexCoordPointerListIBM) { args.This()->Set(v8::String::NewSymbol("glTexCoordPointerListIBM"), v8::Undefined()); }
		if(!obj->methodp_glTexCoordPointervINTEL) { obj->methodp_glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC)wglGetProcAddress("glTexCoordPointervINTEL"); }
		if(!obj->methodp_glTexCoordPointervINTEL) { obj->methodp_glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC)GetProcAddress(modOpenGL32, "glTexCoordPointervINTEL"); }
		if(!obj->methodp_glTexCoordPointervINTEL) { args.This()->Set(v8::String::NewSymbol("glTexCoordPointervINTEL"), v8::Undefined()); }
		if(!obj->methodp_glTexEnvf) { obj->methodp_glTexEnvf = (PFNGLTEXENVFPROC)wglGetProcAddress("glTexEnvf"); }
		if(!obj->methodp_glTexEnvf) { obj->methodp_glTexEnvf = (PFNGLTEXENVFPROC)GetProcAddress(modOpenGL32, "glTexEnvf"); }
		if(!obj->methodp_glTexEnvf) { args.This()->Set(v8::String::NewSymbol("glTexEnvf"), v8::Undefined()); }
		if(!obj->methodp_glTexEnvfv) { obj->methodp_glTexEnvfv = (PFNGLTEXENVFVPROC)wglGetProcAddress("glTexEnvfv"); }
		if(!obj->methodp_glTexEnvfv) { obj->methodp_glTexEnvfv = (PFNGLTEXENVFVPROC)GetProcAddress(modOpenGL32, "glTexEnvfv"); }
		if(!obj->methodp_glTexEnvfv) { args.This()->Set(v8::String::NewSymbol("glTexEnvfv"), v8::Undefined()); }
		if(!obj->methodp_glTexEnvi) { obj->methodp_glTexEnvi = (PFNGLTEXENVIPROC)wglGetProcAddress("glTexEnvi"); }
		if(!obj->methodp_glTexEnvi) { obj->methodp_glTexEnvi = (PFNGLTEXENVIPROC)GetProcAddress(modOpenGL32, "glTexEnvi"); }
		if(!obj->methodp_glTexEnvi) { args.This()->Set(v8::String::NewSymbol("glTexEnvi"), v8::Undefined()); }
		if(!obj->methodp_glTexEnviv) { obj->methodp_glTexEnviv = (PFNGLTEXENVIVPROC)wglGetProcAddress("glTexEnviv"); }
		if(!obj->methodp_glTexEnviv) { obj->methodp_glTexEnviv = (PFNGLTEXENVIVPROC)GetProcAddress(modOpenGL32, "glTexEnviv"); }
		if(!obj->methodp_glTexEnviv) { args.This()->Set(v8::String::NewSymbol("glTexEnviv"), v8::Undefined()); }
		if(!obj->methodp_glTexEnvx) { obj->methodp_glTexEnvx = (PFNGLTEXENVXPROC)wglGetProcAddress("glTexEnvx"); }
		if(!obj->methodp_glTexEnvx) { obj->methodp_glTexEnvx = (PFNGLTEXENVXPROC)GetProcAddress(modOpenGL32, "glTexEnvx"); }
		if(!obj->methodp_glTexEnvx) { args.This()->Set(v8::String::NewSymbol("glTexEnvx"), v8::Undefined()); }
		if(!obj->methodp_glTexEnvxOES) { obj->methodp_glTexEnvxOES = (PFNGLTEXENVXOESPROC)wglGetProcAddress("glTexEnvxOES"); }
		if(!obj->methodp_glTexEnvxOES) { obj->methodp_glTexEnvxOES = (PFNGLTEXENVXOESPROC)GetProcAddress(modOpenGL32, "glTexEnvxOES"); }
		if(!obj->methodp_glTexEnvxOES) { args.This()->Set(v8::String::NewSymbol("glTexEnvxOES"), v8::Undefined()); }
		if(!obj->methodp_glTexEnvxv) { obj->methodp_glTexEnvxv = (PFNGLTEXENVXVPROC)wglGetProcAddress("glTexEnvxv"); }
		if(!obj->methodp_glTexEnvxv) { obj->methodp_glTexEnvxv = (PFNGLTEXENVXVPROC)GetProcAddress(modOpenGL32, "glTexEnvxv"); }
		if(!obj->methodp_glTexEnvxv) { args.This()->Set(v8::String::NewSymbol("glTexEnvxv"), v8::Undefined()); }
		if(!obj->methodp_glTexEnvxvOES) { obj->methodp_glTexEnvxvOES = (PFNGLTEXENVXVOESPROC)wglGetProcAddress("glTexEnvxvOES"); }
		if(!obj->methodp_glTexEnvxvOES) { obj->methodp_glTexEnvxvOES = (PFNGLTEXENVXVOESPROC)GetProcAddress(modOpenGL32, "glTexEnvxvOES"); }
		if(!obj->methodp_glTexEnvxvOES) { args.This()->Set(v8::String::NewSymbol("glTexEnvxvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexFilterFuncSGIS) { obj->methodp_glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC)wglGetProcAddress("glTexFilterFuncSGIS"); }
		if(!obj->methodp_glTexFilterFuncSGIS) { obj->methodp_glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC)GetProcAddress(modOpenGL32, "glTexFilterFuncSGIS"); }
		if(!obj->methodp_glTexFilterFuncSGIS) { args.This()->Set(v8::String::NewSymbol("glTexFilterFuncSGIS"), v8::Undefined()); }
		if(!obj->methodp_glTexGend) { obj->methodp_glTexGend = (PFNGLTEXGENDPROC)wglGetProcAddress("glTexGend"); }
		if(!obj->methodp_glTexGend) { obj->methodp_glTexGend = (PFNGLTEXGENDPROC)GetProcAddress(modOpenGL32, "glTexGend"); }
		if(!obj->methodp_glTexGend) { args.This()->Set(v8::String::NewSymbol("glTexGend"), v8::Undefined()); }
		if(!obj->methodp_glTexGendv) { obj->methodp_glTexGendv = (PFNGLTEXGENDVPROC)wglGetProcAddress("glTexGendv"); }
		if(!obj->methodp_glTexGendv) { obj->methodp_glTexGendv = (PFNGLTEXGENDVPROC)GetProcAddress(modOpenGL32, "glTexGendv"); }
		if(!obj->methodp_glTexGendv) { args.This()->Set(v8::String::NewSymbol("glTexGendv"), v8::Undefined()); }
		if(!obj->methodp_glTexGenf) { obj->methodp_glTexGenf = (PFNGLTEXGENFPROC)wglGetProcAddress("glTexGenf"); }
		if(!obj->methodp_glTexGenf) { obj->methodp_glTexGenf = (PFNGLTEXGENFPROC)GetProcAddress(modOpenGL32, "glTexGenf"); }
		if(!obj->methodp_glTexGenf) { args.This()->Set(v8::String::NewSymbol("glTexGenf"), v8::Undefined()); }
		if(!obj->methodp_glTexGenfOES) { obj->methodp_glTexGenfOES = (PFNGLTEXGENFOESPROC)wglGetProcAddress("glTexGenfOES"); }
		if(!obj->methodp_glTexGenfOES) { obj->methodp_glTexGenfOES = (PFNGLTEXGENFOESPROC)GetProcAddress(modOpenGL32, "glTexGenfOES"); }
		if(!obj->methodp_glTexGenfOES) { args.This()->Set(v8::String::NewSymbol("glTexGenfOES"), v8::Undefined()); }
		if(!obj->methodp_glTexGenfv) { obj->methodp_glTexGenfv = (PFNGLTEXGENFVPROC)wglGetProcAddress("glTexGenfv"); }
		if(!obj->methodp_glTexGenfv) { obj->methodp_glTexGenfv = (PFNGLTEXGENFVPROC)GetProcAddress(modOpenGL32, "glTexGenfv"); }
		if(!obj->methodp_glTexGenfv) { args.This()->Set(v8::String::NewSymbol("glTexGenfv"), v8::Undefined()); }
		if(!obj->methodp_glTexGenfvOES) { obj->methodp_glTexGenfvOES = (PFNGLTEXGENFVOESPROC)wglGetProcAddress("glTexGenfvOES"); }
		if(!obj->methodp_glTexGenfvOES) { obj->methodp_glTexGenfvOES = (PFNGLTEXGENFVOESPROC)GetProcAddress(modOpenGL32, "glTexGenfvOES"); }
		if(!obj->methodp_glTexGenfvOES) { args.This()->Set(v8::String::NewSymbol("glTexGenfvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexGeni) { obj->methodp_glTexGeni = (PFNGLTEXGENIPROC)wglGetProcAddress("glTexGeni"); }
		if(!obj->methodp_glTexGeni) { obj->methodp_glTexGeni = (PFNGLTEXGENIPROC)GetProcAddress(modOpenGL32, "glTexGeni"); }
		if(!obj->methodp_glTexGeni) { args.This()->Set(v8::String::NewSymbol("glTexGeni"), v8::Undefined()); }
		if(!obj->methodp_glTexGeniOES) { obj->methodp_glTexGeniOES = (PFNGLTEXGENIOESPROC)wglGetProcAddress("glTexGeniOES"); }
		if(!obj->methodp_glTexGeniOES) { obj->methodp_glTexGeniOES = (PFNGLTEXGENIOESPROC)GetProcAddress(modOpenGL32, "glTexGeniOES"); }
		if(!obj->methodp_glTexGeniOES) { args.This()->Set(v8::String::NewSymbol("glTexGeniOES"), v8::Undefined()); }
		if(!obj->methodp_glTexGeniv) { obj->methodp_glTexGeniv = (PFNGLTEXGENIVPROC)wglGetProcAddress("glTexGeniv"); }
		if(!obj->methodp_glTexGeniv) { obj->methodp_glTexGeniv = (PFNGLTEXGENIVPROC)GetProcAddress(modOpenGL32, "glTexGeniv"); }
		if(!obj->methodp_glTexGeniv) { args.This()->Set(v8::String::NewSymbol("glTexGeniv"), v8::Undefined()); }
		if(!obj->methodp_glTexGenivOES) { obj->methodp_glTexGenivOES = (PFNGLTEXGENIVOESPROC)wglGetProcAddress("glTexGenivOES"); }
		if(!obj->methodp_glTexGenivOES) { obj->methodp_glTexGenivOES = (PFNGLTEXGENIVOESPROC)GetProcAddress(modOpenGL32, "glTexGenivOES"); }
		if(!obj->methodp_glTexGenivOES) { args.This()->Set(v8::String::NewSymbol("glTexGenivOES"), v8::Undefined()); }
		if(!obj->methodp_glTexGenxOES) { obj->methodp_glTexGenxOES = (PFNGLTEXGENXOESPROC)wglGetProcAddress("glTexGenxOES"); }
		if(!obj->methodp_glTexGenxOES) { obj->methodp_glTexGenxOES = (PFNGLTEXGENXOESPROC)GetProcAddress(modOpenGL32, "glTexGenxOES"); }
		if(!obj->methodp_glTexGenxOES) { args.This()->Set(v8::String::NewSymbol("glTexGenxOES"), v8::Undefined()); }
		if(!obj->methodp_glTexGenxvOES) { obj->methodp_glTexGenxvOES = (PFNGLTEXGENXVOESPROC)wglGetProcAddress("glTexGenxvOES"); }
		if(!obj->methodp_glTexGenxvOES) { obj->methodp_glTexGenxvOES = (PFNGLTEXGENXVOESPROC)GetProcAddress(modOpenGL32, "glTexGenxvOES"); }
		if(!obj->methodp_glTexGenxvOES) { args.This()->Set(v8::String::NewSymbol("glTexGenxvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexImage1D) { obj->methodp_glTexImage1D = (PFNGLTEXIMAGE1DPROC)wglGetProcAddress("glTexImage1D"); }
		if(!obj->methodp_glTexImage1D) { obj->methodp_glTexImage1D = (PFNGLTEXIMAGE1DPROC)GetProcAddress(modOpenGL32, "glTexImage1D"); }
		if(!obj->methodp_glTexImage1D) { args.This()->Set(v8::String::NewSymbol("glTexImage1D"), v8::Undefined()); }
		if(!obj->methodp_glTexImage2D) { obj->methodp_glTexImage2D = (PFNGLTEXIMAGE2DPROC)wglGetProcAddress("glTexImage2D"); }
		if(!obj->methodp_glTexImage2D) { obj->methodp_glTexImage2D = (PFNGLTEXIMAGE2DPROC)GetProcAddress(modOpenGL32, "glTexImage2D"); }
		if(!obj->methodp_glTexImage2D) { args.This()->Set(v8::String::NewSymbol("glTexImage2D"), v8::Undefined()); }
		if(!obj->methodp_glTexImage2DMultisample) { obj->methodp_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)wglGetProcAddress("glTexImage2DMultisample"); }
		if(!obj->methodp_glTexImage2DMultisample) { obj->methodp_glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)GetProcAddress(modOpenGL32, "glTexImage2DMultisample"); }
		if(!obj->methodp_glTexImage2DMultisample) { args.This()->Set(v8::String::NewSymbol("glTexImage2DMultisample"), v8::Undefined()); }
		if(!obj->methodp_glTexImage2DMultisampleCoverageNV) { obj->methodp_glTexImage2DMultisampleCoverageNV = (PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)wglGetProcAddress("glTexImage2DMultisampleCoverageNV"); }
		if(!obj->methodp_glTexImage2DMultisampleCoverageNV) { obj->methodp_glTexImage2DMultisampleCoverageNV = (PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)GetProcAddress(modOpenGL32, "glTexImage2DMultisampleCoverageNV"); }
		if(!obj->methodp_glTexImage2DMultisampleCoverageNV) { args.This()->Set(v8::String::NewSymbol("glTexImage2DMultisampleCoverageNV"), v8::Undefined()); }
		if(!obj->methodp_glTexImage3D) { obj->methodp_glTexImage3D = (PFNGLTEXIMAGE3DPROC)wglGetProcAddress("glTexImage3D"); }
		if(!obj->methodp_glTexImage3D) { obj->methodp_glTexImage3D = (PFNGLTEXIMAGE3DPROC)GetProcAddress(modOpenGL32, "glTexImage3D"); }
		if(!obj->methodp_glTexImage3D) { args.This()->Set(v8::String::NewSymbol("glTexImage3D"), v8::Undefined()); }
		if(!obj->methodp_glTexImage3DEXT) { obj->methodp_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)wglGetProcAddress("glTexImage3DEXT"); }
		if(!obj->methodp_glTexImage3DEXT) { obj->methodp_glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glTexImage3DEXT"); }
		if(!obj->methodp_glTexImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glTexImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexImage3DMultisample) { obj->methodp_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)wglGetProcAddress("glTexImage3DMultisample"); }
		if(!obj->methodp_glTexImage3DMultisample) { obj->methodp_glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)GetProcAddress(modOpenGL32, "glTexImage3DMultisample"); }
		if(!obj->methodp_glTexImage3DMultisample) { args.This()->Set(v8::String::NewSymbol("glTexImage3DMultisample"), v8::Undefined()); }
		if(!obj->methodp_glTexImage3DMultisampleCoverageNV) { obj->methodp_glTexImage3DMultisampleCoverageNV = (PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)wglGetProcAddress("glTexImage3DMultisampleCoverageNV"); }
		if(!obj->methodp_glTexImage3DMultisampleCoverageNV) { obj->methodp_glTexImage3DMultisampleCoverageNV = (PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)GetProcAddress(modOpenGL32, "glTexImage3DMultisampleCoverageNV"); }
		if(!obj->methodp_glTexImage3DMultisampleCoverageNV) { args.This()->Set(v8::String::NewSymbol("glTexImage3DMultisampleCoverageNV"), v8::Undefined()); }
		if(!obj->methodp_glTexImage3DOES) { obj->methodp_glTexImage3DOES = (PFNGLTEXIMAGE3DOESPROC)wglGetProcAddress("glTexImage3DOES"); }
		if(!obj->methodp_glTexImage3DOES) { obj->methodp_glTexImage3DOES = (PFNGLTEXIMAGE3DOESPROC)GetProcAddress(modOpenGL32, "glTexImage3DOES"); }
		if(!obj->methodp_glTexImage3DOES) { args.This()->Set(v8::String::NewSymbol("glTexImage3DOES"), v8::Undefined()); }
		if(!obj->methodp_glTexImage4DSGIS) { obj->methodp_glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC)wglGetProcAddress("glTexImage4DSGIS"); }
		if(!obj->methodp_glTexImage4DSGIS) { obj->methodp_glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC)GetProcAddress(modOpenGL32, "glTexImage4DSGIS"); }
		if(!obj->methodp_glTexImage4DSGIS) { args.This()->Set(v8::String::NewSymbol("glTexImage4DSGIS"), v8::Undefined()); }
		if(!obj->methodp_glTexPageCommitmentARB) { obj->methodp_glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC)wglGetProcAddress("glTexPageCommitmentARB"); }
		if(!obj->methodp_glTexPageCommitmentARB) { obj->methodp_glTexPageCommitmentARB = (PFNGLTEXPAGECOMMITMENTARBPROC)GetProcAddress(modOpenGL32, "glTexPageCommitmentARB"); }
		if(!obj->methodp_glTexPageCommitmentARB) { args.This()->Set(v8::String::NewSymbol("glTexPageCommitmentARB"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterIiv) { obj->methodp_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)wglGetProcAddress("glTexParameterIiv"); }
		if(!obj->methodp_glTexParameterIiv) { obj->methodp_glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)GetProcAddress(modOpenGL32, "glTexParameterIiv"); }
		if(!obj->methodp_glTexParameterIiv) { args.This()->Set(v8::String::NewSymbol("glTexParameterIiv"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterIivEXT) { obj->methodp_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)wglGetProcAddress("glTexParameterIivEXT"); }
		if(!obj->methodp_glTexParameterIivEXT) { obj->methodp_glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glTexParameterIivEXT"); }
		if(!obj->methodp_glTexParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glTexParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterIuiv) { obj->methodp_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)wglGetProcAddress("glTexParameterIuiv"); }
		if(!obj->methodp_glTexParameterIuiv) { obj->methodp_glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)GetProcAddress(modOpenGL32, "glTexParameterIuiv"); }
		if(!obj->methodp_glTexParameterIuiv) { args.This()->Set(v8::String::NewSymbol("glTexParameterIuiv"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterIuivEXT) { obj->methodp_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)wglGetProcAddress("glTexParameterIuivEXT"); }
		if(!obj->methodp_glTexParameterIuivEXT) { obj->methodp_glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glTexParameterIuivEXT"); }
		if(!obj->methodp_glTexParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glTexParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterf) { obj->methodp_glTexParameterf = (PFNGLTEXPARAMETERFPROC)wglGetProcAddress("glTexParameterf"); }
		if(!obj->methodp_glTexParameterf) { obj->methodp_glTexParameterf = (PFNGLTEXPARAMETERFPROC)GetProcAddress(modOpenGL32, "glTexParameterf"); }
		if(!obj->methodp_glTexParameterf) { args.This()->Set(v8::String::NewSymbol("glTexParameterf"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterfv) { obj->methodp_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)wglGetProcAddress("glTexParameterfv"); }
		if(!obj->methodp_glTexParameterfv) { obj->methodp_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC)GetProcAddress(modOpenGL32, "glTexParameterfv"); }
		if(!obj->methodp_glTexParameterfv) { args.This()->Set(v8::String::NewSymbol("glTexParameterfv"), v8::Undefined()); }
		if(!obj->methodp_glTexParameteri) { obj->methodp_glTexParameteri = (PFNGLTEXPARAMETERIPROC)wglGetProcAddress("glTexParameteri"); }
		if(!obj->methodp_glTexParameteri) { obj->methodp_glTexParameteri = (PFNGLTEXPARAMETERIPROC)GetProcAddress(modOpenGL32, "glTexParameteri"); }
		if(!obj->methodp_glTexParameteri) { args.This()->Set(v8::String::NewSymbol("glTexParameteri"), v8::Undefined()); }
		if(!obj->methodp_glTexParameteriv) { obj->methodp_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)wglGetProcAddress("glTexParameteriv"); }
		if(!obj->methodp_glTexParameteriv) { obj->methodp_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC)GetProcAddress(modOpenGL32, "glTexParameteriv"); }
		if(!obj->methodp_glTexParameteriv) { args.This()->Set(v8::String::NewSymbol("glTexParameteriv"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterx) { obj->methodp_glTexParameterx = (PFNGLTEXPARAMETERXPROC)wglGetProcAddress("glTexParameterx"); }
		if(!obj->methodp_glTexParameterx) { obj->methodp_glTexParameterx = (PFNGLTEXPARAMETERXPROC)GetProcAddress(modOpenGL32, "glTexParameterx"); }
		if(!obj->methodp_glTexParameterx) { args.This()->Set(v8::String::NewSymbol("glTexParameterx"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterxOES) { obj->methodp_glTexParameterxOES = (PFNGLTEXPARAMETERXOESPROC)wglGetProcAddress("glTexParameterxOES"); }
		if(!obj->methodp_glTexParameterxOES) { obj->methodp_glTexParameterxOES = (PFNGLTEXPARAMETERXOESPROC)GetProcAddress(modOpenGL32, "glTexParameterxOES"); }
		if(!obj->methodp_glTexParameterxOES) { args.This()->Set(v8::String::NewSymbol("glTexParameterxOES"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterxv) { obj->methodp_glTexParameterxv = (PFNGLTEXPARAMETERXVPROC)wglGetProcAddress("glTexParameterxv"); }
		if(!obj->methodp_glTexParameterxv) { obj->methodp_glTexParameterxv = (PFNGLTEXPARAMETERXVPROC)GetProcAddress(modOpenGL32, "glTexParameterxv"); }
		if(!obj->methodp_glTexParameterxv) { args.This()->Set(v8::String::NewSymbol("glTexParameterxv"), v8::Undefined()); }
		if(!obj->methodp_glTexParameterxvOES) { obj->methodp_glTexParameterxvOES = (PFNGLTEXPARAMETERXVOESPROC)wglGetProcAddress("glTexParameterxvOES"); }
		if(!obj->methodp_glTexParameterxvOES) { obj->methodp_glTexParameterxvOES = (PFNGLTEXPARAMETERXVOESPROC)GetProcAddress(modOpenGL32, "glTexParameterxvOES"); }
		if(!obj->methodp_glTexParameterxvOES) { args.This()->Set(v8::String::NewSymbol("glTexParameterxvOES"), v8::Undefined()); }
		if(!obj->methodp_glTexRenderbufferNV) { obj->methodp_glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC)wglGetProcAddress("glTexRenderbufferNV"); }
		if(!obj->methodp_glTexRenderbufferNV) { obj->methodp_glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC)GetProcAddress(modOpenGL32, "glTexRenderbufferNV"); }
		if(!obj->methodp_glTexRenderbufferNV) { args.This()->Set(v8::String::NewSymbol("glTexRenderbufferNV"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage1D) { obj->methodp_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)wglGetProcAddress("glTexStorage1D"); }
		if(!obj->methodp_glTexStorage1D) { obj->methodp_glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)GetProcAddress(modOpenGL32, "glTexStorage1D"); }
		if(!obj->methodp_glTexStorage1D) { args.This()->Set(v8::String::NewSymbol("glTexStorage1D"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage1DEXT) { obj->methodp_glTexStorage1DEXT = (PFNGLTEXSTORAGE1DEXTPROC)wglGetProcAddress("glTexStorage1DEXT"); }
		if(!obj->methodp_glTexStorage1DEXT) { obj->methodp_glTexStorage1DEXT = (PFNGLTEXSTORAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glTexStorage1DEXT"); }
		if(!obj->methodp_glTexStorage1DEXT) { args.This()->Set(v8::String::NewSymbol("glTexStorage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage2D) { obj->methodp_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)wglGetProcAddress("glTexStorage2D"); }
		if(!obj->methodp_glTexStorage2D) { obj->methodp_glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)GetProcAddress(modOpenGL32, "glTexStorage2D"); }
		if(!obj->methodp_glTexStorage2D) { args.This()->Set(v8::String::NewSymbol("glTexStorage2D"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage2DEXT) { obj->methodp_glTexStorage2DEXT = (PFNGLTEXSTORAGE2DEXTPROC)wglGetProcAddress("glTexStorage2DEXT"); }
		if(!obj->methodp_glTexStorage2DEXT) { obj->methodp_glTexStorage2DEXT = (PFNGLTEXSTORAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glTexStorage2DEXT"); }
		if(!obj->methodp_glTexStorage2DEXT) { args.This()->Set(v8::String::NewSymbol("glTexStorage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage2DMultisample) { obj->methodp_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)wglGetProcAddress("glTexStorage2DMultisample"); }
		if(!obj->methodp_glTexStorage2DMultisample) { obj->methodp_glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)GetProcAddress(modOpenGL32, "glTexStorage2DMultisample"); }
		if(!obj->methodp_glTexStorage2DMultisample) { args.This()->Set(v8::String::NewSymbol("glTexStorage2DMultisample"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage3D) { obj->methodp_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)wglGetProcAddress("glTexStorage3D"); }
		if(!obj->methodp_glTexStorage3D) { obj->methodp_glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)GetProcAddress(modOpenGL32, "glTexStorage3D"); }
		if(!obj->methodp_glTexStorage3D) { args.This()->Set(v8::String::NewSymbol("glTexStorage3D"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage3DEXT) { obj->methodp_glTexStorage3DEXT = (PFNGLTEXSTORAGE3DEXTPROC)wglGetProcAddress("glTexStorage3DEXT"); }
		if(!obj->methodp_glTexStorage3DEXT) { obj->methodp_glTexStorage3DEXT = (PFNGLTEXSTORAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glTexStorage3DEXT"); }
		if(!obj->methodp_glTexStorage3DEXT) { args.This()->Set(v8::String::NewSymbol("glTexStorage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage3DMultisample) { obj->methodp_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)wglGetProcAddress("glTexStorage3DMultisample"); }
		if(!obj->methodp_glTexStorage3DMultisample) { obj->methodp_glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)GetProcAddress(modOpenGL32, "glTexStorage3DMultisample"); }
		if(!obj->methodp_glTexStorage3DMultisample) { args.This()->Set(v8::String::NewSymbol("glTexStorage3DMultisample"), v8::Undefined()); }
		if(!obj->methodp_glTexStorage3DMultisampleOES) { obj->methodp_glTexStorage3DMultisampleOES = (PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC)wglGetProcAddress("glTexStorage3DMultisampleOES"); }
		if(!obj->methodp_glTexStorage3DMultisampleOES) { obj->methodp_glTexStorage3DMultisampleOES = (PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC)GetProcAddress(modOpenGL32, "glTexStorage3DMultisampleOES"); }
		if(!obj->methodp_glTexStorage3DMultisampleOES) { args.This()->Set(v8::String::NewSymbol("glTexStorage3DMultisampleOES"), v8::Undefined()); }
		if(!obj->methodp_glTexStorageSparseAMD) { obj->methodp_glTexStorageSparseAMD = (PFNGLTEXSTORAGESPARSEAMDPROC)wglGetProcAddress("glTexStorageSparseAMD"); }
		if(!obj->methodp_glTexStorageSparseAMD) { obj->methodp_glTexStorageSparseAMD = (PFNGLTEXSTORAGESPARSEAMDPROC)GetProcAddress(modOpenGL32, "glTexStorageSparseAMD"); }
		if(!obj->methodp_glTexStorageSparseAMD) { args.This()->Set(v8::String::NewSymbol("glTexStorageSparseAMD"), v8::Undefined()); }
		if(!obj->methodp_glTexSubImage1D) { obj->methodp_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)wglGetProcAddress("glTexSubImage1D"); }
		if(!obj->methodp_glTexSubImage1D) { obj->methodp_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC)GetProcAddress(modOpenGL32, "glTexSubImage1D"); }
		if(!obj->methodp_glTexSubImage1D) { args.This()->Set(v8::String::NewSymbol("glTexSubImage1D"), v8::Undefined()); }
		if(!obj->methodp_glTexSubImage1DEXT) { obj->methodp_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)wglGetProcAddress("glTexSubImage1DEXT"); }
		if(!obj->methodp_glTexSubImage1DEXT) { obj->methodp_glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glTexSubImage1DEXT"); }
		if(!obj->methodp_glTexSubImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glTexSubImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexSubImage2D) { obj->methodp_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)wglGetProcAddress("glTexSubImage2D"); }
		if(!obj->methodp_glTexSubImage2D) { obj->methodp_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC)GetProcAddress(modOpenGL32, "glTexSubImage2D"); }
		if(!obj->methodp_glTexSubImage2D) { args.This()->Set(v8::String::NewSymbol("glTexSubImage2D"), v8::Undefined()); }
		if(!obj->methodp_glTexSubImage2DEXT) { obj->methodp_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)wglGetProcAddress("glTexSubImage2DEXT"); }
		if(!obj->methodp_glTexSubImage2DEXT) { obj->methodp_glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glTexSubImage2DEXT"); }
		if(!obj->methodp_glTexSubImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glTexSubImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexSubImage3D) { obj->methodp_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)wglGetProcAddress("glTexSubImage3D"); }
		if(!obj->methodp_glTexSubImage3D) { obj->methodp_glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)GetProcAddress(modOpenGL32, "glTexSubImage3D"); }
		if(!obj->methodp_glTexSubImage3D) { args.This()->Set(v8::String::NewSymbol("glTexSubImage3D"), v8::Undefined()); }
		if(!obj->methodp_glTexSubImage3DEXT) { obj->methodp_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)wglGetProcAddress("glTexSubImage3DEXT"); }
		if(!obj->methodp_glTexSubImage3DEXT) { obj->methodp_glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glTexSubImage3DEXT"); }
		if(!obj->methodp_glTexSubImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glTexSubImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexSubImage3DOES) { obj->methodp_glTexSubImage3DOES = (PFNGLTEXSUBIMAGE3DOESPROC)wglGetProcAddress("glTexSubImage3DOES"); }
		if(!obj->methodp_glTexSubImage3DOES) { obj->methodp_glTexSubImage3DOES = (PFNGLTEXSUBIMAGE3DOESPROC)GetProcAddress(modOpenGL32, "glTexSubImage3DOES"); }
		if(!obj->methodp_glTexSubImage3DOES) { args.This()->Set(v8::String::NewSymbol("glTexSubImage3DOES"), v8::Undefined()); }
		if(!obj->methodp_glTexSubImage4DSGIS) { obj->methodp_glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC)wglGetProcAddress("glTexSubImage4DSGIS"); }
		if(!obj->methodp_glTexSubImage4DSGIS) { obj->methodp_glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC)GetProcAddress(modOpenGL32, "glTexSubImage4DSGIS"); }
		if(!obj->methodp_glTexSubImage4DSGIS) { args.This()->Set(v8::String::NewSymbol("glTexSubImage4DSGIS"), v8::Undefined()); }
		if(!obj->methodp_glTextureBarrierNV) { obj->methodp_glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC)wglGetProcAddress("glTextureBarrierNV"); }
		if(!obj->methodp_glTextureBarrierNV) { obj->methodp_glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC)GetProcAddress(modOpenGL32, "glTextureBarrierNV"); }
		if(!obj->methodp_glTextureBarrierNV) { args.This()->Set(v8::String::NewSymbol("glTextureBarrierNV"), v8::Undefined()); }
		if(!obj->methodp_glTextureBufferEXT) { obj->methodp_glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC)wglGetProcAddress("glTextureBufferEXT"); }
		if(!obj->methodp_glTextureBufferEXT) { obj->methodp_glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glTextureBufferEXT"); }
		if(!obj->methodp_glTextureBufferEXT) { args.This()->Set(v8::String::NewSymbol("glTextureBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureBufferRangeEXT) { obj->methodp_glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC)wglGetProcAddress("glTextureBufferRangeEXT"); }
		if(!obj->methodp_glTextureBufferRangeEXT) { obj->methodp_glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC)GetProcAddress(modOpenGL32, "glTextureBufferRangeEXT"); }
		if(!obj->methodp_glTextureBufferRangeEXT) { args.This()->Set(v8::String::NewSymbol("glTextureBufferRangeEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureColorMaskSGIS) { obj->methodp_glTextureColorMaskSGIS = (PFNGLTEXTURECOLORMASKSGISPROC)wglGetProcAddress("glTextureColorMaskSGIS"); }
		if(!obj->methodp_glTextureColorMaskSGIS) { obj->methodp_glTextureColorMaskSGIS = (PFNGLTEXTURECOLORMASKSGISPROC)GetProcAddress(modOpenGL32, "glTextureColorMaskSGIS"); }
		if(!obj->methodp_glTextureColorMaskSGIS) { args.This()->Set(v8::String::NewSymbol("glTextureColorMaskSGIS"), v8::Undefined()); }
		if(!obj->methodp_glTextureImage1DEXT) { obj->methodp_glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC)wglGetProcAddress("glTextureImage1DEXT"); }
		if(!obj->methodp_glTextureImage1DEXT) { obj->methodp_glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glTextureImage1DEXT"); }
		if(!obj->methodp_glTextureImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureImage2DEXT) { obj->methodp_glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC)wglGetProcAddress("glTextureImage2DEXT"); }
		if(!obj->methodp_glTextureImage2DEXT) { obj->methodp_glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glTextureImage2DEXT"); }
		if(!obj->methodp_glTextureImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureImage2DMultisampleCoverageNV) { obj->methodp_glTextureImage2DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)wglGetProcAddress("glTextureImage2DMultisampleCoverageNV"); }
		if(!obj->methodp_glTextureImage2DMultisampleCoverageNV) { obj->methodp_glTextureImage2DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)GetProcAddress(modOpenGL32, "glTextureImage2DMultisampleCoverageNV"); }
		if(!obj->methodp_glTextureImage2DMultisampleCoverageNV) { args.This()->Set(v8::String::NewSymbol("glTextureImage2DMultisampleCoverageNV"), v8::Undefined()); }
		if(!obj->methodp_glTextureImage2DMultisampleNV) { obj->methodp_glTextureImage2DMultisampleNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)wglGetProcAddress("glTextureImage2DMultisampleNV"); }
		if(!obj->methodp_glTextureImage2DMultisampleNV) { obj->methodp_glTextureImage2DMultisampleNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)GetProcAddress(modOpenGL32, "glTextureImage2DMultisampleNV"); }
		if(!obj->methodp_glTextureImage2DMultisampleNV) { args.This()->Set(v8::String::NewSymbol("glTextureImage2DMultisampleNV"), v8::Undefined()); }
		if(!obj->methodp_glTextureImage3DEXT) { obj->methodp_glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC)wglGetProcAddress("glTextureImage3DEXT"); }
		if(!obj->methodp_glTextureImage3DEXT) { obj->methodp_glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glTextureImage3DEXT"); }
		if(!obj->methodp_glTextureImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureImage3DMultisampleCoverageNV) { obj->methodp_glTextureImage3DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)wglGetProcAddress("glTextureImage3DMultisampleCoverageNV"); }
		if(!obj->methodp_glTextureImage3DMultisampleCoverageNV) { obj->methodp_glTextureImage3DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)GetProcAddress(modOpenGL32, "glTextureImage3DMultisampleCoverageNV"); }
		if(!obj->methodp_glTextureImage3DMultisampleCoverageNV) { args.This()->Set(v8::String::NewSymbol("glTextureImage3DMultisampleCoverageNV"), v8::Undefined()); }
		if(!obj->methodp_glTextureImage3DMultisampleNV) { obj->methodp_glTextureImage3DMultisampleNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)wglGetProcAddress("glTextureImage3DMultisampleNV"); }
		if(!obj->methodp_glTextureImage3DMultisampleNV) { obj->methodp_glTextureImage3DMultisampleNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)GetProcAddress(modOpenGL32, "glTextureImage3DMultisampleNV"); }
		if(!obj->methodp_glTextureImage3DMultisampleNV) { args.This()->Set(v8::String::NewSymbol("glTextureImage3DMultisampleNV"), v8::Undefined()); }
		if(!obj->methodp_glTextureLightEXT) { obj->methodp_glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC)wglGetProcAddress("glTextureLightEXT"); }
		if(!obj->methodp_glTextureLightEXT) { obj->methodp_glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC)GetProcAddress(modOpenGL32, "glTextureLightEXT"); }
		if(!obj->methodp_glTextureLightEXT) { args.This()->Set(v8::String::NewSymbol("glTextureLightEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureMaterialEXT) { obj->methodp_glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC)wglGetProcAddress("glTextureMaterialEXT"); }
		if(!obj->methodp_glTextureMaterialEXT) { obj->methodp_glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC)GetProcAddress(modOpenGL32, "glTextureMaterialEXT"); }
		if(!obj->methodp_glTextureMaterialEXT) { args.This()->Set(v8::String::NewSymbol("glTextureMaterialEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureNormalEXT) { obj->methodp_glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC)wglGetProcAddress("glTextureNormalEXT"); }
		if(!obj->methodp_glTextureNormalEXT) { obj->methodp_glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC)GetProcAddress(modOpenGL32, "glTextureNormalEXT"); }
		if(!obj->methodp_glTextureNormalEXT) { args.This()->Set(v8::String::NewSymbol("glTextureNormalEXT"), v8::Undefined()); }
		if(!obj->methodp_glTexturePageCommitmentEXT) { obj->methodp_glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC)wglGetProcAddress("glTexturePageCommitmentEXT"); }
		if(!obj->methodp_glTexturePageCommitmentEXT) { obj->methodp_glTexturePageCommitmentEXT = (PFNGLTEXTUREPAGECOMMITMENTEXTPROC)GetProcAddress(modOpenGL32, "glTexturePageCommitmentEXT"); }
		if(!obj->methodp_glTexturePageCommitmentEXT) { args.This()->Set(v8::String::NewSymbol("glTexturePageCommitmentEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureParameterIivEXT) { obj->methodp_glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC)wglGetProcAddress("glTextureParameterIivEXT"); }
		if(!obj->methodp_glTextureParameterIivEXT) { obj->methodp_glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC)GetProcAddress(modOpenGL32, "glTextureParameterIivEXT"); }
		if(!obj->methodp_glTextureParameterIivEXT) { args.This()->Set(v8::String::NewSymbol("glTextureParameterIivEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureParameterIuivEXT) { obj->methodp_glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC)wglGetProcAddress("glTextureParameterIuivEXT"); }
		if(!obj->methodp_glTextureParameterIuivEXT) { obj->methodp_glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC)GetProcAddress(modOpenGL32, "glTextureParameterIuivEXT"); }
		if(!obj->methodp_glTextureParameterIuivEXT) { args.This()->Set(v8::String::NewSymbol("glTextureParameterIuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureParameterfEXT) { obj->methodp_glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC)wglGetProcAddress("glTextureParameterfEXT"); }
		if(!obj->methodp_glTextureParameterfEXT) { obj->methodp_glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC)GetProcAddress(modOpenGL32, "glTextureParameterfEXT"); }
		if(!obj->methodp_glTextureParameterfEXT) { args.This()->Set(v8::String::NewSymbol("glTextureParameterfEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureParameterfvEXT) { obj->methodp_glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC)wglGetProcAddress("glTextureParameterfvEXT"); }
		if(!obj->methodp_glTextureParameterfvEXT) { obj->methodp_glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC)GetProcAddress(modOpenGL32, "glTextureParameterfvEXT"); }
		if(!obj->methodp_glTextureParameterfvEXT) { args.This()->Set(v8::String::NewSymbol("glTextureParameterfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureParameteriEXT) { obj->methodp_glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC)wglGetProcAddress("glTextureParameteriEXT"); }
		if(!obj->methodp_glTextureParameteriEXT) { obj->methodp_glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC)GetProcAddress(modOpenGL32, "glTextureParameteriEXT"); }
		if(!obj->methodp_glTextureParameteriEXT) { args.This()->Set(v8::String::NewSymbol("glTextureParameteriEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureParameterivEXT) { obj->methodp_glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC)wglGetProcAddress("glTextureParameterivEXT"); }
		if(!obj->methodp_glTextureParameterivEXT) { obj->methodp_glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC)GetProcAddress(modOpenGL32, "glTextureParameterivEXT"); }
		if(!obj->methodp_glTextureParameterivEXT) { args.This()->Set(v8::String::NewSymbol("glTextureParameterivEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureRangeAPPLE) { obj->methodp_glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC)wglGetProcAddress("glTextureRangeAPPLE"); }
		if(!obj->methodp_glTextureRangeAPPLE) { obj->methodp_glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC)GetProcAddress(modOpenGL32, "glTextureRangeAPPLE"); }
		if(!obj->methodp_glTextureRangeAPPLE) { args.This()->Set(v8::String::NewSymbol("glTextureRangeAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glTextureRenderbufferEXT) { obj->methodp_glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC)wglGetProcAddress("glTextureRenderbufferEXT"); }
		if(!obj->methodp_glTextureRenderbufferEXT) { obj->methodp_glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glTextureRenderbufferEXT"); }
		if(!obj->methodp_glTextureRenderbufferEXT) { args.This()->Set(v8::String::NewSymbol("glTextureRenderbufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureStorage1DEXT) { obj->methodp_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC)wglGetProcAddress("glTextureStorage1DEXT"); }
		if(!obj->methodp_glTextureStorage1DEXT) { obj->methodp_glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glTextureStorage1DEXT"); }
		if(!obj->methodp_glTextureStorage1DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureStorage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureStorage2DEXT) { obj->methodp_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC)wglGetProcAddress("glTextureStorage2DEXT"); }
		if(!obj->methodp_glTextureStorage2DEXT) { obj->methodp_glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glTextureStorage2DEXT"); }
		if(!obj->methodp_glTextureStorage2DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureStorage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureStorage2DMultisampleEXT) { obj->methodp_glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)wglGetProcAddress("glTextureStorage2DMultisampleEXT"); }
		if(!obj->methodp_glTextureStorage2DMultisampleEXT) { obj->methodp_glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)GetProcAddress(modOpenGL32, "glTextureStorage2DMultisampleEXT"); }
		if(!obj->methodp_glTextureStorage2DMultisampleEXT) { args.This()->Set(v8::String::NewSymbol("glTextureStorage2DMultisampleEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureStorage3DEXT) { obj->methodp_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC)wglGetProcAddress("glTextureStorage3DEXT"); }
		if(!obj->methodp_glTextureStorage3DEXT) { obj->methodp_glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glTextureStorage3DEXT"); }
		if(!obj->methodp_glTextureStorage3DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureStorage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureStorage3DMultisampleEXT) { obj->methodp_glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)wglGetProcAddress("glTextureStorage3DMultisampleEXT"); }
		if(!obj->methodp_glTextureStorage3DMultisampleEXT) { obj->methodp_glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)GetProcAddress(modOpenGL32, "glTextureStorage3DMultisampleEXT"); }
		if(!obj->methodp_glTextureStorage3DMultisampleEXT) { args.This()->Set(v8::String::NewSymbol("glTextureStorage3DMultisampleEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureStorageSparseAMD) { obj->methodp_glTextureStorageSparseAMD = (PFNGLTEXTURESTORAGESPARSEAMDPROC)wglGetProcAddress("glTextureStorageSparseAMD"); }
		if(!obj->methodp_glTextureStorageSparseAMD) { obj->methodp_glTextureStorageSparseAMD = (PFNGLTEXTURESTORAGESPARSEAMDPROC)GetProcAddress(modOpenGL32, "glTextureStorageSparseAMD"); }
		if(!obj->methodp_glTextureStorageSparseAMD) { args.This()->Set(v8::String::NewSymbol("glTextureStorageSparseAMD"), v8::Undefined()); }
		if(!obj->methodp_glTextureSubImage1DEXT) { obj->methodp_glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC)wglGetProcAddress("glTextureSubImage1DEXT"); }
		if(!obj->methodp_glTextureSubImage1DEXT) { obj->methodp_glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC)GetProcAddress(modOpenGL32, "glTextureSubImage1DEXT"); }
		if(!obj->methodp_glTextureSubImage1DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureSubImage1DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureSubImage2DEXT) { obj->methodp_glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC)wglGetProcAddress("glTextureSubImage2DEXT"); }
		if(!obj->methodp_glTextureSubImage2DEXT) { obj->methodp_glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC)GetProcAddress(modOpenGL32, "glTextureSubImage2DEXT"); }
		if(!obj->methodp_glTextureSubImage2DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureSubImage2DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureSubImage3DEXT) { obj->methodp_glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC)wglGetProcAddress("glTextureSubImage3DEXT"); }
		if(!obj->methodp_glTextureSubImage3DEXT) { obj->methodp_glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC)GetProcAddress(modOpenGL32, "glTextureSubImage3DEXT"); }
		if(!obj->methodp_glTextureSubImage3DEXT) { args.This()->Set(v8::String::NewSymbol("glTextureSubImage3DEXT"), v8::Undefined()); }
		if(!obj->methodp_glTextureView) { obj->methodp_glTextureView = (PFNGLTEXTUREVIEWPROC)wglGetProcAddress("glTextureView"); }
		if(!obj->methodp_glTextureView) { obj->methodp_glTextureView = (PFNGLTEXTUREVIEWPROC)GetProcAddress(modOpenGL32, "glTextureView"); }
		if(!obj->methodp_glTextureView) { args.This()->Set(v8::String::NewSymbol("glTextureView"), v8::Undefined()); }
		if(!obj->methodp_glTextureViewEXT) { obj->methodp_glTextureViewEXT = (PFNGLTEXTUREVIEWEXTPROC)wglGetProcAddress("glTextureViewEXT"); }
		if(!obj->methodp_glTextureViewEXT) { obj->methodp_glTextureViewEXT = (PFNGLTEXTUREVIEWEXTPROC)GetProcAddress(modOpenGL32, "glTextureViewEXT"); }
		if(!obj->methodp_glTextureViewEXT) { args.This()->Set(v8::String::NewSymbol("glTextureViewEXT"), v8::Undefined()); }
		if(!obj->methodp_glTrackMatrixNV) { obj->methodp_glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)wglGetProcAddress("glTrackMatrixNV"); }
		if(!obj->methodp_glTrackMatrixNV) { obj->methodp_glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)GetProcAddress(modOpenGL32, "glTrackMatrixNV"); }
		if(!obj->methodp_glTrackMatrixNV) { args.This()->Set(v8::String::NewSymbol("glTrackMatrixNV"), v8::Undefined()); }
		if(!obj->methodp_glTransformFeedbackAttribsNV) { obj->methodp_glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)wglGetProcAddress("glTransformFeedbackAttribsNV"); }
		if(!obj->methodp_glTransformFeedbackAttribsNV) { obj->methodp_glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)GetProcAddress(modOpenGL32, "glTransformFeedbackAttribsNV"); }
		if(!obj->methodp_glTransformFeedbackAttribsNV) { args.This()->Set(v8::String::NewSymbol("glTransformFeedbackAttribsNV"), v8::Undefined()); }
		if(!obj->methodp_glTransformFeedbackStreamAttribsNV) { obj->methodp_glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)wglGetProcAddress("glTransformFeedbackStreamAttribsNV"); }
		if(!obj->methodp_glTransformFeedbackStreamAttribsNV) { obj->methodp_glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)GetProcAddress(modOpenGL32, "glTransformFeedbackStreamAttribsNV"); }
		if(!obj->methodp_glTransformFeedbackStreamAttribsNV) { args.This()->Set(v8::String::NewSymbol("glTransformFeedbackStreamAttribsNV"), v8::Undefined()); }
		if(!obj->methodp_glTransformFeedbackVaryings) { obj->methodp_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)wglGetProcAddress("glTransformFeedbackVaryings"); }
		if(!obj->methodp_glTransformFeedbackVaryings) { obj->methodp_glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)GetProcAddress(modOpenGL32, "glTransformFeedbackVaryings"); }
		if(!obj->methodp_glTransformFeedbackVaryings) { args.This()->Set(v8::String::NewSymbol("glTransformFeedbackVaryings"), v8::Undefined()); }
		if(!obj->methodp_glTransformFeedbackVaryingsEXT) { obj->methodp_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)wglGetProcAddress("glTransformFeedbackVaryingsEXT"); }
		if(!obj->methodp_glTransformFeedbackVaryingsEXT) { obj->methodp_glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)GetProcAddress(modOpenGL32, "glTransformFeedbackVaryingsEXT"); }
		if(!obj->methodp_glTransformFeedbackVaryingsEXT) { args.This()->Set(v8::String::NewSymbol("glTransformFeedbackVaryingsEXT"), v8::Undefined()); }
		if(!obj->methodp_glTransformFeedbackVaryingsNV) { obj->methodp_glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)wglGetProcAddress("glTransformFeedbackVaryingsNV"); }
		if(!obj->methodp_glTransformFeedbackVaryingsNV) { obj->methodp_glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)GetProcAddress(modOpenGL32, "glTransformFeedbackVaryingsNV"); }
		if(!obj->methodp_glTransformFeedbackVaryingsNV) { args.This()->Set(v8::String::NewSymbol("glTransformFeedbackVaryingsNV"), v8::Undefined()); }
		if(!obj->methodp_glTransformPathNV) { obj->methodp_glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC)wglGetProcAddress("glTransformPathNV"); }
		if(!obj->methodp_glTransformPathNV) { obj->methodp_glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC)GetProcAddress(modOpenGL32, "glTransformPathNV"); }
		if(!obj->methodp_glTransformPathNV) { args.This()->Set(v8::String::NewSymbol("glTransformPathNV"), v8::Undefined()); }
		if(!obj->methodp_glTranslated) { obj->methodp_glTranslated = (PFNGLTRANSLATEDPROC)wglGetProcAddress("glTranslated"); }
		if(!obj->methodp_glTranslated) { obj->methodp_glTranslated = (PFNGLTRANSLATEDPROC)GetProcAddress(modOpenGL32, "glTranslated"); }
		if(!obj->methodp_glTranslated) { args.This()->Set(v8::String::NewSymbol("glTranslated"), v8::Undefined()); }
		if(!obj->methodp_glTranslatef) { obj->methodp_glTranslatef = (PFNGLTRANSLATEFPROC)wglGetProcAddress("glTranslatef"); }
		if(!obj->methodp_glTranslatef) { obj->methodp_glTranslatef = (PFNGLTRANSLATEFPROC)GetProcAddress(modOpenGL32, "glTranslatef"); }
		if(!obj->methodp_glTranslatef) { args.This()->Set(v8::String::NewSymbol("glTranslatef"), v8::Undefined()); }
		if(!obj->methodp_glTranslatex) { obj->methodp_glTranslatex = (PFNGLTRANSLATEXPROC)wglGetProcAddress("glTranslatex"); }
		if(!obj->methodp_glTranslatex) { obj->methodp_glTranslatex = (PFNGLTRANSLATEXPROC)GetProcAddress(modOpenGL32, "glTranslatex"); }
		if(!obj->methodp_glTranslatex) { args.This()->Set(v8::String::NewSymbol("glTranslatex"), v8::Undefined()); }
		if(!obj->methodp_glTranslatexOES) { obj->methodp_glTranslatexOES = (PFNGLTRANSLATEXOESPROC)wglGetProcAddress("glTranslatexOES"); }
		if(!obj->methodp_glTranslatexOES) { obj->methodp_glTranslatexOES = (PFNGLTRANSLATEXOESPROC)GetProcAddress(modOpenGL32, "glTranslatexOES"); }
		if(!obj->methodp_glTranslatexOES) { args.This()->Set(v8::String::NewSymbol("glTranslatexOES"), v8::Undefined()); }
		if(!obj->methodp_glUniform1d) { obj->methodp_glUniform1d = (PFNGLUNIFORM1DPROC)wglGetProcAddress("glUniform1d"); }
		if(!obj->methodp_glUniform1d) { obj->methodp_glUniform1d = (PFNGLUNIFORM1DPROC)GetProcAddress(modOpenGL32, "glUniform1d"); }
		if(!obj->methodp_glUniform1d) { args.This()->Set(v8::String::NewSymbol("glUniform1d"), v8::Undefined()); }
		if(!obj->methodp_glUniform1dv) { obj->methodp_glUniform1dv = (PFNGLUNIFORM1DVPROC)wglGetProcAddress("glUniform1dv"); }
		if(!obj->methodp_glUniform1dv) { obj->methodp_glUniform1dv = (PFNGLUNIFORM1DVPROC)GetProcAddress(modOpenGL32, "glUniform1dv"); }
		if(!obj->methodp_glUniform1dv) { args.This()->Set(v8::String::NewSymbol("glUniform1dv"), v8::Undefined()); }
		if(!obj->methodp_glUniform1f) { obj->methodp_glUniform1f = (PFNGLUNIFORM1FPROC)wglGetProcAddress("glUniform1f"); }
		if(!obj->methodp_glUniform1f) { obj->methodp_glUniform1f = (PFNGLUNIFORM1FPROC)GetProcAddress(modOpenGL32, "glUniform1f"); }
		if(!obj->methodp_glUniform1f) { args.This()->Set(v8::String::NewSymbol("glUniform1f"), v8::Undefined()); }
		if(!obj->methodp_glUniform1fARB) { obj->methodp_glUniform1fARB = (PFNGLUNIFORM1FARBPROC)wglGetProcAddress("glUniform1fARB"); }
		if(!obj->methodp_glUniform1fARB) { obj->methodp_glUniform1fARB = (PFNGLUNIFORM1FARBPROC)GetProcAddress(modOpenGL32, "glUniform1fARB"); }
		if(!obj->methodp_glUniform1fARB) { args.This()->Set(v8::String::NewSymbol("glUniform1fARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform1fv) { obj->methodp_glUniform1fv = (PFNGLUNIFORM1FVPROC)wglGetProcAddress("glUniform1fv"); }
		if(!obj->methodp_glUniform1fv) { obj->methodp_glUniform1fv = (PFNGLUNIFORM1FVPROC)GetProcAddress(modOpenGL32, "glUniform1fv"); }
		if(!obj->methodp_glUniform1fv) { args.This()->Set(v8::String::NewSymbol("glUniform1fv"), v8::Undefined()); }
		if(!obj->methodp_glUniform1fvARB) { obj->methodp_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)wglGetProcAddress("glUniform1fvARB"); }
		if(!obj->methodp_glUniform1fvARB) { obj->methodp_glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)GetProcAddress(modOpenGL32, "glUniform1fvARB"); }
		if(!obj->methodp_glUniform1fvARB) { args.This()->Set(v8::String::NewSymbol("glUniform1fvARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform1i) { obj->methodp_glUniform1i = (PFNGLUNIFORM1IPROC)wglGetProcAddress("glUniform1i"); }
		if(!obj->methodp_glUniform1i) { obj->methodp_glUniform1i = (PFNGLUNIFORM1IPROC)GetProcAddress(modOpenGL32, "glUniform1i"); }
		if(!obj->methodp_glUniform1i) { args.This()->Set(v8::String::NewSymbol("glUniform1i"), v8::Undefined()); }
		if(!obj->methodp_glUniform1i64NV) { obj->methodp_glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC)wglGetProcAddress("glUniform1i64NV"); }
		if(!obj->methodp_glUniform1i64NV) { obj->methodp_glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC)GetProcAddress(modOpenGL32, "glUniform1i64NV"); }
		if(!obj->methodp_glUniform1i64NV) { args.This()->Set(v8::String::NewSymbol("glUniform1i64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniform1i64vNV) { obj->methodp_glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC)wglGetProcAddress("glUniform1i64vNV"); }
		if(!obj->methodp_glUniform1i64vNV) { obj->methodp_glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC)GetProcAddress(modOpenGL32, "glUniform1i64vNV"); }
		if(!obj->methodp_glUniform1i64vNV) { args.This()->Set(v8::String::NewSymbol("glUniform1i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniform1iARB) { obj->methodp_glUniform1iARB = (PFNGLUNIFORM1IARBPROC)wglGetProcAddress("glUniform1iARB"); }
		if(!obj->methodp_glUniform1iARB) { obj->methodp_glUniform1iARB = (PFNGLUNIFORM1IARBPROC)GetProcAddress(modOpenGL32, "glUniform1iARB"); }
		if(!obj->methodp_glUniform1iARB) { args.This()->Set(v8::String::NewSymbol("glUniform1iARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform1iv) { obj->methodp_glUniform1iv = (PFNGLUNIFORM1IVPROC)wglGetProcAddress("glUniform1iv"); }
		if(!obj->methodp_glUniform1iv) { obj->methodp_glUniform1iv = (PFNGLUNIFORM1IVPROC)GetProcAddress(modOpenGL32, "glUniform1iv"); }
		if(!obj->methodp_glUniform1iv) { args.This()->Set(v8::String::NewSymbol("glUniform1iv"), v8::Undefined()); }
		if(!obj->methodp_glUniform1ivARB) { obj->methodp_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)wglGetProcAddress("glUniform1ivARB"); }
		if(!obj->methodp_glUniform1ivARB) { obj->methodp_glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)GetProcAddress(modOpenGL32, "glUniform1ivARB"); }
		if(!obj->methodp_glUniform1ivARB) { args.This()->Set(v8::String::NewSymbol("glUniform1ivARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform1ui) { obj->methodp_glUniform1ui = (PFNGLUNIFORM1UIPROC)wglGetProcAddress("glUniform1ui"); }
		if(!obj->methodp_glUniform1ui) { obj->methodp_glUniform1ui = (PFNGLUNIFORM1UIPROC)GetProcAddress(modOpenGL32, "glUniform1ui"); }
		if(!obj->methodp_glUniform1ui) { args.This()->Set(v8::String::NewSymbol("glUniform1ui"), v8::Undefined()); }
		if(!obj->methodp_glUniform1ui64NV) { obj->methodp_glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC)wglGetProcAddress("glUniform1ui64NV"); }
		if(!obj->methodp_glUniform1ui64NV) { obj->methodp_glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC)GetProcAddress(modOpenGL32, "glUniform1ui64NV"); }
		if(!obj->methodp_glUniform1ui64NV) { args.This()->Set(v8::String::NewSymbol("glUniform1ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniform1ui64vNV) { obj->methodp_glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC)wglGetProcAddress("glUniform1ui64vNV"); }
		if(!obj->methodp_glUniform1ui64vNV) { obj->methodp_glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC)GetProcAddress(modOpenGL32, "glUniform1ui64vNV"); }
		if(!obj->methodp_glUniform1ui64vNV) { args.This()->Set(v8::String::NewSymbol("glUniform1ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniform1uiEXT) { obj->methodp_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)wglGetProcAddress("glUniform1uiEXT"); }
		if(!obj->methodp_glUniform1uiEXT) { obj->methodp_glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)GetProcAddress(modOpenGL32, "glUniform1uiEXT"); }
		if(!obj->methodp_glUniform1uiEXT) { args.This()->Set(v8::String::NewSymbol("glUniform1uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniform1uiv) { obj->methodp_glUniform1uiv = (PFNGLUNIFORM1UIVPROC)wglGetProcAddress("glUniform1uiv"); }
		if(!obj->methodp_glUniform1uiv) { obj->methodp_glUniform1uiv = (PFNGLUNIFORM1UIVPROC)GetProcAddress(modOpenGL32, "glUniform1uiv"); }
		if(!obj->methodp_glUniform1uiv) { args.This()->Set(v8::String::NewSymbol("glUniform1uiv"), v8::Undefined()); }
		if(!obj->methodp_glUniform1uivEXT) { obj->methodp_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)wglGetProcAddress("glUniform1uivEXT"); }
		if(!obj->methodp_glUniform1uivEXT) { obj->methodp_glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)GetProcAddress(modOpenGL32, "glUniform1uivEXT"); }
		if(!obj->methodp_glUniform1uivEXT) { args.This()->Set(v8::String::NewSymbol("glUniform1uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniform2d) { obj->methodp_glUniform2d = (PFNGLUNIFORM2DPROC)wglGetProcAddress("glUniform2d"); }
		if(!obj->methodp_glUniform2d) { obj->methodp_glUniform2d = (PFNGLUNIFORM2DPROC)GetProcAddress(modOpenGL32, "glUniform2d"); }
		if(!obj->methodp_glUniform2d) { args.This()->Set(v8::String::NewSymbol("glUniform2d"), v8::Undefined()); }
		if(!obj->methodp_glUniform2dv) { obj->methodp_glUniform2dv = (PFNGLUNIFORM2DVPROC)wglGetProcAddress("glUniform2dv"); }
		if(!obj->methodp_glUniform2dv) { obj->methodp_glUniform2dv = (PFNGLUNIFORM2DVPROC)GetProcAddress(modOpenGL32, "glUniform2dv"); }
		if(!obj->methodp_glUniform2dv) { args.This()->Set(v8::String::NewSymbol("glUniform2dv"), v8::Undefined()); }
		if(!obj->methodp_glUniform2f) { obj->methodp_glUniform2f = (PFNGLUNIFORM2FPROC)wglGetProcAddress("glUniform2f"); }
		if(!obj->methodp_glUniform2f) { obj->methodp_glUniform2f = (PFNGLUNIFORM2FPROC)GetProcAddress(modOpenGL32, "glUniform2f"); }
		if(!obj->methodp_glUniform2f) { args.This()->Set(v8::String::NewSymbol("glUniform2f"), v8::Undefined()); }
		if(!obj->methodp_glUniform2fARB) { obj->methodp_glUniform2fARB = (PFNGLUNIFORM2FARBPROC)wglGetProcAddress("glUniform2fARB"); }
		if(!obj->methodp_glUniform2fARB) { obj->methodp_glUniform2fARB = (PFNGLUNIFORM2FARBPROC)GetProcAddress(modOpenGL32, "glUniform2fARB"); }
		if(!obj->methodp_glUniform2fARB) { args.This()->Set(v8::String::NewSymbol("glUniform2fARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform2fv) { obj->methodp_glUniform2fv = (PFNGLUNIFORM2FVPROC)wglGetProcAddress("glUniform2fv"); }
		if(!obj->methodp_glUniform2fv) { obj->methodp_glUniform2fv = (PFNGLUNIFORM2FVPROC)GetProcAddress(modOpenGL32, "glUniform2fv"); }
		if(!obj->methodp_glUniform2fv) { args.This()->Set(v8::String::NewSymbol("glUniform2fv"), v8::Undefined()); }
		if(!obj->methodp_glUniform2fvARB) { obj->methodp_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)wglGetProcAddress("glUniform2fvARB"); }
		if(!obj->methodp_glUniform2fvARB) { obj->methodp_glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)GetProcAddress(modOpenGL32, "glUniform2fvARB"); }
		if(!obj->methodp_glUniform2fvARB) { args.This()->Set(v8::String::NewSymbol("glUniform2fvARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform2i) { obj->methodp_glUniform2i = (PFNGLUNIFORM2IPROC)wglGetProcAddress("glUniform2i"); }
		if(!obj->methodp_glUniform2i) { obj->methodp_glUniform2i = (PFNGLUNIFORM2IPROC)GetProcAddress(modOpenGL32, "glUniform2i"); }
		if(!obj->methodp_glUniform2i) { args.This()->Set(v8::String::NewSymbol("glUniform2i"), v8::Undefined()); }
		if(!obj->methodp_glUniform2i64NV) { obj->methodp_glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC)wglGetProcAddress("glUniform2i64NV"); }
		if(!obj->methodp_glUniform2i64NV) { obj->methodp_glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC)GetProcAddress(modOpenGL32, "glUniform2i64NV"); }
		if(!obj->methodp_glUniform2i64NV) { args.This()->Set(v8::String::NewSymbol("glUniform2i64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniform2i64vNV) { obj->methodp_glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC)wglGetProcAddress("glUniform2i64vNV"); }
		if(!obj->methodp_glUniform2i64vNV) { obj->methodp_glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC)GetProcAddress(modOpenGL32, "glUniform2i64vNV"); }
		if(!obj->methodp_glUniform2i64vNV) { args.This()->Set(v8::String::NewSymbol("glUniform2i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniform2iARB) { obj->methodp_glUniform2iARB = (PFNGLUNIFORM2IARBPROC)wglGetProcAddress("glUniform2iARB"); }
		if(!obj->methodp_glUniform2iARB) { obj->methodp_glUniform2iARB = (PFNGLUNIFORM2IARBPROC)GetProcAddress(modOpenGL32, "glUniform2iARB"); }
		if(!obj->methodp_glUniform2iARB) { args.This()->Set(v8::String::NewSymbol("glUniform2iARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform2iv) { obj->methodp_glUniform2iv = (PFNGLUNIFORM2IVPROC)wglGetProcAddress("glUniform2iv"); }
		if(!obj->methodp_glUniform2iv) { obj->methodp_glUniform2iv = (PFNGLUNIFORM2IVPROC)GetProcAddress(modOpenGL32, "glUniform2iv"); }
		if(!obj->methodp_glUniform2iv) { args.This()->Set(v8::String::NewSymbol("glUniform2iv"), v8::Undefined()); }
		if(!obj->methodp_glUniform2ivARB) { obj->methodp_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)wglGetProcAddress("glUniform2ivARB"); }
		if(!obj->methodp_glUniform2ivARB) { obj->methodp_glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)GetProcAddress(modOpenGL32, "glUniform2ivARB"); }
		if(!obj->methodp_glUniform2ivARB) { args.This()->Set(v8::String::NewSymbol("glUniform2ivARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform2ui) { obj->methodp_glUniform2ui = (PFNGLUNIFORM2UIPROC)wglGetProcAddress("glUniform2ui"); }
		if(!obj->methodp_glUniform2ui) { obj->methodp_glUniform2ui = (PFNGLUNIFORM2UIPROC)GetProcAddress(modOpenGL32, "glUniform2ui"); }
		if(!obj->methodp_glUniform2ui) { args.This()->Set(v8::String::NewSymbol("glUniform2ui"), v8::Undefined()); }
		if(!obj->methodp_glUniform2ui64NV) { obj->methodp_glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC)wglGetProcAddress("glUniform2ui64NV"); }
		if(!obj->methodp_glUniform2ui64NV) { obj->methodp_glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC)GetProcAddress(modOpenGL32, "glUniform2ui64NV"); }
		if(!obj->methodp_glUniform2ui64NV) { args.This()->Set(v8::String::NewSymbol("glUniform2ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniform2ui64vNV) { obj->methodp_glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC)wglGetProcAddress("glUniform2ui64vNV"); }
		if(!obj->methodp_glUniform2ui64vNV) { obj->methodp_glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC)GetProcAddress(modOpenGL32, "glUniform2ui64vNV"); }
		if(!obj->methodp_glUniform2ui64vNV) { args.This()->Set(v8::String::NewSymbol("glUniform2ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniform2uiEXT) { obj->methodp_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)wglGetProcAddress("glUniform2uiEXT"); }
		if(!obj->methodp_glUniform2uiEXT) { obj->methodp_glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)GetProcAddress(modOpenGL32, "glUniform2uiEXT"); }
		if(!obj->methodp_glUniform2uiEXT) { args.This()->Set(v8::String::NewSymbol("glUniform2uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniform2uiv) { obj->methodp_glUniform2uiv = (PFNGLUNIFORM2UIVPROC)wglGetProcAddress("glUniform2uiv"); }
		if(!obj->methodp_glUniform2uiv) { obj->methodp_glUniform2uiv = (PFNGLUNIFORM2UIVPROC)GetProcAddress(modOpenGL32, "glUniform2uiv"); }
		if(!obj->methodp_glUniform2uiv) { args.This()->Set(v8::String::NewSymbol("glUniform2uiv"), v8::Undefined()); }
		if(!obj->methodp_glUniform2uivEXT) { obj->methodp_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)wglGetProcAddress("glUniform2uivEXT"); }
		if(!obj->methodp_glUniform2uivEXT) { obj->methodp_glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)GetProcAddress(modOpenGL32, "glUniform2uivEXT"); }
		if(!obj->methodp_glUniform2uivEXT) { args.This()->Set(v8::String::NewSymbol("glUniform2uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniform3d) { obj->methodp_glUniform3d = (PFNGLUNIFORM3DPROC)wglGetProcAddress("glUniform3d"); }
		if(!obj->methodp_glUniform3d) { obj->methodp_glUniform3d = (PFNGLUNIFORM3DPROC)GetProcAddress(modOpenGL32, "glUniform3d"); }
		if(!obj->methodp_glUniform3d) { args.This()->Set(v8::String::NewSymbol("glUniform3d"), v8::Undefined()); }
		if(!obj->methodp_glUniform3dv) { obj->methodp_glUniform3dv = (PFNGLUNIFORM3DVPROC)wglGetProcAddress("glUniform3dv"); }
		if(!obj->methodp_glUniform3dv) { obj->methodp_glUniform3dv = (PFNGLUNIFORM3DVPROC)GetProcAddress(modOpenGL32, "glUniform3dv"); }
		if(!obj->methodp_glUniform3dv) { args.This()->Set(v8::String::NewSymbol("glUniform3dv"), v8::Undefined()); }
		if(!obj->methodp_glUniform3f) { obj->methodp_glUniform3f = (PFNGLUNIFORM3FPROC)wglGetProcAddress("glUniform3f"); }
		if(!obj->methodp_glUniform3f) { obj->methodp_glUniform3f = (PFNGLUNIFORM3FPROC)GetProcAddress(modOpenGL32, "glUniform3f"); }
		if(!obj->methodp_glUniform3f) { args.This()->Set(v8::String::NewSymbol("glUniform3f"), v8::Undefined()); }
		if(!obj->methodp_glUniform3fARB) { obj->methodp_glUniform3fARB = (PFNGLUNIFORM3FARBPROC)wglGetProcAddress("glUniform3fARB"); }
		if(!obj->methodp_glUniform3fARB) { obj->methodp_glUniform3fARB = (PFNGLUNIFORM3FARBPROC)GetProcAddress(modOpenGL32, "glUniform3fARB"); }
		if(!obj->methodp_glUniform3fARB) { args.This()->Set(v8::String::NewSymbol("glUniform3fARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform3fv) { obj->methodp_glUniform3fv = (PFNGLUNIFORM3FVPROC)wglGetProcAddress("glUniform3fv"); }
		if(!obj->methodp_glUniform3fv) { obj->methodp_glUniform3fv = (PFNGLUNIFORM3FVPROC)GetProcAddress(modOpenGL32, "glUniform3fv"); }
		if(!obj->methodp_glUniform3fv) { args.This()->Set(v8::String::NewSymbol("glUniform3fv"), v8::Undefined()); }
		if(!obj->methodp_glUniform3fvARB) { obj->methodp_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)wglGetProcAddress("glUniform3fvARB"); }
		if(!obj->methodp_glUniform3fvARB) { obj->methodp_glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)GetProcAddress(modOpenGL32, "glUniform3fvARB"); }
		if(!obj->methodp_glUniform3fvARB) { args.This()->Set(v8::String::NewSymbol("glUniform3fvARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform3i) { obj->methodp_glUniform3i = (PFNGLUNIFORM3IPROC)wglGetProcAddress("glUniform3i"); }
		if(!obj->methodp_glUniform3i) { obj->methodp_glUniform3i = (PFNGLUNIFORM3IPROC)GetProcAddress(modOpenGL32, "glUniform3i"); }
		if(!obj->methodp_glUniform3i) { args.This()->Set(v8::String::NewSymbol("glUniform3i"), v8::Undefined()); }
		if(!obj->methodp_glUniform3i64NV) { obj->methodp_glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC)wglGetProcAddress("glUniform3i64NV"); }
		if(!obj->methodp_glUniform3i64NV) { obj->methodp_glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC)GetProcAddress(modOpenGL32, "glUniform3i64NV"); }
		if(!obj->methodp_glUniform3i64NV) { args.This()->Set(v8::String::NewSymbol("glUniform3i64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniform3i64vNV) { obj->methodp_glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC)wglGetProcAddress("glUniform3i64vNV"); }
		if(!obj->methodp_glUniform3i64vNV) { obj->methodp_glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC)GetProcAddress(modOpenGL32, "glUniform3i64vNV"); }
		if(!obj->methodp_glUniform3i64vNV) { args.This()->Set(v8::String::NewSymbol("glUniform3i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniform3iARB) { obj->methodp_glUniform3iARB = (PFNGLUNIFORM3IARBPROC)wglGetProcAddress("glUniform3iARB"); }
		if(!obj->methodp_glUniform3iARB) { obj->methodp_glUniform3iARB = (PFNGLUNIFORM3IARBPROC)GetProcAddress(modOpenGL32, "glUniform3iARB"); }
		if(!obj->methodp_glUniform3iARB) { args.This()->Set(v8::String::NewSymbol("glUniform3iARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform3iv) { obj->methodp_glUniform3iv = (PFNGLUNIFORM3IVPROC)wglGetProcAddress("glUniform3iv"); }
		if(!obj->methodp_glUniform3iv) { obj->methodp_glUniform3iv = (PFNGLUNIFORM3IVPROC)GetProcAddress(modOpenGL32, "glUniform3iv"); }
		if(!obj->methodp_glUniform3iv) { args.This()->Set(v8::String::NewSymbol("glUniform3iv"), v8::Undefined()); }
		if(!obj->methodp_glUniform3ivARB) { obj->methodp_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)wglGetProcAddress("glUniform3ivARB"); }
		if(!obj->methodp_glUniform3ivARB) { obj->methodp_glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)GetProcAddress(modOpenGL32, "glUniform3ivARB"); }
		if(!obj->methodp_glUniform3ivARB) { args.This()->Set(v8::String::NewSymbol("glUniform3ivARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform3ui) { obj->methodp_glUniform3ui = (PFNGLUNIFORM3UIPROC)wglGetProcAddress("glUniform3ui"); }
		if(!obj->methodp_glUniform3ui) { obj->methodp_glUniform3ui = (PFNGLUNIFORM3UIPROC)GetProcAddress(modOpenGL32, "glUniform3ui"); }
		if(!obj->methodp_glUniform3ui) { args.This()->Set(v8::String::NewSymbol("glUniform3ui"), v8::Undefined()); }
		if(!obj->methodp_glUniform3ui64NV) { obj->methodp_glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC)wglGetProcAddress("glUniform3ui64NV"); }
		if(!obj->methodp_glUniform3ui64NV) { obj->methodp_glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC)GetProcAddress(modOpenGL32, "glUniform3ui64NV"); }
		if(!obj->methodp_glUniform3ui64NV) { args.This()->Set(v8::String::NewSymbol("glUniform3ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniform3ui64vNV) { obj->methodp_glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC)wglGetProcAddress("glUniform3ui64vNV"); }
		if(!obj->methodp_glUniform3ui64vNV) { obj->methodp_glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC)GetProcAddress(modOpenGL32, "glUniform3ui64vNV"); }
		if(!obj->methodp_glUniform3ui64vNV) { args.This()->Set(v8::String::NewSymbol("glUniform3ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniform3uiEXT) { obj->methodp_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)wglGetProcAddress("glUniform3uiEXT"); }
		if(!obj->methodp_glUniform3uiEXT) { obj->methodp_glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)GetProcAddress(modOpenGL32, "glUniform3uiEXT"); }
		if(!obj->methodp_glUniform3uiEXT) { args.This()->Set(v8::String::NewSymbol("glUniform3uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniform3uiv) { obj->methodp_glUniform3uiv = (PFNGLUNIFORM3UIVPROC)wglGetProcAddress("glUniform3uiv"); }
		if(!obj->methodp_glUniform3uiv) { obj->methodp_glUniform3uiv = (PFNGLUNIFORM3UIVPROC)GetProcAddress(modOpenGL32, "glUniform3uiv"); }
		if(!obj->methodp_glUniform3uiv) { args.This()->Set(v8::String::NewSymbol("glUniform3uiv"), v8::Undefined()); }
		if(!obj->methodp_glUniform3uivEXT) { obj->methodp_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)wglGetProcAddress("glUniform3uivEXT"); }
		if(!obj->methodp_glUniform3uivEXT) { obj->methodp_glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)GetProcAddress(modOpenGL32, "glUniform3uivEXT"); }
		if(!obj->methodp_glUniform3uivEXT) { args.This()->Set(v8::String::NewSymbol("glUniform3uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniform4d) { obj->methodp_glUniform4d = (PFNGLUNIFORM4DPROC)wglGetProcAddress("glUniform4d"); }
		if(!obj->methodp_glUniform4d) { obj->methodp_glUniform4d = (PFNGLUNIFORM4DPROC)GetProcAddress(modOpenGL32, "glUniform4d"); }
		if(!obj->methodp_glUniform4d) { args.This()->Set(v8::String::NewSymbol("glUniform4d"), v8::Undefined()); }
		if(!obj->methodp_glUniform4dv) { obj->methodp_glUniform4dv = (PFNGLUNIFORM4DVPROC)wglGetProcAddress("glUniform4dv"); }
		if(!obj->methodp_glUniform4dv) { obj->methodp_glUniform4dv = (PFNGLUNIFORM4DVPROC)GetProcAddress(modOpenGL32, "glUniform4dv"); }
		if(!obj->methodp_glUniform4dv) { args.This()->Set(v8::String::NewSymbol("glUniform4dv"), v8::Undefined()); }
		if(!obj->methodp_glUniform4f) { obj->methodp_glUniform4f = (PFNGLUNIFORM4FPROC)wglGetProcAddress("glUniform4f"); }
		if(!obj->methodp_glUniform4f) { obj->methodp_glUniform4f = (PFNGLUNIFORM4FPROC)GetProcAddress(modOpenGL32, "glUniform4f"); }
		if(!obj->methodp_glUniform4f) { args.This()->Set(v8::String::NewSymbol("glUniform4f"), v8::Undefined()); }
		if(!obj->methodp_glUniform4fARB) { obj->methodp_glUniform4fARB = (PFNGLUNIFORM4FARBPROC)wglGetProcAddress("glUniform4fARB"); }
		if(!obj->methodp_glUniform4fARB) { obj->methodp_glUniform4fARB = (PFNGLUNIFORM4FARBPROC)GetProcAddress(modOpenGL32, "glUniform4fARB"); }
		if(!obj->methodp_glUniform4fARB) { args.This()->Set(v8::String::NewSymbol("glUniform4fARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform4fv) { obj->methodp_glUniform4fv = (PFNGLUNIFORM4FVPROC)wglGetProcAddress("glUniform4fv"); }
		if(!obj->methodp_glUniform4fv) { obj->methodp_glUniform4fv = (PFNGLUNIFORM4FVPROC)GetProcAddress(modOpenGL32, "glUniform4fv"); }
		if(!obj->methodp_glUniform4fv) { args.This()->Set(v8::String::NewSymbol("glUniform4fv"), v8::Undefined()); }
		if(!obj->methodp_glUniform4fvARB) { obj->methodp_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)wglGetProcAddress("glUniform4fvARB"); }
		if(!obj->methodp_glUniform4fvARB) { obj->methodp_glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)GetProcAddress(modOpenGL32, "glUniform4fvARB"); }
		if(!obj->methodp_glUniform4fvARB) { args.This()->Set(v8::String::NewSymbol("glUniform4fvARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform4i) { obj->methodp_glUniform4i = (PFNGLUNIFORM4IPROC)wglGetProcAddress("glUniform4i"); }
		if(!obj->methodp_glUniform4i) { obj->methodp_glUniform4i = (PFNGLUNIFORM4IPROC)GetProcAddress(modOpenGL32, "glUniform4i"); }
		if(!obj->methodp_glUniform4i) { args.This()->Set(v8::String::NewSymbol("glUniform4i"), v8::Undefined()); }
		if(!obj->methodp_glUniform4i64NV) { obj->methodp_glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC)wglGetProcAddress("glUniform4i64NV"); }
		if(!obj->methodp_glUniform4i64NV) { obj->methodp_glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC)GetProcAddress(modOpenGL32, "glUniform4i64NV"); }
		if(!obj->methodp_glUniform4i64NV) { args.This()->Set(v8::String::NewSymbol("glUniform4i64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniform4i64vNV) { obj->methodp_glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC)wglGetProcAddress("glUniform4i64vNV"); }
		if(!obj->methodp_glUniform4i64vNV) { obj->methodp_glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC)GetProcAddress(modOpenGL32, "glUniform4i64vNV"); }
		if(!obj->methodp_glUniform4i64vNV) { args.This()->Set(v8::String::NewSymbol("glUniform4i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniform4iARB) { obj->methodp_glUniform4iARB = (PFNGLUNIFORM4IARBPROC)wglGetProcAddress("glUniform4iARB"); }
		if(!obj->methodp_glUniform4iARB) { obj->methodp_glUniform4iARB = (PFNGLUNIFORM4IARBPROC)GetProcAddress(modOpenGL32, "glUniform4iARB"); }
		if(!obj->methodp_glUniform4iARB) { args.This()->Set(v8::String::NewSymbol("glUniform4iARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform4iv) { obj->methodp_glUniform4iv = (PFNGLUNIFORM4IVPROC)wglGetProcAddress("glUniform4iv"); }
		if(!obj->methodp_glUniform4iv) { obj->methodp_glUniform4iv = (PFNGLUNIFORM4IVPROC)GetProcAddress(modOpenGL32, "glUniform4iv"); }
		if(!obj->methodp_glUniform4iv) { args.This()->Set(v8::String::NewSymbol("glUniform4iv"), v8::Undefined()); }
		if(!obj->methodp_glUniform4ivARB) { obj->methodp_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)wglGetProcAddress("glUniform4ivARB"); }
		if(!obj->methodp_glUniform4ivARB) { obj->methodp_glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)GetProcAddress(modOpenGL32, "glUniform4ivARB"); }
		if(!obj->methodp_glUniform4ivARB) { args.This()->Set(v8::String::NewSymbol("glUniform4ivARB"), v8::Undefined()); }
		if(!obj->methodp_glUniform4ui) { obj->methodp_glUniform4ui = (PFNGLUNIFORM4UIPROC)wglGetProcAddress("glUniform4ui"); }
		if(!obj->methodp_glUniform4ui) { obj->methodp_glUniform4ui = (PFNGLUNIFORM4UIPROC)GetProcAddress(modOpenGL32, "glUniform4ui"); }
		if(!obj->methodp_glUniform4ui) { args.This()->Set(v8::String::NewSymbol("glUniform4ui"), v8::Undefined()); }
		if(!obj->methodp_glUniform4ui64NV) { obj->methodp_glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC)wglGetProcAddress("glUniform4ui64NV"); }
		if(!obj->methodp_glUniform4ui64NV) { obj->methodp_glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC)GetProcAddress(modOpenGL32, "glUniform4ui64NV"); }
		if(!obj->methodp_glUniform4ui64NV) { args.This()->Set(v8::String::NewSymbol("glUniform4ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniform4ui64vNV) { obj->methodp_glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC)wglGetProcAddress("glUniform4ui64vNV"); }
		if(!obj->methodp_glUniform4ui64vNV) { obj->methodp_glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC)GetProcAddress(modOpenGL32, "glUniform4ui64vNV"); }
		if(!obj->methodp_glUniform4ui64vNV) { args.This()->Set(v8::String::NewSymbol("glUniform4ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniform4uiEXT) { obj->methodp_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)wglGetProcAddress("glUniform4uiEXT"); }
		if(!obj->methodp_glUniform4uiEXT) { obj->methodp_glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)GetProcAddress(modOpenGL32, "glUniform4uiEXT"); }
		if(!obj->methodp_glUniform4uiEXT) { args.This()->Set(v8::String::NewSymbol("glUniform4uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniform4uiv) { obj->methodp_glUniform4uiv = (PFNGLUNIFORM4UIVPROC)wglGetProcAddress("glUniform4uiv"); }
		if(!obj->methodp_glUniform4uiv) { obj->methodp_glUniform4uiv = (PFNGLUNIFORM4UIVPROC)GetProcAddress(modOpenGL32, "glUniform4uiv"); }
		if(!obj->methodp_glUniform4uiv) { args.This()->Set(v8::String::NewSymbol("glUniform4uiv"), v8::Undefined()); }
		if(!obj->methodp_glUniform4uivEXT) { obj->methodp_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)wglGetProcAddress("glUniform4uivEXT"); }
		if(!obj->methodp_glUniform4uivEXT) { obj->methodp_glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)GetProcAddress(modOpenGL32, "glUniform4uivEXT"); }
		if(!obj->methodp_glUniform4uivEXT) { args.This()->Set(v8::String::NewSymbol("glUniform4uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniformBlockBinding) { obj->methodp_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)wglGetProcAddress("glUniformBlockBinding"); }
		if(!obj->methodp_glUniformBlockBinding) { obj->methodp_glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)GetProcAddress(modOpenGL32, "glUniformBlockBinding"); }
		if(!obj->methodp_glUniformBlockBinding) { args.This()->Set(v8::String::NewSymbol("glUniformBlockBinding"), v8::Undefined()); }
		if(!obj->methodp_glUniformBufferEXT) { obj->methodp_glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC)wglGetProcAddress("glUniformBufferEXT"); }
		if(!obj->methodp_glUniformBufferEXT) { obj->methodp_glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glUniformBufferEXT"); }
		if(!obj->methodp_glUniformBufferEXT) { args.This()->Set(v8::String::NewSymbol("glUniformBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glUniformHandleui64ARB) { obj->methodp_glUniformHandleui64ARB = (PFNGLUNIFORMHANDLEUI64ARBPROC)wglGetProcAddress("glUniformHandleui64ARB"); }
		if(!obj->methodp_glUniformHandleui64ARB) { obj->methodp_glUniformHandleui64ARB = (PFNGLUNIFORMHANDLEUI64ARBPROC)GetProcAddress(modOpenGL32, "glUniformHandleui64ARB"); }
		if(!obj->methodp_glUniformHandleui64ARB) { args.This()->Set(v8::String::NewSymbol("glUniformHandleui64ARB"), v8::Undefined()); }
		if(!obj->methodp_glUniformHandleui64NV) { obj->methodp_glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC)wglGetProcAddress("glUniformHandleui64NV"); }
		if(!obj->methodp_glUniformHandleui64NV) { obj->methodp_glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC)GetProcAddress(modOpenGL32, "glUniformHandleui64NV"); }
		if(!obj->methodp_glUniformHandleui64NV) { args.This()->Set(v8::String::NewSymbol("glUniformHandleui64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniformHandleui64vARB) { obj->methodp_glUniformHandleui64vARB = (PFNGLUNIFORMHANDLEUI64VARBPROC)wglGetProcAddress("glUniformHandleui64vARB"); }
		if(!obj->methodp_glUniformHandleui64vARB) { obj->methodp_glUniformHandleui64vARB = (PFNGLUNIFORMHANDLEUI64VARBPROC)GetProcAddress(modOpenGL32, "glUniformHandleui64vARB"); }
		if(!obj->methodp_glUniformHandleui64vARB) { args.This()->Set(v8::String::NewSymbol("glUniformHandleui64vARB"), v8::Undefined()); }
		if(!obj->methodp_glUniformHandleui64vNV) { obj->methodp_glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC)wglGetProcAddress("glUniformHandleui64vNV"); }
		if(!obj->methodp_glUniformHandleui64vNV) { obj->methodp_glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC)GetProcAddress(modOpenGL32, "glUniformHandleui64vNV"); }
		if(!obj->methodp_glUniformHandleui64vNV) { args.This()->Set(v8::String::NewSymbol("glUniformHandleui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2dv) { obj->methodp_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)wglGetProcAddress("glUniformMatrix2dv"); }
		if(!obj->methodp_glUniformMatrix2dv) { obj->methodp_glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2dv"); }
		if(!obj->methodp_glUniformMatrix2dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2fv) { obj->methodp_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)wglGetProcAddress("glUniformMatrix2fv"); }
		if(!obj->methodp_glUniformMatrix2fv) { obj->methodp_glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2fv"); }
		if(!obj->methodp_glUniformMatrix2fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2fvARB) { obj->methodp_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)wglGetProcAddress("glUniformMatrix2fvARB"); }
		if(!obj->methodp_glUniformMatrix2fvARB) { obj->methodp_glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2fvARB"); }
		if(!obj->methodp_glUniformMatrix2fvARB) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2fvARB"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2x3dv) { obj->methodp_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)wglGetProcAddress("glUniformMatrix2x3dv"); }
		if(!obj->methodp_glUniformMatrix2x3dv) { obj->methodp_glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2x3dv"); }
		if(!obj->methodp_glUniformMatrix2x3dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2x3dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2x3fv) { obj->methodp_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)wglGetProcAddress("glUniformMatrix2x3fv"); }
		if(!obj->methodp_glUniformMatrix2x3fv) { obj->methodp_glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2x3fv"); }
		if(!obj->methodp_glUniformMatrix2x3fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2x3fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2x3fvNV) { obj->methodp_glUniformMatrix2x3fvNV = (PFNGLUNIFORMMATRIX2X3FVNVPROC)wglGetProcAddress("glUniformMatrix2x3fvNV"); }
		if(!obj->methodp_glUniformMatrix2x3fvNV) { obj->methodp_glUniformMatrix2x3fvNV = (PFNGLUNIFORMMATRIX2X3FVNVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2x3fvNV"); }
		if(!obj->methodp_glUniformMatrix2x3fvNV) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2x3fvNV"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2x4dv) { obj->methodp_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)wglGetProcAddress("glUniformMatrix2x4dv"); }
		if(!obj->methodp_glUniformMatrix2x4dv) { obj->methodp_glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2x4dv"); }
		if(!obj->methodp_glUniformMatrix2x4dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2x4dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2x4fv) { obj->methodp_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)wglGetProcAddress("glUniformMatrix2x4fv"); }
		if(!obj->methodp_glUniformMatrix2x4fv) { obj->methodp_glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2x4fv"); }
		if(!obj->methodp_glUniformMatrix2x4fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2x4fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix2x4fvNV) { obj->methodp_glUniformMatrix2x4fvNV = (PFNGLUNIFORMMATRIX2X4FVNVPROC)wglGetProcAddress("glUniformMatrix2x4fvNV"); }
		if(!obj->methodp_glUniformMatrix2x4fvNV) { obj->methodp_glUniformMatrix2x4fvNV = (PFNGLUNIFORMMATRIX2X4FVNVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix2x4fvNV"); }
		if(!obj->methodp_glUniformMatrix2x4fvNV) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix2x4fvNV"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3dv) { obj->methodp_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)wglGetProcAddress("glUniformMatrix3dv"); }
		if(!obj->methodp_glUniformMatrix3dv) { obj->methodp_glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3dv"); }
		if(!obj->methodp_glUniformMatrix3dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3fv) { obj->methodp_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)wglGetProcAddress("glUniformMatrix3fv"); }
		if(!obj->methodp_glUniformMatrix3fv) { obj->methodp_glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3fv"); }
		if(!obj->methodp_glUniformMatrix3fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3fvARB) { obj->methodp_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)wglGetProcAddress("glUniformMatrix3fvARB"); }
		if(!obj->methodp_glUniformMatrix3fvARB) { obj->methodp_glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3fvARB"); }
		if(!obj->methodp_glUniformMatrix3fvARB) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3fvARB"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3x2dv) { obj->methodp_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)wglGetProcAddress("glUniformMatrix3x2dv"); }
		if(!obj->methodp_glUniformMatrix3x2dv) { obj->methodp_glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3x2dv"); }
		if(!obj->methodp_glUniformMatrix3x2dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3x2dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3x2fv) { obj->methodp_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)wglGetProcAddress("glUniformMatrix3x2fv"); }
		if(!obj->methodp_glUniformMatrix3x2fv) { obj->methodp_glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3x2fv"); }
		if(!obj->methodp_glUniformMatrix3x2fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3x2fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3x2fvNV) { obj->methodp_glUniformMatrix3x2fvNV = (PFNGLUNIFORMMATRIX3X2FVNVPROC)wglGetProcAddress("glUniformMatrix3x2fvNV"); }
		if(!obj->methodp_glUniformMatrix3x2fvNV) { obj->methodp_glUniformMatrix3x2fvNV = (PFNGLUNIFORMMATRIX3X2FVNVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3x2fvNV"); }
		if(!obj->methodp_glUniformMatrix3x2fvNV) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3x2fvNV"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3x4dv) { obj->methodp_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)wglGetProcAddress("glUniformMatrix3x4dv"); }
		if(!obj->methodp_glUniformMatrix3x4dv) { obj->methodp_glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3x4dv"); }
		if(!obj->methodp_glUniformMatrix3x4dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3x4dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3x4fv) { obj->methodp_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)wglGetProcAddress("glUniformMatrix3x4fv"); }
		if(!obj->methodp_glUniformMatrix3x4fv) { obj->methodp_glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3x4fv"); }
		if(!obj->methodp_glUniformMatrix3x4fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3x4fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix3x4fvNV) { obj->methodp_glUniformMatrix3x4fvNV = (PFNGLUNIFORMMATRIX3X4FVNVPROC)wglGetProcAddress("glUniformMatrix3x4fvNV"); }
		if(!obj->methodp_glUniformMatrix3x4fvNV) { obj->methodp_glUniformMatrix3x4fvNV = (PFNGLUNIFORMMATRIX3X4FVNVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix3x4fvNV"); }
		if(!obj->methodp_glUniformMatrix3x4fvNV) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix3x4fvNV"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4dv) { obj->methodp_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)wglGetProcAddress("glUniformMatrix4dv"); }
		if(!obj->methodp_glUniformMatrix4dv) { obj->methodp_glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4dv"); }
		if(!obj->methodp_glUniformMatrix4dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4fv) { obj->methodp_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)wglGetProcAddress("glUniformMatrix4fv"); }
		if(!obj->methodp_glUniformMatrix4fv) { obj->methodp_glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4fv"); }
		if(!obj->methodp_glUniformMatrix4fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4fvARB) { obj->methodp_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)wglGetProcAddress("glUniformMatrix4fvARB"); }
		if(!obj->methodp_glUniformMatrix4fvARB) { obj->methodp_glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4fvARB"); }
		if(!obj->methodp_glUniformMatrix4fvARB) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4fvARB"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4x2dv) { obj->methodp_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)wglGetProcAddress("glUniformMatrix4x2dv"); }
		if(!obj->methodp_glUniformMatrix4x2dv) { obj->methodp_glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4x2dv"); }
		if(!obj->methodp_glUniformMatrix4x2dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4x2dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4x2fv) { obj->methodp_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)wglGetProcAddress("glUniformMatrix4x2fv"); }
		if(!obj->methodp_glUniformMatrix4x2fv) { obj->methodp_glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4x2fv"); }
		if(!obj->methodp_glUniformMatrix4x2fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4x2fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4x2fvNV) { obj->methodp_glUniformMatrix4x2fvNV = (PFNGLUNIFORMMATRIX4X2FVNVPROC)wglGetProcAddress("glUniformMatrix4x2fvNV"); }
		if(!obj->methodp_glUniformMatrix4x2fvNV) { obj->methodp_glUniformMatrix4x2fvNV = (PFNGLUNIFORMMATRIX4X2FVNVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4x2fvNV"); }
		if(!obj->methodp_glUniformMatrix4x2fvNV) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4x2fvNV"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4x3dv) { obj->methodp_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)wglGetProcAddress("glUniformMatrix4x3dv"); }
		if(!obj->methodp_glUniformMatrix4x3dv) { obj->methodp_glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4x3dv"); }
		if(!obj->methodp_glUniformMatrix4x3dv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4x3dv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4x3fv) { obj->methodp_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)wglGetProcAddress("glUniformMatrix4x3fv"); }
		if(!obj->methodp_glUniformMatrix4x3fv) { obj->methodp_glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4x3fv"); }
		if(!obj->methodp_glUniformMatrix4x3fv) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4x3fv"), v8::Undefined()); }
		if(!obj->methodp_glUniformMatrix4x3fvNV) { obj->methodp_glUniformMatrix4x3fvNV = (PFNGLUNIFORMMATRIX4X3FVNVPROC)wglGetProcAddress("glUniformMatrix4x3fvNV"); }
		if(!obj->methodp_glUniformMatrix4x3fvNV) { obj->methodp_glUniformMatrix4x3fvNV = (PFNGLUNIFORMMATRIX4X3FVNVPROC)GetProcAddress(modOpenGL32, "glUniformMatrix4x3fvNV"); }
		if(!obj->methodp_glUniformMatrix4x3fvNV) { args.This()->Set(v8::String::NewSymbol("glUniformMatrix4x3fvNV"), v8::Undefined()); }
		if(!obj->methodp_glUniformSubroutinesuiv) { obj->methodp_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)wglGetProcAddress("glUniformSubroutinesuiv"); }
		if(!obj->methodp_glUniformSubroutinesuiv) { obj->methodp_glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)GetProcAddress(modOpenGL32, "glUniformSubroutinesuiv"); }
		if(!obj->methodp_glUniformSubroutinesuiv) { args.This()->Set(v8::String::NewSymbol("glUniformSubroutinesuiv"), v8::Undefined()); }
		if(!obj->methodp_glUniformui64NV) { obj->methodp_glUniformui64NV = (PFNGLUNIFORMUI64NVPROC)wglGetProcAddress("glUniformui64NV"); }
		if(!obj->methodp_glUniformui64NV) { obj->methodp_glUniformui64NV = (PFNGLUNIFORMUI64NVPROC)GetProcAddress(modOpenGL32, "glUniformui64NV"); }
		if(!obj->methodp_glUniformui64NV) { args.This()->Set(v8::String::NewSymbol("glUniformui64NV"), v8::Undefined()); }
		if(!obj->methodp_glUniformui64vNV) { obj->methodp_glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC)wglGetProcAddress("glUniformui64vNV"); }
		if(!obj->methodp_glUniformui64vNV) { obj->methodp_glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC)GetProcAddress(modOpenGL32, "glUniformui64vNV"); }
		if(!obj->methodp_glUniformui64vNV) { args.This()->Set(v8::String::NewSymbol("glUniformui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glUnlockArraysEXT) { obj->methodp_glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)wglGetProcAddress("glUnlockArraysEXT"); }
		if(!obj->methodp_glUnlockArraysEXT) { obj->methodp_glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)GetProcAddress(modOpenGL32, "glUnlockArraysEXT"); }
		if(!obj->methodp_glUnlockArraysEXT) { args.This()->Set(v8::String::NewSymbol("glUnlockArraysEXT"), v8::Undefined()); }
		if(!obj->methodp_glUnmapBuffer) { obj->methodp_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)wglGetProcAddress("glUnmapBuffer"); }
		if(!obj->methodp_glUnmapBuffer) { obj->methodp_glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)GetProcAddress(modOpenGL32, "glUnmapBuffer"); }
		if(!obj->methodp_glUnmapBuffer) { args.This()->Set(v8::String::NewSymbol("glUnmapBuffer"), v8::Undefined()); }
		if(!obj->methodp_glUnmapBufferARB) { obj->methodp_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)wglGetProcAddress("glUnmapBufferARB"); }
		if(!obj->methodp_glUnmapBufferARB) { obj->methodp_glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)GetProcAddress(modOpenGL32, "glUnmapBufferARB"); }
		if(!obj->methodp_glUnmapBufferARB) { args.This()->Set(v8::String::NewSymbol("glUnmapBufferARB"), v8::Undefined()); }
		if(!obj->methodp_glUnmapBufferOES) { obj->methodp_glUnmapBufferOES = (PFNGLUNMAPBUFFEROESPROC)wglGetProcAddress("glUnmapBufferOES"); }
		if(!obj->methodp_glUnmapBufferOES) { obj->methodp_glUnmapBufferOES = (PFNGLUNMAPBUFFEROESPROC)GetProcAddress(modOpenGL32, "glUnmapBufferOES"); }
		if(!obj->methodp_glUnmapBufferOES) { args.This()->Set(v8::String::NewSymbol("glUnmapBufferOES"), v8::Undefined()); }
		if(!obj->methodp_glUnmapNamedBufferEXT) { obj->methodp_glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC)wglGetProcAddress("glUnmapNamedBufferEXT"); }
		if(!obj->methodp_glUnmapNamedBufferEXT) { obj->methodp_glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glUnmapNamedBufferEXT"); }
		if(!obj->methodp_glUnmapNamedBufferEXT) { args.This()->Set(v8::String::NewSymbol("glUnmapNamedBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glUnmapObjectBufferATI) { obj->methodp_glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC)wglGetProcAddress("glUnmapObjectBufferATI"); }
		if(!obj->methodp_glUnmapObjectBufferATI) { obj->methodp_glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC)GetProcAddress(modOpenGL32, "glUnmapObjectBufferATI"); }
		if(!obj->methodp_glUnmapObjectBufferATI) { args.This()->Set(v8::String::NewSymbol("glUnmapObjectBufferATI"), v8::Undefined()); }
		if(!obj->methodp_glUnmapTexture2DINTEL) { obj->methodp_glUnmapTexture2DINTEL = (PFNGLUNMAPTEXTURE2DINTELPROC)wglGetProcAddress("glUnmapTexture2DINTEL"); }
		if(!obj->methodp_glUnmapTexture2DINTEL) { obj->methodp_glUnmapTexture2DINTEL = (PFNGLUNMAPTEXTURE2DINTELPROC)GetProcAddress(modOpenGL32, "glUnmapTexture2DINTEL"); }
		if(!obj->methodp_glUnmapTexture2DINTEL) { args.This()->Set(v8::String::NewSymbol("glUnmapTexture2DINTEL"), v8::Undefined()); }
		if(!obj->methodp_glUpdateObjectBufferATI) { obj->methodp_glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC)wglGetProcAddress("glUpdateObjectBufferATI"); }
		if(!obj->methodp_glUpdateObjectBufferATI) { obj->methodp_glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC)GetProcAddress(modOpenGL32, "glUpdateObjectBufferATI"); }
		if(!obj->methodp_glUpdateObjectBufferATI) { args.This()->Set(v8::String::NewSymbol("glUpdateObjectBufferATI"), v8::Undefined()); }
		if(!obj->methodp_glUseProgram) { obj->methodp_glUseProgram = (PFNGLUSEPROGRAMPROC)wglGetProcAddress("glUseProgram"); }
		if(!obj->methodp_glUseProgram) { obj->methodp_glUseProgram = (PFNGLUSEPROGRAMPROC)GetProcAddress(modOpenGL32, "glUseProgram"); }
		if(!obj->methodp_glUseProgram) { args.This()->Set(v8::String::NewSymbol("glUseProgram"), v8::Undefined()); }
		if(!obj->methodp_glUseProgramObjectARB) { obj->methodp_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)wglGetProcAddress("glUseProgramObjectARB"); }
		if(!obj->methodp_glUseProgramObjectARB) { obj->methodp_glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)GetProcAddress(modOpenGL32, "glUseProgramObjectARB"); }
		if(!obj->methodp_glUseProgramObjectARB) { args.This()->Set(v8::String::NewSymbol("glUseProgramObjectARB"), v8::Undefined()); }
		if(!obj->methodp_glUseProgramStages) { obj->methodp_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)wglGetProcAddress("glUseProgramStages"); }
		if(!obj->methodp_glUseProgramStages) { obj->methodp_glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)GetProcAddress(modOpenGL32, "glUseProgramStages"); }
		if(!obj->methodp_glUseProgramStages) { args.This()->Set(v8::String::NewSymbol("glUseProgramStages"), v8::Undefined()); }
		if(!obj->methodp_glUseProgramStagesEXT) { obj->methodp_glUseProgramStagesEXT = (PFNGLUSEPROGRAMSTAGESEXTPROC)wglGetProcAddress("glUseProgramStagesEXT"); }
		if(!obj->methodp_glUseProgramStagesEXT) { obj->methodp_glUseProgramStagesEXT = (PFNGLUSEPROGRAMSTAGESEXTPROC)GetProcAddress(modOpenGL32, "glUseProgramStagesEXT"); }
		if(!obj->methodp_glUseProgramStagesEXT) { args.This()->Set(v8::String::NewSymbol("glUseProgramStagesEXT"), v8::Undefined()); }
		if(!obj->methodp_glUseShaderProgramEXT) { obj->methodp_glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC)wglGetProcAddress("glUseShaderProgramEXT"); }
		if(!obj->methodp_glUseShaderProgramEXT) { obj->methodp_glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC)GetProcAddress(modOpenGL32, "glUseShaderProgramEXT"); }
		if(!obj->methodp_glUseShaderProgramEXT) { args.This()->Set(v8::String::NewSymbol("glUseShaderProgramEXT"), v8::Undefined()); }
		if(!obj->methodp_glVDPAUFiniNV) { obj->methodp_glVDPAUFiniNV = (PFNGLVDPAUFININVPROC)wglGetProcAddress("glVDPAUFiniNV"); }
		if(!obj->methodp_glVDPAUFiniNV) { obj->methodp_glVDPAUFiniNV = (PFNGLVDPAUFININVPROC)GetProcAddress(modOpenGL32, "glVDPAUFiniNV"); }
		if(!obj->methodp_glVDPAUFiniNV) { args.This()->Set(v8::String::NewSymbol("glVDPAUFiniNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAUGetSurfaceivNV) { obj->methodp_glVDPAUGetSurfaceivNV = (PFNGLVDPAUGETSURFACEIVNVPROC)wglGetProcAddress("glVDPAUGetSurfaceivNV"); }
		if(!obj->methodp_glVDPAUGetSurfaceivNV) { obj->methodp_glVDPAUGetSurfaceivNV = (PFNGLVDPAUGETSURFACEIVNVPROC)GetProcAddress(modOpenGL32, "glVDPAUGetSurfaceivNV"); }
		if(!obj->methodp_glVDPAUGetSurfaceivNV) { args.This()->Set(v8::String::NewSymbol("glVDPAUGetSurfaceivNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAUInitNV) { obj->methodp_glVDPAUInitNV = (PFNGLVDPAUINITNVPROC)wglGetProcAddress("glVDPAUInitNV"); }
		if(!obj->methodp_glVDPAUInitNV) { obj->methodp_glVDPAUInitNV = (PFNGLVDPAUINITNVPROC)GetProcAddress(modOpenGL32, "glVDPAUInitNV"); }
		if(!obj->methodp_glVDPAUInitNV) { args.This()->Set(v8::String::NewSymbol("glVDPAUInitNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAUIsSurfaceNV) { obj->methodp_glVDPAUIsSurfaceNV = (PFNGLVDPAUISSURFACENVPROC)wglGetProcAddress("glVDPAUIsSurfaceNV"); }
		if(!obj->methodp_glVDPAUIsSurfaceNV) { obj->methodp_glVDPAUIsSurfaceNV = (PFNGLVDPAUISSURFACENVPROC)GetProcAddress(modOpenGL32, "glVDPAUIsSurfaceNV"); }
		if(!obj->methodp_glVDPAUIsSurfaceNV) { args.This()->Set(v8::String::NewSymbol("glVDPAUIsSurfaceNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAUMapSurfacesNV) { obj->methodp_glVDPAUMapSurfacesNV = (PFNGLVDPAUMAPSURFACESNVPROC)wglGetProcAddress("glVDPAUMapSurfacesNV"); }
		if(!obj->methodp_glVDPAUMapSurfacesNV) { obj->methodp_glVDPAUMapSurfacesNV = (PFNGLVDPAUMAPSURFACESNVPROC)GetProcAddress(modOpenGL32, "glVDPAUMapSurfacesNV"); }
		if(!obj->methodp_glVDPAUMapSurfacesNV) { args.This()->Set(v8::String::NewSymbol("glVDPAUMapSurfacesNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAURegisterOutputSurfaceNV) { obj->methodp_glVDPAURegisterOutputSurfaceNV = (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)wglGetProcAddress("glVDPAURegisterOutputSurfaceNV"); }
		if(!obj->methodp_glVDPAURegisterOutputSurfaceNV) { obj->methodp_glVDPAURegisterOutputSurfaceNV = (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)GetProcAddress(modOpenGL32, "glVDPAURegisterOutputSurfaceNV"); }
		if(!obj->methodp_glVDPAURegisterOutputSurfaceNV) { args.This()->Set(v8::String::NewSymbol("glVDPAURegisterOutputSurfaceNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAURegisterVideoSurfaceNV) { obj->methodp_glVDPAURegisterVideoSurfaceNV = (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)wglGetProcAddress("glVDPAURegisterVideoSurfaceNV"); }
		if(!obj->methodp_glVDPAURegisterVideoSurfaceNV) { obj->methodp_glVDPAURegisterVideoSurfaceNV = (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)GetProcAddress(modOpenGL32, "glVDPAURegisterVideoSurfaceNV"); }
		if(!obj->methodp_glVDPAURegisterVideoSurfaceNV) { args.This()->Set(v8::String::NewSymbol("glVDPAURegisterVideoSurfaceNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAUSurfaceAccessNV) { obj->methodp_glVDPAUSurfaceAccessNV = (PFNGLVDPAUSURFACEACCESSNVPROC)wglGetProcAddress("glVDPAUSurfaceAccessNV"); }
		if(!obj->methodp_glVDPAUSurfaceAccessNV) { obj->methodp_glVDPAUSurfaceAccessNV = (PFNGLVDPAUSURFACEACCESSNVPROC)GetProcAddress(modOpenGL32, "glVDPAUSurfaceAccessNV"); }
		if(!obj->methodp_glVDPAUSurfaceAccessNV) { args.This()->Set(v8::String::NewSymbol("glVDPAUSurfaceAccessNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAUUnmapSurfacesNV) { obj->methodp_glVDPAUUnmapSurfacesNV = (PFNGLVDPAUUNMAPSURFACESNVPROC)wglGetProcAddress("glVDPAUUnmapSurfacesNV"); }
		if(!obj->methodp_glVDPAUUnmapSurfacesNV) { obj->methodp_glVDPAUUnmapSurfacesNV = (PFNGLVDPAUUNMAPSURFACESNVPROC)GetProcAddress(modOpenGL32, "glVDPAUUnmapSurfacesNV"); }
		if(!obj->methodp_glVDPAUUnmapSurfacesNV) { args.This()->Set(v8::String::NewSymbol("glVDPAUUnmapSurfacesNV"), v8::Undefined()); }
		if(!obj->methodp_glVDPAUUnregisterSurfaceNV) { obj->methodp_glVDPAUUnregisterSurfaceNV = (PFNGLVDPAUUNREGISTERSURFACENVPROC)wglGetProcAddress("glVDPAUUnregisterSurfaceNV"); }
		if(!obj->methodp_glVDPAUUnregisterSurfaceNV) { obj->methodp_glVDPAUUnregisterSurfaceNV = (PFNGLVDPAUUNREGISTERSURFACENVPROC)GetProcAddress(modOpenGL32, "glVDPAUUnregisterSurfaceNV"); }
		if(!obj->methodp_glVDPAUUnregisterSurfaceNV) { args.This()->Set(v8::String::NewSymbol("glVDPAUUnregisterSurfaceNV"), v8::Undefined()); }
		if(!obj->methodp_glValidateProgram) { obj->methodp_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)wglGetProcAddress("glValidateProgram"); }
		if(!obj->methodp_glValidateProgram) { obj->methodp_glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)GetProcAddress(modOpenGL32, "glValidateProgram"); }
		if(!obj->methodp_glValidateProgram) { args.This()->Set(v8::String::NewSymbol("glValidateProgram"), v8::Undefined()); }
		if(!obj->methodp_glValidateProgramARB) { obj->methodp_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)wglGetProcAddress("glValidateProgramARB"); }
		if(!obj->methodp_glValidateProgramARB) { obj->methodp_glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)GetProcAddress(modOpenGL32, "glValidateProgramARB"); }
		if(!obj->methodp_glValidateProgramARB) { args.This()->Set(v8::String::NewSymbol("glValidateProgramARB"), v8::Undefined()); }
		if(!obj->methodp_glValidateProgramPipeline) { obj->methodp_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)wglGetProcAddress("glValidateProgramPipeline"); }
		if(!obj->methodp_glValidateProgramPipeline) { obj->methodp_glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)GetProcAddress(modOpenGL32, "glValidateProgramPipeline"); }
		if(!obj->methodp_glValidateProgramPipeline) { args.This()->Set(v8::String::NewSymbol("glValidateProgramPipeline"), v8::Undefined()); }
		if(!obj->methodp_glValidateProgramPipelineEXT) { obj->methodp_glValidateProgramPipelineEXT = (PFNGLVALIDATEPROGRAMPIPELINEEXTPROC)wglGetProcAddress("glValidateProgramPipelineEXT"); }
		if(!obj->methodp_glValidateProgramPipelineEXT) { obj->methodp_glValidateProgramPipelineEXT = (PFNGLVALIDATEPROGRAMPIPELINEEXTPROC)GetProcAddress(modOpenGL32, "glValidateProgramPipelineEXT"); }
		if(!obj->methodp_glValidateProgramPipelineEXT) { args.This()->Set(v8::String::NewSymbol("glValidateProgramPipelineEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantArrayObjectATI) { obj->methodp_glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC)wglGetProcAddress("glVariantArrayObjectATI"); }
		if(!obj->methodp_glVariantArrayObjectATI) { obj->methodp_glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC)GetProcAddress(modOpenGL32, "glVariantArrayObjectATI"); }
		if(!obj->methodp_glVariantArrayObjectATI) { args.This()->Set(v8::String::NewSymbol("glVariantArrayObjectATI"), v8::Undefined()); }
		if(!obj->methodp_glVariantPointerEXT) { obj->methodp_glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC)wglGetProcAddress("glVariantPointerEXT"); }
		if(!obj->methodp_glVariantPointerEXT) { obj->methodp_glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glVariantPointerEXT"); }
		if(!obj->methodp_glVariantPointerEXT) { args.This()->Set(v8::String::NewSymbol("glVariantPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantbvEXT) { obj->methodp_glVariantbvEXT = (PFNGLVARIANTBVEXTPROC)wglGetProcAddress("glVariantbvEXT"); }
		if(!obj->methodp_glVariantbvEXT) { obj->methodp_glVariantbvEXT = (PFNGLVARIANTBVEXTPROC)GetProcAddress(modOpenGL32, "glVariantbvEXT"); }
		if(!obj->methodp_glVariantbvEXT) { args.This()->Set(v8::String::NewSymbol("glVariantbvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantdvEXT) { obj->methodp_glVariantdvEXT = (PFNGLVARIANTDVEXTPROC)wglGetProcAddress("glVariantdvEXT"); }
		if(!obj->methodp_glVariantdvEXT) { obj->methodp_glVariantdvEXT = (PFNGLVARIANTDVEXTPROC)GetProcAddress(modOpenGL32, "glVariantdvEXT"); }
		if(!obj->methodp_glVariantdvEXT) { args.This()->Set(v8::String::NewSymbol("glVariantdvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantfvEXT) { obj->methodp_glVariantfvEXT = (PFNGLVARIANTFVEXTPROC)wglGetProcAddress("glVariantfvEXT"); }
		if(!obj->methodp_glVariantfvEXT) { obj->methodp_glVariantfvEXT = (PFNGLVARIANTFVEXTPROC)GetProcAddress(modOpenGL32, "glVariantfvEXT"); }
		if(!obj->methodp_glVariantfvEXT) { args.This()->Set(v8::String::NewSymbol("glVariantfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantivEXT) { obj->methodp_glVariantivEXT = (PFNGLVARIANTIVEXTPROC)wglGetProcAddress("glVariantivEXT"); }
		if(!obj->methodp_glVariantivEXT) { obj->methodp_glVariantivEXT = (PFNGLVARIANTIVEXTPROC)GetProcAddress(modOpenGL32, "glVariantivEXT"); }
		if(!obj->methodp_glVariantivEXT) { args.This()->Set(v8::String::NewSymbol("glVariantivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantsvEXT) { obj->methodp_glVariantsvEXT = (PFNGLVARIANTSVEXTPROC)wglGetProcAddress("glVariantsvEXT"); }
		if(!obj->methodp_glVariantsvEXT) { obj->methodp_glVariantsvEXT = (PFNGLVARIANTSVEXTPROC)GetProcAddress(modOpenGL32, "glVariantsvEXT"); }
		if(!obj->methodp_glVariantsvEXT) { args.This()->Set(v8::String::NewSymbol("glVariantsvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantubvEXT) { obj->methodp_glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC)wglGetProcAddress("glVariantubvEXT"); }
		if(!obj->methodp_glVariantubvEXT) { obj->methodp_glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC)GetProcAddress(modOpenGL32, "glVariantubvEXT"); }
		if(!obj->methodp_glVariantubvEXT) { args.This()->Set(v8::String::NewSymbol("glVariantubvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantuivEXT) { obj->methodp_glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC)wglGetProcAddress("glVariantuivEXT"); }
		if(!obj->methodp_glVariantuivEXT) { obj->methodp_glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC)GetProcAddress(modOpenGL32, "glVariantuivEXT"); }
		if(!obj->methodp_glVariantuivEXT) { args.This()->Set(v8::String::NewSymbol("glVariantuivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVariantusvEXT) { obj->methodp_glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC)wglGetProcAddress("glVariantusvEXT"); }
		if(!obj->methodp_glVariantusvEXT) { obj->methodp_glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC)GetProcAddress(modOpenGL32, "glVariantusvEXT"); }
		if(!obj->methodp_glVariantusvEXT) { args.This()->Set(v8::String::NewSymbol("glVariantusvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertex2bOES) { obj->methodp_glVertex2bOES = (PFNGLVERTEX2BOESPROC)wglGetProcAddress("glVertex2bOES"); }
		if(!obj->methodp_glVertex2bOES) { obj->methodp_glVertex2bOES = (PFNGLVERTEX2BOESPROC)GetProcAddress(modOpenGL32, "glVertex2bOES"); }
		if(!obj->methodp_glVertex2bOES) { args.This()->Set(v8::String::NewSymbol("glVertex2bOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex2bvOES) { obj->methodp_glVertex2bvOES = (PFNGLVERTEX2BVOESPROC)wglGetProcAddress("glVertex2bvOES"); }
		if(!obj->methodp_glVertex2bvOES) { obj->methodp_glVertex2bvOES = (PFNGLVERTEX2BVOESPROC)GetProcAddress(modOpenGL32, "glVertex2bvOES"); }
		if(!obj->methodp_glVertex2bvOES) { args.This()->Set(v8::String::NewSymbol("glVertex2bvOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex2d) { obj->methodp_glVertex2d = (PFNGLVERTEX2DPROC)wglGetProcAddress("glVertex2d"); }
		if(!obj->methodp_glVertex2d) { obj->methodp_glVertex2d = (PFNGLVERTEX2DPROC)GetProcAddress(modOpenGL32, "glVertex2d"); }
		if(!obj->methodp_glVertex2d) { args.This()->Set(v8::String::NewSymbol("glVertex2d"), v8::Undefined()); }
		if(!obj->methodp_glVertex2dv) { obj->methodp_glVertex2dv = (PFNGLVERTEX2DVPROC)wglGetProcAddress("glVertex2dv"); }
		if(!obj->methodp_glVertex2dv) { obj->methodp_glVertex2dv = (PFNGLVERTEX2DVPROC)GetProcAddress(modOpenGL32, "glVertex2dv"); }
		if(!obj->methodp_glVertex2dv) { args.This()->Set(v8::String::NewSymbol("glVertex2dv"), v8::Undefined()); }
		if(!obj->methodp_glVertex2f) { obj->methodp_glVertex2f = (PFNGLVERTEX2FPROC)wglGetProcAddress("glVertex2f"); }
		if(!obj->methodp_glVertex2f) { obj->methodp_glVertex2f = (PFNGLVERTEX2FPROC)GetProcAddress(modOpenGL32, "glVertex2f"); }
		if(!obj->methodp_glVertex2f) { args.This()->Set(v8::String::NewSymbol("glVertex2f"), v8::Undefined()); }
		if(!obj->methodp_glVertex2fv) { obj->methodp_glVertex2fv = (PFNGLVERTEX2FVPROC)wglGetProcAddress("glVertex2fv"); }
		if(!obj->methodp_glVertex2fv) { obj->methodp_glVertex2fv = (PFNGLVERTEX2FVPROC)GetProcAddress(modOpenGL32, "glVertex2fv"); }
		if(!obj->methodp_glVertex2fv) { args.This()->Set(v8::String::NewSymbol("glVertex2fv"), v8::Undefined()); }
		if(!obj->methodp_glVertex2hNV) { obj->methodp_glVertex2hNV = (PFNGLVERTEX2HNVPROC)wglGetProcAddress("glVertex2hNV"); }
		if(!obj->methodp_glVertex2hNV) { obj->methodp_glVertex2hNV = (PFNGLVERTEX2HNVPROC)GetProcAddress(modOpenGL32, "glVertex2hNV"); }
		if(!obj->methodp_glVertex2hNV) { args.This()->Set(v8::String::NewSymbol("glVertex2hNV"), v8::Undefined()); }
		if(!obj->methodp_glVertex2hvNV) { obj->methodp_glVertex2hvNV = (PFNGLVERTEX2HVNVPROC)wglGetProcAddress("glVertex2hvNV"); }
		if(!obj->methodp_glVertex2hvNV) { obj->methodp_glVertex2hvNV = (PFNGLVERTEX2HVNVPROC)GetProcAddress(modOpenGL32, "glVertex2hvNV"); }
		if(!obj->methodp_glVertex2hvNV) { args.This()->Set(v8::String::NewSymbol("glVertex2hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertex2i) { obj->methodp_glVertex2i = (PFNGLVERTEX2IPROC)wglGetProcAddress("glVertex2i"); }
		if(!obj->methodp_glVertex2i) { obj->methodp_glVertex2i = (PFNGLVERTEX2IPROC)GetProcAddress(modOpenGL32, "glVertex2i"); }
		if(!obj->methodp_glVertex2i) { args.This()->Set(v8::String::NewSymbol("glVertex2i"), v8::Undefined()); }
		if(!obj->methodp_glVertex2iv) { obj->methodp_glVertex2iv = (PFNGLVERTEX2IVPROC)wglGetProcAddress("glVertex2iv"); }
		if(!obj->methodp_glVertex2iv) { obj->methodp_glVertex2iv = (PFNGLVERTEX2IVPROC)GetProcAddress(modOpenGL32, "glVertex2iv"); }
		if(!obj->methodp_glVertex2iv) { args.This()->Set(v8::String::NewSymbol("glVertex2iv"), v8::Undefined()); }
		if(!obj->methodp_glVertex2s) { obj->methodp_glVertex2s = (PFNGLVERTEX2SPROC)wglGetProcAddress("glVertex2s"); }
		if(!obj->methodp_glVertex2s) { obj->methodp_glVertex2s = (PFNGLVERTEX2SPROC)GetProcAddress(modOpenGL32, "glVertex2s"); }
		if(!obj->methodp_glVertex2s) { args.This()->Set(v8::String::NewSymbol("glVertex2s"), v8::Undefined()); }
		if(!obj->methodp_glVertex2sv) { obj->methodp_glVertex2sv = (PFNGLVERTEX2SVPROC)wglGetProcAddress("glVertex2sv"); }
		if(!obj->methodp_glVertex2sv) { obj->methodp_glVertex2sv = (PFNGLVERTEX2SVPROC)GetProcAddress(modOpenGL32, "glVertex2sv"); }
		if(!obj->methodp_glVertex2sv) { args.This()->Set(v8::String::NewSymbol("glVertex2sv"), v8::Undefined()); }
		if(!obj->methodp_glVertex2xOES) { obj->methodp_glVertex2xOES = (PFNGLVERTEX2XOESPROC)wglGetProcAddress("glVertex2xOES"); }
		if(!obj->methodp_glVertex2xOES) { obj->methodp_glVertex2xOES = (PFNGLVERTEX2XOESPROC)GetProcAddress(modOpenGL32, "glVertex2xOES"); }
		if(!obj->methodp_glVertex2xOES) { args.This()->Set(v8::String::NewSymbol("glVertex2xOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex2xvOES) { obj->methodp_glVertex2xvOES = (PFNGLVERTEX2XVOESPROC)wglGetProcAddress("glVertex2xvOES"); }
		if(!obj->methodp_glVertex2xvOES) { obj->methodp_glVertex2xvOES = (PFNGLVERTEX2XVOESPROC)GetProcAddress(modOpenGL32, "glVertex2xvOES"); }
		if(!obj->methodp_glVertex2xvOES) { args.This()->Set(v8::String::NewSymbol("glVertex2xvOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex3bOES) { obj->methodp_glVertex3bOES = (PFNGLVERTEX3BOESPROC)wglGetProcAddress("glVertex3bOES"); }
		if(!obj->methodp_glVertex3bOES) { obj->methodp_glVertex3bOES = (PFNGLVERTEX3BOESPROC)GetProcAddress(modOpenGL32, "glVertex3bOES"); }
		if(!obj->methodp_glVertex3bOES) { args.This()->Set(v8::String::NewSymbol("glVertex3bOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex3bvOES) { obj->methodp_glVertex3bvOES = (PFNGLVERTEX3BVOESPROC)wglGetProcAddress("glVertex3bvOES"); }
		if(!obj->methodp_glVertex3bvOES) { obj->methodp_glVertex3bvOES = (PFNGLVERTEX3BVOESPROC)GetProcAddress(modOpenGL32, "glVertex3bvOES"); }
		if(!obj->methodp_glVertex3bvOES) { args.This()->Set(v8::String::NewSymbol("glVertex3bvOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex3d) { obj->methodp_glVertex3d = (PFNGLVERTEX3DPROC)wglGetProcAddress("glVertex3d"); }
		if(!obj->methodp_glVertex3d) { obj->methodp_glVertex3d = (PFNGLVERTEX3DPROC)GetProcAddress(modOpenGL32, "glVertex3d"); }
		if(!obj->methodp_glVertex3d) { args.This()->Set(v8::String::NewSymbol("glVertex3d"), v8::Undefined()); }
		if(!obj->methodp_glVertex3dv) { obj->methodp_glVertex3dv = (PFNGLVERTEX3DVPROC)wglGetProcAddress("glVertex3dv"); }
		if(!obj->methodp_glVertex3dv) { obj->methodp_glVertex3dv = (PFNGLVERTEX3DVPROC)GetProcAddress(modOpenGL32, "glVertex3dv"); }
		if(!obj->methodp_glVertex3dv) { args.This()->Set(v8::String::NewSymbol("glVertex3dv"), v8::Undefined()); }
		if(!obj->methodp_glVertex3f) { obj->methodp_glVertex3f = (PFNGLVERTEX3FPROC)wglGetProcAddress("glVertex3f"); }
		if(!obj->methodp_glVertex3f) { obj->methodp_glVertex3f = (PFNGLVERTEX3FPROC)GetProcAddress(modOpenGL32, "glVertex3f"); }
		if(!obj->methodp_glVertex3f) { args.This()->Set(v8::String::NewSymbol("glVertex3f"), v8::Undefined()); }
		if(!obj->methodp_glVertex3fv) { obj->methodp_glVertex3fv = (PFNGLVERTEX3FVPROC)wglGetProcAddress("glVertex3fv"); }
		if(!obj->methodp_glVertex3fv) { obj->methodp_glVertex3fv = (PFNGLVERTEX3FVPROC)GetProcAddress(modOpenGL32, "glVertex3fv"); }
		if(!obj->methodp_glVertex3fv) { args.This()->Set(v8::String::NewSymbol("glVertex3fv"), v8::Undefined()); }
		if(!obj->methodp_glVertex3hNV) { obj->methodp_glVertex3hNV = (PFNGLVERTEX3HNVPROC)wglGetProcAddress("glVertex3hNV"); }
		if(!obj->methodp_glVertex3hNV) { obj->methodp_glVertex3hNV = (PFNGLVERTEX3HNVPROC)GetProcAddress(modOpenGL32, "glVertex3hNV"); }
		if(!obj->methodp_glVertex3hNV) { args.This()->Set(v8::String::NewSymbol("glVertex3hNV"), v8::Undefined()); }
		if(!obj->methodp_glVertex3hvNV) { obj->methodp_glVertex3hvNV = (PFNGLVERTEX3HVNVPROC)wglGetProcAddress("glVertex3hvNV"); }
		if(!obj->methodp_glVertex3hvNV) { obj->methodp_glVertex3hvNV = (PFNGLVERTEX3HVNVPROC)GetProcAddress(modOpenGL32, "glVertex3hvNV"); }
		if(!obj->methodp_glVertex3hvNV) { args.This()->Set(v8::String::NewSymbol("glVertex3hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertex3i) { obj->methodp_glVertex3i = (PFNGLVERTEX3IPROC)wglGetProcAddress("glVertex3i"); }
		if(!obj->methodp_glVertex3i) { obj->methodp_glVertex3i = (PFNGLVERTEX3IPROC)GetProcAddress(modOpenGL32, "glVertex3i"); }
		if(!obj->methodp_glVertex3i) { args.This()->Set(v8::String::NewSymbol("glVertex3i"), v8::Undefined()); }
		if(!obj->methodp_glVertex3iv) { obj->methodp_glVertex3iv = (PFNGLVERTEX3IVPROC)wglGetProcAddress("glVertex3iv"); }
		if(!obj->methodp_glVertex3iv) { obj->methodp_glVertex3iv = (PFNGLVERTEX3IVPROC)GetProcAddress(modOpenGL32, "glVertex3iv"); }
		if(!obj->methodp_glVertex3iv) { args.This()->Set(v8::String::NewSymbol("glVertex3iv"), v8::Undefined()); }
		if(!obj->methodp_glVertex3s) { obj->methodp_glVertex3s = (PFNGLVERTEX3SPROC)wglGetProcAddress("glVertex3s"); }
		if(!obj->methodp_glVertex3s) { obj->methodp_glVertex3s = (PFNGLVERTEX3SPROC)GetProcAddress(modOpenGL32, "glVertex3s"); }
		if(!obj->methodp_glVertex3s) { args.This()->Set(v8::String::NewSymbol("glVertex3s"), v8::Undefined()); }
		if(!obj->methodp_glVertex3sv) { obj->methodp_glVertex3sv = (PFNGLVERTEX3SVPROC)wglGetProcAddress("glVertex3sv"); }
		if(!obj->methodp_glVertex3sv) { obj->methodp_glVertex3sv = (PFNGLVERTEX3SVPROC)GetProcAddress(modOpenGL32, "glVertex3sv"); }
		if(!obj->methodp_glVertex3sv) { args.This()->Set(v8::String::NewSymbol("glVertex3sv"), v8::Undefined()); }
		if(!obj->methodp_glVertex3xOES) { obj->methodp_glVertex3xOES = (PFNGLVERTEX3XOESPROC)wglGetProcAddress("glVertex3xOES"); }
		if(!obj->methodp_glVertex3xOES) { obj->methodp_glVertex3xOES = (PFNGLVERTEX3XOESPROC)GetProcAddress(modOpenGL32, "glVertex3xOES"); }
		if(!obj->methodp_glVertex3xOES) { args.This()->Set(v8::String::NewSymbol("glVertex3xOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex3xvOES) { obj->methodp_glVertex3xvOES = (PFNGLVERTEX3XVOESPROC)wglGetProcAddress("glVertex3xvOES"); }
		if(!obj->methodp_glVertex3xvOES) { obj->methodp_glVertex3xvOES = (PFNGLVERTEX3XVOESPROC)GetProcAddress(modOpenGL32, "glVertex3xvOES"); }
		if(!obj->methodp_glVertex3xvOES) { args.This()->Set(v8::String::NewSymbol("glVertex3xvOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex4bOES) { obj->methodp_glVertex4bOES = (PFNGLVERTEX4BOESPROC)wglGetProcAddress("glVertex4bOES"); }
		if(!obj->methodp_glVertex4bOES) { obj->methodp_glVertex4bOES = (PFNGLVERTEX4BOESPROC)GetProcAddress(modOpenGL32, "glVertex4bOES"); }
		if(!obj->methodp_glVertex4bOES) { args.This()->Set(v8::String::NewSymbol("glVertex4bOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex4bvOES) { obj->methodp_glVertex4bvOES = (PFNGLVERTEX4BVOESPROC)wglGetProcAddress("glVertex4bvOES"); }
		if(!obj->methodp_glVertex4bvOES) { obj->methodp_glVertex4bvOES = (PFNGLVERTEX4BVOESPROC)GetProcAddress(modOpenGL32, "glVertex4bvOES"); }
		if(!obj->methodp_glVertex4bvOES) { args.This()->Set(v8::String::NewSymbol("glVertex4bvOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex4d) { obj->methodp_glVertex4d = (PFNGLVERTEX4DPROC)wglGetProcAddress("glVertex4d"); }
		if(!obj->methodp_glVertex4d) { obj->methodp_glVertex4d = (PFNGLVERTEX4DPROC)GetProcAddress(modOpenGL32, "glVertex4d"); }
		if(!obj->methodp_glVertex4d) { args.This()->Set(v8::String::NewSymbol("glVertex4d"), v8::Undefined()); }
		if(!obj->methodp_glVertex4dv) { obj->methodp_glVertex4dv = (PFNGLVERTEX4DVPROC)wglGetProcAddress("glVertex4dv"); }
		if(!obj->methodp_glVertex4dv) { obj->methodp_glVertex4dv = (PFNGLVERTEX4DVPROC)GetProcAddress(modOpenGL32, "glVertex4dv"); }
		if(!obj->methodp_glVertex4dv) { args.This()->Set(v8::String::NewSymbol("glVertex4dv"), v8::Undefined()); }
		if(!obj->methodp_glVertex4f) { obj->methodp_glVertex4f = (PFNGLVERTEX4FPROC)wglGetProcAddress("glVertex4f"); }
		if(!obj->methodp_glVertex4f) { obj->methodp_glVertex4f = (PFNGLVERTEX4FPROC)GetProcAddress(modOpenGL32, "glVertex4f"); }
		if(!obj->methodp_glVertex4f) { args.This()->Set(v8::String::NewSymbol("glVertex4f"), v8::Undefined()); }
		if(!obj->methodp_glVertex4fv) { obj->methodp_glVertex4fv = (PFNGLVERTEX4FVPROC)wglGetProcAddress("glVertex4fv"); }
		if(!obj->methodp_glVertex4fv) { obj->methodp_glVertex4fv = (PFNGLVERTEX4FVPROC)GetProcAddress(modOpenGL32, "glVertex4fv"); }
		if(!obj->methodp_glVertex4fv) { args.This()->Set(v8::String::NewSymbol("glVertex4fv"), v8::Undefined()); }
		if(!obj->methodp_glVertex4hNV) { obj->methodp_glVertex4hNV = (PFNGLVERTEX4HNVPROC)wglGetProcAddress("glVertex4hNV"); }
		if(!obj->methodp_glVertex4hNV) { obj->methodp_glVertex4hNV = (PFNGLVERTEX4HNVPROC)GetProcAddress(modOpenGL32, "glVertex4hNV"); }
		if(!obj->methodp_glVertex4hNV) { args.This()->Set(v8::String::NewSymbol("glVertex4hNV"), v8::Undefined()); }
		if(!obj->methodp_glVertex4hvNV) { obj->methodp_glVertex4hvNV = (PFNGLVERTEX4HVNVPROC)wglGetProcAddress("glVertex4hvNV"); }
		if(!obj->methodp_glVertex4hvNV) { obj->methodp_glVertex4hvNV = (PFNGLVERTEX4HVNVPROC)GetProcAddress(modOpenGL32, "glVertex4hvNV"); }
		if(!obj->methodp_glVertex4hvNV) { args.This()->Set(v8::String::NewSymbol("glVertex4hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertex4i) { obj->methodp_glVertex4i = (PFNGLVERTEX4IPROC)wglGetProcAddress("glVertex4i"); }
		if(!obj->methodp_glVertex4i) { obj->methodp_glVertex4i = (PFNGLVERTEX4IPROC)GetProcAddress(modOpenGL32, "glVertex4i"); }
		if(!obj->methodp_glVertex4i) { args.This()->Set(v8::String::NewSymbol("glVertex4i"), v8::Undefined()); }
		if(!obj->methodp_glVertex4iv) { obj->methodp_glVertex4iv = (PFNGLVERTEX4IVPROC)wglGetProcAddress("glVertex4iv"); }
		if(!obj->methodp_glVertex4iv) { obj->methodp_glVertex4iv = (PFNGLVERTEX4IVPROC)GetProcAddress(modOpenGL32, "glVertex4iv"); }
		if(!obj->methodp_glVertex4iv) { args.This()->Set(v8::String::NewSymbol("glVertex4iv"), v8::Undefined()); }
		if(!obj->methodp_glVertex4s) { obj->methodp_glVertex4s = (PFNGLVERTEX4SPROC)wglGetProcAddress("glVertex4s"); }
		if(!obj->methodp_glVertex4s) { obj->methodp_glVertex4s = (PFNGLVERTEX4SPROC)GetProcAddress(modOpenGL32, "glVertex4s"); }
		if(!obj->methodp_glVertex4s) { args.This()->Set(v8::String::NewSymbol("glVertex4s"), v8::Undefined()); }
		if(!obj->methodp_glVertex4sv) { obj->methodp_glVertex4sv = (PFNGLVERTEX4SVPROC)wglGetProcAddress("glVertex4sv"); }
		if(!obj->methodp_glVertex4sv) { obj->methodp_glVertex4sv = (PFNGLVERTEX4SVPROC)GetProcAddress(modOpenGL32, "glVertex4sv"); }
		if(!obj->methodp_glVertex4sv) { args.This()->Set(v8::String::NewSymbol("glVertex4sv"), v8::Undefined()); }
		if(!obj->methodp_glVertex4xOES) { obj->methodp_glVertex4xOES = (PFNGLVERTEX4XOESPROC)wglGetProcAddress("glVertex4xOES"); }
		if(!obj->methodp_glVertex4xOES) { obj->methodp_glVertex4xOES = (PFNGLVERTEX4XOESPROC)GetProcAddress(modOpenGL32, "glVertex4xOES"); }
		if(!obj->methodp_glVertex4xOES) { args.This()->Set(v8::String::NewSymbol("glVertex4xOES"), v8::Undefined()); }
		if(!obj->methodp_glVertex4xvOES) { obj->methodp_glVertex4xvOES = (PFNGLVERTEX4XVOESPROC)wglGetProcAddress("glVertex4xvOES"); }
		if(!obj->methodp_glVertex4xvOES) { obj->methodp_glVertex4xvOES = (PFNGLVERTEX4XVOESPROC)GetProcAddress(modOpenGL32, "glVertex4xvOES"); }
		if(!obj->methodp_glVertex4xvOES) { args.This()->Set(v8::String::NewSymbol("glVertex4xvOES"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayBindVertexBufferEXT) { obj->methodp_glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)wglGetProcAddress("glVertexArrayBindVertexBufferEXT"); }
		if(!obj->methodp_glVertexArrayBindVertexBufferEXT) { obj->methodp_glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayBindVertexBufferEXT"); }
		if(!obj->methodp_glVertexArrayBindVertexBufferEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayBindVertexBufferEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayColorOffsetEXT) { obj->methodp_glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)wglGetProcAddress("glVertexArrayColorOffsetEXT"); }
		if(!obj->methodp_glVertexArrayColorOffsetEXT) { obj->methodp_glVertexArrayColorOffsetEXT = (PFNGLVERTEXARRAYCOLOROFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayColorOffsetEXT"); }
		if(!obj->methodp_glVertexArrayColorOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayColorOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayEdgeFlagOffsetEXT) { obj->methodp_glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)wglGetProcAddress("glVertexArrayEdgeFlagOffsetEXT"); }
		if(!obj->methodp_glVertexArrayEdgeFlagOffsetEXT) { obj->methodp_glVertexArrayEdgeFlagOffsetEXT = (PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayEdgeFlagOffsetEXT"); }
		if(!obj->methodp_glVertexArrayEdgeFlagOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayEdgeFlagOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayFogCoordOffsetEXT) { obj->methodp_glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)wglGetProcAddress("glVertexArrayFogCoordOffsetEXT"); }
		if(!obj->methodp_glVertexArrayFogCoordOffsetEXT) { obj->methodp_glVertexArrayFogCoordOffsetEXT = (PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayFogCoordOffsetEXT"); }
		if(!obj->methodp_glVertexArrayFogCoordOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayFogCoordOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayIndexOffsetEXT) { obj->methodp_glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)wglGetProcAddress("glVertexArrayIndexOffsetEXT"); }
		if(!obj->methodp_glVertexArrayIndexOffsetEXT) { obj->methodp_glVertexArrayIndexOffsetEXT = (PFNGLVERTEXARRAYINDEXOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayIndexOffsetEXT"); }
		if(!obj->methodp_glVertexArrayIndexOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayIndexOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayMultiTexCoordOffsetEXT) { obj->methodp_glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)wglGetProcAddress("glVertexArrayMultiTexCoordOffsetEXT"); }
		if(!obj->methodp_glVertexArrayMultiTexCoordOffsetEXT) { obj->methodp_glVertexArrayMultiTexCoordOffsetEXT = (PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayMultiTexCoordOffsetEXT"); }
		if(!obj->methodp_glVertexArrayMultiTexCoordOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayMultiTexCoordOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayNormalOffsetEXT) { obj->methodp_glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)wglGetProcAddress("glVertexArrayNormalOffsetEXT"); }
		if(!obj->methodp_glVertexArrayNormalOffsetEXT) { obj->methodp_glVertexArrayNormalOffsetEXT = (PFNGLVERTEXARRAYNORMALOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayNormalOffsetEXT"); }
		if(!obj->methodp_glVertexArrayNormalOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayNormalOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayParameteriAPPLE) { obj->methodp_glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)wglGetProcAddress("glVertexArrayParameteriAPPLE"); }
		if(!obj->methodp_glVertexArrayParameteriAPPLE) { obj->methodp_glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)GetProcAddress(modOpenGL32, "glVertexArrayParameteriAPPLE"); }
		if(!obj->methodp_glVertexArrayParameteriAPPLE) { args.This()->Set(v8::String::NewSymbol("glVertexArrayParameteriAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayRangeAPPLE) { obj->methodp_glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC)wglGetProcAddress("glVertexArrayRangeAPPLE"); }
		if(!obj->methodp_glVertexArrayRangeAPPLE) { obj->methodp_glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC)GetProcAddress(modOpenGL32, "glVertexArrayRangeAPPLE"); }
		if(!obj->methodp_glVertexArrayRangeAPPLE) { args.This()->Set(v8::String::NewSymbol("glVertexArrayRangeAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayRangeNV) { obj->methodp_glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)wglGetProcAddress("glVertexArrayRangeNV"); }
		if(!obj->methodp_glVertexArrayRangeNV) { obj->methodp_glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)GetProcAddress(modOpenGL32, "glVertexArrayRangeNV"); }
		if(!obj->methodp_glVertexArrayRangeNV) { args.This()->Set(v8::String::NewSymbol("glVertexArrayRangeNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexArraySecondaryColorOffsetEXT) { obj->methodp_glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)wglGetProcAddress("glVertexArraySecondaryColorOffsetEXT"); }
		if(!obj->methodp_glVertexArraySecondaryColorOffsetEXT) { obj->methodp_glVertexArraySecondaryColorOffsetEXT = (PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArraySecondaryColorOffsetEXT"); }
		if(!obj->methodp_glVertexArraySecondaryColorOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArraySecondaryColorOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayTexCoordOffsetEXT) { obj->methodp_glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)wglGetProcAddress("glVertexArrayTexCoordOffsetEXT"); }
		if(!obj->methodp_glVertexArrayTexCoordOffsetEXT) { obj->methodp_glVertexArrayTexCoordOffsetEXT = (PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayTexCoordOffsetEXT"); }
		if(!obj->methodp_glVertexArrayTexCoordOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayTexCoordOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexAttribBindingEXT) { obj->methodp_glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)wglGetProcAddress("glVertexArrayVertexAttribBindingEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribBindingEXT) { obj->methodp_glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexAttribBindingEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribBindingEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexAttribBindingEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexAttribDivisorEXT) { obj->methodp_glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)wglGetProcAddress("glVertexArrayVertexAttribDivisorEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribDivisorEXT) { obj->methodp_glVertexArrayVertexAttribDivisorEXT = (PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexAttribDivisorEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribDivisorEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexAttribDivisorEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexAttribFormatEXT) { obj->methodp_glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)wglGetProcAddress("glVertexArrayVertexAttribFormatEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribFormatEXT) { obj->methodp_glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexAttribFormatEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribFormatEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexAttribFormatEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexAttribIFormatEXT) { obj->methodp_glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)wglGetProcAddress("glVertexArrayVertexAttribIFormatEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribIFormatEXT) { obj->methodp_glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexAttribIFormatEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribIFormatEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexAttribIFormatEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexAttribIOffsetEXT) { obj->methodp_glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)wglGetProcAddress("glVertexArrayVertexAttribIOffsetEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribIOffsetEXT) { obj->methodp_glVertexArrayVertexAttribIOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexAttribIOffsetEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribIOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexAttribIOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexAttribLFormatEXT) { obj->methodp_glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)wglGetProcAddress("glVertexArrayVertexAttribLFormatEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribLFormatEXT) { obj->methodp_glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexAttribLFormatEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribLFormatEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexAttribLFormatEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexAttribLOffsetEXT) { obj->methodp_glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)wglGetProcAddress("glVertexArrayVertexAttribLOffsetEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribLOffsetEXT) { obj->methodp_glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexAttribLOffsetEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribLOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexAttribLOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexAttribOffsetEXT) { obj->methodp_glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)wglGetProcAddress("glVertexArrayVertexAttribOffsetEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribOffsetEXT) { obj->methodp_glVertexArrayVertexAttribOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexAttribOffsetEXT"); }
		if(!obj->methodp_glVertexArrayVertexAttribOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexAttribOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexBindingDivisorEXT) { obj->methodp_glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)wglGetProcAddress("glVertexArrayVertexBindingDivisorEXT"); }
		if(!obj->methodp_glVertexArrayVertexBindingDivisorEXT) { obj->methodp_glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexBindingDivisorEXT"); }
		if(!obj->methodp_glVertexArrayVertexBindingDivisorEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexBindingDivisorEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexArrayVertexOffsetEXT) { obj->methodp_glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)wglGetProcAddress("glVertexArrayVertexOffsetEXT"); }
		if(!obj->methodp_glVertexArrayVertexOffsetEXT) { obj->methodp_glVertexArrayVertexOffsetEXT = (PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC)GetProcAddress(modOpenGL32, "glVertexArrayVertexOffsetEXT"); }
		if(!obj->methodp_glVertexArrayVertexOffsetEXT) { args.This()->Set(v8::String::NewSymbol("glVertexArrayVertexOffsetEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1d) { obj->methodp_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)wglGetProcAddress("glVertexAttrib1d"); }
		if(!obj->methodp_glVertexAttrib1d) { obj->methodp_glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1d"); }
		if(!obj->methodp_glVertexAttrib1d) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1d"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1dARB) { obj->methodp_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)wglGetProcAddress("glVertexAttrib1dARB"); }
		if(!obj->methodp_glVertexAttrib1dARB) { obj->methodp_glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1dARB"); }
		if(!obj->methodp_glVertexAttrib1dARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1dARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1dNV) { obj->methodp_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)wglGetProcAddress("glVertexAttrib1dNV"); }
		if(!obj->methodp_glVertexAttrib1dNV) { obj->methodp_glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1dNV"); }
		if(!obj->methodp_glVertexAttrib1dNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1dNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1dv) { obj->methodp_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)wglGetProcAddress("glVertexAttrib1dv"); }
		if(!obj->methodp_glVertexAttrib1dv) { obj->methodp_glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1dv"); }
		if(!obj->methodp_glVertexAttrib1dv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1dv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1dvARB) { obj->methodp_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)wglGetProcAddress("glVertexAttrib1dvARB"); }
		if(!obj->methodp_glVertexAttrib1dvARB) { obj->methodp_glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1dvARB"); }
		if(!obj->methodp_glVertexAttrib1dvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1dvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1dvNV) { obj->methodp_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)wglGetProcAddress("glVertexAttrib1dvNV"); }
		if(!obj->methodp_glVertexAttrib1dvNV) { obj->methodp_glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1dvNV"); }
		if(!obj->methodp_glVertexAttrib1dvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1dvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1f) { obj->methodp_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)wglGetProcAddress("glVertexAttrib1f"); }
		if(!obj->methodp_glVertexAttrib1f) { obj->methodp_glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1f"); }
		if(!obj->methodp_glVertexAttrib1f) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1f"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1fARB) { obj->methodp_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)wglGetProcAddress("glVertexAttrib1fARB"); }
		if(!obj->methodp_glVertexAttrib1fARB) { obj->methodp_glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1fARB"); }
		if(!obj->methodp_glVertexAttrib1fARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1fARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1fNV) { obj->methodp_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)wglGetProcAddress("glVertexAttrib1fNV"); }
		if(!obj->methodp_glVertexAttrib1fNV) { obj->methodp_glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1fNV"); }
		if(!obj->methodp_glVertexAttrib1fNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1fNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1fv) { obj->methodp_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)wglGetProcAddress("glVertexAttrib1fv"); }
		if(!obj->methodp_glVertexAttrib1fv) { obj->methodp_glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1fv"); }
		if(!obj->methodp_glVertexAttrib1fv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1fv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1fvARB) { obj->methodp_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)wglGetProcAddress("glVertexAttrib1fvARB"); }
		if(!obj->methodp_glVertexAttrib1fvARB) { obj->methodp_glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1fvARB"); }
		if(!obj->methodp_glVertexAttrib1fvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1fvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1fvNV) { obj->methodp_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)wglGetProcAddress("glVertexAttrib1fvNV"); }
		if(!obj->methodp_glVertexAttrib1fvNV) { obj->methodp_glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1fvNV"); }
		if(!obj->methodp_glVertexAttrib1fvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1fvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1hNV) { obj->methodp_glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC)wglGetProcAddress("glVertexAttrib1hNV"); }
		if(!obj->methodp_glVertexAttrib1hNV) { obj->methodp_glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1hNV"); }
		if(!obj->methodp_glVertexAttrib1hNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1hNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1hvNV) { obj->methodp_glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC)wglGetProcAddress("glVertexAttrib1hvNV"); }
		if(!obj->methodp_glVertexAttrib1hvNV) { obj->methodp_glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1hvNV"); }
		if(!obj->methodp_glVertexAttrib1hvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1s) { obj->methodp_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)wglGetProcAddress("glVertexAttrib1s"); }
		if(!obj->methodp_glVertexAttrib1s) { obj->methodp_glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1s"); }
		if(!obj->methodp_glVertexAttrib1s) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1s"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1sARB) { obj->methodp_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)wglGetProcAddress("glVertexAttrib1sARB"); }
		if(!obj->methodp_glVertexAttrib1sARB) { obj->methodp_glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1sARB"); }
		if(!obj->methodp_glVertexAttrib1sARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1sARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1sNV) { obj->methodp_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)wglGetProcAddress("glVertexAttrib1sNV"); }
		if(!obj->methodp_glVertexAttrib1sNV) { obj->methodp_glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1sNV"); }
		if(!obj->methodp_glVertexAttrib1sNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1sNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1sv) { obj->methodp_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)wglGetProcAddress("glVertexAttrib1sv"); }
		if(!obj->methodp_glVertexAttrib1sv) { obj->methodp_glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1sv"); }
		if(!obj->methodp_glVertexAttrib1sv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1sv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1svARB) { obj->methodp_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)wglGetProcAddress("glVertexAttrib1svARB"); }
		if(!obj->methodp_glVertexAttrib1svARB) { obj->methodp_glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1svARB"); }
		if(!obj->methodp_glVertexAttrib1svARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1svARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib1svNV) { obj->methodp_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)wglGetProcAddress("glVertexAttrib1svNV"); }
		if(!obj->methodp_glVertexAttrib1svNV) { obj->methodp_glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib1svNV"); }
		if(!obj->methodp_glVertexAttrib1svNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib1svNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2d) { obj->methodp_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)wglGetProcAddress("glVertexAttrib2d"); }
		if(!obj->methodp_glVertexAttrib2d) { obj->methodp_glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2d"); }
		if(!obj->methodp_glVertexAttrib2d) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2d"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2dARB) { obj->methodp_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)wglGetProcAddress("glVertexAttrib2dARB"); }
		if(!obj->methodp_glVertexAttrib2dARB) { obj->methodp_glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2dARB"); }
		if(!obj->methodp_glVertexAttrib2dARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2dARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2dNV) { obj->methodp_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)wglGetProcAddress("glVertexAttrib2dNV"); }
		if(!obj->methodp_glVertexAttrib2dNV) { obj->methodp_glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2dNV"); }
		if(!obj->methodp_glVertexAttrib2dNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2dNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2dv) { obj->methodp_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)wglGetProcAddress("glVertexAttrib2dv"); }
		if(!obj->methodp_glVertexAttrib2dv) { obj->methodp_glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2dv"); }
		if(!obj->methodp_glVertexAttrib2dv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2dv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2dvARB) { obj->methodp_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)wglGetProcAddress("glVertexAttrib2dvARB"); }
		if(!obj->methodp_glVertexAttrib2dvARB) { obj->methodp_glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2dvARB"); }
		if(!obj->methodp_glVertexAttrib2dvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2dvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2dvNV) { obj->methodp_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)wglGetProcAddress("glVertexAttrib2dvNV"); }
		if(!obj->methodp_glVertexAttrib2dvNV) { obj->methodp_glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2dvNV"); }
		if(!obj->methodp_glVertexAttrib2dvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2dvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2f) { obj->methodp_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)wglGetProcAddress("glVertexAttrib2f"); }
		if(!obj->methodp_glVertexAttrib2f) { obj->methodp_glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2f"); }
		if(!obj->methodp_glVertexAttrib2f) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2f"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2fARB) { obj->methodp_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)wglGetProcAddress("glVertexAttrib2fARB"); }
		if(!obj->methodp_glVertexAttrib2fARB) { obj->methodp_glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2fARB"); }
		if(!obj->methodp_glVertexAttrib2fARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2fARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2fNV) { obj->methodp_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)wglGetProcAddress("glVertexAttrib2fNV"); }
		if(!obj->methodp_glVertexAttrib2fNV) { obj->methodp_glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2fNV"); }
		if(!obj->methodp_glVertexAttrib2fNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2fNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2fv) { obj->methodp_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)wglGetProcAddress("glVertexAttrib2fv"); }
		if(!obj->methodp_glVertexAttrib2fv) { obj->methodp_glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2fv"); }
		if(!obj->methodp_glVertexAttrib2fv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2fv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2fvARB) { obj->methodp_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)wglGetProcAddress("glVertexAttrib2fvARB"); }
		if(!obj->methodp_glVertexAttrib2fvARB) { obj->methodp_glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2fvARB"); }
		if(!obj->methodp_glVertexAttrib2fvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2fvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2fvNV) { obj->methodp_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)wglGetProcAddress("glVertexAttrib2fvNV"); }
		if(!obj->methodp_glVertexAttrib2fvNV) { obj->methodp_glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2fvNV"); }
		if(!obj->methodp_glVertexAttrib2fvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2fvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2hNV) { obj->methodp_glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC)wglGetProcAddress("glVertexAttrib2hNV"); }
		if(!obj->methodp_glVertexAttrib2hNV) { obj->methodp_glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2hNV"); }
		if(!obj->methodp_glVertexAttrib2hNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2hNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2hvNV) { obj->methodp_glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC)wglGetProcAddress("glVertexAttrib2hvNV"); }
		if(!obj->methodp_glVertexAttrib2hvNV) { obj->methodp_glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2hvNV"); }
		if(!obj->methodp_glVertexAttrib2hvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2s) { obj->methodp_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)wglGetProcAddress("glVertexAttrib2s"); }
		if(!obj->methodp_glVertexAttrib2s) { obj->methodp_glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2s"); }
		if(!obj->methodp_glVertexAttrib2s) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2s"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2sARB) { obj->methodp_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)wglGetProcAddress("glVertexAttrib2sARB"); }
		if(!obj->methodp_glVertexAttrib2sARB) { obj->methodp_glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2sARB"); }
		if(!obj->methodp_glVertexAttrib2sARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2sARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2sNV) { obj->methodp_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)wglGetProcAddress("glVertexAttrib2sNV"); }
		if(!obj->methodp_glVertexAttrib2sNV) { obj->methodp_glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2sNV"); }
		if(!obj->methodp_glVertexAttrib2sNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2sNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2sv) { obj->methodp_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)wglGetProcAddress("glVertexAttrib2sv"); }
		if(!obj->methodp_glVertexAttrib2sv) { obj->methodp_glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2sv"); }
		if(!obj->methodp_glVertexAttrib2sv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2sv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2svARB) { obj->methodp_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)wglGetProcAddress("glVertexAttrib2svARB"); }
		if(!obj->methodp_glVertexAttrib2svARB) { obj->methodp_glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2svARB"); }
		if(!obj->methodp_glVertexAttrib2svARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2svARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib2svNV) { obj->methodp_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)wglGetProcAddress("glVertexAttrib2svNV"); }
		if(!obj->methodp_glVertexAttrib2svNV) { obj->methodp_glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib2svNV"); }
		if(!obj->methodp_glVertexAttrib2svNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib2svNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3d) { obj->methodp_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)wglGetProcAddress("glVertexAttrib3d"); }
		if(!obj->methodp_glVertexAttrib3d) { obj->methodp_glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3d"); }
		if(!obj->methodp_glVertexAttrib3d) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3d"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3dARB) { obj->methodp_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)wglGetProcAddress("glVertexAttrib3dARB"); }
		if(!obj->methodp_glVertexAttrib3dARB) { obj->methodp_glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3dARB"); }
		if(!obj->methodp_glVertexAttrib3dARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3dARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3dNV) { obj->methodp_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)wglGetProcAddress("glVertexAttrib3dNV"); }
		if(!obj->methodp_glVertexAttrib3dNV) { obj->methodp_glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3dNV"); }
		if(!obj->methodp_glVertexAttrib3dNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3dNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3dv) { obj->methodp_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)wglGetProcAddress("glVertexAttrib3dv"); }
		if(!obj->methodp_glVertexAttrib3dv) { obj->methodp_glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3dv"); }
		if(!obj->methodp_glVertexAttrib3dv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3dv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3dvARB) { obj->methodp_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)wglGetProcAddress("glVertexAttrib3dvARB"); }
		if(!obj->methodp_glVertexAttrib3dvARB) { obj->methodp_glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3dvARB"); }
		if(!obj->methodp_glVertexAttrib3dvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3dvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3dvNV) { obj->methodp_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)wglGetProcAddress("glVertexAttrib3dvNV"); }
		if(!obj->methodp_glVertexAttrib3dvNV) { obj->methodp_glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3dvNV"); }
		if(!obj->methodp_glVertexAttrib3dvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3dvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3f) { obj->methodp_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)wglGetProcAddress("glVertexAttrib3f"); }
		if(!obj->methodp_glVertexAttrib3f) { obj->methodp_glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3f"); }
		if(!obj->methodp_glVertexAttrib3f) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3f"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3fARB) { obj->methodp_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)wglGetProcAddress("glVertexAttrib3fARB"); }
		if(!obj->methodp_glVertexAttrib3fARB) { obj->methodp_glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3fARB"); }
		if(!obj->methodp_glVertexAttrib3fARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3fARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3fNV) { obj->methodp_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)wglGetProcAddress("glVertexAttrib3fNV"); }
		if(!obj->methodp_glVertexAttrib3fNV) { obj->methodp_glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3fNV"); }
		if(!obj->methodp_glVertexAttrib3fNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3fNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3fv) { obj->methodp_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)wglGetProcAddress("glVertexAttrib3fv"); }
		if(!obj->methodp_glVertexAttrib3fv) { obj->methodp_glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3fv"); }
		if(!obj->methodp_glVertexAttrib3fv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3fv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3fvARB) { obj->methodp_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)wglGetProcAddress("glVertexAttrib3fvARB"); }
		if(!obj->methodp_glVertexAttrib3fvARB) { obj->methodp_glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3fvARB"); }
		if(!obj->methodp_glVertexAttrib3fvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3fvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3fvNV) { obj->methodp_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)wglGetProcAddress("glVertexAttrib3fvNV"); }
		if(!obj->methodp_glVertexAttrib3fvNV) { obj->methodp_glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3fvNV"); }
		if(!obj->methodp_glVertexAttrib3fvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3fvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3hNV) { obj->methodp_glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC)wglGetProcAddress("glVertexAttrib3hNV"); }
		if(!obj->methodp_glVertexAttrib3hNV) { obj->methodp_glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3hNV"); }
		if(!obj->methodp_glVertexAttrib3hNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3hNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3hvNV) { obj->methodp_glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC)wglGetProcAddress("glVertexAttrib3hvNV"); }
		if(!obj->methodp_glVertexAttrib3hvNV) { obj->methodp_glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3hvNV"); }
		if(!obj->methodp_glVertexAttrib3hvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3s) { obj->methodp_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)wglGetProcAddress("glVertexAttrib3s"); }
		if(!obj->methodp_glVertexAttrib3s) { obj->methodp_glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3s"); }
		if(!obj->methodp_glVertexAttrib3s) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3s"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3sARB) { obj->methodp_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)wglGetProcAddress("glVertexAttrib3sARB"); }
		if(!obj->methodp_glVertexAttrib3sARB) { obj->methodp_glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3sARB"); }
		if(!obj->methodp_glVertexAttrib3sARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3sARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3sNV) { obj->methodp_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)wglGetProcAddress("glVertexAttrib3sNV"); }
		if(!obj->methodp_glVertexAttrib3sNV) { obj->methodp_glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3sNV"); }
		if(!obj->methodp_glVertexAttrib3sNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3sNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3sv) { obj->methodp_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)wglGetProcAddress("glVertexAttrib3sv"); }
		if(!obj->methodp_glVertexAttrib3sv) { obj->methodp_glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3sv"); }
		if(!obj->methodp_glVertexAttrib3sv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3sv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3svARB) { obj->methodp_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)wglGetProcAddress("glVertexAttrib3svARB"); }
		if(!obj->methodp_glVertexAttrib3svARB) { obj->methodp_glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3svARB"); }
		if(!obj->methodp_glVertexAttrib3svARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3svARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib3svNV) { obj->methodp_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)wglGetProcAddress("glVertexAttrib3svNV"); }
		if(!obj->methodp_glVertexAttrib3svNV) { obj->methodp_glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib3svNV"); }
		if(!obj->methodp_glVertexAttrib3svNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib3svNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4Nbv) { obj->methodp_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)wglGetProcAddress("glVertexAttrib4Nbv"); }
		if(!obj->methodp_glVertexAttrib4Nbv) { obj->methodp_glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4Nbv"); }
		if(!obj->methodp_glVertexAttrib4Nbv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4Nbv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4NbvARB) { obj->methodp_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)wglGetProcAddress("glVertexAttrib4NbvARB"); }
		if(!obj->methodp_glVertexAttrib4NbvARB) { obj->methodp_glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4NbvARB"); }
		if(!obj->methodp_glVertexAttrib4NbvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4NbvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4Niv) { obj->methodp_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)wglGetProcAddress("glVertexAttrib4Niv"); }
		if(!obj->methodp_glVertexAttrib4Niv) { obj->methodp_glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4Niv"); }
		if(!obj->methodp_glVertexAttrib4Niv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4Niv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4NivARB) { obj->methodp_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)wglGetProcAddress("glVertexAttrib4NivARB"); }
		if(!obj->methodp_glVertexAttrib4NivARB) { obj->methodp_glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4NivARB"); }
		if(!obj->methodp_glVertexAttrib4NivARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4NivARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4Nsv) { obj->methodp_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)wglGetProcAddress("glVertexAttrib4Nsv"); }
		if(!obj->methodp_glVertexAttrib4Nsv) { obj->methodp_glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4Nsv"); }
		if(!obj->methodp_glVertexAttrib4Nsv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4Nsv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4NsvARB) { obj->methodp_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)wglGetProcAddress("glVertexAttrib4NsvARB"); }
		if(!obj->methodp_glVertexAttrib4NsvARB) { obj->methodp_glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4NsvARB"); }
		if(!obj->methodp_glVertexAttrib4NsvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4NsvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4Nub) { obj->methodp_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)wglGetProcAddress("glVertexAttrib4Nub"); }
		if(!obj->methodp_glVertexAttrib4Nub) { obj->methodp_glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4Nub"); }
		if(!obj->methodp_glVertexAttrib4Nub) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4Nub"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4NubARB) { obj->methodp_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)wglGetProcAddress("glVertexAttrib4NubARB"); }
		if(!obj->methodp_glVertexAttrib4NubARB) { obj->methodp_glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4NubARB"); }
		if(!obj->methodp_glVertexAttrib4NubARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4NubARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4Nubv) { obj->methodp_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)wglGetProcAddress("glVertexAttrib4Nubv"); }
		if(!obj->methodp_glVertexAttrib4Nubv) { obj->methodp_glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4Nubv"); }
		if(!obj->methodp_glVertexAttrib4Nubv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4Nubv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4NubvARB) { obj->methodp_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)wglGetProcAddress("glVertexAttrib4NubvARB"); }
		if(!obj->methodp_glVertexAttrib4NubvARB) { obj->methodp_glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4NubvARB"); }
		if(!obj->methodp_glVertexAttrib4NubvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4NubvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4Nuiv) { obj->methodp_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)wglGetProcAddress("glVertexAttrib4Nuiv"); }
		if(!obj->methodp_glVertexAttrib4Nuiv) { obj->methodp_glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4Nuiv"); }
		if(!obj->methodp_glVertexAttrib4Nuiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4Nuiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4NuivARB) { obj->methodp_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)wglGetProcAddress("glVertexAttrib4NuivARB"); }
		if(!obj->methodp_glVertexAttrib4NuivARB) { obj->methodp_glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4NuivARB"); }
		if(!obj->methodp_glVertexAttrib4NuivARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4NuivARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4Nusv) { obj->methodp_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)wglGetProcAddress("glVertexAttrib4Nusv"); }
		if(!obj->methodp_glVertexAttrib4Nusv) { obj->methodp_glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4Nusv"); }
		if(!obj->methodp_glVertexAttrib4Nusv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4Nusv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4NusvARB) { obj->methodp_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)wglGetProcAddress("glVertexAttrib4NusvARB"); }
		if(!obj->methodp_glVertexAttrib4NusvARB) { obj->methodp_glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4NusvARB"); }
		if(!obj->methodp_glVertexAttrib4NusvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4NusvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4bv) { obj->methodp_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)wglGetProcAddress("glVertexAttrib4bv"); }
		if(!obj->methodp_glVertexAttrib4bv) { obj->methodp_glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4bv"); }
		if(!obj->methodp_glVertexAttrib4bv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4bv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4bvARB) { obj->methodp_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)wglGetProcAddress("glVertexAttrib4bvARB"); }
		if(!obj->methodp_glVertexAttrib4bvARB) { obj->methodp_glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4bvARB"); }
		if(!obj->methodp_glVertexAttrib4bvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4bvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4d) { obj->methodp_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)wglGetProcAddress("glVertexAttrib4d"); }
		if(!obj->methodp_glVertexAttrib4d) { obj->methodp_glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4d"); }
		if(!obj->methodp_glVertexAttrib4d) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4d"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4dARB) { obj->methodp_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)wglGetProcAddress("glVertexAttrib4dARB"); }
		if(!obj->methodp_glVertexAttrib4dARB) { obj->methodp_glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4dARB"); }
		if(!obj->methodp_glVertexAttrib4dARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4dARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4dNV) { obj->methodp_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)wglGetProcAddress("glVertexAttrib4dNV"); }
		if(!obj->methodp_glVertexAttrib4dNV) { obj->methodp_glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4dNV"); }
		if(!obj->methodp_glVertexAttrib4dNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4dNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4dv) { obj->methodp_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)wglGetProcAddress("glVertexAttrib4dv"); }
		if(!obj->methodp_glVertexAttrib4dv) { obj->methodp_glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4dv"); }
		if(!obj->methodp_glVertexAttrib4dv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4dv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4dvARB) { obj->methodp_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)wglGetProcAddress("glVertexAttrib4dvARB"); }
		if(!obj->methodp_glVertexAttrib4dvARB) { obj->methodp_glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4dvARB"); }
		if(!obj->methodp_glVertexAttrib4dvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4dvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4dvNV) { obj->methodp_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)wglGetProcAddress("glVertexAttrib4dvNV"); }
		if(!obj->methodp_glVertexAttrib4dvNV) { obj->methodp_glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4dvNV"); }
		if(!obj->methodp_glVertexAttrib4dvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4dvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4f) { obj->methodp_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)wglGetProcAddress("glVertexAttrib4f"); }
		if(!obj->methodp_glVertexAttrib4f) { obj->methodp_glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4f"); }
		if(!obj->methodp_glVertexAttrib4f) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4f"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4fARB) { obj->methodp_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)wglGetProcAddress("glVertexAttrib4fARB"); }
		if(!obj->methodp_glVertexAttrib4fARB) { obj->methodp_glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4fARB"); }
		if(!obj->methodp_glVertexAttrib4fARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4fARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4fNV) { obj->methodp_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)wglGetProcAddress("glVertexAttrib4fNV"); }
		if(!obj->methodp_glVertexAttrib4fNV) { obj->methodp_glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4fNV"); }
		if(!obj->methodp_glVertexAttrib4fNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4fNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4fv) { obj->methodp_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)wglGetProcAddress("glVertexAttrib4fv"); }
		if(!obj->methodp_glVertexAttrib4fv) { obj->methodp_glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4fv"); }
		if(!obj->methodp_glVertexAttrib4fv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4fv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4fvARB) { obj->methodp_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)wglGetProcAddress("glVertexAttrib4fvARB"); }
		if(!obj->methodp_glVertexAttrib4fvARB) { obj->methodp_glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4fvARB"); }
		if(!obj->methodp_glVertexAttrib4fvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4fvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4fvNV) { obj->methodp_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)wglGetProcAddress("glVertexAttrib4fvNV"); }
		if(!obj->methodp_glVertexAttrib4fvNV) { obj->methodp_glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4fvNV"); }
		if(!obj->methodp_glVertexAttrib4fvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4fvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4hNV) { obj->methodp_glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC)wglGetProcAddress("glVertexAttrib4hNV"); }
		if(!obj->methodp_glVertexAttrib4hNV) { obj->methodp_glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4hNV"); }
		if(!obj->methodp_glVertexAttrib4hNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4hNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4hvNV) { obj->methodp_glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC)wglGetProcAddress("glVertexAttrib4hvNV"); }
		if(!obj->methodp_glVertexAttrib4hvNV) { obj->methodp_glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4hvNV"); }
		if(!obj->methodp_glVertexAttrib4hvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4iv) { obj->methodp_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)wglGetProcAddress("glVertexAttrib4iv"); }
		if(!obj->methodp_glVertexAttrib4iv) { obj->methodp_glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4iv"); }
		if(!obj->methodp_glVertexAttrib4iv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4iv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4ivARB) { obj->methodp_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)wglGetProcAddress("glVertexAttrib4ivARB"); }
		if(!obj->methodp_glVertexAttrib4ivARB) { obj->methodp_glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4ivARB"); }
		if(!obj->methodp_glVertexAttrib4ivARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4ivARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4s) { obj->methodp_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)wglGetProcAddress("glVertexAttrib4s"); }
		if(!obj->methodp_glVertexAttrib4s) { obj->methodp_glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4s"); }
		if(!obj->methodp_glVertexAttrib4s) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4s"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4sARB) { obj->methodp_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)wglGetProcAddress("glVertexAttrib4sARB"); }
		if(!obj->methodp_glVertexAttrib4sARB) { obj->methodp_glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4sARB"); }
		if(!obj->methodp_glVertexAttrib4sARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4sARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4sNV) { obj->methodp_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)wglGetProcAddress("glVertexAttrib4sNV"); }
		if(!obj->methodp_glVertexAttrib4sNV) { obj->methodp_glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4sNV"); }
		if(!obj->methodp_glVertexAttrib4sNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4sNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4sv) { obj->methodp_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)wglGetProcAddress("glVertexAttrib4sv"); }
		if(!obj->methodp_glVertexAttrib4sv) { obj->methodp_glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4sv"); }
		if(!obj->methodp_glVertexAttrib4sv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4sv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4svARB) { obj->methodp_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)wglGetProcAddress("glVertexAttrib4svARB"); }
		if(!obj->methodp_glVertexAttrib4svARB) { obj->methodp_glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4svARB"); }
		if(!obj->methodp_glVertexAttrib4svARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4svARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4svNV) { obj->methodp_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)wglGetProcAddress("glVertexAttrib4svNV"); }
		if(!obj->methodp_glVertexAttrib4svNV) { obj->methodp_glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4svNV"); }
		if(!obj->methodp_glVertexAttrib4svNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4svNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4ubNV) { obj->methodp_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)wglGetProcAddress("glVertexAttrib4ubNV"); }
		if(!obj->methodp_glVertexAttrib4ubNV) { obj->methodp_glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4ubNV"); }
		if(!obj->methodp_glVertexAttrib4ubNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4ubNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4ubv) { obj->methodp_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)wglGetProcAddress("glVertexAttrib4ubv"); }
		if(!obj->methodp_glVertexAttrib4ubv) { obj->methodp_glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4ubv"); }
		if(!obj->methodp_glVertexAttrib4ubv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4ubv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4ubvARB) { obj->methodp_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)wglGetProcAddress("glVertexAttrib4ubvARB"); }
		if(!obj->methodp_glVertexAttrib4ubvARB) { obj->methodp_glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4ubvARB"); }
		if(!obj->methodp_glVertexAttrib4ubvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4ubvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4ubvNV) { obj->methodp_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)wglGetProcAddress("glVertexAttrib4ubvNV"); }
		if(!obj->methodp_glVertexAttrib4ubvNV) { obj->methodp_glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4ubvNV"); }
		if(!obj->methodp_glVertexAttrib4ubvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4ubvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4uiv) { obj->methodp_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)wglGetProcAddress("glVertexAttrib4uiv"); }
		if(!obj->methodp_glVertexAttrib4uiv) { obj->methodp_glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4uiv"); }
		if(!obj->methodp_glVertexAttrib4uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4uivARB) { obj->methodp_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)wglGetProcAddress("glVertexAttrib4uivARB"); }
		if(!obj->methodp_glVertexAttrib4uivARB) { obj->methodp_glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4uivARB"); }
		if(!obj->methodp_glVertexAttrib4uivARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4uivARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4usv) { obj->methodp_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)wglGetProcAddress("glVertexAttrib4usv"); }
		if(!obj->methodp_glVertexAttrib4usv) { obj->methodp_glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4usv"); }
		if(!obj->methodp_glVertexAttrib4usv) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4usv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttrib4usvARB) { obj->methodp_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)wglGetProcAddress("glVertexAttrib4usvARB"); }
		if(!obj->methodp_glVertexAttrib4usvARB) { obj->methodp_glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)GetProcAddress(modOpenGL32, "glVertexAttrib4usvARB"); }
		if(!obj->methodp_glVertexAttrib4usvARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttrib4usvARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribArrayObjectATI) { obj->methodp_glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)wglGetProcAddress("glVertexAttribArrayObjectATI"); }
		if(!obj->methodp_glVertexAttribArrayObjectATI) { obj->methodp_glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)GetProcAddress(modOpenGL32, "glVertexAttribArrayObjectATI"); }
		if(!obj->methodp_glVertexAttribArrayObjectATI) { args.This()->Set(v8::String::NewSymbol("glVertexAttribArrayObjectATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribBinding) { obj->methodp_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)wglGetProcAddress("glVertexAttribBinding"); }
		if(!obj->methodp_glVertexAttribBinding) { obj->methodp_glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)GetProcAddress(modOpenGL32, "glVertexAttribBinding"); }
		if(!obj->methodp_glVertexAttribBinding) { args.This()->Set(v8::String::NewSymbol("glVertexAttribBinding"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribDivisor) { obj->methodp_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)wglGetProcAddress("glVertexAttribDivisor"); }
		if(!obj->methodp_glVertexAttribDivisor) { obj->methodp_glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)GetProcAddress(modOpenGL32, "glVertexAttribDivisor"); }
		if(!obj->methodp_glVertexAttribDivisor) { args.This()->Set(v8::String::NewSymbol("glVertexAttribDivisor"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribDivisorANGLE) { obj->methodp_glVertexAttribDivisorANGLE = (PFNGLVERTEXATTRIBDIVISORANGLEPROC)wglGetProcAddress("glVertexAttribDivisorANGLE"); }
		if(!obj->methodp_glVertexAttribDivisorANGLE) { obj->methodp_glVertexAttribDivisorANGLE = (PFNGLVERTEXATTRIBDIVISORANGLEPROC)GetProcAddress(modOpenGL32, "glVertexAttribDivisorANGLE"); }
		if(!obj->methodp_glVertexAttribDivisorANGLE) { args.This()->Set(v8::String::NewSymbol("glVertexAttribDivisorANGLE"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribDivisorARB) { obj->methodp_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)wglGetProcAddress("glVertexAttribDivisorARB"); }
		if(!obj->methodp_glVertexAttribDivisorARB) { obj->methodp_glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)GetProcAddress(modOpenGL32, "glVertexAttribDivisorARB"); }
		if(!obj->methodp_glVertexAttribDivisorARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttribDivisorARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribDivisorEXT) { obj->methodp_glVertexAttribDivisorEXT = (PFNGLVERTEXATTRIBDIVISOREXTPROC)wglGetProcAddress("glVertexAttribDivisorEXT"); }
		if(!obj->methodp_glVertexAttribDivisorEXT) { obj->methodp_glVertexAttribDivisorEXT = (PFNGLVERTEXATTRIBDIVISOREXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribDivisorEXT"); }
		if(!obj->methodp_glVertexAttribDivisorEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribDivisorEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribDivisorNV) { obj->methodp_glVertexAttribDivisorNV = (PFNGLVERTEXATTRIBDIVISORNVPROC)wglGetProcAddress("glVertexAttribDivisorNV"); }
		if(!obj->methodp_glVertexAttribDivisorNV) { obj->methodp_glVertexAttribDivisorNV = (PFNGLVERTEXATTRIBDIVISORNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribDivisorNV"); }
		if(!obj->methodp_glVertexAttribDivisorNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribDivisorNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribFormat) { obj->methodp_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)wglGetProcAddress("glVertexAttribFormat"); }
		if(!obj->methodp_glVertexAttribFormat) { obj->methodp_glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)GetProcAddress(modOpenGL32, "glVertexAttribFormat"); }
		if(!obj->methodp_glVertexAttribFormat) { args.This()->Set(v8::String::NewSymbol("glVertexAttribFormat"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribFormatNV) { obj->methodp_glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC)wglGetProcAddress("glVertexAttribFormatNV"); }
		if(!obj->methodp_glVertexAttribFormatNV) { obj->methodp_glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribFormatNV"); }
		if(!obj->methodp_glVertexAttribFormatNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI1i) { obj->methodp_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)wglGetProcAddress("glVertexAttribI1i"); }
		if(!obj->methodp_glVertexAttribI1i) { obj->methodp_glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)GetProcAddress(modOpenGL32, "glVertexAttribI1i"); }
		if(!obj->methodp_glVertexAttribI1i) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI1i"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI1iEXT) { obj->methodp_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)wglGetProcAddress("glVertexAttribI1iEXT"); }
		if(!obj->methodp_glVertexAttribI1iEXT) { obj->methodp_glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI1iEXT"); }
		if(!obj->methodp_glVertexAttribI1iEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI1iEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI1iv) { obj->methodp_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)wglGetProcAddress("glVertexAttribI1iv"); }
		if(!obj->methodp_glVertexAttribI1iv) { obj->methodp_glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI1iv"); }
		if(!obj->methodp_glVertexAttribI1iv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI1iv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI1ivEXT) { obj->methodp_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)wglGetProcAddress("glVertexAttribI1ivEXT"); }
		if(!obj->methodp_glVertexAttribI1ivEXT) { obj->methodp_glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI1ivEXT"); }
		if(!obj->methodp_glVertexAttribI1ivEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI1ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI1ui) { obj->methodp_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)wglGetProcAddress("glVertexAttribI1ui"); }
		if(!obj->methodp_glVertexAttribI1ui) { obj->methodp_glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)GetProcAddress(modOpenGL32, "glVertexAttribI1ui"); }
		if(!obj->methodp_glVertexAttribI1ui) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI1ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI1uiEXT) { obj->methodp_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)wglGetProcAddress("glVertexAttribI1uiEXT"); }
		if(!obj->methodp_glVertexAttribI1uiEXT) { obj->methodp_glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI1uiEXT"); }
		if(!obj->methodp_glVertexAttribI1uiEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI1uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI1uiv) { obj->methodp_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)wglGetProcAddress("glVertexAttribI1uiv"); }
		if(!obj->methodp_glVertexAttribI1uiv) { obj->methodp_glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI1uiv"); }
		if(!obj->methodp_glVertexAttribI1uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI1uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI1uivEXT) { obj->methodp_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)wglGetProcAddress("glVertexAttribI1uivEXT"); }
		if(!obj->methodp_glVertexAttribI1uivEXT) { obj->methodp_glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI1uivEXT"); }
		if(!obj->methodp_glVertexAttribI1uivEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI1uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI2i) { obj->methodp_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)wglGetProcAddress("glVertexAttribI2i"); }
		if(!obj->methodp_glVertexAttribI2i) { obj->methodp_glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)GetProcAddress(modOpenGL32, "glVertexAttribI2i"); }
		if(!obj->methodp_glVertexAttribI2i) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI2i"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI2iEXT) { obj->methodp_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)wglGetProcAddress("glVertexAttribI2iEXT"); }
		if(!obj->methodp_glVertexAttribI2iEXT) { obj->methodp_glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI2iEXT"); }
		if(!obj->methodp_glVertexAttribI2iEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI2iEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI2iv) { obj->methodp_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)wglGetProcAddress("glVertexAttribI2iv"); }
		if(!obj->methodp_glVertexAttribI2iv) { obj->methodp_glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI2iv"); }
		if(!obj->methodp_glVertexAttribI2iv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI2iv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI2ivEXT) { obj->methodp_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)wglGetProcAddress("glVertexAttribI2ivEXT"); }
		if(!obj->methodp_glVertexAttribI2ivEXT) { obj->methodp_glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI2ivEXT"); }
		if(!obj->methodp_glVertexAttribI2ivEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI2ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI2ui) { obj->methodp_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)wglGetProcAddress("glVertexAttribI2ui"); }
		if(!obj->methodp_glVertexAttribI2ui) { obj->methodp_glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)GetProcAddress(modOpenGL32, "glVertexAttribI2ui"); }
		if(!obj->methodp_glVertexAttribI2ui) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI2ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI2uiEXT) { obj->methodp_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)wglGetProcAddress("glVertexAttribI2uiEXT"); }
		if(!obj->methodp_glVertexAttribI2uiEXT) { obj->methodp_glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI2uiEXT"); }
		if(!obj->methodp_glVertexAttribI2uiEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI2uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI2uiv) { obj->methodp_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)wglGetProcAddress("glVertexAttribI2uiv"); }
		if(!obj->methodp_glVertexAttribI2uiv) { obj->methodp_glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI2uiv"); }
		if(!obj->methodp_glVertexAttribI2uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI2uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI2uivEXT) { obj->methodp_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)wglGetProcAddress("glVertexAttribI2uivEXT"); }
		if(!obj->methodp_glVertexAttribI2uivEXT) { obj->methodp_glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI2uivEXT"); }
		if(!obj->methodp_glVertexAttribI2uivEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI2uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI3i) { obj->methodp_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)wglGetProcAddress("glVertexAttribI3i"); }
		if(!obj->methodp_glVertexAttribI3i) { obj->methodp_glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)GetProcAddress(modOpenGL32, "glVertexAttribI3i"); }
		if(!obj->methodp_glVertexAttribI3i) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI3i"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI3iEXT) { obj->methodp_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)wglGetProcAddress("glVertexAttribI3iEXT"); }
		if(!obj->methodp_glVertexAttribI3iEXT) { obj->methodp_glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI3iEXT"); }
		if(!obj->methodp_glVertexAttribI3iEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI3iEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI3iv) { obj->methodp_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)wglGetProcAddress("glVertexAttribI3iv"); }
		if(!obj->methodp_glVertexAttribI3iv) { obj->methodp_glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI3iv"); }
		if(!obj->methodp_glVertexAttribI3iv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI3iv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI3ivEXT) { obj->methodp_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)wglGetProcAddress("glVertexAttribI3ivEXT"); }
		if(!obj->methodp_glVertexAttribI3ivEXT) { obj->methodp_glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI3ivEXT"); }
		if(!obj->methodp_glVertexAttribI3ivEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI3ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI3ui) { obj->methodp_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)wglGetProcAddress("glVertexAttribI3ui"); }
		if(!obj->methodp_glVertexAttribI3ui) { obj->methodp_glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)GetProcAddress(modOpenGL32, "glVertexAttribI3ui"); }
		if(!obj->methodp_glVertexAttribI3ui) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI3ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI3uiEXT) { obj->methodp_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)wglGetProcAddress("glVertexAttribI3uiEXT"); }
		if(!obj->methodp_glVertexAttribI3uiEXT) { obj->methodp_glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI3uiEXT"); }
		if(!obj->methodp_glVertexAttribI3uiEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI3uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI3uiv) { obj->methodp_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)wglGetProcAddress("glVertexAttribI3uiv"); }
		if(!obj->methodp_glVertexAttribI3uiv) { obj->methodp_glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI3uiv"); }
		if(!obj->methodp_glVertexAttribI3uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI3uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI3uivEXT) { obj->methodp_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)wglGetProcAddress("glVertexAttribI3uivEXT"); }
		if(!obj->methodp_glVertexAttribI3uivEXT) { obj->methodp_glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI3uivEXT"); }
		if(!obj->methodp_glVertexAttribI3uivEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI3uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4bv) { obj->methodp_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)wglGetProcAddress("glVertexAttribI4bv"); }
		if(!obj->methodp_glVertexAttribI4bv) { obj->methodp_glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4bv"); }
		if(!obj->methodp_glVertexAttribI4bv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4bv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4bvEXT) { obj->methodp_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)wglGetProcAddress("glVertexAttribI4bvEXT"); }
		if(!obj->methodp_glVertexAttribI4bvEXT) { obj->methodp_glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4bvEXT"); }
		if(!obj->methodp_glVertexAttribI4bvEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4bvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4i) { obj->methodp_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)wglGetProcAddress("glVertexAttribI4i"); }
		if(!obj->methodp_glVertexAttribI4i) { obj->methodp_glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4i"); }
		if(!obj->methodp_glVertexAttribI4i) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4i"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4iEXT) { obj->methodp_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)wglGetProcAddress("glVertexAttribI4iEXT"); }
		if(!obj->methodp_glVertexAttribI4iEXT) { obj->methodp_glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4iEXT"); }
		if(!obj->methodp_glVertexAttribI4iEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4iEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4iv) { obj->methodp_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)wglGetProcAddress("glVertexAttribI4iv"); }
		if(!obj->methodp_glVertexAttribI4iv) { obj->methodp_glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4iv"); }
		if(!obj->methodp_glVertexAttribI4iv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4iv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4ivEXT) { obj->methodp_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)wglGetProcAddress("glVertexAttribI4ivEXT"); }
		if(!obj->methodp_glVertexAttribI4ivEXT) { obj->methodp_glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4ivEXT"); }
		if(!obj->methodp_glVertexAttribI4ivEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4ivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4sv) { obj->methodp_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)wglGetProcAddress("glVertexAttribI4sv"); }
		if(!obj->methodp_glVertexAttribI4sv) { obj->methodp_glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4sv"); }
		if(!obj->methodp_glVertexAttribI4sv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4sv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4svEXT) { obj->methodp_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)wglGetProcAddress("glVertexAttribI4svEXT"); }
		if(!obj->methodp_glVertexAttribI4svEXT) { obj->methodp_glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4svEXT"); }
		if(!obj->methodp_glVertexAttribI4svEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4svEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4ubv) { obj->methodp_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)wglGetProcAddress("glVertexAttribI4ubv"); }
		if(!obj->methodp_glVertexAttribI4ubv) { obj->methodp_glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4ubv"); }
		if(!obj->methodp_glVertexAttribI4ubv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4ubv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4ubvEXT) { obj->methodp_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)wglGetProcAddress("glVertexAttribI4ubvEXT"); }
		if(!obj->methodp_glVertexAttribI4ubvEXT) { obj->methodp_glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4ubvEXT"); }
		if(!obj->methodp_glVertexAttribI4ubvEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4ubvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4ui) { obj->methodp_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)wglGetProcAddress("glVertexAttribI4ui"); }
		if(!obj->methodp_glVertexAttribI4ui) { obj->methodp_glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4ui"); }
		if(!obj->methodp_glVertexAttribI4ui) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4uiEXT) { obj->methodp_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)wglGetProcAddress("glVertexAttribI4uiEXT"); }
		if(!obj->methodp_glVertexAttribI4uiEXT) { obj->methodp_glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4uiEXT"); }
		if(!obj->methodp_glVertexAttribI4uiEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4uiEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4uiv) { obj->methodp_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)wglGetProcAddress("glVertexAttribI4uiv"); }
		if(!obj->methodp_glVertexAttribI4uiv) { obj->methodp_glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4uiv"); }
		if(!obj->methodp_glVertexAttribI4uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4uivEXT) { obj->methodp_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)wglGetProcAddress("glVertexAttribI4uivEXT"); }
		if(!obj->methodp_glVertexAttribI4uivEXT) { obj->methodp_glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4uivEXT"); }
		if(!obj->methodp_glVertexAttribI4uivEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4uivEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4usv) { obj->methodp_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)wglGetProcAddress("glVertexAttribI4usv"); }
		if(!obj->methodp_glVertexAttribI4usv) { obj->methodp_glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4usv"); }
		if(!obj->methodp_glVertexAttribI4usv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4usv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribI4usvEXT) { obj->methodp_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)wglGetProcAddress("glVertexAttribI4usvEXT"); }
		if(!obj->methodp_glVertexAttribI4usvEXT) { obj->methodp_glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribI4usvEXT"); }
		if(!obj->methodp_glVertexAttribI4usvEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribI4usvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribIFormat) { obj->methodp_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)wglGetProcAddress("glVertexAttribIFormat"); }
		if(!obj->methodp_glVertexAttribIFormat) { obj->methodp_glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)GetProcAddress(modOpenGL32, "glVertexAttribIFormat"); }
		if(!obj->methodp_glVertexAttribIFormat) { args.This()->Set(v8::String::NewSymbol("glVertexAttribIFormat"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribIFormatNV) { obj->methodp_glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC)wglGetProcAddress("glVertexAttribIFormatNV"); }
		if(!obj->methodp_glVertexAttribIFormatNV) { obj->methodp_glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribIFormatNV"); }
		if(!obj->methodp_glVertexAttribIFormatNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribIFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribIPointer) { obj->methodp_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)wglGetProcAddress("glVertexAttribIPointer"); }
		if(!obj->methodp_glVertexAttribIPointer) { obj->methodp_glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)GetProcAddress(modOpenGL32, "glVertexAttribIPointer"); }
		if(!obj->methodp_glVertexAttribIPointer) { args.This()->Set(v8::String::NewSymbol("glVertexAttribIPointer"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribIPointerEXT) { obj->methodp_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)wglGetProcAddress("glVertexAttribIPointerEXT"); }
		if(!obj->methodp_glVertexAttribIPointerEXT) { obj->methodp_glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribIPointerEXT"); }
		if(!obj->methodp_glVertexAttribIPointerEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribIPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1d) { obj->methodp_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)wglGetProcAddress("glVertexAttribL1d"); }
		if(!obj->methodp_glVertexAttribL1d) { obj->methodp_glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1d"); }
		if(!obj->methodp_glVertexAttribL1d) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1d"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1dEXT) { obj->methodp_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC)wglGetProcAddress("glVertexAttribL1dEXT"); }
		if(!obj->methodp_glVertexAttribL1dEXT) { obj->methodp_glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1dEXT"); }
		if(!obj->methodp_glVertexAttribL1dEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1dEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1dv) { obj->methodp_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)wglGetProcAddress("glVertexAttribL1dv"); }
		if(!obj->methodp_glVertexAttribL1dv) { obj->methodp_glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1dv"); }
		if(!obj->methodp_glVertexAttribL1dv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1dv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1dvEXT) { obj->methodp_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC)wglGetProcAddress("glVertexAttribL1dvEXT"); }
		if(!obj->methodp_glVertexAttribL1dvEXT) { obj->methodp_glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1dvEXT"); }
		if(!obj->methodp_glVertexAttribL1dvEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1i64NV) { obj->methodp_glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC)wglGetProcAddress("glVertexAttribL1i64NV"); }
		if(!obj->methodp_glVertexAttribL1i64NV) { obj->methodp_glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1i64NV"); }
		if(!obj->methodp_glVertexAttribL1i64NV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1i64NV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1i64vNV) { obj->methodp_glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC)wglGetProcAddress("glVertexAttribL1i64vNV"); }
		if(!obj->methodp_glVertexAttribL1i64vNV) { obj->methodp_glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1i64vNV"); }
		if(!obj->methodp_glVertexAttribL1i64vNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1ui64ARB) { obj->methodp_glVertexAttribL1ui64ARB = (PFNGLVERTEXATTRIBL1UI64ARBPROC)wglGetProcAddress("glVertexAttribL1ui64ARB"); }
		if(!obj->methodp_glVertexAttribL1ui64ARB) { obj->methodp_glVertexAttribL1ui64ARB = (PFNGLVERTEXATTRIBL1UI64ARBPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1ui64ARB"); }
		if(!obj->methodp_glVertexAttribL1ui64ARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1ui64ARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1ui64NV) { obj->methodp_glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC)wglGetProcAddress("glVertexAttribL1ui64NV"); }
		if(!obj->methodp_glVertexAttribL1ui64NV) { obj->methodp_glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1ui64NV"); }
		if(!obj->methodp_glVertexAttribL1ui64NV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1ui64vARB) { obj->methodp_glVertexAttribL1ui64vARB = (PFNGLVERTEXATTRIBL1UI64VARBPROC)wglGetProcAddress("glVertexAttribL1ui64vARB"); }
		if(!obj->methodp_glVertexAttribL1ui64vARB) { obj->methodp_glVertexAttribL1ui64vARB = (PFNGLVERTEXATTRIBL1UI64VARBPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1ui64vARB"); }
		if(!obj->methodp_glVertexAttribL1ui64vARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1ui64vARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL1ui64vNV) { obj->methodp_glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC)wglGetProcAddress("glVertexAttribL1ui64vNV"); }
		if(!obj->methodp_glVertexAttribL1ui64vNV) { obj->methodp_glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL1ui64vNV"); }
		if(!obj->methodp_glVertexAttribL1ui64vNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL1ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL2d) { obj->methodp_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)wglGetProcAddress("glVertexAttribL2d"); }
		if(!obj->methodp_glVertexAttribL2d) { obj->methodp_glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)GetProcAddress(modOpenGL32, "glVertexAttribL2d"); }
		if(!obj->methodp_glVertexAttribL2d) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL2d"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL2dEXT) { obj->methodp_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC)wglGetProcAddress("glVertexAttribL2dEXT"); }
		if(!obj->methodp_glVertexAttribL2dEXT) { obj->methodp_glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribL2dEXT"); }
		if(!obj->methodp_glVertexAttribL2dEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL2dEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL2dv) { obj->methodp_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)wglGetProcAddress("glVertexAttribL2dv"); }
		if(!obj->methodp_glVertexAttribL2dv) { obj->methodp_glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL2dv"); }
		if(!obj->methodp_glVertexAttribL2dv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL2dv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL2dvEXT) { obj->methodp_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC)wglGetProcAddress("glVertexAttribL2dvEXT"); }
		if(!obj->methodp_glVertexAttribL2dvEXT) { obj->methodp_glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribL2dvEXT"); }
		if(!obj->methodp_glVertexAttribL2dvEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL2dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL2i64NV) { obj->methodp_glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC)wglGetProcAddress("glVertexAttribL2i64NV"); }
		if(!obj->methodp_glVertexAttribL2i64NV) { obj->methodp_glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL2i64NV"); }
		if(!obj->methodp_glVertexAttribL2i64NV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL2i64NV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL2i64vNV) { obj->methodp_glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC)wglGetProcAddress("glVertexAttribL2i64vNV"); }
		if(!obj->methodp_glVertexAttribL2i64vNV) { obj->methodp_glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL2i64vNV"); }
		if(!obj->methodp_glVertexAttribL2i64vNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL2i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL2ui64NV) { obj->methodp_glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC)wglGetProcAddress("glVertexAttribL2ui64NV"); }
		if(!obj->methodp_glVertexAttribL2ui64NV) { obj->methodp_glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL2ui64NV"); }
		if(!obj->methodp_glVertexAttribL2ui64NV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL2ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL2ui64vNV) { obj->methodp_glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC)wglGetProcAddress("glVertexAttribL2ui64vNV"); }
		if(!obj->methodp_glVertexAttribL2ui64vNV) { obj->methodp_glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL2ui64vNV"); }
		if(!obj->methodp_glVertexAttribL2ui64vNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL2ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL3d) { obj->methodp_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)wglGetProcAddress("glVertexAttribL3d"); }
		if(!obj->methodp_glVertexAttribL3d) { obj->methodp_glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)GetProcAddress(modOpenGL32, "glVertexAttribL3d"); }
		if(!obj->methodp_glVertexAttribL3d) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL3d"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL3dEXT) { obj->methodp_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC)wglGetProcAddress("glVertexAttribL3dEXT"); }
		if(!obj->methodp_glVertexAttribL3dEXT) { obj->methodp_glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribL3dEXT"); }
		if(!obj->methodp_glVertexAttribL3dEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL3dEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL3dv) { obj->methodp_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)wglGetProcAddress("glVertexAttribL3dv"); }
		if(!obj->methodp_glVertexAttribL3dv) { obj->methodp_glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL3dv"); }
		if(!obj->methodp_glVertexAttribL3dv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL3dv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL3dvEXT) { obj->methodp_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC)wglGetProcAddress("glVertexAttribL3dvEXT"); }
		if(!obj->methodp_glVertexAttribL3dvEXT) { obj->methodp_glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribL3dvEXT"); }
		if(!obj->methodp_glVertexAttribL3dvEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL3dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL3i64NV) { obj->methodp_glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC)wglGetProcAddress("glVertexAttribL3i64NV"); }
		if(!obj->methodp_glVertexAttribL3i64NV) { obj->methodp_glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL3i64NV"); }
		if(!obj->methodp_glVertexAttribL3i64NV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL3i64NV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL3i64vNV) { obj->methodp_glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC)wglGetProcAddress("glVertexAttribL3i64vNV"); }
		if(!obj->methodp_glVertexAttribL3i64vNV) { obj->methodp_glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL3i64vNV"); }
		if(!obj->methodp_glVertexAttribL3i64vNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL3i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL3ui64NV) { obj->methodp_glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC)wglGetProcAddress("glVertexAttribL3ui64NV"); }
		if(!obj->methodp_glVertexAttribL3ui64NV) { obj->methodp_glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL3ui64NV"); }
		if(!obj->methodp_glVertexAttribL3ui64NV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL3ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL3ui64vNV) { obj->methodp_glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC)wglGetProcAddress("glVertexAttribL3ui64vNV"); }
		if(!obj->methodp_glVertexAttribL3ui64vNV) { obj->methodp_glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL3ui64vNV"); }
		if(!obj->methodp_glVertexAttribL3ui64vNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL3ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL4d) { obj->methodp_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)wglGetProcAddress("glVertexAttribL4d"); }
		if(!obj->methodp_glVertexAttribL4d) { obj->methodp_glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)GetProcAddress(modOpenGL32, "glVertexAttribL4d"); }
		if(!obj->methodp_glVertexAttribL4d) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL4d"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL4dEXT) { obj->methodp_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC)wglGetProcAddress("glVertexAttribL4dEXT"); }
		if(!obj->methodp_glVertexAttribL4dEXT) { obj->methodp_glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribL4dEXT"); }
		if(!obj->methodp_glVertexAttribL4dEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL4dEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL4dv) { obj->methodp_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)wglGetProcAddress("glVertexAttribL4dv"); }
		if(!obj->methodp_glVertexAttribL4dv) { obj->methodp_glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL4dv"); }
		if(!obj->methodp_glVertexAttribL4dv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL4dv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL4dvEXT) { obj->methodp_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC)wglGetProcAddress("glVertexAttribL4dvEXT"); }
		if(!obj->methodp_glVertexAttribL4dvEXT) { obj->methodp_glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribL4dvEXT"); }
		if(!obj->methodp_glVertexAttribL4dvEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL4dvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL4i64NV) { obj->methodp_glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC)wglGetProcAddress("glVertexAttribL4i64NV"); }
		if(!obj->methodp_glVertexAttribL4i64NV) { obj->methodp_glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL4i64NV"); }
		if(!obj->methodp_glVertexAttribL4i64NV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL4i64NV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL4i64vNV) { obj->methodp_glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC)wglGetProcAddress("glVertexAttribL4i64vNV"); }
		if(!obj->methodp_glVertexAttribL4i64vNV) { obj->methodp_glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL4i64vNV"); }
		if(!obj->methodp_glVertexAttribL4i64vNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL4i64vNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL4ui64NV) { obj->methodp_glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC)wglGetProcAddress("glVertexAttribL4ui64NV"); }
		if(!obj->methodp_glVertexAttribL4ui64NV) { obj->methodp_glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL4ui64NV"); }
		if(!obj->methodp_glVertexAttribL4ui64NV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL4ui64NV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribL4ui64vNV) { obj->methodp_glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC)wglGetProcAddress("glVertexAttribL4ui64vNV"); }
		if(!obj->methodp_glVertexAttribL4ui64vNV) { obj->methodp_glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribL4ui64vNV"); }
		if(!obj->methodp_glVertexAttribL4ui64vNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribL4ui64vNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribLFormat) { obj->methodp_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)wglGetProcAddress("glVertexAttribLFormat"); }
		if(!obj->methodp_glVertexAttribLFormat) { obj->methodp_glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)GetProcAddress(modOpenGL32, "glVertexAttribLFormat"); }
		if(!obj->methodp_glVertexAttribLFormat) { args.This()->Set(v8::String::NewSymbol("glVertexAttribLFormat"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribLFormatNV) { obj->methodp_glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC)wglGetProcAddress("glVertexAttribLFormatNV"); }
		if(!obj->methodp_glVertexAttribLFormatNV) { obj->methodp_glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribLFormatNV"); }
		if(!obj->methodp_glVertexAttribLFormatNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribLFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribLPointer) { obj->methodp_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)wglGetProcAddress("glVertexAttribLPointer"); }
		if(!obj->methodp_glVertexAttribLPointer) { obj->methodp_glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)GetProcAddress(modOpenGL32, "glVertexAttribLPointer"); }
		if(!obj->methodp_glVertexAttribLPointer) { args.This()->Set(v8::String::NewSymbol("glVertexAttribLPointer"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribLPointerEXT) { obj->methodp_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC)wglGetProcAddress("glVertexAttribLPointerEXT"); }
		if(!obj->methodp_glVertexAttribLPointerEXT) { obj->methodp_glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glVertexAttribLPointerEXT"); }
		if(!obj->methodp_glVertexAttribLPointerEXT) { args.This()->Set(v8::String::NewSymbol("glVertexAttribLPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribP1ui) { obj->methodp_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)wglGetProcAddress("glVertexAttribP1ui"); }
		if(!obj->methodp_glVertexAttribP1ui) { obj->methodp_glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)GetProcAddress(modOpenGL32, "glVertexAttribP1ui"); }
		if(!obj->methodp_glVertexAttribP1ui) { args.This()->Set(v8::String::NewSymbol("glVertexAttribP1ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribP1uiv) { obj->methodp_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)wglGetProcAddress("glVertexAttribP1uiv"); }
		if(!obj->methodp_glVertexAttribP1uiv) { obj->methodp_glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttribP1uiv"); }
		if(!obj->methodp_glVertexAttribP1uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribP1uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribP2ui) { obj->methodp_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)wglGetProcAddress("glVertexAttribP2ui"); }
		if(!obj->methodp_glVertexAttribP2ui) { obj->methodp_glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)GetProcAddress(modOpenGL32, "glVertexAttribP2ui"); }
		if(!obj->methodp_glVertexAttribP2ui) { args.This()->Set(v8::String::NewSymbol("glVertexAttribP2ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribP2uiv) { obj->methodp_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)wglGetProcAddress("glVertexAttribP2uiv"); }
		if(!obj->methodp_glVertexAttribP2uiv) { obj->methodp_glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttribP2uiv"); }
		if(!obj->methodp_glVertexAttribP2uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribP2uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribP3ui) { obj->methodp_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)wglGetProcAddress("glVertexAttribP3ui"); }
		if(!obj->methodp_glVertexAttribP3ui) { obj->methodp_glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)GetProcAddress(modOpenGL32, "glVertexAttribP3ui"); }
		if(!obj->methodp_glVertexAttribP3ui) { args.This()->Set(v8::String::NewSymbol("glVertexAttribP3ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribP3uiv) { obj->methodp_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)wglGetProcAddress("glVertexAttribP3uiv"); }
		if(!obj->methodp_glVertexAttribP3uiv) { obj->methodp_glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttribP3uiv"); }
		if(!obj->methodp_glVertexAttribP3uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribP3uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribP4ui) { obj->methodp_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)wglGetProcAddress("glVertexAttribP4ui"); }
		if(!obj->methodp_glVertexAttribP4ui) { obj->methodp_glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)GetProcAddress(modOpenGL32, "glVertexAttribP4ui"); }
		if(!obj->methodp_glVertexAttribP4ui) { args.This()->Set(v8::String::NewSymbol("glVertexAttribP4ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribP4uiv) { obj->methodp_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)wglGetProcAddress("glVertexAttribP4uiv"); }
		if(!obj->methodp_glVertexAttribP4uiv) { obj->methodp_glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)GetProcAddress(modOpenGL32, "glVertexAttribP4uiv"); }
		if(!obj->methodp_glVertexAttribP4uiv) { args.This()->Set(v8::String::NewSymbol("glVertexAttribP4uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribParameteriAMD) { obj->methodp_glVertexAttribParameteriAMD = (PFNGLVERTEXATTRIBPARAMETERIAMDPROC)wglGetProcAddress("glVertexAttribParameteriAMD"); }
		if(!obj->methodp_glVertexAttribParameteriAMD) { obj->methodp_glVertexAttribParameteriAMD = (PFNGLVERTEXATTRIBPARAMETERIAMDPROC)GetProcAddress(modOpenGL32, "glVertexAttribParameteriAMD"); }
		if(!obj->methodp_glVertexAttribParameteriAMD) { args.This()->Set(v8::String::NewSymbol("glVertexAttribParameteriAMD"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribPointer) { obj->methodp_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)wglGetProcAddress("glVertexAttribPointer"); }
		if(!obj->methodp_glVertexAttribPointer) { obj->methodp_glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)GetProcAddress(modOpenGL32, "glVertexAttribPointer"); }
		if(!obj->methodp_glVertexAttribPointer) { args.This()->Set(v8::String::NewSymbol("glVertexAttribPointer"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribPointerARB) { obj->methodp_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)wglGetProcAddress("glVertexAttribPointerARB"); }
		if(!obj->methodp_glVertexAttribPointerARB) { obj->methodp_glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)GetProcAddress(modOpenGL32, "glVertexAttribPointerARB"); }
		if(!obj->methodp_glVertexAttribPointerARB) { args.This()->Set(v8::String::NewSymbol("glVertexAttribPointerARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribPointerNV) { obj->methodp_glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)wglGetProcAddress("glVertexAttribPointerNV"); }
		if(!obj->methodp_glVertexAttribPointerNV) { obj->methodp_glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribPointerNV"); }
		if(!obj->methodp_glVertexAttribPointerNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribPointerNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs1dvNV) { obj->methodp_glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)wglGetProcAddress("glVertexAttribs1dvNV"); }
		if(!obj->methodp_glVertexAttribs1dvNV) { obj->methodp_glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs1dvNV"); }
		if(!obj->methodp_glVertexAttribs1dvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs1dvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs1fvNV) { obj->methodp_glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)wglGetProcAddress("glVertexAttribs1fvNV"); }
		if(!obj->methodp_glVertexAttribs1fvNV) { obj->methodp_glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs1fvNV"); }
		if(!obj->methodp_glVertexAttribs1fvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs1fvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs1hvNV) { obj->methodp_glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC)wglGetProcAddress("glVertexAttribs1hvNV"); }
		if(!obj->methodp_glVertexAttribs1hvNV) { obj->methodp_glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs1hvNV"); }
		if(!obj->methodp_glVertexAttribs1hvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs1hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs1svNV) { obj->methodp_glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)wglGetProcAddress("glVertexAttribs1svNV"); }
		if(!obj->methodp_glVertexAttribs1svNV) { obj->methodp_glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs1svNV"); }
		if(!obj->methodp_glVertexAttribs1svNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs1svNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs2dvNV) { obj->methodp_glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)wglGetProcAddress("glVertexAttribs2dvNV"); }
		if(!obj->methodp_glVertexAttribs2dvNV) { obj->methodp_glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs2dvNV"); }
		if(!obj->methodp_glVertexAttribs2dvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs2dvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs2fvNV) { obj->methodp_glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)wglGetProcAddress("glVertexAttribs2fvNV"); }
		if(!obj->methodp_glVertexAttribs2fvNV) { obj->methodp_glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs2fvNV"); }
		if(!obj->methodp_glVertexAttribs2fvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs2fvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs2hvNV) { obj->methodp_glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC)wglGetProcAddress("glVertexAttribs2hvNV"); }
		if(!obj->methodp_glVertexAttribs2hvNV) { obj->methodp_glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs2hvNV"); }
		if(!obj->methodp_glVertexAttribs2hvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs2hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs2svNV) { obj->methodp_glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)wglGetProcAddress("glVertexAttribs2svNV"); }
		if(!obj->methodp_glVertexAttribs2svNV) { obj->methodp_glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs2svNV"); }
		if(!obj->methodp_glVertexAttribs2svNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs2svNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs3dvNV) { obj->methodp_glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)wglGetProcAddress("glVertexAttribs3dvNV"); }
		if(!obj->methodp_glVertexAttribs3dvNV) { obj->methodp_glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs3dvNV"); }
		if(!obj->methodp_glVertexAttribs3dvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs3dvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs3fvNV) { obj->methodp_glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)wglGetProcAddress("glVertexAttribs3fvNV"); }
		if(!obj->methodp_glVertexAttribs3fvNV) { obj->methodp_glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs3fvNV"); }
		if(!obj->methodp_glVertexAttribs3fvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs3fvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs3hvNV) { obj->methodp_glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC)wglGetProcAddress("glVertexAttribs3hvNV"); }
		if(!obj->methodp_glVertexAttribs3hvNV) { obj->methodp_glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs3hvNV"); }
		if(!obj->methodp_glVertexAttribs3hvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs3hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs3svNV) { obj->methodp_glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)wglGetProcAddress("glVertexAttribs3svNV"); }
		if(!obj->methodp_glVertexAttribs3svNV) { obj->methodp_glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs3svNV"); }
		if(!obj->methodp_glVertexAttribs3svNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs3svNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs4dvNV) { obj->methodp_glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)wglGetProcAddress("glVertexAttribs4dvNV"); }
		if(!obj->methodp_glVertexAttribs4dvNV) { obj->methodp_glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs4dvNV"); }
		if(!obj->methodp_glVertexAttribs4dvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs4dvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs4fvNV) { obj->methodp_glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)wglGetProcAddress("glVertexAttribs4fvNV"); }
		if(!obj->methodp_glVertexAttribs4fvNV) { obj->methodp_glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs4fvNV"); }
		if(!obj->methodp_glVertexAttribs4fvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs4fvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs4hvNV) { obj->methodp_glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC)wglGetProcAddress("glVertexAttribs4hvNV"); }
		if(!obj->methodp_glVertexAttribs4hvNV) { obj->methodp_glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs4hvNV"); }
		if(!obj->methodp_glVertexAttribs4hvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs4hvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs4svNV) { obj->methodp_glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)wglGetProcAddress("glVertexAttribs4svNV"); }
		if(!obj->methodp_glVertexAttribs4svNV) { obj->methodp_glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs4svNV"); }
		if(!obj->methodp_glVertexAttribs4svNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs4svNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexAttribs4ubvNV) { obj->methodp_glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)wglGetProcAddress("glVertexAttribs4ubvNV"); }
		if(!obj->methodp_glVertexAttribs4ubvNV) { obj->methodp_glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)GetProcAddress(modOpenGL32, "glVertexAttribs4ubvNV"); }
		if(!obj->methodp_glVertexAttribs4ubvNV) { args.This()->Set(v8::String::NewSymbol("glVertexAttribs4ubvNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexBindingDivisor) { obj->methodp_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)wglGetProcAddress("glVertexBindingDivisor"); }
		if(!obj->methodp_glVertexBindingDivisor) { obj->methodp_glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)GetProcAddress(modOpenGL32, "glVertexBindingDivisor"); }
		if(!obj->methodp_glVertexBindingDivisor) { args.This()->Set(v8::String::NewSymbol("glVertexBindingDivisor"), v8::Undefined()); }
		if(!obj->methodp_glVertexBlendARB) { obj->methodp_glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC)wglGetProcAddress("glVertexBlendARB"); }
		if(!obj->methodp_glVertexBlendARB) { obj->methodp_glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC)GetProcAddress(modOpenGL32, "glVertexBlendARB"); }
		if(!obj->methodp_glVertexBlendARB) { args.This()->Set(v8::String::NewSymbol("glVertexBlendARB"), v8::Undefined()); }
		if(!obj->methodp_glVertexBlendEnvfATI) { obj->methodp_glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC)wglGetProcAddress("glVertexBlendEnvfATI"); }
		if(!obj->methodp_glVertexBlendEnvfATI) { obj->methodp_glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC)GetProcAddress(modOpenGL32, "glVertexBlendEnvfATI"); }
		if(!obj->methodp_glVertexBlendEnvfATI) { args.This()->Set(v8::String::NewSymbol("glVertexBlendEnvfATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexBlendEnviATI) { obj->methodp_glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC)wglGetProcAddress("glVertexBlendEnviATI"); }
		if(!obj->methodp_glVertexBlendEnviATI) { obj->methodp_glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC)GetProcAddress(modOpenGL32, "glVertexBlendEnviATI"); }
		if(!obj->methodp_glVertexBlendEnviATI) { args.This()->Set(v8::String::NewSymbol("glVertexBlendEnviATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexFormatNV) { obj->methodp_glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC)wglGetProcAddress("glVertexFormatNV"); }
		if(!obj->methodp_glVertexFormatNV) { obj->methodp_glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC)GetProcAddress(modOpenGL32, "glVertexFormatNV"); }
		if(!obj->methodp_glVertexFormatNV) { args.This()->Set(v8::String::NewSymbol("glVertexFormatNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexP2ui) { obj->methodp_glVertexP2ui = (PFNGLVERTEXP2UIPROC)wglGetProcAddress("glVertexP2ui"); }
		if(!obj->methodp_glVertexP2ui) { obj->methodp_glVertexP2ui = (PFNGLVERTEXP2UIPROC)GetProcAddress(modOpenGL32, "glVertexP2ui"); }
		if(!obj->methodp_glVertexP2ui) { args.This()->Set(v8::String::NewSymbol("glVertexP2ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexP2uiv) { obj->methodp_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)wglGetProcAddress("glVertexP2uiv"); }
		if(!obj->methodp_glVertexP2uiv) { obj->methodp_glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)GetProcAddress(modOpenGL32, "glVertexP2uiv"); }
		if(!obj->methodp_glVertexP2uiv) { args.This()->Set(v8::String::NewSymbol("glVertexP2uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexP3ui) { obj->methodp_glVertexP3ui = (PFNGLVERTEXP3UIPROC)wglGetProcAddress("glVertexP3ui"); }
		if(!obj->methodp_glVertexP3ui) { obj->methodp_glVertexP3ui = (PFNGLVERTEXP3UIPROC)GetProcAddress(modOpenGL32, "glVertexP3ui"); }
		if(!obj->methodp_glVertexP3ui) { args.This()->Set(v8::String::NewSymbol("glVertexP3ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexP3uiv) { obj->methodp_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)wglGetProcAddress("glVertexP3uiv"); }
		if(!obj->methodp_glVertexP3uiv) { obj->methodp_glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)GetProcAddress(modOpenGL32, "glVertexP3uiv"); }
		if(!obj->methodp_glVertexP3uiv) { args.This()->Set(v8::String::NewSymbol("glVertexP3uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexP4ui) { obj->methodp_glVertexP4ui = (PFNGLVERTEXP4UIPROC)wglGetProcAddress("glVertexP4ui"); }
		if(!obj->methodp_glVertexP4ui) { obj->methodp_glVertexP4ui = (PFNGLVERTEXP4UIPROC)GetProcAddress(modOpenGL32, "glVertexP4ui"); }
		if(!obj->methodp_glVertexP4ui) { args.This()->Set(v8::String::NewSymbol("glVertexP4ui"), v8::Undefined()); }
		if(!obj->methodp_glVertexP4uiv) { obj->methodp_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)wglGetProcAddress("glVertexP4uiv"); }
		if(!obj->methodp_glVertexP4uiv) { obj->methodp_glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)GetProcAddress(modOpenGL32, "glVertexP4uiv"); }
		if(!obj->methodp_glVertexP4uiv) { args.This()->Set(v8::String::NewSymbol("glVertexP4uiv"), v8::Undefined()); }
		if(!obj->methodp_glVertexPointer) { obj->methodp_glVertexPointer = (PFNGLVERTEXPOINTERPROC)wglGetProcAddress("glVertexPointer"); }
		if(!obj->methodp_glVertexPointer) { obj->methodp_glVertexPointer = (PFNGLVERTEXPOINTERPROC)GetProcAddress(modOpenGL32, "glVertexPointer"); }
		if(!obj->methodp_glVertexPointer) { args.This()->Set(v8::String::NewSymbol("glVertexPointer"), v8::Undefined()); }
		if(!obj->methodp_glVertexPointerEXT) { obj->methodp_glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)wglGetProcAddress("glVertexPointerEXT"); }
		if(!obj->methodp_glVertexPointerEXT) { obj->methodp_glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glVertexPointerEXT"); }
		if(!obj->methodp_glVertexPointerEXT) { args.This()->Set(v8::String::NewSymbol("glVertexPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexPointerListIBM) { obj->methodp_glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC)wglGetProcAddress("glVertexPointerListIBM"); }
		if(!obj->methodp_glVertexPointerListIBM) { obj->methodp_glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC)GetProcAddress(modOpenGL32, "glVertexPointerListIBM"); }
		if(!obj->methodp_glVertexPointerListIBM) { args.This()->Set(v8::String::NewSymbol("glVertexPointerListIBM"), v8::Undefined()); }
		if(!obj->methodp_glVertexPointervINTEL) { obj->methodp_glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC)wglGetProcAddress("glVertexPointervINTEL"); }
		if(!obj->methodp_glVertexPointervINTEL) { obj->methodp_glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC)GetProcAddress(modOpenGL32, "glVertexPointervINTEL"); }
		if(!obj->methodp_glVertexPointervINTEL) { args.This()->Set(v8::String::NewSymbol("glVertexPointervINTEL"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream1dATI) { obj->methodp_glVertexStream1dATI = (PFNGLVERTEXSTREAM1DATIPROC)wglGetProcAddress("glVertexStream1dATI"); }
		if(!obj->methodp_glVertexStream1dATI) { obj->methodp_glVertexStream1dATI = (PFNGLVERTEXSTREAM1DATIPROC)GetProcAddress(modOpenGL32, "glVertexStream1dATI"); }
		if(!obj->methodp_glVertexStream1dATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream1dATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream1dvATI) { obj->methodp_glVertexStream1dvATI = (PFNGLVERTEXSTREAM1DVATIPROC)wglGetProcAddress("glVertexStream1dvATI"); }
		if(!obj->methodp_glVertexStream1dvATI) { obj->methodp_glVertexStream1dvATI = (PFNGLVERTEXSTREAM1DVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream1dvATI"); }
		if(!obj->methodp_glVertexStream1dvATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream1dvATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream1fATI) { obj->methodp_glVertexStream1fATI = (PFNGLVERTEXSTREAM1FATIPROC)wglGetProcAddress("glVertexStream1fATI"); }
		if(!obj->methodp_glVertexStream1fATI) { obj->methodp_glVertexStream1fATI = (PFNGLVERTEXSTREAM1FATIPROC)GetProcAddress(modOpenGL32, "glVertexStream1fATI"); }
		if(!obj->methodp_glVertexStream1fATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream1fATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream1fvATI) { obj->methodp_glVertexStream1fvATI = (PFNGLVERTEXSTREAM1FVATIPROC)wglGetProcAddress("glVertexStream1fvATI"); }
		if(!obj->methodp_glVertexStream1fvATI) { obj->methodp_glVertexStream1fvATI = (PFNGLVERTEXSTREAM1FVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream1fvATI"); }
		if(!obj->methodp_glVertexStream1fvATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream1fvATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream1iATI) { obj->methodp_glVertexStream1iATI = (PFNGLVERTEXSTREAM1IATIPROC)wglGetProcAddress("glVertexStream1iATI"); }
		if(!obj->methodp_glVertexStream1iATI) { obj->methodp_glVertexStream1iATI = (PFNGLVERTEXSTREAM1IATIPROC)GetProcAddress(modOpenGL32, "glVertexStream1iATI"); }
		if(!obj->methodp_glVertexStream1iATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream1iATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream1ivATI) { obj->methodp_glVertexStream1ivATI = (PFNGLVERTEXSTREAM1IVATIPROC)wglGetProcAddress("glVertexStream1ivATI"); }
		if(!obj->methodp_glVertexStream1ivATI) { obj->methodp_glVertexStream1ivATI = (PFNGLVERTEXSTREAM1IVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream1ivATI"); }
		if(!obj->methodp_glVertexStream1ivATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream1ivATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream1sATI) { obj->methodp_glVertexStream1sATI = (PFNGLVERTEXSTREAM1SATIPROC)wglGetProcAddress("glVertexStream1sATI"); }
		if(!obj->methodp_glVertexStream1sATI) { obj->methodp_glVertexStream1sATI = (PFNGLVERTEXSTREAM1SATIPROC)GetProcAddress(modOpenGL32, "glVertexStream1sATI"); }
		if(!obj->methodp_glVertexStream1sATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream1sATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream1svATI) { obj->methodp_glVertexStream1svATI = (PFNGLVERTEXSTREAM1SVATIPROC)wglGetProcAddress("glVertexStream1svATI"); }
		if(!obj->methodp_glVertexStream1svATI) { obj->methodp_glVertexStream1svATI = (PFNGLVERTEXSTREAM1SVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream1svATI"); }
		if(!obj->methodp_glVertexStream1svATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream1svATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream2dATI) { obj->methodp_glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC)wglGetProcAddress("glVertexStream2dATI"); }
		if(!obj->methodp_glVertexStream2dATI) { obj->methodp_glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC)GetProcAddress(modOpenGL32, "glVertexStream2dATI"); }
		if(!obj->methodp_glVertexStream2dATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream2dATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream2dvATI) { obj->methodp_glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC)wglGetProcAddress("glVertexStream2dvATI"); }
		if(!obj->methodp_glVertexStream2dvATI) { obj->methodp_glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream2dvATI"); }
		if(!obj->methodp_glVertexStream2dvATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream2dvATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream2fATI) { obj->methodp_glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC)wglGetProcAddress("glVertexStream2fATI"); }
		if(!obj->methodp_glVertexStream2fATI) { obj->methodp_glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC)GetProcAddress(modOpenGL32, "glVertexStream2fATI"); }
		if(!obj->methodp_glVertexStream2fATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream2fATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream2fvATI) { obj->methodp_glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC)wglGetProcAddress("glVertexStream2fvATI"); }
		if(!obj->methodp_glVertexStream2fvATI) { obj->methodp_glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream2fvATI"); }
		if(!obj->methodp_glVertexStream2fvATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream2fvATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream2iATI) { obj->methodp_glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC)wglGetProcAddress("glVertexStream2iATI"); }
		if(!obj->methodp_glVertexStream2iATI) { obj->methodp_glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC)GetProcAddress(modOpenGL32, "glVertexStream2iATI"); }
		if(!obj->methodp_glVertexStream2iATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream2iATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream2ivATI) { obj->methodp_glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC)wglGetProcAddress("glVertexStream2ivATI"); }
		if(!obj->methodp_glVertexStream2ivATI) { obj->methodp_glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream2ivATI"); }
		if(!obj->methodp_glVertexStream2ivATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream2ivATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream2sATI) { obj->methodp_glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC)wglGetProcAddress("glVertexStream2sATI"); }
		if(!obj->methodp_glVertexStream2sATI) { obj->methodp_glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC)GetProcAddress(modOpenGL32, "glVertexStream2sATI"); }
		if(!obj->methodp_glVertexStream2sATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream2sATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream2svATI) { obj->methodp_glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC)wglGetProcAddress("glVertexStream2svATI"); }
		if(!obj->methodp_glVertexStream2svATI) { obj->methodp_glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream2svATI"); }
		if(!obj->methodp_glVertexStream2svATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream2svATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream3dATI) { obj->methodp_glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC)wglGetProcAddress("glVertexStream3dATI"); }
		if(!obj->methodp_glVertexStream3dATI) { obj->methodp_glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC)GetProcAddress(modOpenGL32, "glVertexStream3dATI"); }
		if(!obj->methodp_glVertexStream3dATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream3dATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream3dvATI) { obj->methodp_glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC)wglGetProcAddress("glVertexStream3dvATI"); }
		if(!obj->methodp_glVertexStream3dvATI) { obj->methodp_glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream3dvATI"); }
		if(!obj->methodp_glVertexStream3dvATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream3dvATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream3fATI) { obj->methodp_glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC)wglGetProcAddress("glVertexStream3fATI"); }
		if(!obj->methodp_glVertexStream3fATI) { obj->methodp_glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC)GetProcAddress(modOpenGL32, "glVertexStream3fATI"); }
		if(!obj->methodp_glVertexStream3fATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream3fATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream3fvATI) { obj->methodp_glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC)wglGetProcAddress("glVertexStream3fvATI"); }
		if(!obj->methodp_glVertexStream3fvATI) { obj->methodp_glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream3fvATI"); }
		if(!obj->methodp_glVertexStream3fvATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream3fvATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream3iATI) { obj->methodp_glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC)wglGetProcAddress("glVertexStream3iATI"); }
		if(!obj->methodp_glVertexStream3iATI) { obj->methodp_glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC)GetProcAddress(modOpenGL32, "glVertexStream3iATI"); }
		if(!obj->methodp_glVertexStream3iATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream3iATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream3ivATI) { obj->methodp_glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC)wglGetProcAddress("glVertexStream3ivATI"); }
		if(!obj->methodp_glVertexStream3ivATI) { obj->methodp_glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream3ivATI"); }
		if(!obj->methodp_glVertexStream3ivATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream3ivATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream3sATI) { obj->methodp_glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC)wglGetProcAddress("glVertexStream3sATI"); }
		if(!obj->methodp_glVertexStream3sATI) { obj->methodp_glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC)GetProcAddress(modOpenGL32, "glVertexStream3sATI"); }
		if(!obj->methodp_glVertexStream3sATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream3sATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream3svATI) { obj->methodp_glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC)wglGetProcAddress("glVertexStream3svATI"); }
		if(!obj->methodp_glVertexStream3svATI) { obj->methodp_glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream3svATI"); }
		if(!obj->methodp_glVertexStream3svATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream3svATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream4dATI) { obj->methodp_glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC)wglGetProcAddress("glVertexStream4dATI"); }
		if(!obj->methodp_glVertexStream4dATI) { obj->methodp_glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC)GetProcAddress(modOpenGL32, "glVertexStream4dATI"); }
		if(!obj->methodp_glVertexStream4dATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream4dATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream4dvATI) { obj->methodp_glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC)wglGetProcAddress("glVertexStream4dvATI"); }
		if(!obj->methodp_glVertexStream4dvATI) { obj->methodp_glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream4dvATI"); }
		if(!obj->methodp_glVertexStream4dvATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream4dvATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream4fATI) { obj->methodp_glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC)wglGetProcAddress("glVertexStream4fATI"); }
		if(!obj->methodp_glVertexStream4fATI) { obj->methodp_glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC)GetProcAddress(modOpenGL32, "glVertexStream4fATI"); }
		if(!obj->methodp_glVertexStream4fATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream4fATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream4fvATI) { obj->methodp_glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC)wglGetProcAddress("glVertexStream4fvATI"); }
		if(!obj->methodp_glVertexStream4fvATI) { obj->methodp_glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream4fvATI"); }
		if(!obj->methodp_glVertexStream4fvATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream4fvATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream4iATI) { obj->methodp_glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC)wglGetProcAddress("glVertexStream4iATI"); }
		if(!obj->methodp_glVertexStream4iATI) { obj->methodp_glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC)GetProcAddress(modOpenGL32, "glVertexStream4iATI"); }
		if(!obj->methodp_glVertexStream4iATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream4iATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream4ivATI) { obj->methodp_glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC)wglGetProcAddress("glVertexStream4ivATI"); }
		if(!obj->methodp_glVertexStream4ivATI) { obj->methodp_glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream4ivATI"); }
		if(!obj->methodp_glVertexStream4ivATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream4ivATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream4sATI) { obj->methodp_glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC)wglGetProcAddress("glVertexStream4sATI"); }
		if(!obj->methodp_glVertexStream4sATI) { obj->methodp_glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC)GetProcAddress(modOpenGL32, "glVertexStream4sATI"); }
		if(!obj->methodp_glVertexStream4sATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream4sATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexStream4svATI) { obj->methodp_glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC)wglGetProcAddress("glVertexStream4svATI"); }
		if(!obj->methodp_glVertexStream4svATI) { obj->methodp_glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC)GetProcAddress(modOpenGL32, "glVertexStream4svATI"); }
		if(!obj->methodp_glVertexStream4svATI) { args.This()->Set(v8::String::NewSymbol("glVertexStream4svATI"), v8::Undefined()); }
		if(!obj->methodp_glVertexWeightPointerEXT) { obj->methodp_glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)wglGetProcAddress("glVertexWeightPointerEXT"); }
		if(!obj->methodp_glVertexWeightPointerEXT) { obj->methodp_glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)GetProcAddress(modOpenGL32, "glVertexWeightPointerEXT"); }
		if(!obj->methodp_glVertexWeightPointerEXT) { args.This()->Set(v8::String::NewSymbol("glVertexWeightPointerEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexWeightfEXT) { obj->methodp_glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)wglGetProcAddress("glVertexWeightfEXT"); }
		if(!obj->methodp_glVertexWeightfEXT) { obj->methodp_glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)GetProcAddress(modOpenGL32, "glVertexWeightfEXT"); }
		if(!obj->methodp_glVertexWeightfEXT) { args.This()->Set(v8::String::NewSymbol("glVertexWeightfEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexWeightfvEXT) { obj->methodp_glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)wglGetProcAddress("glVertexWeightfvEXT"); }
		if(!obj->methodp_glVertexWeightfvEXT) { obj->methodp_glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)GetProcAddress(modOpenGL32, "glVertexWeightfvEXT"); }
		if(!obj->methodp_glVertexWeightfvEXT) { args.This()->Set(v8::String::NewSymbol("glVertexWeightfvEXT"), v8::Undefined()); }
		if(!obj->methodp_glVertexWeighthNV) { obj->methodp_glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC)wglGetProcAddress("glVertexWeighthNV"); }
		if(!obj->methodp_glVertexWeighthNV) { obj->methodp_glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC)GetProcAddress(modOpenGL32, "glVertexWeighthNV"); }
		if(!obj->methodp_glVertexWeighthNV) { args.This()->Set(v8::String::NewSymbol("glVertexWeighthNV"), v8::Undefined()); }
		if(!obj->methodp_glVertexWeighthvNV) { obj->methodp_glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC)wglGetProcAddress("glVertexWeighthvNV"); }
		if(!obj->methodp_glVertexWeighthvNV) { obj->methodp_glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC)GetProcAddress(modOpenGL32, "glVertexWeighthvNV"); }
		if(!obj->methodp_glVertexWeighthvNV) { args.This()->Set(v8::String::NewSymbol("glVertexWeighthvNV"), v8::Undefined()); }
		if(!obj->methodp_glVideoCaptureNV) { obj->methodp_glVideoCaptureNV = (PFNGLVIDEOCAPTURENVPROC)wglGetProcAddress("glVideoCaptureNV"); }
		if(!obj->methodp_glVideoCaptureNV) { obj->methodp_glVideoCaptureNV = (PFNGLVIDEOCAPTURENVPROC)GetProcAddress(modOpenGL32, "glVideoCaptureNV"); }
		if(!obj->methodp_glVideoCaptureNV) { args.This()->Set(v8::String::NewSymbol("glVideoCaptureNV"), v8::Undefined()); }
		if(!obj->methodp_glVideoCaptureStreamParameterdvNV) { obj->methodp_glVideoCaptureStreamParameterdvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)wglGetProcAddress("glVideoCaptureStreamParameterdvNV"); }
		if(!obj->methodp_glVideoCaptureStreamParameterdvNV) { obj->methodp_glVideoCaptureStreamParameterdvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)GetProcAddress(modOpenGL32, "glVideoCaptureStreamParameterdvNV"); }
		if(!obj->methodp_glVideoCaptureStreamParameterdvNV) { args.This()->Set(v8::String::NewSymbol("glVideoCaptureStreamParameterdvNV"), v8::Undefined()); }
		if(!obj->methodp_glVideoCaptureStreamParameterfvNV) { obj->methodp_glVideoCaptureStreamParameterfvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)wglGetProcAddress("glVideoCaptureStreamParameterfvNV"); }
		if(!obj->methodp_glVideoCaptureStreamParameterfvNV) { obj->methodp_glVideoCaptureStreamParameterfvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)GetProcAddress(modOpenGL32, "glVideoCaptureStreamParameterfvNV"); }
		if(!obj->methodp_glVideoCaptureStreamParameterfvNV) { args.This()->Set(v8::String::NewSymbol("glVideoCaptureStreamParameterfvNV"), v8::Undefined()); }
		if(!obj->methodp_glVideoCaptureStreamParameterivNV) { obj->methodp_glVideoCaptureStreamParameterivNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)wglGetProcAddress("glVideoCaptureStreamParameterivNV"); }
		if(!obj->methodp_glVideoCaptureStreamParameterivNV) { obj->methodp_glVideoCaptureStreamParameterivNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)GetProcAddress(modOpenGL32, "glVideoCaptureStreamParameterivNV"); }
		if(!obj->methodp_glVideoCaptureStreamParameterivNV) { args.This()->Set(v8::String::NewSymbol("glVideoCaptureStreamParameterivNV"), v8::Undefined()); }
		if(!obj->methodp_glViewport) { obj->methodp_glViewport = (PFNGLVIEWPORTPROC)wglGetProcAddress("glViewport"); }
		if(!obj->methodp_glViewport) { obj->methodp_glViewport = (PFNGLVIEWPORTPROC)GetProcAddress(modOpenGL32, "glViewport"); }
		if(!obj->methodp_glViewport) { args.This()->Set(v8::String::NewSymbol("glViewport"), v8::Undefined()); }
		if(!obj->methodp_glViewportArrayv) { obj->methodp_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)wglGetProcAddress("glViewportArrayv"); }
		if(!obj->methodp_glViewportArrayv) { obj->methodp_glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)GetProcAddress(modOpenGL32, "glViewportArrayv"); }
		if(!obj->methodp_glViewportArrayv) { args.This()->Set(v8::String::NewSymbol("glViewportArrayv"), v8::Undefined()); }
		if(!obj->methodp_glViewportIndexedf) { obj->methodp_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)wglGetProcAddress("glViewportIndexedf"); }
		if(!obj->methodp_glViewportIndexedf) { obj->methodp_glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)GetProcAddress(modOpenGL32, "glViewportIndexedf"); }
		if(!obj->methodp_glViewportIndexedf) { args.This()->Set(v8::String::NewSymbol("glViewportIndexedf"), v8::Undefined()); }
		if(!obj->methodp_glViewportIndexedfv) { obj->methodp_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)wglGetProcAddress("glViewportIndexedfv"); }
		if(!obj->methodp_glViewportIndexedfv) { obj->methodp_glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)GetProcAddress(modOpenGL32, "glViewportIndexedfv"); }
		if(!obj->methodp_glViewportIndexedfv) { args.This()->Set(v8::String::NewSymbol("glViewportIndexedfv"), v8::Undefined()); }
		if(!obj->methodp_glWaitSync) { obj->methodp_glWaitSync = (PFNGLWAITSYNCPROC)wglGetProcAddress("glWaitSync"); }
		if(!obj->methodp_glWaitSync) { obj->methodp_glWaitSync = (PFNGLWAITSYNCPROC)GetProcAddress(modOpenGL32, "glWaitSync"); }
		if(!obj->methodp_glWaitSync) { args.This()->Set(v8::String::NewSymbol("glWaitSync"), v8::Undefined()); }
		if(!obj->methodp_glWaitSyncAPPLE) { obj->methodp_glWaitSyncAPPLE = (PFNGLWAITSYNCAPPLEPROC)wglGetProcAddress("glWaitSyncAPPLE"); }
		if(!obj->methodp_glWaitSyncAPPLE) { obj->methodp_glWaitSyncAPPLE = (PFNGLWAITSYNCAPPLEPROC)GetProcAddress(modOpenGL32, "glWaitSyncAPPLE"); }
		if(!obj->methodp_glWaitSyncAPPLE) { args.This()->Set(v8::String::NewSymbol("glWaitSyncAPPLE"), v8::Undefined()); }
		if(!obj->methodp_glWeightPathsNV) { obj->methodp_glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC)wglGetProcAddress("glWeightPathsNV"); }
		if(!obj->methodp_glWeightPathsNV) { obj->methodp_glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC)GetProcAddress(modOpenGL32, "glWeightPathsNV"); }
		if(!obj->methodp_glWeightPathsNV) { args.This()->Set(v8::String::NewSymbol("glWeightPathsNV"), v8::Undefined()); }
		if(!obj->methodp_glWeightPointerARB) { obj->methodp_glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC)wglGetProcAddress("glWeightPointerARB"); }
		if(!obj->methodp_glWeightPointerARB) { obj->methodp_glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC)GetProcAddress(modOpenGL32, "glWeightPointerARB"); }
		if(!obj->methodp_glWeightPointerARB) { args.This()->Set(v8::String::NewSymbol("glWeightPointerARB"), v8::Undefined()); }
		if(!obj->methodp_glWeightPointerOES) { obj->methodp_glWeightPointerOES = (PFNGLWEIGHTPOINTEROESPROC)wglGetProcAddress("glWeightPointerOES"); }
		if(!obj->methodp_glWeightPointerOES) { obj->methodp_glWeightPointerOES = (PFNGLWEIGHTPOINTEROESPROC)GetProcAddress(modOpenGL32, "glWeightPointerOES"); }
		if(!obj->methodp_glWeightPointerOES) { args.This()->Set(v8::String::NewSymbol("glWeightPointerOES"), v8::Undefined()); }
		if(!obj->methodp_glWeightbvARB) { obj->methodp_glWeightbvARB = (PFNGLWEIGHTBVARBPROC)wglGetProcAddress("glWeightbvARB"); }
		if(!obj->methodp_glWeightbvARB) { obj->methodp_glWeightbvARB = (PFNGLWEIGHTBVARBPROC)GetProcAddress(modOpenGL32, "glWeightbvARB"); }
		if(!obj->methodp_glWeightbvARB) { args.This()->Set(v8::String::NewSymbol("glWeightbvARB"), v8::Undefined()); }
		if(!obj->methodp_glWeightdvARB) { obj->methodp_glWeightdvARB = (PFNGLWEIGHTDVARBPROC)wglGetProcAddress("glWeightdvARB"); }
		if(!obj->methodp_glWeightdvARB) { obj->methodp_glWeightdvARB = (PFNGLWEIGHTDVARBPROC)GetProcAddress(modOpenGL32, "glWeightdvARB"); }
		if(!obj->methodp_glWeightdvARB) { args.This()->Set(v8::String::NewSymbol("glWeightdvARB"), v8::Undefined()); }
		if(!obj->methodp_glWeightfvARB) { obj->methodp_glWeightfvARB = (PFNGLWEIGHTFVARBPROC)wglGetProcAddress("glWeightfvARB"); }
		if(!obj->methodp_glWeightfvARB) { obj->methodp_glWeightfvARB = (PFNGLWEIGHTFVARBPROC)GetProcAddress(modOpenGL32, "glWeightfvARB"); }
		if(!obj->methodp_glWeightfvARB) { args.This()->Set(v8::String::NewSymbol("glWeightfvARB"), v8::Undefined()); }
		if(!obj->methodp_glWeightivARB) { obj->methodp_glWeightivARB = (PFNGLWEIGHTIVARBPROC)wglGetProcAddress("glWeightivARB"); }
		if(!obj->methodp_glWeightivARB) { obj->methodp_glWeightivARB = (PFNGLWEIGHTIVARBPROC)GetProcAddress(modOpenGL32, "glWeightivARB"); }
		if(!obj->methodp_glWeightivARB) { args.This()->Set(v8::String::NewSymbol("glWeightivARB"), v8::Undefined()); }
		if(!obj->methodp_glWeightsvARB) { obj->methodp_glWeightsvARB = (PFNGLWEIGHTSVARBPROC)wglGetProcAddress("glWeightsvARB"); }
		if(!obj->methodp_glWeightsvARB) { obj->methodp_glWeightsvARB = (PFNGLWEIGHTSVARBPROC)GetProcAddress(modOpenGL32, "glWeightsvARB"); }
		if(!obj->methodp_glWeightsvARB) { args.This()->Set(v8::String::NewSymbol("glWeightsvARB"), v8::Undefined()); }
		if(!obj->methodp_glWeightubvARB) { obj->methodp_glWeightubvARB = (PFNGLWEIGHTUBVARBPROC)wglGetProcAddress("glWeightubvARB"); }
		if(!obj->methodp_glWeightubvARB) { obj->methodp_glWeightubvARB = (PFNGLWEIGHTUBVARBPROC)GetProcAddress(modOpenGL32, "glWeightubvARB"); }
		if(!obj->methodp_glWeightubvARB) { args.This()->Set(v8::String::NewSymbol("glWeightubvARB"), v8::Undefined()); }
		if(!obj->methodp_glWeightuivARB) { obj->methodp_glWeightuivARB = (PFNGLWEIGHTUIVARBPROC)wglGetProcAddress("glWeightuivARB"); }
		if(!obj->methodp_glWeightuivARB) { obj->methodp_glWeightuivARB = (PFNGLWEIGHTUIVARBPROC)GetProcAddress(modOpenGL32, "glWeightuivARB"); }
		if(!obj->methodp_glWeightuivARB) { args.This()->Set(v8::String::NewSymbol("glWeightuivARB"), v8::Undefined()); }
		if(!obj->methodp_glWeightusvARB) { obj->methodp_glWeightusvARB = (PFNGLWEIGHTUSVARBPROC)wglGetProcAddress("glWeightusvARB"); }
		if(!obj->methodp_glWeightusvARB) { obj->methodp_glWeightusvARB = (PFNGLWEIGHTUSVARBPROC)GetProcAddress(modOpenGL32, "glWeightusvARB"); }
		if(!obj->methodp_glWeightusvARB) { args.This()->Set(v8::String::NewSymbol("glWeightusvARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2d) { obj->methodp_glWindowPos2d = (PFNGLWINDOWPOS2DPROC)wglGetProcAddress("glWindowPos2d"); }
		if(!obj->methodp_glWindowPos2d) { obj->methodp_glWindowPos2d = (PFNGLWINDOWPOS2DPROC)GetProcAddress(modOpenGL32, "glWindowPos2d"); }
		if(!obj->methodp_glWindowPos2d) { args.This()->Set(v8::String::NewSymbol("glWindowPos2d"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2dARB) { obj->methodp_glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)wglGetProcAddress("glWindowPos2dARB"); }
		if(!obj->methodp_glWindowPos2dARB) { obj->methodp_glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)GetProcAddress(modOpenGL32, "glWindowPos2dARB"); }
		if(!obj->methodp_glWindowPos2dARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos2dARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2dMESA) { obj->methodp_glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)wglGetProcAddress("glWindowPos2dMESA"); }
		if(!obj->methodp_glWindowPos2dMESA) { obj->methodp_glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos2dMESA"); }
		if(!obj->methodp_glWindowPos2dMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos2dMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2dv) { obj->methodp_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)wglGetProcAddress("glWindowPos2dv"); }
		if(!obj->methodp_glWindowPos2dv) { obj->methodp_glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)GetProcAddress(modOpenGL32, "glWindowPos2dv"); }
		if(!obj->methodp_glWindowPos2dv) { args.This()->Set(v8::String::NewSymbol("glWindowPos2dv"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2dvARB) { obj->methodp_glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)wglGetProcAddress("glWindowPos2dvARB"); }
		if(!obj->methodp_glWindowPos2dvARB) { obj->methodp_glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)GetProcAddress(modOpenGL32, "glWindowPos2dvARB"); }
		if(!obj->methodp_glWindowPos2dvARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos2dvARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2dvMESA) { obj->methodp_glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)wglGetProcAddress("glWindowPos2dvMESA"); }
		if(!obj->methodp_glWindowPos2dvMESA) { obj->methodp_glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos2dvMESA"); }
		if(!obj->methodp_glWindowPos2dvMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos2dvMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2f) { obj->methodp_glWindowPos2f = (PFNGLWINDOWPOS2FPROC)wglGetProcAddress("glWindowPos2f"); }
		if(!obj->methodp_glWindowPos2f) { obj->methodp_glWindowPos2f = (PFNGLWINDOWPOS2FPROC)GetProcAddress(modOpenGL32, "glWindowPos2f"); }
		if(!obj->methodp_glWindowPos2f) { args.This()->Set(v8::String::NewSymbol("glWindowPos2f"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2fARB) { obj->methodp_glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)wglGetProcAddress("glWindowPos2fARB"); }
		if(!obj->methodp_glWindowPos2fARB) { obj->methodp_glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)GetProcAddress(modOpenGL32, "glWindowPos2fARB"); }
		if(!obj->methodp_glWindowPos2fARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos2fARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2fMESA) { obj->methodp_glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)wglGetProcAddress("glWindowPos2fMESA"); }
		if(!obj->methodp_glWindowPos2fMESA) { obj->methodp_glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos2fMESA"); }
		if(!obj->methodp_glWindowPos2fMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos2fMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2fv) { obj->methodp_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)wglGetProcAddress("glWindowPos2fv"); }
		if(!obj->methodp_glWindowPos2fv) { obj->methodp_glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)GetProcAddress(modOpenGL32, "glWindowPos2fv"); }
		if(!obj->methodp_glWindowPos2fv) { args.This()->Set(v8::String::NewSymbol("glWindowPos2fv"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2fvARB) { obj->methodp_glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)wglGetProcAddress("glWindowPos2fvARB"); }
		if(!obj->methodp_glWindowPos2fvARB) { obj->methodp_glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)GetProcAddress(modOpenGL32, "glWindowPos2fvARB"); }
		if(!obj->methodp_glWindowPos2fvARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos2fvARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2fvMESA) { obj->methodp_glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)wglGetProcAddress("glWindowPos2fvMESA"); }
		if(!obj->methodp_glWindowPos2fvMESA) { obj->methodp_glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos2fvMESA"); }
		if(!obj->methodp_glWindowPos2fvMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos2fvMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2i) { obj->methodp_glWindowPos2i = (PFNGLWINDOWPOS2IPROC)wglGetProcAddress("glWindowPos2i"); }
		if(!obj->methodp_glWindowPos2i) { obj->methodp_glWindowPos2i = (PFNGLWINDOWPOS2IPROC)GetProcAddress(modOpenGL32, "glWindowPos2i"); }
		if(!obj->methodp_glWindowPos2i) { args.This()->Set(v8::String::NewSymbol("glWindowPos2i"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2iARB) { obj->methodp_glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)wglGetProcAddress("glWindowPos2iARB"); }
		if(!obj->methodp_glWindowPos2iARB) { obj->methodp_glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)GetProcAddress(modOpenGL32, "glWindowPos2iARB"); }
		if(!obj->methodp_glWindowPos2iARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos2iARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2iMESA) { obj->methodp_glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)wglGetProcAddress("glWindowPos2iMESA"); }
		if(!obj->methodp_glWindowPos2iMESA) { obj->methodp_glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos2iMESA"); }
		if(!obj->methodp_glWindowPos2iMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos2iMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2iv) { obj->methodp_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)wglGetProcAddress("glWindowPos2iv"); }
		if(!obj->methodp_glWindowPos2iv) { obj->methodp_glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)GetProcAddress(modOpenGL32, "glWindowPos2iv"); }
		if(!obj->methodp_glWindowPos2iv) { args.This()->Set(v8::String::NewSymbol("glWindowPos2iv"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2ivARB) { obj->methodp_glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)wglGetProcAddress("glWindowPos2ivARB"); }
		if(!obj->methodp_glWindowPos2ivARB) { obj->methodp_glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)GetProcAddress(modOpenGL32, "glWindowPos2ivARB"); }
		if(!obj->methodp_glWindowPos2ivARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos2ivARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2ivMESA) { obj->methodp_glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)wglGetProcAddress("glWindowPos2ivMESA"); }
		if(!obj->methodp_glWindowPos2ivMESA) { obj->methodp_glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos2ivMESA"); }
		if(!obj->methodp_glWindowPos2ivMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos2ivMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2s) { obj->methodp_glWindowPos2s = (PFNGLWINDOWPOS2SPROC)wglGetProcAddress("glWindowPos2s"); }
		if(!obj->methodp_glWindowPos2s) { obj->methodp_glWindowPos2s = (PFNGLWINDOWPOS2SPROC)GetProcAddress(modOpenGL32, "glWindowPos2s"); }
		if(!obj->methodp_glWindowPos2s) { args.This()->Set(v8::String::NewSymbol("glWindowPos2s"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2sARB) { obj->methodp_glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)wglGetProcAddress("glWindowPos2sARB"); }
		if(!obj->methodp_glWindowPos2sARB) { obj->methodp_glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)GetProcAddress(modOpenGL32, "glWindowPos2sARB"); }
		if(!obj->methodp_glWindowPos2sARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos2sARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2sMESA) { obj->methodp_glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)wglGetProcAddress("glWindowPos2sMESA"); }
		if(!obj->methodp_glWindowPos2sMESA) { obj->methodp_glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos2sMESA"); }
		if(!obj->methodp_glWindowPos2sMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos2sMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2sv) { obj->methodp_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)wglGetProcAddress("glWindowPos2sv"); }
		if(!obj->methodp_glWindowPos2sv) { obj->methodp_glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)GetProcAddress(modOpenGL32, "glWindowPos2sv"); }
		if(!obj->methodp_glWindowPos2sv) { args.This()->Set(v8::String::NewSymbol("glWindowPos2sv"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2svARB) { obj->methodp_glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)wglGetProcAddress("glWindowPos2svARB"); }
		if(!obj->methodp_glWindowPos2svARB) { obj->methodp_glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)GetProcAddress(modOpenGL32, "glWindowPos2svARB"); }
		if(!obj->methodp_glWindowPos2svARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos2svARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos2svMESA) { obj->methodp_glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)wglGetProcAddress("glWindowPos2svMESA"); }
		if(!obj->methodp_glWindowPos2svMESA) { obj->methodp_glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos2svMESA"); }
		if(!obj->methodp_glWindowPos2svMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos2svMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3d) { obj->methodp_glWindowPos3d = (PFNGLWINDOWPOS3DPROC)wglGetProcAddress("glWindowPos3d"); }
		if(!obj->methodp_glWindowPos3d) { obj->methodp_glWindowPos3d = (PFNGLWINDOWPOS3DPROC)GetProcAddress(modOpenGL32, "glWindowPos3d"); }
		if(!obj->methodp_glWindowPos3d) { args.This()->Set(v8::String::NewSymbol("glWindowPos3d"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3dARB) { obj->methodp_glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)wglGetProcAddress("glWindowPos3dARB"); }
		if(!obj->methodp_glWindowPos3dARB) { obj->methodp_glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)GetProcAddress(modOpenGL32, "glWindowPos3dARB"); }
		if(!obj->methodp_glWindowPos3dARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos3dARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3dMESA) { obj->methodp_glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)wglGetProcAddress("glWindowPos3dMESA"); }
		if(!obj->methodp_glWindowPos3dMESA) { obj->methodp_glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos3dMESA"); }
		if(!obj->methodp_glWindowPos3dMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos3dMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3dv) { obj->methodp_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)wglGetProcAddress("glWindowPos3dv"); }
		if(!obj->methodp_glWindowPos3dv) { obj->methodp_glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)GetProcAddress(modOpenGL32, "glWindowPos3dv"); }
		if(!obj->methodp_glWindowPos3dv) { args.This()->Set(v8::String::NewSymbol("glWindowPos3dv"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3dvARB) { obj->methodp_glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)wglGetProcAddress("glWindowPos3dvARB"); }
		if(!obj->methodp_glWindowPos3dvARB) { obj->methodp_glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)GetProcAddress(modOpenGL32, "glWindowPos3dvARB"); }
		if(!obj->methodp_glWindowPos3dvARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos3dvARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3dvMESA) { obj->methodp_glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)wglGetProcAddress("glWindowPos3dvMESA"); }
		if(!obj->methodp_glWindowPos3dvMESA) { obj->methodp_glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos3dvMESA"); }
		if(!obj->methodp_glWindowPos3dvMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos3dvMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3f) { obj->methodp_glWindowPos3f = (PFNGLWINDOWPOS3FPROC)wglGetProcAddress("glWindowPos3f"); }
		if(!obj->methodp_glWindowPos3f) { obj->methodp_glWindowPos3f = (PFNGLWINDOWPOS3FPROC)GetProcAddress(modOpenGL32, "glWindowPos3f"); }
		if(!obj->methodp_glWindowPos3f) { args.This()->Set(v8::String::NewSymbol("glWindowPos3f"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3fARB) { obj->methodp_glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)wglGetProcAddress("glWindowPos3fARB"); }
		if(!obj->methodp_glWindowPos3fARB) { obj->methodp_glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)GetProcAddress(modOpenGL32, "glWindowPos3fARB"); }
		if(!obj->methodp_glWindowPos3fARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos3fARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3fMESA) { obj->methodp_glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)wglGetProcAddress("glWindowPos3fMESA"); }
		if(!obj->methodp_glWindowPos3fMESA) { obj->methodp_glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos3fMESA"); }
		if(!obj->methodp_glWindowPos3fMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos3fMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3fv) { obj->methodp_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)wglGetProcAddress("glWindowPos3fv"); }
		if(!obj->methodp_glWindowPos3fv) { obj->methodp_glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)GetProcAddress(modOpenGL32, "glWindowPos3fv"); }
		if(!obj->methodp_glWindowPos3fv) { args.This()->Set(v8::String::NewSymbol("glWindowPos3fv"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3fvARB) { obj->methodp_glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)wglGetProcAddress("glWindowPos3fvARB"); }
		if(!obj->methodp_glWindowPos3fvARB) { obj->methodp_glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)GetProcAddress(modOpenGL32, "glWindowPos3fvARB"); }
		if(!obj->methodp_glWindowPos3fvARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos3fvARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3fvMESA) { obj->methodp_glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)wglGetProcAddress("glWindowPos3fvMESA"); }
		if(!obj->methodp_glWindowPos3fvMESA) { obj->methodp_glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos3fvMESA"); }
		if(!obj->methodp_glWindowPos3fvMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos3fvMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3i) { obj->methodp_glWindowPos3i = (PFNGLWINDOWPOS3IPROC)wglGetProcAddress("glWindowPos3i"); }
		if(!obj->methodp_glWindowPos3i) { obj->methodp_glWindowPos3i = (PFNGLWINDOWPOS3IPROC)GetProcAddress(modOpenGL32, "glWindowPos3i"); }
		if(!obj->methodp_glWindowPos3i) { args.This()->Set(v8::String::NewSymbol("glWindowPos3i"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3iARB) { obj->methodp_glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)wglGetProcAddress("glWindowPos3iARB"); }
		if(!obj->methodp_glWindowPos3iARB) { obj->methodp_glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)GetProcAddress(modOpenGL32, "glWindowPos3iARB"); }
		if(!obj->methodp_glWindowPos3iARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos3iARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3iMESA) { obj->methodp_glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)wglGetProcAddress("glWindowPos3iMESA"); }
		if(!obj->methodp_glWindowPos3iMESA) { obj->methodp_glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos3iMESA"); }
		if(!obj->methodp_glWindowPos3iMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos3iMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3iv) { obj->methodp_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)wglGetProcAddress("glWindowPos3iv"); }
		if(!obj->methodp_glWindowPos3iv) { obj->methodp_glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)GetProcAddress(modOpenGL32, "glWindowPos3iv"); }
		if(!obj->methodp_glWindowPos3iv) { args.This()->Set(v8::String::NewSymbol("glWindowPos3iv"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3ivARB) { obj->methodp_glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)wglGetProcAddress("glWindowPos3ivARB"); }
		if(!obj->methodp_glWindowPos3ivARB) { obj->methodp_glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)GetProcAddress(modOpenGL32, "glWindowPos3ivARB"); }
		if(!obj->methodp_glWindowPos3ivARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos3ivARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3ivMESA) { obj->methodp_glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)wglGetProcAddress("glWindowPos3ivMESA"); }
		if(!obj->methodp_glWindowPos3ivMESA) { obj->methodp_glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos3ivMESA"); }
		if(!obj->methodp_glWindowPos3ivMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos3ivMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3s) { obj->methodp_glWindowPos3s = (PFNGLWINDOWPOS3SPROC)wglGetProcAddress("glWindowPos3s"); }
		if(!obj->methodp_glWindowPos3s) { obj->methodp_glWindowPos3s = (PFNGLWINDOWPOS3SPROC)GetProcAddress(modOpenGL32, "glWindowPos3s"); }
		if(!obj->methodp_glWindowPos3s) { args.This()->Set(v8::String::NewSymbol("glWindowPos3s"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3sARB) { obj->methodp_glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)wglGetProcAddress("glWindowPos3sARB"); }
		if(!obj->methodp_glWindowPos3sARB) { obj->methodp_glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)GetProcAddress(modOpenGL32, "glWindowPos3sARB"); }
		if(!obj->methodp_glWindowPos3sARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos3sARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3sMESA) { obj->methodp_glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)wglGetProcAddress("glWindowPos3sMESA"); }
		if(!obj->methodp_glWindowPos3sMESA) { obj->methodp_glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos3sMESA"); }
		if(!obj->methodp_glWindowPos3sMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos3sMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3sv) { obj->methodp_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)wglGetProcAddress("glWindowPos3sv"); }
		if(!obj->methodp_glWindowPos3sv) { obj->methodp_glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)GetProcAddress(modOpenGL32, "glWindowPos3sv"); }
		if(!obj->methodp_glWindowPos3sv) { args.This()->Set(v8::String::NewSymbol("glWindowPos3sv"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3svARB) { obj->methodp_glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)wglGetProcAddress("glWindowPos3svARB"); }
		if(!obj->methodp_glWindowPos3svARB) { obj->methodp_glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)GetProcAddress(modOpenGL32, "glWindowPos3svARB"); }
		if(!obj->methodp_glWindowPos3svARB) { args.This()->Set(v8::String::NewSymbol("glWindowPos3svARB"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos3svMESA) { obj->methodp_glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)wglGetProcAddress("glWindowPos3svMESA"); }
		if(!obj->methodp_glWindowPos3svMESA) { obj->methodp_glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos3svMESA"); }
		if(!obj->methodp_glWindowPos3svMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos3svMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos4dMESA) { obj->methodp_glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC)wglGetProcAddress("glWindowPos4dMESA"); }
		if(!obj->methodp_glWindowPos4dMESA) { obj->methodp_glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos4dMESA"); }
		if(!obj->methodp_glWindowPos4dMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos4dMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos4dvMESA) { obj->methodp_glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC)wglGetProcAddress("glWindowPos4dvMESA"); }
		if(!obj->methodp_glWindowPos4dvMESA) { obj->methodp_glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos4dvMESA"); }
		if(!obj->methodp_glWindowPos4dvMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos4dvMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos4fMESA) { obj->methodp_glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC)wglGetProcAddress("glWindowPos4fMESA"); }
		if(!obj->methodp_glWindowPos4fMESA) { obj->methodp_glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos4fMESA"); }
		if(!obj->methodp_glWindowPos4fMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos4fMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos4fvMESA) { obj->methodp_glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC)wglGetProcAddress("glWindowPos4fvMESA"); }
		if(!obj->methodp_glWindowPos4fvMESA) { obj->methodp_glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos4fvMESA"); }
		if(!obj->methodp_glWindowPos4fvMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos4fvMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos4iMESA) { obj->methodp_glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC)wglGetProcAddress("glWindowPos4iMESA"); }
		if(!obj->methodp_glWindowPos4iMESA) { obj->methodp_glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos4iMESA"); }
		if(!obj->methodp_glWindowPos4iMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos4iMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos4ivMESA) { obj->methodp_glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC)wglGetProcAddress("glWindowPos4ivMESA"); }
		if(!obj->methodp_glWindowPos4ivMESA) { obj->methodp_glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos4ivMESA"); }
		if(!obj->methodp_glWindowPos4ivMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos4ivMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos4sMESA) { obj->methodp_glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC)wglGetProcAddress("glWindowPos4sMESA"); }
		if(!obj->methodp_glWindowPos4sMESA) { obj->methodp_glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos4sMESA"); }
		if(!obj->methodp_glWindowPos4sMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos4sMESA"), v8::Undefined()); }
		if(!obj->methodp_glWindowPos4svMESA) { obj->methodp_glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC)wglGetProcAddress("glWindowPos4svMESA"); }
		if(!obj->methodp_glWindowPos4svMESA) { obj->methodp_glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC)GetProcAddress(modOpenGL32, "glWindowPos4svMESA"); }
		if(!obj->methodp_glWindowPos4svMESA) { args.This()->Set(v8::String::NewSymbol("glWindowPos4svMESA"), v8::Undefined()); }
		if(!obj->methodp_glWriteMaskEXT) { obj->methodp_glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC)wglGetProcAddress("glWriteMaskEXT"); }
		if(!obj->methodp_glWriteMaskEXT) { obj->methodp_glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC)GetProcAddress(modOpenGL32, "glWriteMaskEXT"); }
		if(!obj->methodp_glWriteMaskEXT) { args.This()->Set(v8::String::NewSymbol("glWriteMaskEXT"), v8::Undefined()); }
		return args.This();
	}
	static v8::Persistent<v8::Function> constructor;
	static v8::Persistent<v8::ObjectTemplate> retTpl;

};

